<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>U7&#39;s Blog🍋</title>
  
  
  <link href="https://u7u7.top/atom.xml" rel="self"/>
  
  <link href="https://u7u7.top/"/>
  <updated>2025-08-25T06:28:14.795Z</updated>
  <id>https://u7u7.top/</id>
  
  <author>
    <name>U7&#39;s Blog🍋</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES随心记</title>
    <link href="https://u7u7.top/posts/ESByMyself.html"/>
    <id>https://u7u7.top/posts/ESByMyself.html</id>
    <published>2025-08-25T03:00:25.000Z</published>
    <updated>2025-08-25T06:28:14.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES理解">ES理解</h1><p>ES就是一套搜索引擎技术，它是elastic技术栈中的一部分。完整的技术栈包括：</p><ul><li>Elasticsearch：用于数据存储、计算和搜索</li><li>Logstash/Beats：用于数据收集</li><li>Kibana：用于数据可视化</li></ul><p>ES为什么快？他的搜索逻辑是什么？为什么不用mysql搜索？</p><p>如果使用mysql进行搜索，比如我要查询“手机”这个关键字，通常会使用like %手机%，这个操作会导致mysql索引失效(%前缀索引失效)，就会进行全表扫描，逐条搜索判断。ES是怎么做的呢，他是使用倒排索引技术，他内置有一个分词算法，会将数据进行分词管理，比如有一个字段为“中国华为手机牛”，就会分成&quot;中国&quot;“华为”“手机”“牛”，然后将分词以后的词条当做索引，再创建文档id列，这样搜索某个关键词就会去文档ID找，因为词条有索引，所以很快，再通过文档id，查询文档。这样因为都使用到了索引所以非常快。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250815100244629.png" alt="image-20250815100244629"></p><h1 id="分词器">分词器</h1><p>通常使用ik分词器，支持自定义分词和停止词。这里我使用的时候出现了点小问题，我是在线安装的，查看日志docker logs es | grep -i &quot;dictionary&quot;发现我的字典加载位置和文档不一样。/usr/share/elasticsearch/config/analysis-ik/IKAnalyzer.cfg.xml我的配置类在这里，所以要修改这里的配置文件并添加ext.dic。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP通过MQ异步同步数据">AOP通过MQ异步同步数据</h1><p>当我们通过REST接口对商品数据进行增修删的时候要保证ES同步更新，就和redis保持一致性一样的道理，这里因为我们之前代码都开发好了，所以想到了AOP进行业务解耦，使用AOP监控Controller层，传参情况就两种raw(json)数据和路径传参。json在java中已经按照dto封装好了，路径传参也都会有itemId，那我要做的事情就是拿到商品id就好了，我使用@AfterReturning后置返回通知，这样会在controller层执行完以后再执行拦截类的代码。这样数据都已经到数据库了，然后可以发itemId到MQ，当MQ监听到使用了哪些方法以后，消费者进行处理，可以通过id拿新的数据增加到es，修改或者删除就不多说了。看实现逻辑吧。</p><p>先自定义注解。标记需要发送消息的方法，标识那些执行后需要向消息队列发送消息的业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SeedMessageToMq &#123;</span><br><span class="line">    String <span class="title function_">exchange</span><span class="params">()</span>; <span class="comment">//发送交换机</span></span><br><span class="line">    String <span class="title function_">routingKey</span><span class="params">()</span>; <span class="comment">//发送路由键</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我写了一个命名类，比较优雅。（前期）将es索引库名和MQ收到的工厂和队列以及Routing key进行命名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConstants</span> &#123;</span><br><span class="line">    <span class="comment">//es 索引库名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_INDEX</span> <span class="operator">=</span> <span class="string">&quot;search_item_index&quot;</span>;</span><br><span class="line">    <span class="comment">//MQ工厂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_DIRCT_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;search-item-dirct-exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//routingKey &amp;&amp; queue</span></span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_INSERT_KEY</span> <span class="operator">=</span> <span class="string">&quot;search-item-insert-key&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_INSERT_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;search-item-insert-queue&quot;</span>;</span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_DELETE_KEY</span> <span class="operator">=</span> <span class="string">&quot;search-item-delete-key&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_DELETE_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;search-item-delete-queue&quot;</span>;</span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_UPDATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;search-item-update-key&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_UPDATE_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;search-item-update-queue&quot;</span>;</span><br><span class="line">    <span class="comment">//改状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_UPDATE_STATUS_KEY</span> <span class="operator">=</span> <span class="string">&quot;search-item-update-status-key&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SEARCH_ITEM_UPDATE_STATUS_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;search-item-update-status-queue&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对controller层需要的代码进行拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SeedMessageToMq(exchange = SEARCH_ITEM_DIRCT_EXCHANGE, routingKey = SEARCH_ITEM_INSERT_KEY)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;新增商品&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveItem</span><span class="params">(<span class="meta">@RequestBody</span> ItemDTO item)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    itemService.save(BeanUtils.copyBean(item,Item.class));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SeedMessageToMq(exchange = SEARCH_ITEM_DIRCT_EXCHANGE, routingKey = SEARCH_ITEM_UPDATE_STATUS_KEY)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;更新商品状态&quot;)</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/status/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateItemStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span>&#123;</span><br><span class="line">    <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Item</span>();</span><br><span class="line">    item.setId(id);</span><br><span class="line">    item.setStatus(status);</span><br><span class="line">    itemService.updateById(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SeedMessageToMq(exchange = SEARCH_ITEM_DIRCT_EXCHANGE, routingKey = SEARCH_ITEM_UPDATE_KEY)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;更新商品&quot;)</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateItem</span><span class="params">(<span class="meta">@RequestBody</span> ItemDTO item)</span> &#123;</span><br><span class="line">    <span class="comment">// 不允许修改商品状态，所以强制设置为null，更新时，就会忽略该字段</span></span><br><span class="line">    item.setStatus(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    itemService.updateById(BeanUtils.copyBean(item, Item.class));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SeedMessageToMq(exchange = SEARCH_ITEM_DIRCT_EXCHANGE, routingKey = SEARCH_ITEM_DELETE_KEY)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id删除商品&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteItemById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    itemService.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义切面和拦截后执行的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMessageAOP</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitMqHelper rabbitMqHelper;</span><br><span class="line">    <span class="comment">//定义切面</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.hmall.item.controller.ItemController.*(..)) &amp;&amp; @annotation(com.hmall.item.annotation.SeedMessageToMq)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seedMessageToMqPointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后置返回通知：在目标方法成功执行后触发</span></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;seedMessageToMqPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seedMessage</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="comment">//获取目标方法的签名</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="comment">//获取目标方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="comment">//获取方法上的@SeedMessageToMq注解</span></span><br><span class="line">        <span class="type">SeedMessageToMq</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(SeedMessageToMq.class);</span><br><span class="line">        <span class="comment">//从注解中获取配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> annotation.exchange();</span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> annotation.routingKey();</span><br><span class="line">        <span class="comment">//获取方法参数（如果需要发送参数作为消息内容）</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;参数列表：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">0</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;没收到任何消息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用rabbitTemplate发送消息到指定的exchange和routingKey</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">itemId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="keyword">if</span> (routingKey.equals(SEARCH_ITEM_INSERT_KEY) || routingKey.equals(SEARCH_ITEM_UPDATE_KEY))&#123;</span><br><span class="line">            <span class="type">ItemDTO</span> <span class="variable">itemDTO</span> <span class="operator">=</span> objectMapper.convertValue(args[<span class="number">0</span>], ItemDTO.class);</span><br><span class="line">            itemId = itemDTO.getId();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (routingKey.equals(SEARCH_ITEM_UPDATE_STATUS_KEY) || routingKey.equals(SEARCH_ITEM_DELETE_KEY))&#123;</span><br><span class="line">            <span class="comment">//更新商品状态</span></span><br><span class="line">            itemId = objectMapper.convertValue(args[<span class="number">0</span>], Long.class);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;商品————准备发送商品ID：&#123;&#125;到MQ&quot;</span>, routingKey, itemId);</span><br><span class="line">        rabbitMqHelper.sendMessage(exchange,routingKey,itemId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面已经对MQ发送了消息，现在进行监听并处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//监听商品变化的消息 并修改对应的es -&gt; 数据同步</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerItemMqToEs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">            HttpHost.create(<span class="string">&quot;http://192.168.219.128:9200&quot;</span>)</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = SEARCH_ITEM_INSERT_QUEUE, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = SEARCH_ITEM_DIRCT_EXCHANGE),</span></span><br><span class="line"><span class="meta">            key = SEARCH_ITEM_INSERT_KEY)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerInsertItem</span><span class="params">(Long itemId)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;收到商品ID&#123;&#125;,准备添加&quot;</span>, itemId);</span><br><span class="line">        <span class="comment">//获取商品信息</span></span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> itemService.getById(itemId);</span><br><span class="line">        <span class="comment">//转成es所需json</span></span><br><span class="line">        <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> BeanUtils.copyBean(item, ItemDoc.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">doc</span> <span class="operator">=</span> JSONUtil.toJsonStr(itemDoc);</span><br><span class="line">        <span class="comment">//准备request对象发送es</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(SEARCH_ITEM_INDEX).id(itemDoc.getId()).source(doc, XContentType.JSON);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = SEARCH_ITEM_DELETE_QUEUE, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = SEARCH_ITEM_DIRCT_EXCHANGE),</span></span><br><span class="line"><span class="meta">            key = SEARCH_ITEM_DELETE_KEY)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerDeleteItem</span><span class="params">(Long itemId)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;收到商品ID&#123;&#125;,准备删除&quot;</span>, itemId);</span><br><span class="line">        <span class="comment">//获取商品信息</span></span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(SEARCH_ITEM_INDEX).id(String.valueOf(itemId));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = SEARCH_ITEM_UPDATE_STATUS_QUEUE, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = SEARCH_ITEM_DIRCT_EXCHANGE),</span></span><br><span class="line"><span class="meta">            key = SEARCH_ITEM_UPDATE_STATUS_KEY)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerUpdateStatusItem</span><span class="params">(Long itemId)</span> &#123;</span><br><span class="line">        <span class="comment">//获取商品信息</span></span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> itemService.getById(itemId);</span><br><span class="line">        <span class="comment">//状态是3的删除</span></span><br><span class="line">        <span class="keyword">if</span> (item.getStatus() == <span class="number">3</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;收到商品状态为3：ID&#123;&#125;,准备删除&quot;</span>, itemId);</span><br><span class="line">            listenerDeleteItem(itemId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;收到商品ID&#123;&#125;,准备更新状态&quot;</span>, itemId);</span><br><span class="line">        <span class="comment">//准备request对象发送es</span></span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(SEARCH_ITEM_INDEX, String.valueOf(itemId));</span><br><span class="line">        updateRequest.doc(<span class="string">&quot;status&quot;</span>, item.getStatus());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = SEARCH_ITEM_UPDATE_QUEUE, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = SEARCH_ITEM_DIRCT_EXCHANGE),</span></span><br><span class="line"><span class="meta">            key = SEARCH_ITEM_UPDATE_KEY)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerUpdateItem</span><span class="params">(Long itemId)</span> &#123;</span><br><span class="line">        <span class="comment">//获取商品信息</span></span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> itemService.getById(itemId);</span><br><span class="line">        log.info(<span class="string">&quot;收到商品ID&#123;&#125;,准备更新&quot;</span>, itemId);</span><br><span class="line">        <span class="comment">//转成es所需json</span></span><br><span class="line">        <span class="type">ItemDoc</span> <span class="variable">itemDoc</span> <span class="operator">=</span> BeanUtils.copyBean(item, ItemDoc.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">doc</span> <span class="operator">=</span> JSONUtil.toJsonStr(itemDoc);</span><br><span class="line">        <span class="comment">//准备request对象发送es</span></span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(SEARCH_ITEM_INDEX, String.valueOf(itemId));</span><br><span class="line">        updateRequest.upsert(doc, XContentType.JSON);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RestClient查询">RestClient查询</h1><p>这里我直接用es处理项目中搜索框接口了，es数据提前做好了预热</p><p>/search/list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;搜索商品&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;ItemDTO&gt; <span class="title function_">search</span><span class="params">(ItemPageQuery query)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> searchService.searchItemFilterEs(query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;ItemDTO&gt; <span class="title function_">searchItemFilterEs</span><span class="params">(ItemPageQuery query)</span> &#123;</span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items_new&quot;</span>);</span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">source</span> <span class="operator">=</span> buildSearchRequest(request,query);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageNo</span> <span class="operator">=</span> query.getPageNo();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> query.getPageSize();</span><br><span class="line">    <span class="comment">//分页参数</span></span><br><span class="line">    source.from((pageNo - <span class="number">1</span>) * pageSize).size(pageSize);</span><br><span class="line">    SearchResponse response;</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组织query参数</span></span><br><span class="line"><span class="keyword">private</span> SearchSourceBuilder <span class="title function_">buildSearchRequest</span><span class="params">(SearchRequest request,ItemPageQuery query)</span> &#123;</span><br><span class="line">    <span class="comment">//搜索条件参数</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">bool</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotEmpty(query.getKey()))&#123;</span><br><span class="line">        bool.must(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, query.getKey()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotEmpty(query.getCategory()))&#123;</span><br><span class="line">        bool.filter(QueryBuilders.termQuery(<span class="string">&quot;category.keyword&quot;</span>, query.getCategory()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotEmpty(query.getBrand()))&#123;</span><br><span class="line">        bool.filter(QueryBuilders.termQuery(<span class="string">&quot;brand.keyword&quot;</span>, query.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    bool.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gt(query.getMinPrice()).lt(query.getMaxPrice()));</span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">source</span> <span class="operator">=</span> request.source();</span><br><span class="line">    source.query(bool);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sortBy</span> <span class="operator">=</span> query.getSortBy();</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotEmpty(sortBy)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (query.getIsAsc()) source.sort(sortBy, SortOrder.ASC);</span><br><span class="line">        <span class="keyword">else</span> source.sort(sortBy, SortOrder.DESC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//高亮</span></span><br><span class="line">    source.highlighter(</span><br><span class="line">        SearchSourceBuilder.highlight()</span><br><span class="line">        .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理SearchResponse转PageDTO</span></span><br><span class="line"><span class="keyword">private</span> PageDTO&lt;ItemDTO&gt; <span class="title function_">handleResponse</span><span class="params">(SearchResponse search)</span> &#123;</span><br><span class="line">    Page&lt;ItemDTO&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">    <span class="keyword">assert</span> searchHits.getTotalHits() != <span class="literal">null</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    page.setTotal(total);</span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    List&lt;ItemDTO&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="type">ItemDTO</span> <span class="variable">itemDTO</span> <span class="operator">=</span> JSONUtil.toBean(source, ItemDTO.class);</span><br><span class="line">        records.add(itemDTO);</span><br><span class="line">        <span class="comment">// 5.获取高亮结果</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; hfs = hit.getHighlightFields();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isNotEmpty(hfs)) &#123;</span><br><span class="line">            <span class="comment">// 5.1.有高亮结果，获取name的高亮结果</span></span><br><span class="line">            <span class="type">HighlightField</span> <span class="variable">hf</span> <span class="operator">=</span> hfs.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (hf != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//获取第一个高亮结果片段，就是商品名称的高亮值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">hfName</span> <span class="operator">=</span>  hf.getFragments()[<span class="number">0</span>].toString();</span><br><span class="line">                itemDTO.setName(hfName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    page.setRecords(records);</span><br><span class="line">    page.setSize(pageSize);</span><br><span class="line">    <span class="keyword">return</span> PageDTO.of(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据聚合">数据聚合</h1><p>这里主要是一个动态的过滤条件搜索。目前搜索的商品有什么过滤条件就有啥。比如选了品牌是小米，生效的分类就只有手机 拉杆箱 和 电视</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250821140415010-17561032746692.png" alt="image-20250821140415010"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//聚合参数</span></span><br><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">filter</span><span class="params">(ItemPageQuery query)</span> &#123;</span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;items_new&quot;</span>);</span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">source</span> <span class="operator">=</span> buildSearchRequest(request,query);</span><br><span class="line">    source.size(<span class="number">0</span>);</span><br><span class="line">    source.aggregation(AggregationBuilders.terms(<span class="string">&quot;brand_agg&quot;</span>).field(<span class="string">&quot;brand.keyword&quot;</span>).size(<span class="number">20</span>))</span><br><span class="line">        .aggregation(AggregationBuilders.terms(<span class="string">&quot;category_agg&quot;</span>).field(<span class="string">&quot;category.keyword&quot;</span>).size(<span class="number">20</span>));</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    SearchResponse response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解析聚合结果</span></span><br><span class="line">    <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">    <span class="keyword">if</span> (aggregations == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ParsedTerms</span> <span class="variable">brandAgg</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brand_agg&quot;</span>);</span><br><span class="line">    <span class="type">ParsedTerms</span> <span class="variable">categoryAgg</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;category_agg&quot;</span>);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    result.putByPath(<span class="string">&quot;brand&quot;</span>, getBuckets(brandAgg));</span><br><span class="line">    result.putByPath(<span class="string">&quot;category&quot;</span>,getBuckets(categoryAgg));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ParsedTerms转集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getBuckets</span><span class="params">(ParsedTerms terms)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (terms == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : terms.getBuckets()) &#123;</span><br><span class="line">        list.add(bucket.getKeyAsString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ES个人理解和正常使用</summary>
    
    
    
    <category term="学习笔记" scheme="https://u7u7.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="微服务" scheme="https://u7u7.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="ES" scheme="https://u7u7.top/tags/ES/"/>
    
    <category term="个人理解" scheme="https://u7u7.top/tags/%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>MQ个人理解</title>
    <link href="https://u7u7.top/posts/MQByMyself.html"/>
    <id>https://u7u7.top/posts/MQByMyself.html</id>
    <published>2025-08-25T01:00:25.000Z</published>
    <updated>2025-08-25T01:41:16.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="口述MQ">口述MQ</h1><p>个人口述：MQ 是Message Queue，消息队列。它在我目前的理解就是一个中间件，核心好处：<strong>应用解耦</strong>、<strong>异步提速</strong>、<strong>削峰填谷</strong>。</p><p>首先讲一下<strong>应用解耦</strong>，我拿12306买票这个场景举例子。正常设计业务会用户下单，下单以后<strong>扣除库存</strong>，<strong>发送邮件</strong>，<strong>发送短信</strong>，<strong>通知第三方</strong>。假设没有MQ进行应用解耦会出现的问题。1、产品经理加功能了，说用户下订单以后需要通知微信小程序，那你就要去订单系统中改代码，如果又多了很多下单以后的功能呢？非常不合理，要频繁更新代码，也很有可能将无bug的代码，增加功能增加出bug来。2、如果有一天短信系统挂了，用户下单了以后短信服务挂了，用户收不到短信，也没有扣除库存，也没有收到邮件。邮件系统好好的，因为短信系统的问题影响了，这也不合理。上面的两个原因都是因为系统之间耦合度太高了，通过MQ可以怎么做，首先上面的各种系统，其实就是在订单产生数据以后才有的，那我们可以当用户下单以后，通知给MQ，告诉它用户下单了，MQ再去通知其他的服务，可以扣减库存了，可以发送短信了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250824141616276.png" alt="image-20250824141616276"></p><p>第二个<strong>异步提速</strong>，假设我们不用MQ，那么我们的代码必然耦合在一起，下单成功后，依次调用这几个系统，然后同步等到他们的响应才能返回给用户是否成功的结果。假设每个系统耗时200ms，那么就得花费800ms，再加上下单的耗时就非常的慢，用户体验不佳。说再直白点就是因为是同步有点像串行化执行。但是其实在应用解耦的时候，我们就发现了，当下单以后通知MQ，其他系统订阅到MQ下单的消息，开始执行，其他系统是有点像类并行的。像下单的场景，用户最关心的是用户有没有下单成功，有没有买到票，通知什么的是次要的，那我们就可以当下单成功以后将消息发给MQ，并直接返回给用户下单成功了。其他模块再收到消息，执行他们该执行的任务。这样大大缩短了整体业务的耗时，对用户来说其实只消耗了下单成功的时间，通知的时间用户并不是最在乎的。再拿数据来说用户下单花费200ms，用户直接收到了下单成功的消息。MQ再通知其他系统，其他系统耗时都是200ms。那么整体耗时也就在400ms左右。因为MQ性能很好，通知和消费消息耗时非常短。</p><p>第三个<strong>削峰填谷</strong>，这个字面没有那么好理解，我们还是拿卖票这个场景解释，平常订票的时候QPS可能比较低，如果没有MQ，单靠订单系统也能处理，如果在国庆和假期旺季，抢票的人非常多，并发量会高很多，订单系统就扛不住了。如果不用MQ，我们可能会设置集群保证高可用。但是如果有MQ，因为MQ的吞吐能力非常强，我们可以设计高可用的MQ，我们可以把订单消息先放MQ缓存起来，把流量高峰<strong>削弱</strong>(削峰)，这样订单系统就避免了高并发的请，再让订单系统去MQ慢慢拉消息，处理请求。这样一来，高峰期积压的消息也终将被消费完，可以叫做<strong>填谷</strong>。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250824143822481.png" alt="image-20250824143822481"></p><h1 id="口述RabbitMQ">口述RabbitMQ</h1><p>个人口述：Rabbit MQ是MQ的一种，也是当前比较主流的MQ，优点是时效性，可靠性好。首先MQ上面也说了，是可以接受消息，并广播发出去。那肯定需要把消息进行存储，RabbitMQ的核心之一Queue。消息队列本质上就是一个类似于链表的独立进程，链表里的每个节点就是一个消息。它在生产者和消费者之间，在流量高峰的时候暂存数据，再慢慢消费数据就是之前说的削峰填谷。Queue就是刚刚说的类似链表的进程，消息也分了很多种类，所以我们的Queue也可以给他不同的命名用来存放不同的消息。每个Queue又是独立的进程，某个进程挂了互相不影响。有的时候我们一个消息可能要发给多个Queue，这个时候Exchange就出现了，它就相当于一个交换机可以定制消息路由分发策略来将消息分发给不同的Queue，生产者会携带RoutingKey给Exchange，它会通过RoutingKey和bindingKey投放给对应的Queue。刚刚说的路由方式和绑定关系，我们称为元数据。</p><p>RabbitMQ有哪些功能，死信队列，延时队列，优先级队列。</p><p>第一个死信队列，死信队列是用来存放一些因为某些原因没有正常被消费的消息的队列。它的核心的避免数据的丢失，并为异常消息提供专门的处理通道，保证消息的可靠性。消息成为死信的条件。有消息过期了，队列满了，消息被拒绝了并且requeue设置false不重新入队，该队列成为死信，又通过**<code>dead-letter-exchange</code>**绑定了一个交换机，该交换机就称为死信交换机，那死信交换机的作用就是存放死信队列的。</p><p>第二个延时队列。RabbitMQ 的延时队列是一种特殊的消息队列，用于实现 “消息发送后，不立即被消费，而是在指定时间后才被处理” 的需求。用户下单后若在 30 分钟内未支付，需要自动取消订单并释放库存。此时可将订单信息发送到延时，30 分钟后消费消息执行取消逻辑。那我们MQ怎么实现延时队列，MQ本身是没有延迟队列的，但是我们能通过死信队列和死信交换机实现延迟消息的发送。<strong>如下图</strong>，publisher是生产者，发送一个消息设置过期时间5s，RoutingKey为blue，Exchange为fanout类型，此时消息先发送到ttl.fanout，又转发给ttl.queue。ttl.queue绑定了死信交换机hmall.direct，hmall.direct事先通过BindingKey=‘blue’和direct.queue1绑定了。此时5s到了，消息过期了，ttl.queue携带RoutingKey发送给hmall.direct,hmall.direct发现ttl.queue的RoutingKey和direct.queue1的BindingKey匹配，于是消费者收到消息，此时离生产者发送消息那一刻过去了5秒。一般会使用DelayExchange插件搭配springAMQP使用。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250824162239072.png" alt="image-20250824162239072"></p><p>第三个优先级队列，应用场景在比如普通用户和会员用户同时发起请求给A服务，A服务会转发给B服务，B服务是算法服务，我们想优先处理会员用户的请求。MQ如何实现的，队列声明的时候要先通过<code>x-max-priority</code>参数设置最大优先级别&lt;=10,生产者发送消息的时候，在消息属性中添加<code>priority</code>字段，指定具体优先级需要小于等于队列最大优先级别。消费者监听优先级队列，队列会自动将高优先级消息排在队头，消费者会优先获取并处理高优先级消息。这样在消息堆积的时候就会优先处理高优先级的消息。</p><h1 id="口述可靠性">口述可靠性</h1><p>个人口述:消息从生产者到消费者的每一步都可能导致消息丢失：</p><ul><li>发送消息时丢失：<ul><li>生产者发送消息时连接MQ失败</li><li>生产者发送消息到达MQ后未找到Exchange</li><li>生产者发送消息到达MQ的Exchange后，未找到合适的Queue</li><li>消息到达MQ后，处理消息的进程发生异常</li></ul></li><li>MQ导致消息丢失：<ul><li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li></ul></li><li>消费者处理消息时：<ul><li>消息接收后尚未处理突然宕机</li><li>消息接收后处理过程中抛出异常</li></ul></li></ul><ol><li><p><strong>首先</strong>、说一下生产者怎么一定能把消息发送到MQ，当生产者发送消息的时候，出现网络故障，导致和mq连接中断。springamqp引入了重试机制，当rabbitTemplate和mq连接超时的时候，修改配置文件可以配置重试次数和重试间隔时间。除了网络问题，还有发送消息丢失的其他情况，rabbitmq引入了生产者确认机制，包括Publisher Confirm和Publisher Return，确认消息是否到达了路由，是否从路由到了队列。confirm机制包括ack和nack，它每次发送消息都要添加，因为不同的消息处理逻辑不一样，return机制包括return只用全局配置一次。但是一般不使用mq生产者确认机制比较消耗性能。只要编程人员队列名和路由名不填错，连接没问题，一般不会有问题。MQ内部故障：这种需要处理，但概率往往较低。因此只有对消息可靠性要求非常高的业务才需要开启，而且仅仅需要开启ConfirmCallback处理nack就可以了。</p></li><li><p><strong>第二</strong>、MQ的可靠性，消息如果到达mq以后没有及时保存，也会导致消息丢失。默认mq数据是内存存储的临时数据，重启以后数据就丢失了，所以我们要给rabbitmq的数据配置持久化，交换机、队列、消息都要配置持久化。❗如果同时开启了生产者确认机制和持久化，mq会在持久化以后返回ack回执。为了减少IO次数，mq并不是逐条持久化到数据库，而是每隔一段时间批量把数据持久化到erlang的mnesia数据库。</p></li><li><p>第三、<strong>lazyqueue</strong>，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：<br>消费者宕机或出现网络故障<br>消息发送量激增，超过了消费者处理速度<br>消费者处理业务发生阻塞<br>一旦出现消息堆积问题，RabbitMQ的内存占用就会越来越高，直到触发内存预警上限。此时RabbitMQ会将内存消息刷到磁盘上，这个行为成为PageOut. PageOut会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞。为了解决这个问题，从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：<br>接收到消息后直接存入磁盘而非内存<br>消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载）<br>支持数百万条的消息存储</p></li><li><p>消费者可靠性，mq提供了消费者确认机制，当消费者处理消息结束后，应该向mq发送一个回执告诉mq消息处理状态，有三种可选值ack，成功处理，删除消息 nack处理失败 再次投递消息  reject处理失败并拒绝消息 删除消息。springamqp通过配置文件设置了ack处理方式，如果业务异常返回nack，消息处理或类型检验异常，返回reject。当消费者出现一场后消息会不断从入队再重新发送给消费者，如果依然出错会再次入队，直到处理成功为止。极端情况会一直无法执行成功消息就会一直循环，spring提供了消费者失败重试机制，可以设置失败重试次数。当从事达到最大次数的时候spring会返回reject消息会被丢弃。但是这对于消息可靠性要求较高的业务场景不太好，因此spring允许我们自定义重试次数耗尽后的消息处理策略，通过messageRecovery接口定义，有三个实现，分别是直接reject，返回nack重新入队，将失败消息投递到指定交换机，显然第三种比较好，后续可以人工专门处理该队列中存放的失败消息。<br><strong>业务的幂等性</strong>，业务的幂等性是指同一个业务执行多次和执行一次给业务状态影响是一致的。但是像数据更新往往不是幂等性的，重复执行会有不一样的结果。代入我们mq中，其实就是消息因为某种原因被消费者重复消费了导致出现了问题。比如这个场景，生产者发送支付订单消息，此时修改了订单状态为已支付并扣减库存，但是因为网络故障生产者没有收到得到确认，生产者就会隔一段时间再发送一次请求，但是在请求发送之前，用户退款了，订单修改成已退款，此时消息发过来又改成已支付就出现问题了。解决方式分两种，第一种携带业务id，生产者给消息携带id，当消费者收到消息把id存入数据库中，生产者再发送消息过来，判断数据库中是否有该id，有的话就是判断重复消费。第二种是业务判断，根据业务本身的逻辑或状态判断是否是重复的请求或消息1，比如修改订单的时候判断订单id状态是否是已支付，库存是否已经扣减过。最后就是<strong>兜底方案</strong>，加假如MQ真的消息通知失败了，我们要设置兜底方案，比如MQ通知不一定发送到交易服务，那交易服务就可以主动去查支付状态，这里可以设置spring task定时任务定期查询。</p></li></ol>]]></content>
    
    
    <summary type="html">MQ个人理解口述、包括MQ、RabbitMQ、如何保证可靠性等等</summary>
    
    
    
    <category term="学习笔记" scheme="https://u7u7.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="微服务" scheme="https://u7u7.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="个人理解" scheme="https://u7u7.top/tags/%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    
    <category term="MQ" scheme="https://u7u7.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>MQ高级</title>
    <link href="https://u7u7.top/posts/MQHigh.html"/>
    <id>https://u7u7.top/posts/MQHigh.html</id>
    <published>2025-08-24T04:00:25.000Z</published>
    <updated>2025-08-25T01:40:49.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-发送者的可靠性">1.发送者的可靠性</h1><p>首先，我们一起分析一下消息丢失的可能性有哪些。</p><p>消息从发送者发送消息，到消费者处理消息，需要经过的流程是这样的：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram.png" alt=""></p><p>消息从生产者到消费者的每一步都可能导致消息丢失：</p><ul><li><p>发送消息时丢失：</p><ul><li><p>生产者发送消息时连接MQ失败</p></li><li><p>生产者发送消息到达MQ后未找到<code>Exchange</code></p></li><li><p>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code></p></li><li><p>消息到达MQ后，处理消息的进程发生异常</p></li></ul></li><li><p>MQ导致消息丢失：</p><ul><li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li></ul></li><li><p>消费者处理消息时：</p><ul><li><p>消息接收后尚未处理突然宕机</p></li><li><p>消息接收后处理过程中抛出异常</p></li></ul></li></ul><p>综上，我们要解决消息丢失问题，保证MQ的可靠性，就必须从3个方面入手：</p><ul><li><p>确保生产者一定把消息发送到MQ</p></li><li><p>确保MQ不会将消息弄丢</p></li><li><p>确保消费者一定要处理消息</p></li></ul><p>这一章我们先来看如何确保生产者一定能把消息发送到MQ。</p><h2 id="1-1-生产者重试机制">1.1.生产者重试机制</h2><p>首先第一种情况，就是生产者发送消息时，出现了网络故障，导致与MQ的连接中断。</p><p>为了解决这个问题，SpringAMQP提供的消息发送时的重试机制。即：当<code>RabbitTemplate</code>与MQ连接超时后，多次重试。</p><p>修改<code>publisher</code>模块的<code>application.yaml</code>文件，添加下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="string">1s</span> <span class="comment"># 设置MQ的连接超时时间</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启超时重试机制</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 失败后的初始等待时间</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br></pre></td></tr></table></figure><p>我们利用命令停掉RabbitMQ服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mq</span><br></pre></td></tr></table></figure><p>然后测试发送一条消息，会发现会每隔1秒重试1次，总共重试了3次。消息发送的超时重试机制配置成功了！</p><p><strong>注意</strong>：当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的重试机制是<strong>阻塞式</strong>的重试，也就是说多次重试等待的过程中，当前线程是被阻塞的。</p><p>如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。</p><h2 id="1-2-生产者确认机制">1.2.生产者确认机制</h2><p>一般情况下，只要生产者与MQ之间的网路连接顺畅，基本不会出现发送消息丢失的情况，因此大多数情况下我们无需考虑这种问题。</p><p>不过，在少数情况下，也会出现消息发送到MQ之后丢失的现象，比如：</p><ul><li><p>MQ内部处理消息的进程发生了异常</p></li><li><p>生产者发送消息到达MQ后未找到<code>Exchange</code></p></li><li><p>生产者发送消息到达MQ的<code>Exchange</code>后，未找到合适的<code>Queue</code>，因此无法路由</p></li></ul><p>针对上述情况，RabbitMQ提供了生产者消息确认机制，包括<code>Publisher Confirm</code>和<code>Publisher Return</code>两种。在开启确认机制的情况下，当生产者发送消息给MQ后，MQ会根据消息处理的情况返回不同的<strong>回执</strong>。</p><p>具体如图所示：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/VohQbYwSlo8R6AxfinGcLNq6nld.png" alt=""></p><p>总结如下：</p><ul><li><p>当消息投递到MQ，但是路由失败时，通过<strong>Publisher Return</strong>返回异常信息，同时返回ack的确认信息，代表投递成功</p></li><li><p>临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</p></li><li><p>持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功</p></li><li><p>其它情况都会返回NACK，告知投递失败</p></li></ul><p>其中<code>ack</code>和<code>nack</code>属于<strong>Publisher Confirm</strong>机制，<code>ack</code>是投递成功；<code>nack</code>是投递失败。而<code>return</code>则属于<strong>Publisher Return</strong>机制。</p><p>默认两种机制都是关闭状态，需要通过配置文件来开启。</p><h2 id="1-3-实现生产者确认">1.3.实现生产者确认</h2><h3 id="1-3-1-开启生产者确认">1.3.1.开启生产者确认</h3><p>在publisher模块的<code>application.yaml</code>中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span> <span class="comment"># 开启publisher confirm机制，并设置confirm类型</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 开启publisher return机制</span></span><br></pre></td></tr></table></figure><p>这里<code>publisher-confirm-type</code>有三种模式可选：</p><ul><li><p><code>none</code>：关闭confirm机制</p></li><li><p><code>simple</code>：同步阻塞等待MQ的回执</p></li><li><p><code>correlated</code>：MQ异步回调返回回执</p></li></ul><p>一般我们推荐使用<code>correlated</code>，回调机制。</p><h3 id="1-3-2-定义ReturnCallback">1.3.2.定义ReturnCallback</h3><p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此我们可以在配置类中统一设置。我们在publisher模块定义一个配置类：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/VtLLb0dSFo6XOdx1EEiczVvbnvc.png" alt=""></p><p>内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.publisher.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;触发return callback,&quot;</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;exchange: &#123;&#125;&quot;</span>, returned.getExchange());</span><br><span class="line">                log.debug(<span class="string">&quot;routingKey: &#123;&#125;&quot;</span>, returned.getRoutingKey());</span><br><span class="line">                log.debug(<span class="string">&quot;message: &#123;&#125;&quot;</span>, returned.getMessage());</span><br><span class="line">                log.debug(<span class="string">&quot;replyCode: &#123;&#125;&quot;</span>, returned.getReplyCode());</span><br><span class="line">                log.debug(<span class="string">&quot;replyText: &#123;&#125;&quot;</span>, returned.getReplyText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-定义ConfirmCallback">1.3.3.定义ConfirmCallback</h3><p>由于每个消息发送时的处理逻辑不一定相同，因此ConfirmCallback需要在每次发消息时定义。具体来说，是在调用RabbitTemplate中的convertAndSend方法时，多传递一个参数：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/E2IcbQ9bQoCDTVx8m8GciifXnKe.png" alt=""></p><p>这里的CorrelationData中包含两个核心的东西：</p><ul><li><p><code>id</code>：消息的唯一标示，MQ对不同的消息的回执以此做判断，避免混淆</p></li><li><p><code>SettableListenableFuture</code>：回执结果的Future对象</p></li></ul><p>将来MQ的回执就会通过这个<code>Future</code>来返回，我们可以提前给<code>CorrelationData</code>中的<code>Future</code>添加回调函数来处理消息回执：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TR81bF8E3ocm72xkaqHcuN9Nnph.png" alt=""></p><p>我们新建一个测试，向系统自带的交换机发送消息，并且添加<code>ConfirmCallback</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherConfirm</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建CorrelationData</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">cd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>();</span><br><span class="line">    <span class="comment">// 2.给Future添加ConfirmCallback</span></span><br><span class="line">    cd.getFuture().addCallback(<span class="keyword">new</span> <span class="title class_">ListenableFutureCallback</span>&lt;CorrelationData.Confirm&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">            <span class="comment">// 2.1.Future发生异常时的处理逻辑，基本不会触发</span></span><br><span class="line">            log.error(<span class="string">&quot;send message fail&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(CorrelationData.Confirm result)</span> &#123;</span><br><span class="line">            <span class="comment">// 2.2.Future接收到回执的处理逻辑，参数中的result就是回执内容</span></span><br><span class="line">            <span class="keyword">if</span>(result.isAck())&#123; <span class="comment">// result.isAck()，boolean类型，true代表ack回执，false 代表 nack回执</span></span><br><span class="line">                log.debug(<span class="string">&quot;发送消息成功，收到 ack!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// result.getReason()，String类型，返回nack时的异常描述</span></span><br><span class="line">                log.error(<span class="string">&quot;发送消息失败，收到 nack, reason : &#123;&#125;&quot;</span>, result.getReason());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 3.发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;hmall.direct&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;hello&quot;</span>, cd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/YmF2bo8C8ot7CexZXopcsIyTnYc.png" alt=""></p><p>可以看到，由于传递的<code>RoutingKey</code>是错误的，路由失败后，触发了<code>return callback</code>，同时也收到了ack。</p><p>当我们修改为正确的<code>RoutingKey</code>以后，就不会触发<code>return callback</code>了，只收到ack。</p><p>而如果连交换机都是错误的，则只会收到nack。</p><blockquote><p><strong>注意</strong>：</p><p>开启生产者确认比较消耗MQ性能，一般不建议开启。而且大家思考一下触发确认的几种情况：</p><ul><li><p>路由失败：一般是因为RoutingKey错误导致，往往是编程导致</p></li><li><p>交换机名称错误：同样是编程错误导致</p></li><li><p>MQ内部故障：这种需要处理，但概率往往较低。因此只有对消息可靠性要求非常高的业务才需要开启，而且仅仅需要开启ConfirmCallback处理nack就可以了。</p></li></ul></blockquote><h1 id="2-MQ的可靠性">2.MQ的可靠性</h1><p>消息到达MQ以后，如果MQ不能及时保存，也会导致消息丢失，所以MQ的可靠性也非常重要。</p><h2 id="2-1-数据持久化">2.1.数据持久化</h2><p>为了提升性能，默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p><ul><li><p>交换机持久化</p></li><li><p>队列持久化</p></li><li><p>消息持久化</p></li></ul><p>我们以控制台界面为例来说明。</p><h3 id="2-1-1-交换机持久化">2.1.1.交换机持久化</h3><p>在控制台的<code>Exchanges</code>页面，添加交换机时可以配置交换机的<code>Durability</code>参数：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/NPr8bcUqkoNVgIxP7ePct6thn4g.png" alt=""></p><p>设置为<code>Durable</code>就是持久化模式，<code>Transient</code>就是临时模式。</p><h3 id="2-1-2-队列持久化">2.1.2.队列持久化</h3><p>在控制台的Queues页面，添加队列时，同样可以配置队列的<code>Durability</code>参数：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/CxrxbP3awotxmkxSndlcE7iKnvd.png" alt=""></p><p>除了持久化以外，你可以看到队列还有很多其它参数，有一些我们会在后期学习。</p><h3 id="2-1-3-消息持久化">2.1.3.消息持久化</h3><p>在控制台发送消息的时候，可以添加很多参数，而消息的持久化是要配置一个<code>properties</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image.png" alt=""></p><blockquote><p><strong>说明</strong>：在开启持久化机制以后，如果同时还开启了生产者确认，那么MQ会在消息持久化以后才发送ACK回执，进一步确保消息的可靠性。</p><p>不过出于性能考虑，为了减少IO次数，发送到MQ的消息并不是逐条持久化到数据库的，而是每隔一段时间批量持久化。一般间隔在100毫秒左右，这就会导致ACK有一定的延迟，因此建议生产者确认全部采用异步方式。</p></blockquote><h2 id="2-2-LazyQueue">2.2.LazyQueue</h2><p>在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。但在某些特殊情况下，这会导致消息积压，比如：</p><ul><li><p>消费者宕机或出现网络故障</p></li><li><p>消息发送量激增，超过了消费者处理速度</p></li><li><p>消费者处理业务发生阻塞</p></li></ul><p>一旦出现消息堆积问题，RabbitMQ的内存占用就会越来越高，直到触发内存预警上限。此时RabbitMQ会将内存消息刷到磁盘上，这个行为成为<code>PageOut</code>. <code>PageOut</code>会耗费一段时间，并且会阻塞队列进程。因此在这个过程中RabbitMQ不会再处理新的消息，生产者的所有请求都会被阻塞。</p><p>为了解决这个问题，从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：</p><ul><li><p>接收到消息后直接存入磁盘而非内存</p></li><li><p>消费者要消费消息时才会从磁盘中读取并加载到内存（也就是懒加载）</p></li><li><p>支持数百万条的消息存储</p></li></ul><p>而在3.12版本之后，LazyQueue已经成为所有队列的默认格式。因此官方推荐升级MQ为3.12版本或者所有队列都设置为LazyQueue模式。</p><h3 id="2-2-1-控制台配置Lazy模式">2.2.1.控制台配置Lazy模式</h3><p>在添加队列的时候，添加<code>x-queue-mod=lazy</code>参数即可设置队列为Lazy模式：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/D7mmbzVySoa0VzxTQ6Ucbpl2nKb.png" alt=""></p><h3 id="2-2-2-代码配置Lazy模式">2.2.2.代码配置Lazy模式</h3><p>在利用SpringAMQP声明队列的时候，添加<code>x-queue-mod=lazy</code>参数也可设置队列为Lazy模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">lazyQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder</span><br><span class="line">            .durable(<span class="string">&quot;lazy.queue&quot;</span>)</span><br><span class="line">            .lazy() <span class="comment">// 开启Lazy模式</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是通过<code>QueueBuilder</code>的<code>lazy()</code>函数配置Lazy模式，底层源码如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/EBkmbWPYIo1x2KxnEXUcWHcHn0U.png" alt=""></p><p>当然，我们也可以基于注解来声明队列并设置为Lazy模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(</span></span><br><span class="line"><span class="meta">        name = &quot;lazy.queue&quot;,</span></span><br><span class="line"><span class="meta">        durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">        arguments = @Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenLazyQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到 lazy.queue的消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-更新已有队列为lazy模式">2.2.3.更新已有队列为lazy模式</h3><p>对于已经存在的队列，也可以配置为lazy模式，但是要通过设置policy实现。</p><p>可以基于命令行设置policy：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27; --apply-to queues  </span><br></pre></td></tr></table></figure><p>命令解读：</p><ul><li><p><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</p></li><li><p><code>set_policy</code> ：添加一个策略</p></li><li><p><code>Lazy</code> ：策略名称，可以自定义</p></li><li><p><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</p></li><li><p><code>'&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;'</code> ：设置队列模式为lazy模式</p></li><li><p><code>--apply-to queues</code>：策略的作用对象，是所有的队列</p></li></ul><p>当然，也可以在控制台配置policy，进入在控制台的<code>Admin</code>页面，点击<code>Policies</code>，即可添加配置：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/AFUlbn4sMoqeX6xbldFcQPbYnXc.png" alt=""></p><h1 id="3-消费者的可靠性">3.消费者的可靠性</h1><p>当RabbitMQ向消费者投递消息以后，需要知道消费者的处理状态如何。因为消息投递给消费者并不代表就一定被正确消费了，可能出现的故障有很多，比如：</p><ul><li><p>消息投递的过程中出现了网络故障</p></li><li><p>消费者接收到消息后突然宕机</p></li><li><p>消费者接收到消息后，因处理不当导致异常</p></li><li><p>…</p></li></ul><p>一旦发生上述情况，消息也会丢失。因此，RabbitMQ必须知道消费者的处理状态，一旦消息处理失败才能重新投递消息。</p><p>但问题来了：RabbitMQ如何得知消费者的处理状态呢？</p><p>本章我们就一起研究一下消费者处理消息时的可靠性解决方案。</p><h2 id="3-1-消费者确认机制">3.1.消费者确认机制</h2><p>为了确认消费者是否成功处理消息，RabbitMQ提供了消费者确认机制（<strong>Consumer Acknowledgement</strong>）。即：当消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。回执有三种可选值：</p><ul><li><p>ack：成功处理消息，RabbitMQ从队列中删除该消息</p></li><li><p>nack：消息处理失败，RabbitMQ需要再次投递消息</p></li><li><p>reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息</p></li></ul><p>一般reject方式用的较少，除非是消息格式有问题，那就是开发问题了。因此大多数情况下我们需要将消息处理的代码通过<code>try catch</code>机制捕获，消息处理成功时返回ack，处理失败时返回nack.</p><p>由于消息回执的处理代码比较统一，因此SpringAMQP帮我们实现了消息确认。并允许我们通过配置文件设置ACK处理方式，有三种模式：</p><ul><li><p><strong><code>none</code></strong>：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用</p></li><li><p><strong><code>manual</code></strong>：手动模式。需要自己在业务代码中调用api，发送<code>ack</code>或<code>reject</code>，存在业务入侵，但更灵活</p></li><li><p><strong><code>auto</code></strong>：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回<code>ack</code>.  当业务出现异常时，根据异常判断返回不同结果：</p><ul><li><p>如果是<strong>业务异常</strong>，会自动返回<code>nack</code>；</p></li><li><p>如果是<strong>消息处理或校验异常</strong>，自动返回<code>reject</code>;</p></li></ul></li></ul><p>返回Reject的常见异常有：</p><blockquote><p>Starting with version 1.3.2, the default ErrorHandler is now a ConditionalRejectingErrorHandler that rejects (and does not requeue) messages that fail with an irrecoverable error. Specifically, it rejects messages that fail with the following errors:</p><ul><li><p>o.s.amqp…MessageConversionException: Can be thrown when converting the incoming message payload using a MessageConverter.</p></li><li><p>o.s.messaging…MessageConversionException: Can be thrown by the conversion service if additional conversion is required when mapping to a @RabbitListener method.</p></li><li><p>o.s.messaging…MethodArgumentNotValidException: Can be thrown if validation (for example, @Valid) is used in the listener and the validation fails.</p></li><li><p>o.s.messaging…MethodArgumentTypeMismatchException: Can be thrown if the inbound message was converted to a type that is not correct for the target method. For example, the parameter is declared as Message&lt;Foo&gt; but Message&lt;Bar&gt; is received.</p></li><li><p>java.lang.NoSuchMethodException: Added in version 1.6.3.</p></li><li><p>java.lang.ClassCastException: Added in version 1.6.3.</p></li></ul></blockquote><p>通过下面的配置可以修改SpringAMQP的ACK处理方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment"># 不做处理</span></span><br></pre></td></tr></table></figure><p>修改consumer服务的SpringRabbitListener类中的方法，模拟一个消息处理的异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MessageConversionException</span>(<span class="string">&quot;故意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;消息处理完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试可以发现：当消息处理发生异常时，消息依然被RabbitMQ删除了。</p><p>我们再次把确认机制修改为auto：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># 自动ack</span></span><br></pre></td></tr></table></figure><p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为<code>unacked</code>（未确定状态）：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/MaLabMxNNoh4gMxwHDxc4MxTnoh.png" alt=""></p><p>放行以后，由于抛出的是<strong>消息转换异常</strong>，因此Spring会自动返回<code>reject</code>，所以消息依然会被删除：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/OuJLbuT9eowqpaxI7TNcimyinZc.png" alt=""></p><p>我们将异常改为RuntimeException类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;故意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;消息处理完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在异常位置打断点，然后再次发送消息测试，程序卡在断点时，可以发现此时消息状态为<code>unacked</code>（未确定状态）：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/UkKwbmXVpoyeUyxxxxncpY5NnMg.png" alt=""></p><p>放行以后，由于抛出的是业务异常，所以Spring返回<code>ack</code>，最终消息恢复至<code>Ready</code>状态，并且没有被RabbitMQ删除：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/K8qRb41Uso5Riyx95aLcGAYQnCe.png" alt=""></p><p>当我们把配置改为<code>auto</code>时，消息处理失败后，会回到RabbitMQ，并重新投递到消费者。</p><h2 id="3-2-失败重试机制">3.2.失败重试机制</h2><p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次requeue到队列，再次投递，直到消息处理成功为止。</p><p>极端情况就是消费者一直无法执行成功，那么消息requeue就会无限循环，导致mq的消息处理飙升，带来不必要的压力：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/B2SpbJ5Rxo78AQxuyXQcauXsn4b.png" alt=""></p><p>当然，上述极端情况发生的概率还是非常低的，不过不怕一万就怕万一。为了应对上述情况Spring又提供了消费者失败重试机制：在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p><p>修改consumer服务的application.yml文件，添加内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment"># 初识的失败等待时长为1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span></span><br></pre></td></tr></table></figure><p>重启consumer服务，重复之前的测试。可以发现：</p><ul><li><p>消费者在失败后消息没有重新回到MQ无限重新投递，而是在本地重试了3次</p></li><li><p>本地重试3次以后，抛出了<code>AmqpRejectAndDontRequeueException</code>异常。查看RabbitMQ控制台，发现消息被删除了，说明最后SpringAMQP返回的是<code>reject</code></p></li></ul><p>结论：</p><ul><li><p>开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试</p></li><li><p>重试达到最大次数后，Spring会返回reject，消息会被丢弃</p></li></ul><h2 id="3-3-失败处理策略">3.3.失败处理策略</h2><p>在之前的测试中，本地测试达到最大重试次数后，消息会被丢弃。这在某些对于消息可靠性要求较高的业务场景下，显然不太合适了。</p><p>因此Spring允许我们自定义重试次数耗尽后的消息处理策略，这个策略是由<code>MessageRecovery</code>接口来定义的，它有3个不同实现：</p><ul><li><p> <code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接<code>reject</code>，丢弃消息。默认就是这种方式 </p></li><li><p> <code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，返回<code>nack</code>，消息重新入队 </p></li><li><p> <code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机 </p></li></ul><p>比较优雅的一种处理方案是<code>RepublishMessageRecoverer</code>，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><p>1）在consumer服务中定义处理失败消息的交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）定义一个RepublishMessageRecoverer，关联队列和交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.retry.MessageRecoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessageConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">errorBinding</span><span class="params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-业务幂等性">3.4.业务幂等性</h2><p>何为幂等性？</p><p><strong>幂等</strong>是一个数学概念，用函数表达式来描述是这样的：<code>f(x) = f(f(x))</code>，例如求绝对值函数。</p><p>在程序开发中，则是指同一个业务，执行一次或多次对业务状态的影响是一致的。例如：</p><ul><li><p>根据id删除数据</p></li><li><p>查询数据</p></li><li><p>新增数据</p></li></ul><p>但数据的更新往往不是幂等的，如果重复执行可能造成不一样的后果。比如：</p><ul><li><p>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</p></li><li><p>退款业务。重复退款对商家而言会有经济损失。</p></li></ul><p>所以，我们要尽可能避免业务被重复执行。</p><p>然而在实际业务场景中，由于意外经常会出现业务被重复执行的情况，例如：</p><ul><li><p>页面卡顿时频繁刷新导致表单重复提交</p></li><li><p>服务间调用的重试</p></li><li><p>MQ消息的重复投递</p></li></ul><p>我们在用户支付成功后会发送MQ消息到交易服务，修改订单状态为已支付，就可能出现消息重复投递的情况。如果消费者不做判断，很有可能导致消息被消费多次，出现业务故障。</p><p>举例：</p><ol><li><p>假如用户刚刚支付完成，并且投递消息到交易服务，交易服务更改订单为<strong>已支付</strong>状态。</p></li><li><p>由于某种原因，例如网络故障导致生产者没有得到确认，隔了一段时间后<strong>重新投递</strong>给交易服务。</p></li><li><p>但是，在新投递的消息被消费之前，用户选择了退款，将订单状态改为了<strong>已退款</strong>状态。</p></li><li><p>退款完成后，新投递的消息才被消费，那么订单状态会被再次改为<strong>已支付</strong>。业务异常。</p></li></ol><p>因此，我们必须想办法保证消息处理的幂等性。这里给出两种方案：</p><ul><li><p>唯一消息ID</p></li><li><p>业务状态判断</p></li></ul><h3 id="3-4-1-唯一消息ID">3.4.1.唯一消息ID</h3><p>这个思路非常简单：</p><ol><li><p>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</p></li><li><p>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</p></li><li><p>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。</p></li></ol><p>我们该如何给消息添加唯一ID呢？</p><p>其实很简单，SpringAMQP的MessageConverter自带了MessageID的功能，我们只要开启这个功能即可。</p><p>以Jackson的消息转换器为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jjmc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jjmc.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jjmc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-业务判断">3.4.2.业务判断</h3><p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息，不同的业务场景判断的思路也不一样。</p><p>例如我们当前案例中，处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以在执行业务时判断订单状态是否是未支付，如果不是则证明订单已经被处理过，无需重复处理。</p><p>相比较而言，消息ID的方案需要改造原有的数据库，所以我更推荐使用业务判断的方案。</p><p>以支付修改订单的业务为例，我们需要修改<code>OrderServiceImpl</code>中的<code>markOrderPaySuccess</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">old</span> <span class="operator">=</span> getById(orderId);</span><br><span class="line">    <span class="comment">// 2.判断订单状态</span></span><br><span class="line">    <span class="keyword">if</span> (old == <span class="literal">null</span> || old.getStatus() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 订单不存在或者订单状态不是1，放弃处理</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试更新订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    order.setId(orderId);</span><br><span class="line">    order.setStatus(<span class="number">2</span>);</span><br><span class="line">    order.setPayTime(LocalDateTime.now());</span><br><span class="line">    updateById(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码逻辑上符合了幂等判断的需求，但是由于判断和更新是两步动作，因此在极小概率下可能存在线程安全问题。</p><p>我们可以合并上述操作为这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markOrderPaySuccess</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// UPDATE `order` SET status = ? , pay_time = ? WHERE id = ? AND status = 1</span></span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(Order::getStatus, <span class="number">2</span>)</span><br><span class="line">            .set(Order::getPayTime, LocalDateTime.now())</span><br><span class="line">            .eq(Order::getId, orderId)</span><br><span class="line">            .eq(Order::getStatus, <span class="number">1</span>)</span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看，上述代码等同于这样的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">order</span>` <span class="keyword">SET</span> status <span class="operator">=</span> ? , pay_time <span class="operator">=</span> ? <span class="keyword">WHERE</span> id <span class="operator">=</span> ? <span class="keyword">AND</span> status <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们在where条件中除了判断id以外，还加上了status必须为1的条件。如果条件不符（说明订单已支付），则SQL匹配不到数据，根本不会执行。</p><h2 id="3-5-兜底方案">3.5.兜底方案</h2><p>虽然我们利用各种机制尽可能增加了消息的可靠性，但也不好说能保证消息100%的可靠。万一真的MQ通知失败该怎么办呢？</p><p>有没有其它兜底方案，能够确保订单的支付状态一致呢？</p><p>其实思想很简单：既然MQ通知不一定发送到交易服务，那么交易服务就必须自己<strong>主动去查询</strong>支付状态。这样即便支付服务的MQ通知失败，我们依然能通过主动查询来保证订单状态的一致。</p><p>流程如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-1.png" alt=""></p><p>图中黄色线圈起来的部分就是MQ通知失败后的兜底处理方案，由交易服务自己主动去查询支付状态。</p><p>不过需要注意的是，交易服务并不知道用户会在什么时候支付，如果查询的时机不正确（比如查询的时候用户正在支付中），可能查询到的支付状态也不正确。</p><p>那么问题来了，我们到底该在什么时间主动查询支付状态呢？</p><p>这个时间是无法确定的，因此，通常我们采取的措施就是利用<strong>定时任务</strong>定期查询，例如每隔20秒就查询一次，并判断支付状态。如果发现订单已经支付，则立刻更新订单状态为已支付即可。</p><p>定时任务大家之前学习过，具体的实现这里就不再赘述了。</p><p>至此，消息可靠性的问题已经解决了。</p><p>综上，支付服务与交易服务之间的订单状态一致性是如何保证的？</p><ul><li><p>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</p></li><li><p>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</p></li><li><p>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</p></li></ul><h1 id="4-延迟消息">4.延迟消息</h1><p>在电商的支付业务中，对于一些库存有限的商品，为了更好的用户体验，通常都会在用户下单时立刻扣减商品库存。例如电影院购票、高铁购票，下单后就会锁定座位资源，其他人无法重复购买。</p><p>但是这样就存在一个问题，假如用户下单后一直不付款，就会一直占有库存资源，导致其他客户无法正常交易，最终导致商户利益受损！</p><p>因此，电商中通常的做法就是：<strong>对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存</strong>。</p><p>例如，订单支付超时时间为30分钟，则我们应该在用户下单后的第30分钟检查订单支付状态，如果发现未支付，应该立刻取消订单，释放库存。</p><p>但问题来了：如何才能准确的实现在下单后第30分钟去检查支付状态呢？</p><p>像这种在一段时间以后才执行的任务，我们称之为<strong>延迟任务</strong>，而要实现延迟任务，最简单的方案就是利用MQ的延迟消息了。</p><p>在RabbitMQ中实现延迟消息也有两种方案：</p><ul><li><p>死信交换机+TTL</p></li><li><p>延迟消息插件</p></li></ul><p>这一章我们就一起研究下这两种方案的实现方式，以及优缺点。</p><h2 id="4-1-死信交换机和延迟消息">4.1.死信交换机和延迟消息</h2><p>首先我们来学习一下基于死信交换机的延迟消息方案。</p><h3 id="4-1-1-死信交换机">4.1.1.死信交换机</h3><p>什么是死信？</p><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li><p>消费者使用<code>basic.reject</code>或 <code>basic.nack</code>声明消费失败，并且消息的<code>requeue</code>参数设置为false</p></li><li><p>消息是一个过期消息，超时无人消费</p></li><li><p>要投递的队列消息满了，无法投递</p></li></ul><p>如果一个队列中的消息已经成为死信，并且这个队列通过<strong><code>dead-letter-exchange</code></strong>属性指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机就称为<strong>死信交换机</strong>（Dead Letter Exchange）。而此时加入有队列与死信交换机绑定，则最终死信就会被投递到这个队列中。</p><p>死信交换机有什么作用呢？</p><ol><li><p>收集那些因处理失败而被拒绝的消息</p></li><li><p>收集那些因队列满了而被拒绝的消息</p></li><li><p>收集因TTL（有效期）到期的消息</p></li></ol><h3 id="4-1-2-延迟消息">4.1.2.延迟消息</h3><p>前面两种作用场景可以看做是把死信交换机当做一种消息处理的最终兜底方案，与消费者重试时讲的<code>RepublishMessageRecoverer</code>作用类似。</p><p>而最后一种场景，大家设想一下这样的场景：</p><p>如图，有一组绑定的交换机（<code>ttl.fanout</code>）和队列（<code>ttl.queue</code>）。但是<code>ttl.queue</code>没有消费者监听，而是设定了死信交换机<code>hmall.direct</code>，而队列<code>direct.queue1</code>则与死信交换机绑定，RoutingKey是blue：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/DU6Bbv9ELogXMVxjEYZcS4C4nae.png" alt=""></p><p>假如我们现在发送一条消息到<code>ttl.fanout</code>，RoutingKey为blue，并设置消息的<strong>有效期</strong>为5000毫秒：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/IGCWbzpEKo3loaxCJWkcQukZnme.png" alt=""></p><blockquote><p><strong>注意</strong>：尽管这里的<code>ttl.fanout</code>不需要RoutingKey，但是当消息变为死信并投递到死信交换机时，会沿用之前的RoutingKey，这样<code>hmall.direct</code>才能正确路由消息。</p></blockquote><p>消息肯定会被投递到<code>ttl.queue</code>之后，由于没有消费者，因此消息无人消费。5秒之后，消息的有效期到期，成为死信：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/JLSsbX5RyoZCKTxCxhGcksRynFb.png" alt=""></p><p>死信被再次投递到死信交换机<code>hmall.direct</code>，并沿用之前的RoutingKey，也就是<code>blue</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/RVgSbj8otoQtKYxsd4jc2OdFnOb.png" alt=""></p><p>由于<code>direct.queue1</code>与<code>hmall.direct</code>绑定的key是blue，因此最终消息被成功路由到<code>direct.queue1</code>，如果此时有消费者与<code>direct.queue1</code>绑定， 也就能成功消费消息了。但此时已经是5秒钟以后了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/KZx0bBSh7ofh4jxA0lTcTlL1nic.png" alt=""></p><p>也就是说，publisher发送了一条消息，但最终consumer在5秒后才收到消息。我们成功实现了<strong>延迟消息</strong>。</p><h3 id="4-1-3-总结">4.1.3.总结</h3><blockquote><p><strong>注意：</strong></p><p>RabbitMQ的消息过期是基于追溯方式来实现的，也就是说当一个消息的TTL到期以后不一定会被移除或投递到死信交换机，而是在消息恰好处于队首时才会被处理。</p><p>当队列中消息堆积很多的时候，过期消息可能不会被按时处理，因此你设置的TTL时间不一定准确。</p></blockquote><h2 id="4-2-DelayExchange插件">4.2.DelayExchange插件</h2><p>基于死信队列虽然可以实现延迟消息，但是太麻烦了。因此RabbitMQ社区提供了一个延迟消息插件来实现相同的效果。</p><p>官方文档说明：</p><h3 id="4-2-1-下载">4.2.1.下载</h3><p>插件下载地址：</p><p>由于我们安装的MQ是<code>3.8</code>版本，因此这里下载<code>3.8.17</code>版本：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/KqSKbHiB5oHaCPxSVG5cBt00nac.png" alt=""></p><p>当然，也可以直接使用课前资料提供好的插件：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/U7x4bEQwcosUk2xNHdGc098znec.png" alt=""></p><h3 id="4-2-2-安装">4.2.2.安装</h3><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect mq-plugins</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-06-19T09:22:59+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mountpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/mq-plugins/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mq-plugins&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>插件目录被挂载到了<code>/var/lib/docker/volumes/mq-plugins/_data</code>这个目录，我们上传插件到该目录下。</p><p>接下来执行命令，安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mq rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TZdFbdnG8oJ9aSxedA9cjII6n0f.png" alt=""></p><h3 id="4-2-3-声明延迟交换机">4.2.3.声明延迟交换机</h3><p>基于注解方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;delay.direct&quot;, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;delay&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDelayMessage</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到delay.queue的延迟消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于<code>@Bean</code>的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayExchangeConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">                .directExchange(<span class="string">&quot;delay.direct&quot;</span>) <span class="comment">// 指定交换机类型和名称</span></span><br><span class="line">                .delayed() <span class="comment">// 设置delay的属性为true</span></span><br><span class="line">                .durable(<span class="literal">true</span>) <span class="comment">// 持久化</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;delay.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayQueueBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayExchange()).with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-4-发送延迟消息">4.2.4.发送延迟消息</h3><p>发送消息时，必须通过x-delay属性设定延迟时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPublisherDelayMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, delayed message&quot;</span>;</span><br><span class="line">    <span class="comment">// 2.发送消息，利用消息后置处理器添加消息头</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;delay.direct&quot;</span>, <span class="string">&quot;delay&quot;</span>, message, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">            <span class="comment">// 添加延迟消息属性</span></span><br><span class="line">            message.getMessageProperties().setDelay(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>延迟消息插件内部会维护一个本地数据库表，同时使用Elang Timers功能实现计时。如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的CPU开销，同时延迟消息的时间会存在误差。</p><p>因此，<strong>不建议设置延迟时间过长的延迟消息</strong>。</p></blockquote><h2 id="4-3-超时订单问题">4.3.超时订单问题</h2><p>接下来，我们就在交易服务中利用延迟消息实现订单超时取消功能。其大概思路如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/MIOhbsy7KomGNMxnXXIc4Tu4nXW.jpg" alt=""></p><p>假如订单超时支付时间为30分钟，理论上说我们应该在下单时发送一条延迟消息，延迟时间为30分钟。这样就可以在接收到消息时检验订单支付状态，关闭未支付订单。</p><h3 id="4-3-1-定义常量">4.3.1.定义常量</h3><p>无论是消息发送还是接收都是在交易服务完成，因此我们在<code>trade-service</code>中定义一个常量类，用于记录交换机、队列、RoutingKey等常量：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/GHBGbT2WLoreOwxwyT5cPu1anOf.png" alt=""></p><p>内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MQConstants</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">DELAY_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;trade.delay.direct&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">DELAY_ORDER_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;trade.delay.order.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">DELAY_ORDER_KEY</span> <span class="operator">=</span> <span class="string">&quot;delay.order.query&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-配置MQ">4.3.2.配置MQ</h3><p>在<code>trade-service</code>模块的<code>pom.xml</code>中引入amqp的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--amqp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>trade-service</code>的<code>application.yaml</code>中添加MQ的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-改造下单业务，发送延迟消息">4.3.3.改造下单业务，发送延迟消息</h3><p>接下来，我们改造下单业务，在下单完成后，发送延迟消息，查询支付状态。</p><p>修改<code>trade-service</code>模块的<code>com.hmall.trade.service.impl.OrderServiceImpl</code>类的<code>createOrder</code>方法，添加消息发送的代码：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-1.png" alt=""></p><p>这里延迟消息的时间应该是15分钟，不过我们为了测试方便，改成10秒。</p><h3 id="4-3-4-编写查询支付状态接口">4.3.4.编写查询支付状态接口</h3><p>由于MQ消息处理时需要查询支付状态，因此我们要在<code>pay-service</code>模块定义一个这样的接口，并提供对应的<code>FeignClient</code>.</p><p>首先，在<code>hm-api</code>模块定义三个类：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/U4aPbhArAovCXyxs3iRcH6IUnAc.png" alt=""></p><p>说明：</p><ul><li><p>PayOrderDTO：支付单的数据传输实体</p></li><li><p>PayClient：支付系统的Feign客户端</p></li><li><p>PayClientFallback：支付系统的fallback逻辑</p></li></ul><p><code>PayOrderDTO</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.api.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 支付订单</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;支付单数据传输实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayOrderDTO</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;业务订单号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long bizOrderNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付单号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long payOrderNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long bizUserId;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付渠道编码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String payChannelCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付金额，单位分&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;付类型，1：h5,2:小程序，3：公众号，4：扫码，5：余额支付&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer payType;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;付状态，0：待提交，1:待支付，2：支付超时或取消，3：支付成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;拓展字段，用于传递不同渠道单独处理的字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String expandJson;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;第三方返回业务码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String resultCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;第三方返回提示信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String resultMsg;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付成功时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime paySuccessTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付超时时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime payOverTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;支付二维码链接&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qrCodeUrl;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PayClient</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.api.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.api.client.fallback.PayClientFallback;</span><br><span class="line"><span class="keyword">import</span> com.hmall.api.dto.PayOrderDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;pay-service&quot;, fallbackFactory = PayClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PayClient</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据交易订单id查询支付单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 业务订单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 支付单信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pay-orders/biz/&#123;id&#125;&quot;)</span></span><br><span class="line">    PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PayClientFallback</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.api.client.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.api.client.PayClient;</span><br><span class="line"><span class="keyword">import</span> com.hmall.api.dto.PayOrderDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FallbackFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayClientFallback</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;PayClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PayClient <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PayClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在<code>pay-service</code>模块的<code>PayController</code>中实现该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询支付单&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/biz/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PayOrderDTO <span class="title function_">queryPayOrderByBizOrderNo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">PayOrder</span> <span class="variable">payOrder</span> <span class="operator">=</span> payOrderService.lambdaQuery().eq(PayOrder::getBizOrderNo, id).one();</span><br><span class="line">    <span class="keyword">return</span> BeanUtils.copyBean(payOrder, PayOrderDTO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-监听消息，查询支付状态">4.3.5.监听消息，查询支付状态</h3><p>接下来，我们在<code>trader-service</code>编写一个监听器，监听延迟消息，查询订单支付状态：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-2.png" alt=""></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.api.client.PayClient;</span><br><span class="line"><span class="keyword">import</span> com.hmall.api.dto.PayOrderDTO;</span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.constants.MQConstants;</span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.domain.po.Order;</span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDelayMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOrderService orderService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PayClient payClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = MQConstants.DELAY_ORDER_QUEUE_NAME),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = MQConstants.DELAY_EXCHANGE_NAME, delayed = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            key = MQConstants.DELAY_ORDER_KEY</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenOrderDelayMessage</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getById(orderId);</span><br><span class="line">        <span class="comment">// 2.检测订单状态，判断是否已支付</span></span><br><span class="line">        <span class="keyword">if</span>(order == <span class="literal">null</span> || order.getStatus() != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 订单不存在或者已经支付</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.未支付，需要查询支付流水状态</span></span><br><span class="line">        <span class="type">PayOrderDTO</span> <span class="variable">payOrder</span> <span class="operator">=</span> payClient.queryPayOrderByBizOrderNo(orderId);</span><br><span class="line">        <span class="comment">// 4.判断是否支付</span></span><br><span class="line">        <span class="keyword">if</span>(payOrder != <span class="literal">null</span> &amp;&amp; payOrder.getStatus() == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">// 4.1.已支付，标记订单状态为已支付</span></span><br><span class="line">            orderService.markOrderPaySuccess(orderId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// TODO 4.2.未支付，取消订单，回复库存</span></span><br><span class="line">            orderService.cancelOrder(orderId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里要在OrderServiceImpl中实现cancelOrder方法，留作作业大家自行实现。</p><h1 id="5-作业">5.作业</h1><h2 id="5-1-取消订单">5.1.取消订单</h2><p>在处理超时未支付订单时，如果发现订单确实超时未支付，最终需要关闭该订单。</p><p>关闭订单需要完成两件事情：</p><ul><li><p>将订单状态修改为已关闭</p></li><li><p>恢复订单中已经扣除的库存</p></li></ul><p>这部分功能尚未实现。</p><p>大家要在<code>IOrderService</code>接口中定义<code>cancelOrder</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">cancelOrder</span><span class="params">(Long orderId)</span>;</span><br></pre></td></tr></table></figure><p>并且在<code>OrderServiceImpl</code>中实现该方法。实现过程中要注意业务幂等性判断。</p><h2 id="5-2-抽取MQ工具">5.2.抽取MQ工具</h2><p>MQ在企业开发中的常见应用我们就学习完毕了，除了收发消息以外，消息可靠性的处理、生产者确认、消费者确认、延迟消息等等编码还是相对比较复杂的。</p><p>因此，我们需要将这些常用的操作封装为工具，方便在项目中使用。要求如下：</p><ul><li><p>将RabbitMQ的yaml配置抽取到nacos中，作为共享配置，替换所有微服务中的自定义MQ配置</p></li><li><p>在<code>hm-commom</code>模块下编写发送消息的工具类<code>RabbitMqHelper</code></p></li><li><p>定义一个自动配置类<code>MqConsumeErrorAutoConfiguration</code>，内容包括：</p><ul><li><p>声明一个交换机，名为<code>error.direct</code>，类型为<code>direct</code></p></li><li><p>声明一个队列，名为：<code>微服务名 + error.queue</code>，也就是说要动态获取</p></li><li><p>将队列与交换机绑定，绑定时的<code>RoutingKey</code>就是<code>微服务名</code></p></li><li><p>声明<code>RepublishMessageRecoverer</code>，消费失败消息投递到上述交换机</p></li><li><p>给配置类添加条件，当<code>spring.rabbitmq.listener.simple.retry.enabled</code>为<code>true</code>时触发</p></li></ul></li></ul><p>RabbitMqHelper的结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String exchange, String routingKey, Object msg)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDelayMessage</span><span class="params">(String exchange, String routingKey, Object msg, <span class="type">int</span> delay)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageWithConfirm</span><span class="params">(String exchange, String routingKey, Object msg, <span class="type">int</span> maxRetries)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-改造业务">5.3.改造业务</h2><p>利用你编写的工具，改造支付服务、购物车服务、交易服务中消息发送功能，并且添加消息确认或消费者重试机制，确保消息的可靠性。</p>]]></content>
    
    
    <summary type="html">MQ高级的学习路线，包括MQ的概念、MQ的分类、MQ的使用场景、MQ的使用方式等。</summary>
    
    
    
    <category term="学习笔记" scheme="https://u7u7.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="微服务" scheme="https://u7u7.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="MQ" scheme="https://u7u7.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>MQ基础</title>
    <link href="https://u7u7.top/posts/MQLow.html"/>
    <id>https://u7u7.top/posts/MQLow.html</id>
    <published>2025-08-24T03:00:25.000Z</published>
    <updated>2025-08-25T01:40:57.515Z</updated>
    
    <content type="html"><![CDATA[<p>对应B站视频：</p><iframe src="https://player.bilibili.com/player.html?bvid=1S142197x7&p=85&vd_source=1ff0c1b434581723cf696ccc2f59ceaa" sandbox="allow-scripts allow-same-origin allow-presentation allow-forms allow-popups allow-downloads" allowfullscreen allow="encrypted-media; fullscreen; autoplay" referrerpolicy="strict-origin-when-cross-origin" frameborder="0" style="width: 100%; min-height: 292px; border-radius: 8px;"></iframe><p>微服务一旦拆分，必然涉及到服务之间的相互调用，目前我们服务之间调用采用的都是基于OpenFeign的调用。这种调用中，调用者发起请求后需要<strong>等待</strong>服务提供者执行业务返回结果后，才能继续执行后面的业务。也就是说调用者在调用过程中处于阻塞状态，因此我们称这种调用方式为<strong>同步调用</strong>，也可以叫<strong>同步通讯</strong>。但在很多场景下，我们可能需要采用<strong>异步通讯</strong>的方式，为什么呢？</p><p>我们先来看看什么是同步通讯和异步通讯。如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/B82Sbxk3DoAsVTx7KV1cXjz3nsg-175603011396879.png" alt=""></p><p>解读：</p><ul><li><p>同步通讯：就如同打视频电话，双方的交互都是实时的。因此同一时刻你只能跟一个人打视频电话。</p></li><li><p>异步通讯：就如同发微信聊天，双方的交互不是实时的，你不需要立刻给对方回应。因此你可以多线操作，同时跟多人聊天。</p></li></ul><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发微信可以同时与多个人收发微信，但是往往响应会有延迟。</p><p>所以，如果我们的业务需要实时得到服务提供方的响应，则应该选择同步通讯（同步调用）。而如果我们追求更高的效率，并且不需要实时响应，则应该选择异步通讯（异步调用）。<br> </p><p>同步调用的方式我们已经学过了，之前的OpenFeign调用就是。但是：</p><ul><li><p>异步调用又该如何实现？</p></li><li><p>哪些业务适合用异步调用来实现呢？</p></li></ul><p>通过今天的学习你就能明白这些问题了。</p><h1 id="1-初识MQ">1.初识MQ</h1><h2 id="1-1-同步调用">1.1.同步调用</h2><p>之前说过，我们现在基于OpenFeign的调用都属于是同步调用，那么这种方式存在哪些问题呢？</p><p>举个例子，我们以昨天留给大家作为作业的<strong>余额支付功能</strong>为例来分析，首先看下整个流程：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram.png" alt=""></p><p>目前我们采用的是基于OpenFeign的同步调用，也就是说业务执行流程是这样的：</p><ul><li><p>支付服务需要先调用用户服务完成余额扣减</p></li><li><p>然后支付服务自己要更新支付流水单的状态</p></li><li><p>然后支付服务调用交易服务，更新业务订单状态为已支付</p></li></ul><p>三个步骤依次执行。</p><p>这其中就存在3个问题：</p><p><strong>第一</strong>，<strong>拓展性差</strong></p><p>我们目前的业务相对简单，但是随着业务规模扩大，产品的功能也在不断完善。</p><p>在大多数电商业务中，用户支付成功后都会以短信或者其它方式通知用户，告知支付成功。假如后期产品经理提出这样新的需求，你怎么办？是不是要在上述业务中再加入通知用户的业务？</p><p>某些电商项目中，还会有积分或金币的概念。假如产品经理提出需求，用户支付成功后，给用户以积分奖励或者返还金币，你怎么办？是不是要在上述业务中再加入积分业务、返还金币业务？</p><p>。。。</p><p>最终你的支付业务会越来越臃肿：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-1.png" alt=""></p><p>也就是说每次有新的需求，现有支付逻辑都要跟着变化，代码经常变动，不符合开闭原则，拓展性不好。</p><p><strong>第二</strong>，<strong>性能下降</strong></p><p>由于我们采用了同步调用，调用者需要等待服务提供者执行完返回结果后，才能继续向下执行，也就是说每次远程调用，调用者都是阻塞等待状态。最终整个业务的响应时长就是每次远程调用的执行时长之和：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-2.png" alt=""></p><p>假如每个微服务的执行时长都是50ms，则最终整个业务的耗时可能高达300ms，性能太差了。</p><p><strong>第三，级联失败</strong></p><p>由于我们是基于OpenFeign调用交易服务、通知服务。当交易服务、通知服务出现故障时，整个事务都会回滚，交易失败。</p><p>这其实就是同步调用的<strong>级联失败</strong>问题。</p><p>但是大家思考一下，我们假设用户余额充足，扣款已经成功，此时我们应该确保支付流水单更新为已支付，确保交易成功。毕竟收到手里的钱没道理再退回去吧。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/CSCWbPDPvo6OVux4ZKecjLVFnsd.png" alt=""></p><p>因此，这里不能因为短信通知、更新订单状态失败而回滚整个事务。</p><p>综上，同步调用的方式存在下列问题：</p><ul><li><p>拓展性差</p></li><li><p>性能下降</p></li><li><p>级联失败</p></li></ul><p>而要解决这些问题，我们就必须用<strong>异步调用</strong>的方式来代替<strong>同步调用</strong>。</p><h2 id="1-2-异步调用">1.2.异步调用</h2><p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p><ul><li><p>消息发送者：投递消息的人，就是原来的调用方</p></li><li><p>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</p></li><li><p>消息接收者：接收和处理消息的人，就是原来的服务提供方</p></li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-3.png" alt=""></p><p>在异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理。</p><p>这样，发送消息的人和接收消息的人就完全解耦了。</p><p>还是以余额支付业务为例：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-4.png" alt=""></p><p>除了扣减余额、更新支付流水单状态以外，其它调用逻辑全部取消。而是改为发送一条消息到Broker。而相关的微服务都可以订阅消息通知，一旦消息到达Broker，则会分发给每一个订阅了的微服务，处理各自的业务。</p><p>假如产品经理提出了新的需求，比如要在支付成功后更新用户积分。支付代码完全不用变更，而仅仅是让积分服务也订阅消息即可：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-5.png" alt=""></p><p>不管后期增加了多少消息订阅者，作为支付服务来讲，执行问扣减余额、更新支付流水状态后，发送消息即可。业务耗时仅仅是这三部分业务耗时，仅仅100ms，大大提高了业务性能。</p><p>另外，不管是交易服务、通知服务，还是积分服务，他们的业务与支付关联度低。现在采用了异步调用，解除了耦合，他们即便执行过程中出现了故障，也不会影响到支付服务。</p><p>综上，异步调用的优势包括：</p><ul><li><p>耦合度更低</p></li><li><p>性能更好</p></li><li><p>业务拓展性强</p></li><li><p>故障隔离，避免级联失败</p></li></ul><p>当然，异步通信也并非完美无缺，它存在下列缺点：</p><ul><li><p>完全依赖于Broker的可靠性、安全性和性能</p></li><li><p>架构复杂，后期维护和调试麻烦</p></li></ul><h2 id="1-3-技术选型">1.3.技术选型</h2><p>消息Broker，目前常见的实现方案就是消息队列（MessageQueue），简称为MQ.</p><p>目比较常见的MQ实现：</p><ul><li><p>ActiveMQ</p></li><li><p>RabbitMQ</p></li><li><p>RocketMQ</p></li><li><p>Kafka</p></li></ul><p>几种常见MQ的对比：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/d8e1c874b5db80e3913a404a2cb59a89.jpeg" alt="在这里插入图片描述"></p><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p><p>追求可靠性：RabbitMQ、RocketMQ</p><p>追求吞吐能力：RocketMQ、Kafka</p><p>追求消息低延迟：RabbitMQ、Kafka</p><p>据统计，目前国内消息队列使用最多的还是RabbitMQ，再加上其各方面都比较均衡，稳定性也好，因此我们课堂上选择RabbitMQ来学习。</p><h1 id="2-RabbitMQ">2.RabbitMQ</h1><p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：</p><p><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p>接下来，我们就学习它的基本概念和基础用法。</p><h2 id="2-1-安装">2.1.安装</h2><p>我们同样基于Docker来安装RabbitMQ，使用下面的命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=itheima \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> --network hm-net\</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>如果拉取镜像困难的话，可以使用课前资料给大家准备的镜像，利用docker load命令加载：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/KWDWbLtlfodeGBxOs94c3JFdn9g.png" alt=""></p><p>可以看到在安装命令中有两个映射的端口：</p><ul><li><p>15672：RabbitMQ提供的管理控制台的端口</p></li><li><p>5672：RabbitMQ的消息发送处理接口</p></li></ul><p>安装完成后，我们访问 http://192.168.150.101:15672即可看到管理控制台。首次访问需要登录，默认的用户名和密码在配置文件中已经指定了。</p><p>登录后即可看到管理控制台总览页面：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/YNs9bu47Vo3o1gxnEw1cI9MxnUM.png" alt=""></p><p>RabbitMQ对应的架构如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HH6fbYlGsoySg1x34UBczqjZnSb.png" alt=""></p><p>其中包含几个概念：</p><ul><li><p><strong><code>publisher</code></strong>：生产者，也就是发送消息的一方</p></li><li><p><strong><code>consumer</code></strong>：消费者，也就是消费消息的一方</p></li><li><p><strong><code>queue</code></strong>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</p></li><li><p><strong><code>exchange</code></strong>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</p></li><li><p><strong><code>virtual host</code></strong>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</p></li></ul><p>上述这些东西都可以在RabbitMQ的管理控制台来管理，下一节我们就一起来学习控制台的使用。</p><h2 id="2-2-收发消息">2.2.收发消息</h2><h3 id="2-2-1-交换机">2.2.1.交换机</h3><p>我们打开Exchanges选项卡，可以看到已经存在很多交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Dc0VbMHYwoBM1ZxLdRtcAJTZnGc.png" alt=""></p><p>我们点击任意交换机，即可进入交换机详情页面。仍然会利用控制台中的publish message 发送一条消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TMlKboOgZom7Y7xfJ9CccgPdnNh.png" alt=""></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/BTUkbvuDVo29JDx9YURcYjhFnPc.png" alt=""></p><p>这里是由控制台模拟了生产者发送的消息。由于没有消费者存在，最终消息丢失了，这样说明交换机没有存储消息的能力。</p><h3 id="2-2-2-队列">2.2.2.队列</h3><p>我们打开<code>Queues</code>选项卡，新建一个队列：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/GvVobsp7uoSxfox0c0gcU14dnSc.png" alt=""></p><p>命名为<code>hello.queue1</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Ew31bOIBoo18dRxIFubcJva0nXf.png" alt=""></p><p>再以相同的方式，创建一个队列，密码为<code>hello.queue2</code>，最终队列列表如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/SmOobtVzSou586xV1a9cF11tn5d.png" alt=""></p><p>此时，我们再次向<code>amq.fanout</code>交换机发送一条消息。会发现消息依然没有到达队列！！</p><p>怎么回事呢？</p><p>发送到交换机的消息，只会路由到与其绑定的队列，因此仅仅创建队列是不够的，我们还需要将其与交换机绑定。</p><h3 id="2-2-3-绑定关系">2.2.3.绑定关系</h3><p>点击<code>Exchanges</code>选项卡，点击<code>amq.fanout</code>交换机，进入交换机详情页，然后点击<code>Bindings</code>菜单，在表单中填写要绑定的队列名称：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HZ2fbpinhoLs4AxqzudcTrSdnWD.png" alt=""></p><p>相同的方式，将hello.queue2也绑定到改交换机。</p><p>最终，绑定结果如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/WFcXbuLVzoa4NxxmZrycHEs8nwh.png" alt=""></p><h3 id="2-2-4-发送消息">2.2.4.发送消息</h3><p>再次回到exchange页面，找到刚刚绑定的<code>amq.fanout</code>，点击进入详情页，再次发送一条消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HzIWbJaR2oGiqwxypvocuQfYn0e.png" alt=""></p><p>回到<code>Queues</code>页面，可以发现<code>hello.queue</code>中已经有一条消息了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ZROjbesEYoIkqcxLYM2cl3lcnZf.png" alt=""></p><p>点击队列名称，进入详情页，查看队列详情，这次我们点击get message：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/XaPeboPQVovkH6xM453cTvqmnDe.png" alt=""></p><p>可以看到消息到达队列了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/BR8mbRZOkohqUAxbOUncGdZ1nde.png" alt=""></p><p>这个时候如果有消费者监听了MQ的<code>hello.queue1</code>或<code>hello.queue2</code>队列，自然就能接收到消息了。</p><h2 id="2-3-数据隔离">2.3.数据隔离</h2><h3 id="2-3-1-用户管理">2.3.1.用户管理</h3><p>点击<code>Admin</code>选项卡，首先会看到RabbitMQ控制台的用户管理界面：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/P27GbS0zAoWnPgx7LCQcFMlonBf.png" alt=""></p><p>这里的用户都是RabbitMQ的管理或运维人员。目前只有安装RabbitMQ时添加的<code>itheima</code>这个用户。仔细观察用户表格中的字段，如下：</p><ul><li><p><code>Name</code>：<code>itheima</code>，也就是用户名</p></li><li><p><code>Tags</code>：<code>administrator</code>，说明<code>itheima</code>用户是超级管理员，拥有所有权限</p></li><li><p><code>Can access virtual host</code>： <code>/</code>，可以访问的<code>virtual host</code>，这里的<code>/</code>是默认的<code>virtual host</code></p></li></ul><p>对于小型企业而言，出于成本考虑，我们通常只会搭建一套MQ集群，公司内的多个不同项目同时使用。这个时候为了避免互相干扰， 我们会利用<code>virtual host</code>的隔离特性，将不同项目隔离。一般会做两件事情：</p><ul><li><p>给每个项目创建独立的运维账号，将管理权限分离。</p></li><li><p>给每个项目创建不同的<code>virtual host</code>，将每个项目的数据隔离。</p></li></ul><p>比如，我们给黑马商城创建一个新的用户，命名为<code>hmall</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TbVRbsJaKoL3VSxFGVWcbfV0nbd.png" alt=""></p><p>你会发现此时hmall用户没有任何<code>virtual host</code>的访问权限：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/YCq6beky1oiD5yxR3klctQh3nCf.png" alt=""></p><p>别急，接下来我们就来授权。</p><h3 id="2-3-2-virtual-host">2.3.2.virtual host</h3><p>我们先退出登录：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Nf5AbO0mKo7RTixOUrUcdfWRn9e.png" alt=""></p><p>切换到刚刚创建的hmall用户登录，然后点击<code>Virtual Hosts</code>菜单，进入<code>virtual host</code>管理页：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/NWSObodw1oiLcHxYW1TcD4rBn4b.png" alt=""></p><p>可以看到目前只有一个默认的<code>virtual host</code>，名字为 <code>/</code>。</p><p> 我们可以给黑马商城项目创建一个单独的<code>virtual host</code>，而不是使用默认的<code>/</code>。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/GJwSbnpcEolw3cxtLU1cNzTcncc.png" alt=""></p><p>创建完成后如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/BC6EbcBTKoaE3cxoJDWc9sTmnkc.png" alt=""></p><p>由于我们是登录<code>hmall</code>账户后创建的<code>virtual host</code>，因此回到<code>users</code>菜单，你会发现当前用户已经具备了对<code>/hmall</code>这个<code>virtual host</code>的访问权限了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Gl4QbT3buoVEo9xTnK3cXkqAnbG.png" alt=""></p><p>此时，点击页面右上角的<code>virtual host</code>下拉菜单，切换<code>virtual host</code>为 <code>/hmall</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/EOg4br4TooRmRpxCF9fcfhtkn6g.png" alt=""></p><p>然后再次查看queues选项卡，会发现之前的队列已经看不到了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Xs2hbPZzTojKP0xNWpkcBZuin0g.png" alt=""></p><p>这就是基于<code>virtual host </code>的隔离效果。</p><h1 id="3-SpringAMQP">3.SpringAMQP</h1><p>将来我们开发业务功能的时候，肯定不会在控制台收发消息，而是应该基于编程的方式。由于<code>RabbitMQ</code>采用了AMQP协议，因此它具备跨语言的特性。任何语言只要遵循AMQP协议收发消息，都可以与<code>RabbitMQ</code>交互。并且<code>RabbitMQ</code>官方也提供了各种不同语言的客户端。</p><p>但是，RabbitMQ官方提供的Java客户端编码相对复杂，一般生产环境下我们更多会结合Spring来使用。而Spring的官方刚好基于RabbitMQ提供了这样一套消息收发的模板工具：SpringAMQP。并且还基于SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAmqp的官方地址：</p><p>SpringAMQP提供了三个功能：</p><ul><li><p>自动声明队列、交换机及其绑定关系</p></li><li><p>基于注解的监听器模式，异步接收消息</p></li><li><p>封装了RabbitTemplate工具，用于发送消息</p></li></ul><p>这一章我们就一起学习一下，如何利用SpringAMQP实现对RabbitMQ的消息收发。</p><h2 id="3-1-导入Demo工程">3.1.导入Demo工程</h2><p>在课前资料给大家提供了一个Demo工程，方便我们学习SpringAMQP的使用：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/NTJubEDiVovAn5xS4SScLUUjn4u-175603011395640.png" alt=""></p><p>将其复制到你的工作空间，然后用Idea打开，项目结构如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TWK8bTyJmoRYi2xTzy1cBTGgnyh-175603011395641.png" alt=""></p><p>包括三部分：</p><ul><li><p>mq-demo：父工程，管理项目依赖</p></li><li><p>publisher：消息的发送者</p></li><li><p>consumer：消息的消费者</p></li></ul><p>在mq-demo这个父工程中，已经配置好了SpringAMQP相关的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>publisher<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此，子工程中就可以直接使用SpringAMQP了。</p><h2 id="3-2-快速入门">3.2.快速入门</h2><p>在之前的案例中，我们都是经过交换机发送消息到队列，不过有时候为了测试方便，我们也可以直接向队列发送消息，跳过交换机。</p><p>在入门案例中，我们就演示这样的简单模型，如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-6-175603011395642.png" alt=""></p><p>也就是：</p><ul><li><p>publisher直接发送消息到队列</p></li><li><p>消费者监听并处理队列中的消息</p></li></ul><blockquote><p><strong>注意</strong>：这种模式一般测试使用，很少在生产中使用。</p></blockquote><p>为了方便测试，我们现在控制台新建一个队列：simple.queue</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Pcxnbpl73o8QGwxN30ickh1Gn8f-175603011395643.png" alt=""></p><p>添加成功：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/IUojbN003ocDoyxs4EUc9sopnFP-175603011395644.png" alt=""></p><p>接下来，我们就可以利用Java代码收发消息了。</p><h3 id="3-2-1-消息发送">3.2.1.消息发送</h3><p>首先配置MQ地址，在<code>publisher</code>服务的<code>application.yml</code>中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在<code>publisher</code>服务中编写测试类<code>SpringAmqpTest</code>，并利用<code>RabbitTemplate</code>实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.publisher.amqp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开控制台，可以看到消息已经发送到队列中：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/N8Nsbeatqo5bGUx7OWJc4M1Anke-175603011395647.png" alt=""></p><p>接下来，我们再来实现消息接收。</p><h3 id="3-2-2-消息接收">3.2.2.消息接收</h3><p>首先配置MQ地址，在<code>consumer</code>服务的<code>application.yml</code>中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在<code>consumer</code>服务的<code>com.itheima.consumer.listener</code>包中新建一个类<code>SpringRabbitListener</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">        <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span></span><br><span class="line">    <span class="comment">// 可以看到方法体中接收的就是消息体的内容</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-测试">3.2.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息。最终consumer收到消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Vbf6b35dyoJb2HxdS8Nc7GI1nOf-175603011395646.png" alt=""></p><h2 id="3-3-WorkQueues模型">3.3.WorkQueues模型</h2><p>Work queues，任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-7-175603011395645.png" alt=""></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，<strong>多个消费者共同处理消息处理，消息处理的速度就能大大提高</strong>了。</p><p>接下来，我们就来模拟这样的场景。</p><p>首先，我们在控制台创建一个新的队列，命名为<code>work.queue</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HzN7btEXko5VcSxTLx7ca8egnhu-175603011395649.png" alt=""></p><h3 id="3-3-1-消息发送">3.3.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息，每20毫秒发送一次，相当于每秒发送50条消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-消息接收">3.3.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这两消费者，都设置了<code>Thead.sleep</code>，模拟任务耗时：</p><ul><li><p>消费者1 sleep了20毫秒，相当于每秒钟处理50个消息</p></li><li><p>消费者2 sleep了200毫秒，相当于每秒处理5个消息</p></li></ul><h3 id="3-3-3-测试">3.3.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>最终结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_0】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.869555300</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_1】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.884518</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_2】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.907454400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_4】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.953332100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_6】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.997867300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_8】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.042178700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_3】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.086478800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_10】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.087476600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_12】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.132578300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_14】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.175851200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_16】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.218533400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_18】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.261322900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_5】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.287003700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_20】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.304412400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_22】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.349950100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_24】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.394533900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_26】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.439876500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_28】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.482937800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_7】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.488977100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_30】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.526409300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_32】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.572148</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_34】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.618264800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_36】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.660780600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_9】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.689189300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_38】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.705261</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_40】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.746927300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_42】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.789835</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_44】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.834393100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_46】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.875312100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_11】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.889969500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_48】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.920702500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_13】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.090725900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_15】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.293060600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_17】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.493748</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_19】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.696635100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_21】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.896809700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_23】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.099533400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_25】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.301446400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_27】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.504999100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_29】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.705702500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_31】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.906601200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_33】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.108118500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_35】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.308945400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_37】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.511547700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_39】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.714038400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_41】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.916192700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_43】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.116286400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_45】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.318055100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_47】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.520656400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_49】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.723106700</span></span><br></pre></td></tr></table></figure><p>可以看到消费者1和消费者2竟然每人消费了25条消息：</p><ul><li><p>消费者1很快完成了自己的25条消息</p></li><li><p>消费者2却在缓慢的处理自己的25条消息。</p></li></ul><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。导致1个消费者空闲，另一个消费者忙的不可开交。没有充分利用每一个消费者的能力，最终消息处理的耗时远远超过了1秒。这样显然是有问题的。</p><h3 id="3-3-4-能者多劳">3.3.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><p>再次测试，发现结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_0】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.659664200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_1】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.680610</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_2】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.703625</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_3】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.724330100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_4】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.746651100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_5】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.768401400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_6】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.790511400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_7】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.812559800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_8】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.834500600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_9】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.857438800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_10】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.880379600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_11】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.899327100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_12】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.922828400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_13】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.945617400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_14】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.968942500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_15】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.992215400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_16】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.013325600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_17】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.035687100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_18】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.058188</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_19】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.081208400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_20】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.103406200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_21】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.123827300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_22】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.146165100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_23】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.168828300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_24】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.191769500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_25】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.214839100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_26】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.238998700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_27】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.259772600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_28】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.284131800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_29】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.306190600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_30】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.325315800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_31】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.347012500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_32】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.368508600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_33】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.391785100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_34】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.416383800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_35】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.439019</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_36】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.461733900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_37】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.485990</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_38】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.509219900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_39】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.523683400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_40】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.547412100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_41】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.571191800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_42】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.593024600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_43】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.616731800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_44】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.640317</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_45】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.663111100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_46】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.686727</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_47】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.709266500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_48】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.725884900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_49】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.746299900</span></span><br></pre></td></tr></table></figure><p>可以发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，只处理了6条消息。而最终总的执行耗时也在1秒左右，大大提升。</p><p>正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题。</p><h3 id="3-3-5-总结">3.3.5.总结</h3><p>Work模型的使用：</p><ul><li><p>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</p></li><li><p>通过设置prefetch来控制消费者预取的消息数量</p></li></ul><h2 id="3-4-交换机类型">3.4.交换机类型</h2><p>在之前的两个测试案例中，都没有交换机，生产者直接发送消息到队列。而一旦引入交换机，消息发送的模式会有很大变化：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-8-175603011395648.png" alt=""></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li><p><strong>Publisher</strong>：生产者，不再发送消息到队列中，而是发给交换机</p></li><li><p><strong>Exchange</strong>：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p></li><li><p><strong>Queue</strong>：消息队列也与以前一样，接收消息、缓存消息。不过队列一定要与交换机绑定。</p></li><li><p><strong>Consumer</strong>：消费者，与以前一样，订阅队列，没有变化</p></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>交换机的类型有四种：</p><ul><li><p><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</p></li><li><p><strong>Direct</strong>：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列</p></li><li><p><strong>Topic</strong>：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</p></li><li><p><strong>Headers</strong>：头匹配，基于MQ的消息头匹配，用的较少。</p></li></ul><p>课堂中，我们讲解前面的三种交换机模式。</p><h2 id="3-5-Fanout交换机">3.5.Fanout交换机</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p>在广播模式下，消息发送流程是这样的：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Z0PrbLnmnocBcyx8Xn0cyIShnjb-175603011395650.png" alt=""></p><ul><li><p>1）  可以有多个队列</p></li><li><p>2）  每个队列都要绑定到Exchange（交换机）</p></li><li><p>3）  生产者发送的消息，只能发送到交换机</p></li><li><p>4）  交换机把消息发送给绑定过的所有队列</p></li><li><p>5）  订阅队列的消费者都能拿到消息</p></li></ul><p>我们的计划是这样的：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Reynb5FGbosgNVxHA1HclKlAnfg-175603011395652.png" alt=""></p><ul><li><p>创建一个名为<code> hmall.fanout</code>的交换机，类型是<code>Fanout</code></p></li><li><p>创建两个队列<code>fanout.queue1</code>和<code>fanout.queue2</code>，绑定到交换机<code>hmall.fanout</code></p></li></ul><h3 id="3-5-1-声明队列和交换机">3.5.1.声明队列和交换机</h3><p>在控制台创建队列<code>fanout.queue1</code>:</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TvF5bHPaWowb7exZc6LcFhsPnSr-175603011395651.png" alt=""></p><p>在创建一个队列<code>fanout.queue2</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/U4PnbzhFtogqyIxrvOycO9xLnOe-175603011395654.png" alt=""></p><p>然后再创建一个交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Jpc3b21AmodhVdx1pdIceYV7nHg-175603011395653.png" alt=""></p><p>然后绑定两个队列到交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/MlREb8DvBoFHmJxFiEJciMLVn8b-175603011395655.png" alt=""></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ReCibIyUDoZbmXx4rJecltt7n6f-175603011395656.png" alt=""></p><h3 id="3-5-2-消息发送">3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-消息接收">3.5.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-总结">3.5.4.总结</h3><p>交换机的作用是什么？</p><ul><li><p>接收publisher发送的消息</p></li><li><p>将消息按照规则路由到与之绑定的队列</p></li><li><p>不能缓存消息，路由失败，消息丢失</p></li><li><p>FanoutExchange的会将消息路由到每个绑定的队列</p></li></ul><h2 id="3-6-Direct交换机">3.6.Direct交换机</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/El3hbCOh3ohMT2xatZJcpcqwnDc-175603011395657.png" alt=""></p><p>在Direct模型下：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</p></li><li><p>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</p></li></ul><p><strong>案例需求如图</strong>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/SschbFsTao91PvxfZWKc6L54nkd-175603011395658.png" alt=""></p><ol><li><p> 声明一个名为<code>hmall.direct</code>的交换机</p></li><li><p>声明队列<code>direct.queue1</code>，绑定<code>hmall.direct</code>，<code>bindingKey</code>为<code>blud</code>和<code>red</code></p></li><li><p>声明队列<code>direct.queue2</code>，绑定<code>hmall.direct</code>，<code>bindingKey</code>为<code>yellow</code>和<code>red</code></p></li><li><p> 在<code>consumer</code>服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2 </p></li><li><p> 在publisher中编写测试方法，向<code>hmall.direct</code>发送消息 </p></li></ol><h3 id="3-6-1-声明队列和交换机">3.6.1.声明队列和交换机</h3><p>首先在控制台声明两个队列<code>direct.queue1</code>和<code>direct.queue2</code>，这里不再展示过程：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/XeRPbclP1odEO1xa22Hc50Non6p-175603011395659.png" alt=""></p><p>然后声明一个direct类型的交换机，命名为<code>hmall.direct</code>:</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/SvpDbCaV8oXzzpx4oUScSftLnzf-175603011395660.png" alt=""></p><p>然后使用<code>red</code>和<code>blue</code>作为key，绑定<code>direct.queue1</code>到<code>hmall.direct</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/UIjhbp9j8op6Uux1MaqcxAF7nEg-175603011395661.png" alt=""></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Ua6Nb5S5yoV2dGxOm5gcGFNonBb-175603011395662.png" alt=""></p><p>同理，使用<code>red</code>和<code>yellow</code>作为key，绑定<code>direct.queue2</code>到<code>hmall.direct</code>，步骤略，最终结果：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ChembAGFOoGUquxlMvhcJcn7nCg-175603011395663.png" alt=""></p><h3 id="3-6-2-消息接收">3.6.2.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-消息发送">3.6.3.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于使用的red这个key，所以两个消费者都收到了消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/QrjCbcq13oBpB3x9uoxcvK0mngh-175603011395664.png" alt=""></p><p>我们再切换为blue这个key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;最新报道，哥斯拉是居民自治巨型气球，虚惊一场！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现，只有消费者1收到了消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/YyVGb2Z7BoWu2exjQGMc15BRnwf-175603011395665.png" alt=""></p><h3 id="3-6-4-总结">3.6.4.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li><p>Fanout交换机将消息路由给每一个与之绑定的队列</p></li><li><p>Direct交换机根据RoutingKey判断路由给哪个队列</p></li><li><p>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</p></li></ul><h2 id="3-7-Topic交换机">3.7.Topic交换机</h2><h3 id="3-7-1-说明">3.7.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。</p><p>只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>BindingKey</code> 的时候使用通配符！</p><p><code>BindingKey</code> 一般都是有一个或多个单词组成，多个单词之间以<code>.</code>分割，例如： <code>item.insert</code></p><p>通配符规则：</p><ul><li><p><code>#</code>：匹配一个或多个词</p></li><li><p><code>*</code>：匹配不多不少恰好1个词</p></li></ul><p>举例：</p><ul><li><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p></li><li><p><code>item.*</code>：只能匹配<code>item.spu</code></p></li></ul><p>图示：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/QFzzbeUUjoVf0RxfS1AcgT7LnUe-175603011395667.png" alt=""></p><p>假如此时publisher发送的消息使用的<code>RoutingKey</code>共有四种：</p><ul><li><p><code>china.news </code>代表有中国的新闻消息；</p></li><li><p><code>china.weather</code> 代表中国的天气消息；</p></li><li><p><code>japan.news</code> 则代表日本新闻</p></li><li><p><code>japan.weather</code> 代表日本的天气消息；</p></li></ul><p>解释：</p><ul><li><p><code>topic.queue1</code>：绑定的是<code>china.#</code> ，凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到，包括：</p><ul><li><p><code>china.news</code></p></li><li><p><code>china.weather</code></p></li></ul></li><li><p><code>topic.queue2</code>：绑定的是<code>#.news</code> ，凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括:</p><ul><li><p><code>china.news</code></p></li><li><p><code>japan.news</code></p></li></ul></li></ul><p>接下来，我们就按照上图所示，来演示一下Topic交换机的用法。</p><p>首先，在控制台按照图示例子创建队列、交换机，并利用通配符绑定队列和交换机。此处步骤略。最终结果如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/H2ZubsD1woeetoxIHMjcuFRanJd-175603011395666.png" alt=""></p><h3 id="3-7-2-消息发送">3.7.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topicExchange</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-3-消息接收">3.7.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-4-总结">3.7.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li><p>Topic交换机接收的消息RoutingKey必须是多个单词，以 <strong><code>.</code></strong> 分割</p></li><li><p>Topic交换机与队列绑定时的bindingKey可以指定通配符</p></li><li><p><code>#</code>：代表0个或多个词</p></li><li><p><code>*</code>：代表1个词</p></li></ul><h2 id="3-8-声明队列和交换机">3.8.声明队列和交换机</h2><p>在之前我们都是基于RabbitMQ控制台来创建队列、交换机。但是在实际开发时，队列和交换机是程序员定义的，将来项目上线，又要交给运维去创建。那么程序员就需要把程序中运行的所有队列和交换机都写下来，交给运维。在这个过程中是很容易出现错误的。</p><p>因此推荐的做法是由程序启动时检查队列和交换机是否存在，如果不存在自动创建。</p><h3 id="3-8-1-基本API">3.8.1.基本API</h3><p>SpringAMQP提供了一个Queue类，用来创建队列：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/LMnRbQuaIoHHrkxByzLcsSPFnjh-175603011395668.png" alt=""></p><p>SpringAMQP还提供了一个Exchange接口，来表示所有不同类型的交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/RwxPbRd0boAOLhxx6qzcXQPqnKd-175603011395669.png" alt=""></p><p>我们可以自己创建队列和交换机，不过SpringAMQP还提供了ExchangeBuilder来简化这个过程：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/JDYsbeQn2o2P81xGpvOc5znfn7b-175603011395670.png" alt=""></p><p>而在绑定队列和交换机时，则需要使用BindingBuilder来创建Binding对象：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/XV57bsutQovJ1kxafTUcqsFWnkh-175603011395672.png" alt=""></p><h3 id="3-8-2-fanout示例">3.8.2.fanout示例</h3><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;hmall.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-2-direct示例">3.8.2.direct示例</h3><p>direct模式由于要绑定多个KEY，会非常麻烦，每一个Key都要编写一个binding：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Direct类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;hmall.direct&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithRed</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithBlue</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithRed</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithYellow</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-4-基于注解声明">3.8.4.基于注解声明</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>例如，我们同样声明Direct模式的交换机和队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是简单多了。</p><p>再试试Topic模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-消息转换器">3.9.消息转换器</h2><p>Spring的消息发送代码接收的消息体是一个Object：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/AEDob0gXNozbGTxWbXGceQV3nAf-175603011395671.png" alt=""></p><p>而在数据传输时，它会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li><p>数据体积过大</p></li><li><p>有安全漏洞</p></li><li><p>可读性差</p></li></ul><p>我们来测试一下。</p><h3 id="3-9-1-测试默认转换器">3.9.1.测试默认转换器</h3><p>1）创建测试队列</p><p>首先，我们在consumer服务中声明一个新的配置类：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/UZB0bgLppoZosXxtKvkc1ts6nMh-175603011395673.png" alt=""></p><p>利用@Bean的方式创建一个队列，</p><p>具体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">objectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里我们先不要给这个队列添加消费者，我们要查看消息体的格式。</p><p>重启consumer服务以后，该队列就会被自动创建出来了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ROnHbyCujojbQ1xYIVlchnNznsh-175603011395674.png" alt=""></p><p>2）发送消息</p><p>我们在publisher模块的SpringAmqpTest中新增一个消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送消息后查看控制台：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/QPu1bYlfHot8wmxXxp8cB9Qzn9d-175603011395675.png" alt=""></p><p>可以看到消息格式非常不友好。</p><h3 id="3-9-2-配置JSON转换器">3.9.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>在<code>publisher</code>和<code>consumer</code>两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，如果项目中引入了<code>spring-boot-starter-web</code>依赖，则无需再次引入<code>Jackson</code>依赖。</p><p>配置消息转换器，在<code>publisher</code>和<code>consumer</code>两个服务的启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jackson2JsonMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jackson2JsonMessageConverter.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jackson2JsonMessageConverter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息转换器中添加的messageId可以便于我们将来做幂等性判断。</p><p>此时，我们到MQ控制台<strong>删除</strong><code>object.queue</code>中的旧的消息。然后再次执行刚才的消息发送的代码，到MQ的控制台查看消息结构：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/AEhhb30KoosYHRxuAQIcHXUSnLh-175603011395677.png" alt=""></p><h3 id="3-9-3-消费者接收Object">3.9.3.消费者接收Object</h3><p>我们在consumer服务中定义一个新的消费者，publisher是用Map发送，那么消费者也一定要用Map接收，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(Map&lt;String, Object&gt; msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到object.queue消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-业务改造">4.业务改造</h1><p>案例需求：改造余额支付功能，将支付成功后基于OpenFeign的交易服务的更新订单状态接口的同步调用，改为基于RabbitMQ的异步通知。</p><p>如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-175603011395676.png" alt=""></p><p>说明：目前没有通知服务和积分服务，因此我们只关注交易服务，步骤如下：</p><ul><li><p>定义<code>direct</code>类型交换机，命名为<code>pay.direct</code></p></li><li><p>定义消息队列，命名为<code>trade.pay.success.queue</code></p></li><li><p>将<code>trade.pay.success.queue</code>与<code>pay.direct</code>绑定，<code>BindingKey</code>为<code>pay.success</code></p></li><li><p>支付成功时不再调用交易服务更新订单状态的接口，而是发送一条消息到<code>pay.direct</code>，发送消息的<code>RoutingKey</code>  为<code>pay.success</code>，消息内容是订单id</p></li><li><p>交易服务监听<code>trade.pay.success.queue</code>队列，接收到消息后更新订单状态为已支付</p></li></ul><h2 id="4-1-配置MQ">4.1.配置MQ</h2><p>不管是生产者还是消费者，都需要配置MQ的基本信息。分为两步：</p><p>1）添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--消息发送--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）配置MQ地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><h2 id="4-2-接收消息">4.2.接收消息</h2><p>在trade-service服务中定义一个消息监听类：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/S7RZbgUBMoqrTZxUXMicKsf3n9j-175603011395678.png" alt=""></p><p>其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayStatusListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;trade.pay.success.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;pay.topic&quot;),</span></span><br><span class="line"><span class="meta">            key = &quot;pay.success&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenPaySuccess</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        orderService.markOrderPaySuccess(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-发送消息">4.3.发送消息</h2><p>修改<code>pay-service</code>服务下的<code>com.hmall.pay.service.impl.PayOrderServiceImpl</code>类中的<code>tryPayOrderByBalance</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryPayOrderByBalance</span><span class="params">(PayOrderDTO payOrderDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询支付单</span></span><br><span class="line">    <span class="type">PayOrder</span> <span class="variable">po</span> <span class="operator">=</span> getById(payOrderDTO.getId());</span><br><span class="line">    <span class="comment">// 2.判断状态</span></span><br><span class="line">    <span class="keyword">if</span>(!PayStatus.WAIT_BUYER_PAY.equalsValue(po.getStatus()))&#123;</span><br><span class="line">        <span class="comment">// 订单不是未支付，状态异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试扣减余额</span></span><br><span class="line">    userClient.deductMoney(payOrderDTO.getPw(), po.getAmount());</span><br><span class="line">    <span class="comment">// 4.修改支付单状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> markPayOrderSuccess(payOrderDTO.getId(), LocalDateTime.now());</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.修改订单状态</span></span><br><span class="line">    <span class="comment">// tradeClient.markOrderPaySuccess(po.getBizOrderNo());</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;pay.direct&quot;</span>, <span class="string">&quot;pay.success&quot;</span>, po.getBizOrderNo());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;支付成功的消息发送失败，支付单id：&#123;&#125;， 交易单id：&#123;&#125;&quot;</span>, po.getId(), po.getBizOrderNo(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-练习">5.练习</h1><h2 id="5-1-抽取共享的MQ配置">5.1.抽取共享的MQ配置</h2><p>将MQ配置抽取到Nacos中管理，微服务中直接使用共享配置。</p><h2 id="5-2-改造下单功能">5.2.改造下单功能</h2><p>改造下单功能，将基于OpenFeign的清理购物车同步调用，改为基于RabbitMQ的异步通知：</p><ul><li><p>定义topic类型交换机，命名为<code>trade.topic</code></p></li><li><p>定义消息队列，命名为<code>cart.clear.queue</code></p></li><li><p>将<code>cart.clear.queue</code>与<code>trade.topic</code>绑定，<code>BindingKey</code>为<code>order.create</code></p></li><li><p>下单成功时不再调用清理购物车接口，而是发送一条消息到<code>trade.topic</code>，发送消息的<code>RoutingKey</code>  为<code>order.create</code>，消息内容是下单的具体商品、当前登录用户信息</p></li><li><p>购物车服务监听<code>cart.clear.queue</code>队列，接收到消息后清理指定用户的购物车中的指定商品</p></li></ul><h2 id="5-3-登录信息传递优化">5.3.登录信息传递优化</h2><p>某些业务中，需要根据登录用户信息处理业务，而基于MQ的异步调用并不会传递登录用户信息。前面我们的做法比较麻烦，至少要做两件事：</p><ul><li><p>消息发送者在消息体中传递登录用户</p></li><li><p>消费者获取消息体中的登录用户，处理业务</p></li></ul><p>这样做不仅麻烦，而且编程体验也不统一，毕竟我们之前都是使用UserContext来获取用户。</p><p>大家思考一下：有没有更优雅的办法传输登录用户信息，让使用MQ的人无感知，依然采用UserContext来随时获取用户。</p><p>参考资料：</p><iframe src="https://docs.spring.io/spring-amqp/docs/2.4.14/reference/html/#post-processing" sandbox="allow-scripts allow-same-origin allow-presentation allow-forms allow-popups allow-downloads" allowfullscreen allow="encrypted-media; fullscreen; autoplay" referrerpolicy="strict-origin-when-cross-origin" frameborder="0" style="width: 100%; min-height: 461px; border-radius: 8px;"></iframe>]]></content>
    
    
    <summary type="html">MQ基础的学习路线，包括MQ的概念、MQ的分类、MQ的使用场景、MQ的使用方式等。</summary>
    
    
    
    <category term="学习笔记" scheme="https://u7u7.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="微服务" scheme="https://u7u7.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="MQ" scheme="https://u7u7.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://u7u7.top/posts/0.html"/>
    <id>https://u7u7.top/posts/0.html</id>
    <published>2025-08-13T08:33:07.880Z</published>
    <updated>2025-08-24T14:46:46.173Z</updated>
    
    <content type="html"><![CDATA[<p>对应B站视频：</p><iframe src="https://player.bilibili.com/player.html?bvid=1S142197x7&p=85&vd_source=1ff0c1b434581723cf696ccc2f59ceaa" sandbox="allow-scripts allow-same-origin allow-presentation allow-forms allow-popups allow-downloads" allowfullscreen allow="encrypted-media; fullscreen; autoplay" referrerpolicy="strict-origin-when-cross-origin" frameborder="0" style="width: 100%; min-height: 292px; border-radius: 8px;"></iframe><p>微服务一旦拆分，必然涉及到服务之间的相互调用，目前我们服务之间调用采用的都是基于OpenFeign的调用。这种调用中，调用者发起请求后需要<strong>等待</strong>服务提供者执行业务返回结果后，才能继续执行后面的业务。也就是说调用者在调用过程中处于阻塞状态，因此我们称这种调用方式为<strong>同步调用</strong>，也可以叫<strong>同步通讯</strong>。但在很多场景下，我们可能需要采用<strong>异步通讯</strong>的方式，为什么呢？</p><p>我们先来看看什么是同步通讯和异步通讯。如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/B82Sbxk3DoAsVTx7KV1cXjz3nsg-175603011396879.png" alt=""></p><p>解读：</p><ul><li><p>同步通讯：就如同打视频电话，双方的交互都是实时的。因此同一时刻你只能跟一个人打视频电话。</p></li><li><p>异步通讯：就如同发微信聊天，双方的交互不是实时的，你不需要立刻给对方回应。因此你可以多线操作，同时跟多人聊天。</p></li></ul><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发微信可以同时与多个人收发微信，但是往往响应会有延迟。</p><p>所以，如果我们的业务需要实时得到服务提供方的响应，则应该选择同步通讯（同步调用）。而如果我们追求更高的效率，并且不需要实时响应，则应该选择异步通讯（异步调用）。<br> </p><p>同步调用的方式我们已经学过了，之前的OpenFeign调用就是。但是：</p><ul><li><p>异步调用又该如何实现？</p></li><li><p>哪些业务适合用异步调用来实现呢？</p></li></ul><p>通过今天的学习你就能明白这些问题了。</p><h1 id="1-初识MQ">1.初识MQ</h1><h2 id="1-1-同步调用">1.1.同步调用</h2><p>之前说过，我们现在基于OpenFeign的调用都属于是同步调用，那么这种方式存在哪些问题呢？</p><p>举个例子，我们以昨天留给大家作为作业的<strong>余额支付功能</strong>为例来分析，首先看下整个流程：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram.png" alt=""></p><p>目前我们采用的是基于OpenFeign的同步调用，也就是说业务执行流程是这样的：</p><ul><li><p>支付服务需要先调用用户服务完成余额扣减</p></li><li><p>然后支付服务自己要更新支付流水单的状态</p></li><li><p>然后支付服务调用交易服务，更新业务订单状态为已支付</p></li></ul><p>三个步骤依次执行。</p><p>这其中就存在3个问题：</p><p><strong>第一</strong>，<strong>拓展性差</strong></p><p>我们目前的业务相对简单，但是随着业务规模扩大，产品的功能也在不断完善。</p><p>在大多数电商业务中，用户支付成功后都会以短信或者其它方式通知用户，告知支付成功。假如后期产品经理提出这样新的需求，你怎么办？是不是要在上述业务中再加入通知用户的业务？</p><p>某些电商项目中，还会有积分或金币的概念。假如产品经理提出需求，用户支付成功后，给用户以积分奖励或者返还金币，你怎么办？是不是要在上述业务中再加入积分业务、返还金币业务？</p><p>。。。</p><p>最终你的支付业务会越来越臃肿：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-1.png" alt=""></p><p>也就是说每次有新的需求，现有支付逻辑都要跟着变化，代码经常变动，不符合开闭原则，拓展性不好。</p><p><strong>第二</strong>，<strong>性能下降</strong></p><p>由于我们采用了同步调用，调用者需要等待服务提供者执行完返回结果后，才能继续向下执行，也就是说每次远程调用，调用者都是阻塞等待状态。最终整个业务的响应时长就是每次远程调用的执行时长之和：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-2.png" alt=""></p><p>假如每个微服务的执行时长都是50ms，则最终整个业务的耗时可能高达300ms，性能太差了。</p><p><strong>第三，级联失败</strong></p><p>由于我们是基于OpenFeign调用交易服务、通知服务。当交易服务、通知服务出现故障时，整个事务都会回滚，交易失败。</p><p>这其实就是同步调用的<strong>级联失败</strong>问题。</p><p>但是大家思考一下，我们假设用户余额充足，扣款已经成功，此时我们应该确保支付流水单更新为已支付，确保交易成功。毕竟收到手里的钱没道理再退回去吧。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/CSCWbPDPvo6OVux4ZKecjLVFnsd.png" alt=""></p><p>因此，这里不能因为短信通知、更新订单状态失败而回滚整个事务。</p><p>综上，同步调用的方式存在下列问题：</p><ul><li><p>拓展性差</p></li><li><p>性能下降</p></li><li><p>级联失败</p></li></ul><p>而要解决这些问题，我们就必须用<strong>异步调用</strong>的方式来代替<strong>同步调用</strong>。</p><h2 id="1-2-异步调用">1.2.异步调用</h2><p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p><ul><li><p>消息发送者：投递消息的人，就是原来的调用方</p></li><li><p>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</p></li><li><p>消息接收者：接收和处理消息的人，就是原来的服务提供方</p></li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-3.png" alt=""></p><p>在异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理。</p><p>这样，发送消息的人和接收消息的人就完全解耦了。</p><p>还是以余额支付业务为例：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-4.png" alt=""></p><p>除了扣减余额、更新支付流水单状态以外，其它调用逻辑全部取消。而是改为发送一条消息到Broker。而相关的微服务都可以订阅消息通知，一旦消息到达Broker，则会分发给每一个订阅了的微服务，处理各自的业务。</p><p>假如产品经理提出了新的需求，比如要在支付成功后更新用户积分。支付代码完全不用变更，而仅仅是让积分服务也订阅消息即可：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-5.png" alt=""></p><p>不管后期增加了多少消息订阅者，作为支付服务来讲，执行问扣减余额、更新支付流水状态后，发送消息即可。业务耗时仅仅是这三部分业务耗时，仅仅100ms，大大提高了业务性能。</p><p>另外，不管是交易服务、通知服务，还是积分服务，他们的业务与支付关联度低。现在采用了异步调用，解除了耦合，他们即便执行过程中出现了故障，也不会影响到支付服务。</p><p>综上，异步调用的优势包括：</p><ul><li><p>耦合度更低</p></li><li><p>性能更好</p></li><li><p>业务拓展性强</p></li><li><p>故障隔离，避免级联失败</p></li></ul><p>当然，异步通信也并非完美无缺，它存在下列缺点：</p><ul><li><p>完全依赖于Broker的可靠性、安全性和性能</p></li><li><p>架构复杂，后期维护和调试麻烦</p></li></ul><h2 id="1-3-技术选型">1.3.技术选型</h2><p>消息Broker，目前常见的实现方案就是消息队列（MessageQueue），简称为MQ.</p><p>目比较常见的MQ实现：</p><ul><li><p>ActiveMQ</p></li><li><p>RabbitMQ</p></li><li><p>RocketMQ</p></li><li><p>Kafka</p></li></ul><p>几种常见MQ的对比：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/d8e1c874b5db80e3913a404a2cb59a89.jpeg" alt="在这里插入图片描述"></p><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p><p>追求可靠性：RabbitMQ、RocketMQ</p><p>追求吞吐能力：RocketMQ、Kafka</p><p>追求消息低延迟：RabbitMQ、Kafka</p><p>据统计，目前国内消息队列使用最多的还是RabbitMQ，再加上其各方面都比较均衡，稳定性也好，因此我们课堂上选择RabbitMQ来学习。</p><h1 id="2-RabbitMQ">2.RabbitMQ</h1><p>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：</p><p><a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p>接下来，我们就学习它的基本概念和基础用法。</p><h2 id="2-1-安装">2.1.安装</h2><p>我们同样基于Docker来安装RabbitMQ，使用下面的命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=itheima \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> --network hm-net\</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>如果拉取镜像困难的话，可以使用课前资料给大家准备的镜像，利用docker load命令加载：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/KWDWbLtlfodeGBxOs94c3JFdn9g.png" alt=""></p><p>可以看到在安装命令中有两个映射的端口：</p><ul><li><p>15672：RabbitMQ提供的管理控制台的端口</p></li><li><p>5672：RabbitMQ的消息发送处理接口</p></li></ul><p>安装完成后，我们访问 http://192.168.150.101:15672即可看到管理控制台。首次访问需要登录，默认的用户名和密码在配置文件中已经指定了。</p><p>登录后即可看到管理控制台总览页面：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/YNs9bu47Vo3o1gxnEw1cI9MxnUM.png" alt=""></p><p>RabbitMQ对应的架构如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HH6fbYlGsoySg1x34UBczqjZnSb.png" alt=""></p><p>其中包含几个概念：</p><ul><li><p><strong><code>publisher</code></strong>：生产者，也就是发送消息的一方</p></li><li><p><strong><code>consumer</code></strong>：消费者，也就是消费消息的一方</p></li><li><p><strong><code>queue</code></strong>：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</p></li><li><p><strong><code>exchange</code></strong>：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</p></li><li><p><strong><code>virtual host</code></strong>：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</p></li></ul><p>上述这些东西都可以在RabbitMQ的管理控制台来管理，下一节我们就一起来学习控制台的使用。</p><h2 id="2-2-收发消息">2.2.收发消息</h2><h3 id="2-2-1-交换机">2.2.1.交换机</h3><p>我们打开Exchanges选项卡，可以看到已经存在很多交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Dc0VbMHYwoBM1ZxLdRtcAJTZnGc.png" alt=""></p><p>我们点击任意交换机，即可进入交换机详情页面。仍然会利用控制台中的publish message 发送一条消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TMlKboOgZom7Y7xfJ9CccgPdnNh.png" alt=""></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/BTUkbvuDVo29JDx9YURcYjhFnPc.png" alt=""></p><p>这里是由控制台模拟了生产者发送的消息。由于没有消费者存在，最终消息丢失了，这样说明交换机没有存储消息的能力。</p><h3 id="2-2-2-队列">2.2.2.队列</h3><p>我们打开<code>Queues</code>选项卡，新建一个队列：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/GvVobsp7uoSxfox0c0gcU14dnSc.png" alt=""></p><p>命名为<code>hello.queue1</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Ew31bOIBoo18dRxIFubcJva0nXf.png" alt=""></p><p>再以相同的方式，创建一个队列，密码为<code>hello.queue2</code>，最终队列列表如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/SmOobtVzSou586xV1a9cF11tn5d.png" alt=""></p><p>此时，我们再次向<code>amq.fanout</code>交换机发送一条消息。会发现消息依然没有到达队列！！</p><p>怎么回事呢？</p><p>发送到交换机的消息，只会路由到与其绑定的队列，因此仅仅创建队列是不够的，我们还需要将其与交换机绑定。</p><h3 id="2-2-3-绑定关系">2.2.3.绑定关系</h3><p>点击<code>Exchanges</code>选项卡，点击<code>amq.fanout</code>交换机，进入交换机详情页，然后点击<code>Bindings</code>菜单，在表单中填写要绑定的队列名称：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HZ2fbpinhoLs4AxqzudcTrSdnWD.png" alt=""></p><p>相同的方式，将hello.queue2也绑定到改交换机。</p><p>最终，绑定结果如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/WFcXbuLVzoa4NxxmZrycHEs8nwh.png" alt=""></p><h3 id="2-2-4-发送消息">2.2.4.发送消息</h3><p>再次回到exchange页面，找到刚刚绑定的<code>amq.fanout</code>，点击进入详情页，再次发送一条消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HzIWbJaR2oGiqwxypvocuQfYn0e.png" alt=""></p><p>回到<code>Queues</code>页面，可以发现<code>hello.queue</code>中已经有一条消息了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ZROjbesEYoIkqcxLYM2cl3lcnZf.png" alt=""></p><p>点击队列名称，进入详情页，查看队列详情，这次我们点击get message：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/XaPeboPQVovkH6xM453cTvqmnDe.png" alt=""></p><p>可以看到消息到达队列了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/BR8mbRZOkohqUAxbOUncGdZ1nde.png" alt=""></p><p>这个时候如果有消费者监听了MQ的<code>hello.queue1</code>或<code>hello.queue2</code>队列，自然就能接收到消息了。</p><h2 id="2-3-数据隔离">2.3.数据隔离</h2><h3 id="2-3-1-用户管理">2.3.1.用户管理</h3><p>点击<code>Admin</code>选项卡，首先会看到RabbitMQ控制台的用户管理界面：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/P27GbS0zAoWnPgx7LCQcFMlonBf.png" alt=""></p><p>这里的用户都是RabbitMQ的管理或运维人员。目前只有安装RabbitMQ时添加的<code>itheima</code>这个用户。仔细观察用户表格中的字段，如下：</p><ul><li><p><code>Name</code>：<code>itheima</code>，也就是用户名</p></li><li><p><code>Tags</code>：<code>administrator</code>，说明<code>itheima</code>用户是超级管理员，拥有所有权限</p></li><li><p><code>Can access virtual host</code>： <code>/</code>，可以访问的<code>virtual host</code>，这里的<code>/</code>是默认的<code>virtual host</code></p></li></ul><p>对于小型企业而言，出于成本考虑，我们通常只会搭建一套MQ集群，公司内的多个不同项目同时使用。这个时候为了避免互相干扰， 我们会利用<code>virtual host</code>的隔离特性，将不同项目隔离。一般会做两件事情：</p><ul><li><p>给每个项目创建独立的运维账号，将管理权限分离。</p></li><li><p>给每个项目创建不同的<code>virtual host</code>，将每个项目的数据隔离。</p></li></ul><p>比如，我们给黑马商城创建一个新的用户，命名为<code>hmall</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TbVRbsJaKoL3VSxFGVWcbfV0nbd.png" alt=""></p><p>你会发现此时hmall用户没有任何<code>virtual host</code>的访问权限：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/YCq6beky1oiD5yxR3klctQh3nCf.png" alt=""></p><p>别急，接下来我们就来授权。</p><h3 id="2-3-2-virtual-host">2.3.2.virtual host</h3><p>我们先退出登录：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Nf5AbO0mKo7RTixOUrUcdfWRn9e.png" alt=""></p><p>切换到刚刚创建的hmall用户登录，然后点击<code>Virtual Hosts</code>菜单，进入<code>virtual host</code>管理页：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/NWSObodw1oiLcHxYW1TcD4rBn4b.png" alt=""></p><p>可以看到目前只有一个默认的<code>virtual host</code>，名字为 <code>/</code>。</p><p> 我们可以给黑马商城项目创建一个单独的<code>virtual host</code>，而不是使用默认的<code>/</code>。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/GJwSbnpcEolw3cxtLU1cNzTcncc.png" alt=""></p><p>创建完成后如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/BC6EbcBTKoaE3cxoJDWc9sTmnkc.png" alt=""></p><p>由于我们是登录<code>hmall</code>账户后创建的<code>virtual host</code>，因此回到<code>users</code>菜单，你会发现当前用户已经具备了对<code>/hmall</code>这个<code>virtual host</code>的访问权限了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Gl4QbT3buoVEo9xTnK3cXkqAnbG.png" alt=""></p><p>此时，点击页面右上角的<code>virtual host</code>下拉菜单，切换<code>virtual host</code>为 <code>/hmall</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/EOg4br4TooRmRpxCF9fcfhtkn6g.png" alt=""></p><p>然后再次查看queues选项卡，会发现之前的队列已经看不到了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Xs2hbPZzTojKP0xNWpkcBZuin0g.png" alt=""></p><p>这就是基于<code>virtual host </code>的隔离效果。</p><h1 id="3-SpringAMQP">3.SpringAMQP</h1><p>将来我们开发业务功能的时候，肯定不会在控制台收发消息，而是应该基于编程的方式。由于<code>RabbitMQ</code>采用了AMQP协议，因此它具备跨语言的特性。任何语言只要遵循AMQP协议收发消息，都可以与<code>RabbitMQ</code>交互。并且<code>RabbitMQ</code>官方也提供了各种不同语言的客户端。</p><p>但是，RabbitMQ官方提供的Java客户端编码相对复杂，一般生产环境下我们更多会结合Spring来使用。而Spring的官方刚好基于RabbitMQ提供了这样一套消息收发的模板工具：SpringAMQP。并且还基于SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAmqp的官方地址：</p><p>SpringAMQP提供了三个功能：</p><ul><li><p>自动声明队列、交换机及其绑定关系</p></li><li><p>基于注解的监听器模式，异步接收消息</p></li><li><p>封装了RabbitTemplate工具，用于发送消息</p></li></ul><p>这一章我们就一起学习一下，如何利用SpringAMQP实现对RabbitMQ的消息收发。</p><h2 id="3-1-导入Demo工程">3.1.导入Demo工程</h2><p>在课前资料给大家提供了一个Demo工程，方便我们学习SpringAMQP的使用：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/NTJubEDiVovAn5xS4SScLUUjn4u-175603011395640.png" alt=""></p><p>将其复制到你的工作空间，然后用Idea打开，项目结构如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TWK8bTyJmoRYi2xTzy1cBTGgnyh-175603011395641.png" alt=""></p><p>包括三部分：</p><ul><li><p>mq-demo：父工程，管理项目依赖</p></li><li><p>publisher：消息的发送者</p></li><li><p>consumer：消息的消费者</p></li></ul><p>在mq-demo这个父工程中，已经配置好了SpringAMQP相关的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>publisher<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此，子工程中就可以直接使用SpringAMQP了。</p><h2 id="3-2-快速入门">3.2.快速入门</h2><p>在之前的案例中，我们都是经过交换机发送消息到队列，不过有时候为了测试方便，我们也可以直接向队列发送消息，跳过交换机。</p><p>在入门案例中，我们就演示这样的简单模型，如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-6-175603011395642.png" alt=""></p><p>也就是：</p><ul><li><p>publisher直接发送消息到队列</p></li><li><p>消费者监听并处理队列中的消息</p></li></ul><blockquote><p><strong>注意</strong>：这种模式一般测试使用，很少在生产中使用。</p></blockquote><p>为了方便测试，我们现在控制台新建一个队列：simple.queue</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Pcxnbpl73o8QGwxN30ickh1Gn8f-175603011395643.png" alt=""></p><p>添加成功：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/IUojbN003ocDoyxs4EUc9sopnFP-175603011395644.png" alt=""></p><p>接下来，我们就可以利用Java代码收发消息了。</p><h3 id="3-2-1-消息发送">3.2.1.消息发送</h3><p>首先配置MQ地址，在<code>publisher</code>服务的<code>application.yml</code>中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在<code>publisher</code>服务中编写测试类<code>SpringAmqpTest</code>，并利用<code>RabbitTemplate</code>实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.publisher.amqp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开控制台，可以看到消息已经发送到队列中：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/N8Nsbeatqo5bGUx7OWJc4M1Anke-175603011395647.png" alt=""></p><p>接下来，我们再来实现消息接收。</p><h3 id="3-2-2-消息接收">3.2.2.消息接收</h3><p>首先配置MQ地址，在<code>consumer</code>服务的<code>application.yml</code>中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在<code>consumer</code>服务的<code>com.itheima.consumer.listener</code>包中新建一个类<code>SpringRabbitListener</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">        <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span></span><br><span class="line">    <span class="comment">// 可以看到方法体中接收的就是消息体的内容</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-测试">3.2.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息。最终consumer收到消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Vbf6b35dyoJb2HxdS8Nc7GI1nOf-175603011395646.png" alt=""></p><h2 id="3-3-WorkQueues模型">3.3.WorkQueues模型</h2><p>Work queues，任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-7-175603011395645.png" alt=""></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，<strong>多个消费者共同处理消息处理，消息处理的速度就能大大提高</strong>了。</p><p>接下来，我们就来模拟这样的场景。</p><p>首先，我们在控制台创建一个新的队列，命名为<code>work.queue</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/HzN7btEXko5VcSxTLx7ca8egnhu-175603011395649.png" alt=""></p><h3 id="3-3-1-消息发送">3.3.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息，每20毫秒发送一次，相当于每秒发送50条消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-消息接收">3.3.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这两消费者，都设置了<code>Thead.sleep</code>，模拟任务耗时：</p><ul><li><p>消费者1 sleep了20毫秒，相当于每秒钟处理50个消息</p></li><li><p>消费者2 sleep了200毫秒，相当于每秒处理5个消息</p></li></ul><h3 id="3-3-3-测试">3.3.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>最终结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_0】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.869555300</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_1】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.884518</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_2】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.907454400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_4】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.953332100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_6】<span class="number">21</span>:<span class="number">06</span>:<span class="number">00.997867300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_8】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.042178700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_3】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.086478800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_10】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.087476600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_12】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.132578300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_14】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.175851200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_16】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.218533400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_18】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.261322900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_5】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.287003700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_20】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.304412400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_22】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.349950100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_24】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.394533900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_26】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.439876500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_28】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.482937800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_7】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.488977100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_30】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.526409300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_32】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.572148</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_34】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.618264800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_36】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.660780600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_9】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.689189300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_38】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.705261</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_40】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.746927300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_42】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.789835</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_44】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.834393100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_46】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.875312100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_11】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.889969500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_48】<span class="number">21</span>:<span class="number">06</span>:<span class="number">01.920702500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_13】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.090725900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_15】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.293060600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_17】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.493748</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_19】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.696635100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_21】<span class="number">21</span>:<span class="number">06</span>:<span class="number">02.896809700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_23】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.099533400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_25】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.301446400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_27】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.504999100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_29】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.705702500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_31】<span class="number">21</span>:<span class="number">06</span>:<span class="number">03.906601200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_33】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.108118500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_35】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.308945400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_37】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.511547700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_39】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.714038400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_41】<span class="number">21</span>:<span class="number">06</span>:<span class="number">04.916192700</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_43】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.116286400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_45】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.318055100</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_47】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.520656400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_49】<span class="number">21</span>:<span class="number">06</span>:<span class="number">05.723106700</span></span><br></pre></td></tr></table></figure><p>可以看到消费者1和消费者2竟然每人消费了25条消息：</p><ul><li><p>消费者1很快完成了自己的25条消息</p></li><li><p>消费者2却在缓慢的处理自己的25条消息。</p></li></ul><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。导致1个消费者空闲，另一个消费者忙的不可开交。没有充分利用每一个消费者的能力，最终消息处理的耗时远远超过了1秒。这样显然是有问题的。</p><h3 id="3-3-4-能者多劳">3.3.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><p>再次测试，发现结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_0】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.659664200</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_1】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.680610</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_2】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.703625</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_3】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.724330100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_4】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.746651100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_5】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.768401400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_6】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.790511400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_7】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.812559800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_8】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.834500600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_9】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.857438800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_10】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.880379600</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_11】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.899327100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_12】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.922828400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_13】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.945617400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_14】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.968942500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_15】<span class="number">21</span>:<span class="number">12</span>:<span class="number">51.992215400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_16】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.013325600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_17】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.035687100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_18】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.058188</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_19】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.081208400</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_20】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.103406200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_21】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.123827300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_22】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.146165100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_23】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.168828300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_24】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.191769500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_25】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.214839100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_26】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.238998700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_27】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.259772600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_28】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.284131800</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_29】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.306190600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_30】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.325315800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_31】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.347012500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_32】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.368508600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_33】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.391785100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_34】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.416383800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_35】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.439019</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_36】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.461733900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_37】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.485990</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_38】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.509219900</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_39】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.523683400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_40】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.547412100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_41】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.571191800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_42】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.593024600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_43】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.616731800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_44】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.640317</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_45】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.663111100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_46】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.686727</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_47】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.709266500</span></span><br><span class="line">消费者<span class="number">2.</span>.......接收到消息：【hello, message_48】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.725884900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello, message_49】<span class="number">21</span>:<span class="number">12</span>:<span class="number">52.746299900</span></span><br></pre></td></tr></table></figure><p>可以发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，只处理了6条消息。而最终总的执行耗时也在1秒左右，大大提升。</p><p>正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题。</p><h3 id="3-3-5-总结">3.3.5.总结</h3><p>Work模型的使用：</p><ul><li><p>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</p></li><li><p>通过设置prefetch来控制消费者预取的消息数量</p></li></ul><h2 id="3-4-交换机类型">3.4.交换机类型</h2><p>在之前的两个测试案例中，都没有交换机，生产者直接发送消息到队列。而一旦引入交换机，消息发送的模式会有很大变化：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/diagram-8-175603011395648.png" alt=""></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li><p><strong>Publisher</strong>：生产者，不再发送消息到队列中，而是发给交换机</p></li><li><p><strong>Exchange</strong>：交换机，一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p></li><li><p><strong>Queue</strong>：消息队列也与以前一样，接收消息、缓存消息。不过队列一定要与交换机绑定。</p></li><li><p><strong>Consumer</strong>：消费者，与以前一样，订阅队列，没有变化</p></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>交换机的类型有四种：</p><ul><li><p><strong>Fanout</strong>：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</p></li><li><p><strong>Direct</strong>：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列</p></li><li><p><strong>Topic</strong>：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</p></li><li><p><strong>Headers</strong>：头匹配，基于MQ的消息头匹配，用的较少。</p></li></ul><p>课堂中，我们讲解前面的三种交换机模式。</p><h2 id="3-5-Fanout交换机">3.5.Fanout交换机</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p>在广播模式下，消息发送流程是这样的：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Z0PrbLnmnocBcyx8Xn0cyIShnjb-175603011395650.png" alt=""></p><ul><li><p>1）  可以有多个队列</p></li><li><p>2）  每个队列都要绑定到Exchange（交换机）</p></li><li><p>3）  生产者发送的消息，只能发送到交换机</p></li><li><p>4）  交换机把消息发送给绑定过的所有队列</p></li><li><p>5）  订阅队列的消费者都能拿到消息</p></li></ul><p>我们的计划是这样的：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Reynb5FGbosgNVxHA1HclKlAnfg-175603011395652.png" alt=""></p><ul><li><p>创建一个名为<code> hmall.fanout</code>的交换机，类型是<code>Fanout</code></p></li><li><p>创建两个队列<code>fanout.queue1</code>和<code>fanout.queue2</code>，绑定到交换机<code>hmall.fanout</code></p></li></ul><h3 id="3-5-1-声明队列和交换机">3.5.1.声明队列和交换机</h3><p>在控制台创建队列<code>fanout.queue1</code>:</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/TvF5bHPaWowb7exZc6LcFhsPnSr-175603011395651.png" alt=""></p><p>在创建一个队列<code>fanout.queue2</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/U4PnbzhFtogqyIxrvOycO9xLnOe-175603011395654.png" alt=""></p><p>然后再创建一个交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Jpc3b21AmodhVdx1pdIceYV7nHg-175603011395653.png" alt=""></p><p>然后绑定两个队列到交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/MlREb8DvBoFHmJxFiEJciMLVn8b-175603011395655.png" alt=""></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ReCibIyUDoZbmXx4rJecltt7n6f-175603011395656.png" alt=""></p><h3 id="3-5-2-消息发送">3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-消息接收">3.5.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-总结">3.5.4.总结</h3><p>交换机的作用是什么？</p><ul><li><p>接收publisher发送的消息</p></li><li><p>将消息按照规则路由到与之绑定的队列</p></li><li><p>不能缓存消息，路由失败，消息丢失</p></li><li><p>FanoutExchange的会将消息路由到每个绑定的队列</p></li></ul><h2 id="3-6-Direct交换机">3.6.Direct交换机</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/El3hbCOh3ohMT2xatZJcpcqwnDc-175603011395657.png" alt=""></p><p>在Direct模型下：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</p></li><li><p>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</p></li></ul><p><strong>案例需求如图</strong>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/SschbFsTao91PvxfZWKc6L54nkd-175603011395658.png" alt=""></p><ol><li><p> 声明一个名为<code>hmall.direct</code>的交换机</p></li><li><p>声明队列<code>direct.queue1</code>，绑定<code>hmall.direct</code>，<code>bindingKey</code>为<code>blud</code>和<code>red</code></p></li><li><p>声明队列<code>direct.queue2</code>，绑定<code>hmall.direct</code>，<code>bindingKey</code>为<code>yellow</code>和<code>red</code></p></li><li><p> 在<code>consumer</code>服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2 </p></li><li><p> 在publisher中编写测试方法，向<code>hmall.direct</code>发送消息 </p></li></ol><h3 id="3-6-1-声明队列和交换机">3.6.1.声明队列和交换机</h3><p>首先在控制台声明两个队列<code>direct.queue1</code>和<code>direct.queue2</code>，这里不再展示过程：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/XeRPbclP1odEO1xa22Hc50Non6p-175603011395659.png" alt=""></p><p>然后声明一个direct类型的交换机，命名为<code>hmall.direct</code>:</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/SvpDbCaV8oXzzpx4oUScSftLnzf-175603011395660.png" alt=""></p><p>然后使用<code>red</code>和<code>blue</code>作为key，绑定<code>direct.queue1</code>到<code>hmall.direct</code>：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/UIjhbp9j8op6Uux1MaqcxAF7nEg-175603011395661.png" alt=""></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/Ua6Nb5S5yoV2dGxOm5gcGFNonBb-175603011395662.png" alt=""></p><p>同理，使用<code>red</code>和<code>yellow</code>作为key，绑定<code>direct.queue2</code>到<code>hmall.direct</code>，步骤略，最终结果：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ChembAGFOoGUquxlMvhcJcn7nCg-175603011395663.png" alt=""></p><h3 id="3-6-2-消息接收">3.6.2.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-消息发送">3.6.3.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于使用的red这个key，所以两个消费者都收到了消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/QrjCbcq13oBpB3x9uoxcvK0mngh-175603011395664.png" alt=""></p><p>我们再切换为blue这个key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;最新报道，哥斯拉是居民自治巨型气球，虚惊一场！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现，只有消费者1收到了消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/YyVGb2Z7BoWu2exjQGMc15BRnwf-175603011395665.png" alt=""></p><h3 id="3-6-4-总结">3.6.4.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li><p>Fanout交换机将消息路由给每一个与之绑定的队列</p></li><li><p>Direct交换机根据RoutingKey判断路由给哪个队列</p></li><li><p>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</p></li></ul><h2 id="3-7-Topic交换机">3.7.Topic交换机</h2><h3 id="3-7-1-说明">3.7.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。</p><p>只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>BindingKey</code> 的时候使用通配符！</p><p><code>BindingKey</code> 一般都是有一个或多个单词组成，多个单词之间以<code>.</code>分割，例如： <code>item.insert</code></p><p>通配符规则：</p><ul><li><p><code>#</code>：匹配一个或多个词</p></li><li><p><code>*</code>：匹配不多不少恰好1个词</p></li></ul><p>举例：</p><ul><li><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p></li><li><p><code>item.*</code>：只能匹配<code>item.spu</code></p></li></ul><p>图示：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/QFzzbeUUjoVf0RxfS1AcgT7LnUe-175603011395667.png" alt=""></p><p>假如此时publisher发送的消息使用的<code>RoutingKey</code>共有四种：</p><ul><li><p><code>china.news </code>代表有中国的新闻消息；</p></li><li><p><code>china.weather</code> 代表中国的天气消息；</p></li><li><p><code>japan.news</code> 则代表日本新闻</p></li><li><p><code>japan.weather</code> 代表日本的天气消息；</p></li></ul><p>解释：</p><ul><li><p><code>topic.queue1</code>：绑定的是<code>china.#</code> ，凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到，包括：</p><ul><li><p><code>china.news</code></p></li><li><p><code>china.weather</code></p></li></ul></li><li><p><code>topic.queue2</code>：绑定的是<code>#.news</code> ，凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括:</p><ul><li><p><code>china.news</code></p></li><li><p><code>japan.news</code></p></li></ul></li></ul><p>接下来，我们就按照上图所示，来演示一下Topic交换机的用法。</p><p>首先，在控制台按照图示例子创建队列、交换机，并利用通配符绑定队列和交换机。此处步骤略。最终结果如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/H2ZubsD1woeetoxIHMjcuFRanJd-175603011395666.png" alt=""></p><h3 id="3-7-2-消息发送">3.7.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * topicExchange</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-3-消息接收">3.7.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-4-总结">3.7.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li><p>Topic交换机接收的消息RoutingKey必须是多个单词，以 <strong><code>.</code></strong> 分割</p></li><li><p>Topic交换机与队列绑定时的bindingKey可以指定通配符</p></li><li><p><code>#</code>：代表0个或多个词</p></li><li><p><code>*</code>：代表1个词</p></li></ul><h2 id="3-8-声明队列和交换机">3.8.声明队列和交换机</h2><p>在之前我们都是基于RabbitMQ控制台来创建队列、交换机。但是在实际开发时，队列和交换机是程序员定义的，将来项目上线，又要交给运维去创建。那么程序员就需要把程序中运行的所有队列和交换机都写下来，交给运维。在这个过程中是很容易出现错误的。</p><p>因此推荐的做法是由程序启动时检查队列和交换机是否存在，如果不存在自动创建。</p><h3 id="3-8-1-基本API">3.8.1.基本API</h3><p>SpringAMQP提供了一个Queue类，用来创建队列：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/LMnRbQuaIoHHrkxByzLcsSPFnjh-175603011395668.png" alt=""></p><p>SpringAMQP还提供了一个Exchange接口，来表示所有不同类型的交换机：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/RwxPbRd0boAOLhxx6qzcXQPqnKd-175603011395669.png" alt=""></p><p>我们可以自己创建队列和交换机，不过SpringAMQP还提供了ExchangeBuilder来简化这个过程：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/JDYsbeQn2o2P81xGpvOc5znfn7b-175603011395670.png" alt=""></p><p>而在绑定队列和交换机时，则需要使用BindingBuilder来创建Binding对象：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/XV57bsutQovJ1kxafTUcqsFWnkh-175603011395672.png" alt=""></p><h3 id="3-8-2-fanout示例">3.8.2.fanout示例</h3><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;hmall.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-2-direct示例">3.8.2.direct示例</h3><p>direct模式由于要绑定多个KEY，会非常麻烦，每一个Key都要编写一个binding：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Direct类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;hmall.direct&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithRed</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1WithBlue</span><span class="params">(Queue directQueue1, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithRed</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2WithYellow</span><span class="params">(Queue directQueue2, DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-4-基于注解声明">3.8.4.基于注解声明</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>例如，我们同样声明Direct模式的交换机和队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是简单多了。</p><p>再试试Topic模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;hmall.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-消息转换器">3.9.消息转换器</h2><p>Spring的消息发送代码接收的消息体是一个Object：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/AEDob0gXNozbGTxWbXGceQV3nAf-175603011395671.png" alt=""></p><p>而在数据传输时，它会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li><p>数据体积过大</p></li><li><p>有安全漏洞</p></li><li><p>可读性差</p></li></ul><p>我们来测试一下。</p><h3 id="3-9-1-测试默认转换器">3.9.1.测试默认转换器</h3><p>1）创建测试队列</p><p>首先，我们在consumer服务中声明一个新的配置类：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/UZB0bgLppoZosXxtKvkc1ts6nMh-175603011395673.png" alt=""></p><p>利用@Bean的方式创建一个队列，</p><p>具体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">objectQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;object.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里我们先不要给这个队列添加消费者，我们要查看消息体的格式。</p><p>重启consumer服务以后，该队列就会被自动创建出来了：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/ROnHbyCujojbQ1xYIVlchnNznsh-175603011395674.png" alt=""></p><p>2）发送消息</p><p>我们在publisher模块的SpringAmqpTest中新增一个消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;object.queue&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送消息后查看控制台：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/QPu1bYlfHot8wmxXxp8cB9Qzn9d-175603011395675.png" alt=""></p><p>可以看到消息格式非常不友好。</p><h3 id="3-9-2-配置JSON转换器">3.9.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>在<code>publisher</code>和<code>consumer</code>两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，如果项目中引入了<code>spring-boot-starter-web</code>依赖，则无需再次引入<code>Jackson</code>依赖。</p><p>配置消息转换器，在<code>publisher</code>和<code>consumer</code>两个服务的启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义消息转换器</span></span><br><span class="line">    <span class="type">Jackson2JsonMessageConverter</span> <span class="variable">jackson2JsonMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span></span><br><span class="line">    jackson2JsonMessageConverter.setCreateMessageIds(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> jackson2JsonMessageConverter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息转换器中添加的messageId可以便于我们将来做幂等性判断。</p><p>此时，我们到MQ控制台<strong>删除</strong><code>object.queue</code>中的旧的消息。然后再次执行刚才的消息发送的代码，到MQ的控制台查看消息结构：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/AEhhb30KoosYHRxuAQIcHXUSnLh-175603011395677.png" alt=""></p><h3 id="3-9-3-消费者接收Object">3.9.3.消费者接收Object</h3><p>我们在consumer服务中定义一个新的消费者，publisher是用Map发送，那么消费者也一定要用Map接收，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;object.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(Map&lt;String, Object&gt; msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到object.queue消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-业务改造">4.业务改造</h1><p>案例需求：改造余额支付功能，将支付成功后基于OpenFeign的交易服务的更新订单状态接口的同步调用，改为基于RabbitMQ的异步通知。</p><p>如图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-175603011395676.png" alt=""></p><p>说明：目前没有通知服务和积分服务，因此我们只关注交易服务，步骤如下：</p><ul><li><p>定义<code>direct</code>类型交换机，命名为<code>pay.direct</code></p></li><li><p>定义消息队列，命名为<code>trade.pay.success.queue</code></p></li><li><p>将<code>trade.pay.success.queue</code>与<code>pay.direct</code>绑定，<code>BindingKey</code>为<code>pay.success</code></p></li><li><p>支付成功时不再调用交易服务更新订单状态的接口，而是发送一条消息到<code>pay.direct</code>，发送消息的<code>RoutingKey</code>  为<code>pay.success</code>，消息内容是订单id</p></li><li><p>交易服务监听<code>trade.pay.success.queue</code>队列，接收到消息后更新订单状态为已支付</p></li></ul><h2 id="4-1-配置MQ">4.1.配置MQ</h2><p>不管是生产者还是消费者，都需要配置MQ的基本信息。分为两步：</p><p>1）添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--消息发送--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）配置MQ地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><h2 id="4-2-接收消息">4.2.接收消息</h2><p>在trade-service服务中定义一个消息监听类：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/S7RZbgUBMoqrTZxUXMicKsf3n9j-175603011395678.png" alt=""></p><p>其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.trade.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmall.trade.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayStatusListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;trade.pay.success.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;pay.topic&quot;),</span></span><br><span class="line"><span class="meta">            key = &quot;pay.success&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenPaySuccess</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        orderService.markOrderPaySuccess(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-发送消息">4.3.发送消息</h2><p>修改<code>pay-service</code>服务下的<code>com.hmall.pay.service.impl.PayOrderServiceImpl</code>类中的<code>tryPayOrderByBalance</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryPayOrderByBalance</span><span class="params">(PayOrderDTO payOrderDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询支付单</span></span><br><span class="line">    <span class="type">PayOrder</span> <span class="variable">po</span> <span class="operator">=</span> getById(payOrderDTO.getId());</span><br><span class="line">    <span class="comment">// 2.判断状态</span></span><br><span class="line">    <span class="keyword">if</span>(!PayStatus.WAIT_BUYER_PAY.equalsValue(po.getStatus()))&#123;</span><br><span class="line">        <span class="comment">// 订单不是未支付，状态异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.尝试扣减余额</span></span><br><span class="line">    userClient.deductMoney(payOrderDTO.getPw(), po.getAmount());</span><br><span class="line">    <span class="comment">// 4.修改支付单状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> markPayOrderSuccess(payOrderDTO.getId(), LocalDateTime.now());</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(<span class="string">&quot;交易已支付或关闭！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.修改订单状态</span></span><br><span class="line">    <span class="comment">// tradeClient.markOrderPaySuccess(po.getBizOrderNo());</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;pay.direct&quot;</span>, <span class="string">&quot;pay.success&quot;</span>, po.getBizOrderNo());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;支付成功的消息发送失败，支付单id：&#123;&#125;， 交易单id：&#123;&#125;&quot;</span>, po.getId(), po.getBizOrderNo(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-练习">5.练习</h1><h2 id="5-1-抽取共享的MQ配置">5.1.抽取共享的MQ配置</h2><p>将MQ配置抽取到Nacos中管理，微服务中直接使用共享配置。</p><h2 id="5-2-改造下单功能">5.2.改造下单功能</h2><p>改造下单功能，将基于OpenFeign的清理购物车同步调用，改为基于RabbitMQ的异步通知：</p><ul><li><p>定义topic类型交换机，命名为<code>trade.topic</code></p></li><li><p>定义消息队列，命名为<code>cart.clear.queue</code></p></li><li><p>将<code>cart.clear.queue</code>与<code>trade.topic</code>绑定，<code>BindingKey</code>为<code>order.create</code></p></li><li><p>下单成功时不再调用清理购物车接口，而是发送一条消息到<code>trade.topic</code>，发送消息的<code>RoutingKey</code>  为<code>order.create</code>，消息内容是下单的具体商品、当前登录用户信息</p></li><li><p>购物车服务监听<code>cart.clear.queue</code>队列，接收到消息后清理指定用户的购物车中的指定商品</p></li></ul><h2 id="5-3-登录信息传递优化">5.3.登录信息传递优化</h2><p>某些业务中，需要根据登录用户信息处理业务，而基于MQ的异步调用并不会传递登录用户信息。前面我们的做法比较麻烦，至少要做两件事：</p><ul><li><p>消息发送者在消息体中传递登录用户</p></li><li><p>消费者获取消息体中的登录用户，处理业务</p></li></ul><p>这样做不仅麻烦，而且编程体验也不统一，毕竟我们之前都是使用UserContext来获取用户。</p><p>大家思考一下：有没有更优雅的办法传输登录用户信息，让使用MQ的人无感知，依然采用UserContext来随时获取用户。</p><p>参考资料：</p><iframe src="https://docs.spring.io/spring-amqp/docs/2.4.14/reference/html/#post-processing" sandbox="allow-scripts allow-same-origin allow-presentation allow-forms allow-popups allow-downloads" allowfullscreen allow="encrypted-media; fullscreen; autoplay" referrerpolicy="strict-origin-when-cross-origin" frameborder="0" style="width: 100%; min-height: 461px; border-radius: 8px;"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对应B站视频：&lt;/p&gt;
&lt;iframe src=&quot;https://player.bilibili.com/player.html?bvid=1S142197x7&amp;p=85&amp;vd_source=1ff0c1b434581723cf696ccc2f59ceaa&quot; sandbox</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>微服务SpringCloudAlibaba</title>
    <link href="https://u7u7.top/posts/CloudAli.html"/>
    <id>https://u7u7.top/posts/CloudAli.html</id>
    <published>2025-08-08T03:00:25.000Z</published>
    <updated>2025-08-25T01:39:01.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务拆分">微服务拆分</h1><p>微服务拆分的核心是<strong>按业务边界解耦</strong>，将单体应用拆分为独立运行的服务。</p><ul><li>原则：遵循 “单一职责”，每个服务专注于特定业务域（如订单、商品、用户），做到高内聚低耦合。</li><li>目的：便于团队独立开发、部署和扩展，避免单体应用的 “牵一发而动全身”。</li><li>关键：拆分粒度需平衡（过细会增加服务通信成本，过粗则失去微服务优势），需考虑服务间依赖关系。</li></ul><h1 id="NACOS">NACOS</h1><p>在微服务远程调用的过程中，包括两个角色：</p><ul><li>服务提供者：提供接口供其它微服务访问，比如<code>item-service</code></li><li>服务消费者：调用其它微服务提供的接口，比如<code>cart-service</code></li></ul><p>在大型微服务项目中，服务提供者的数量会非常多，为了管理这些服务就引入了<strong>注册中心</strong>的概念。注册中心、服务提供者、服务消费者三者间关系如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808172540550.png" alt="image-20250808172540550"></p><p>流程如下：</p><ul><li>服务启动时就会注册自己的服务信息（服务名、IP、端口）到注册中心</li><li>调用者可以从注册中心订阅想要的服务，获取服务对应的实例列表（1个服务可能多实例部署）</li><li>调用者自己对实例列表负载均衡，挑选一个实例</li><li>调用者向该实例发起远程调用</li></ul><p>当服务提供者的实例宕机或者启动新实例时，调用者如何得知呢？</p><ul><li>服务提供者会定期向注册中心发送请求，报告自己的健康状态（心跳请求）</li><li>当注册中心长时间收不到提供者的心跳时，会认为该实例宕机，将其从服务的实例列表中剔除</li><li>当服务有新实例启动时，会发送注册服务请求，其信息会被记录在注册中心的服务实例列表</li><li>当注册中心服务列表变更时，会主动通知微服务，更新本地服务列表</li></ul><blockquote><p>我们项目使用阿里的NACOS，用来注册服务，只要给我们的微服务引入依赖和配置，就可以在注册中心看到微服务，目前我们只使用了nacos的配置中心，可以将几个微服务公共的yaml写入配置列表</p></blockquote><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808172938602.png" alt="image-20250808172938602"></p><h1 id="OpenFeign">OpenFeign</h1><p>OpenFeign 是<strong>声明式 HTTP 客户端</strong>，简化微服务间远程调用。</p><ul><li>基于接口 + 注解定义调用规则（如<code>@FeignClient</code>指定目标服务），无需手动编写 HTTP 请求代码。</li><li>自动集成 Ribbon，实现负载均衡（从 Nacos 获取服务列表后，分发请求到不同实例）。</li><li>支持整合 Sentinel，为远程调用添加熔断、降级能力（如配置<code>fallback</code>处理调用失败场景）。</li></ul><blockquote><p>项目中使用OpenFeign主要是定义了一个api模块，将一些多个微服务都要调用的接口或者方法，放在api模块中通过在微服务启动类@EnableFeignClients，在Client中使用@FeignClient(“item-service”)注解，使用远程调用服务，同时我们配置了okHttp替换默认的HttpURLConnection，支持连接池。</p></blockquote><p>支持日志输出需要创建一个配置类注册bean，在需要打印日志的client加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;, configuration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfig.class)</span> <span class="comment">//启动类配置 全局生效</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.api.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gateway">Gateway</h1><p>Gateway其实就是一个网关微服务，我们定义一个新的微服务，在项目中我们快速入门是使用hm-gateway完成了路由转发，nginx统一请求8080，我们通过gateway，将进入8080的请求，通过路由规则转发给对应的目标服务，同时它还支持断言和路由过滤、动态路由等作用。总结：Gateway 是微服务的<strong>统一入口网关</strong>，处理所有外部请求，核心功能是路由与过滤。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.219</span><span class="number">.128</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item</span> <span class="comment"># 路由规则id，自定义，唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://item-service</span> <span class="comment"># 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/items/**,/search/**</span> <span class="comment"># 这里是以请求路径作为判断规则</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cart-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/carts/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/users/**,/addresses/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">trade</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://trade-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/orders/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pay</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://pay-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/pay-orders/**</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网关登录校验">网关登录校验</h2><p>单体架构时我们只需要完成一次用户登录、身份校验，就可以在所有业务中获取到用户信息。而微服务拆分后，每个微服务都独立部署，不再共享数据。也就意味着每个微服务都需要做登录校验，这显然不可取。</p><p>我们的登录是基于JWT来实现的，校验JWT的算法复杂，而且需要用到秘钥。如果每个微服务都去做登录校验，这就存在着两大问题：</p><ul><li>每个微服务都需要知道JWT的秘钥，不安全</li><li>每个微服务重复编写登录校验代码、权限校验代码，麻烦</li></ul><p>既然网关是所有微服务的入口，一切请求都需要先经过网关。我们完全可以把登录校验的工作放到网关去做，这样之前说的问题就解决了：</p><ul><li>只需要在网关和用户服务保存秘钥</li><li>只需要在网关开发登录校验功能</li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808174705433.png" alt="image-20250808174705433"></p><ul><li>网关路由是配置的，请求转发是Gateway内部代码，我们如何在转发之前做登录校验？</li><li>网关校验JWT之后，如何将用户信息传递给微服务？</li><li>微服务之间也会相互调用，这种调用不经过网关，又该如何传递用户信息？</li></ul><p>首先登录校验必须在请求转发到微服务之前做。而网关的请求转发是<code>Gateway</code>内部代码实现的，要想在请求转发之前做登录校验，就必须了解<code>Gateway</code>内部工作的基本原理。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808174859617.png" alt="image-20250808174859617"></p><ol><li>客户端请求进入网关后由<code>HandlerMapping</code>对请求做判断，找到与当前请求匹配的路由规则（<strong><code>Route</code></strong>），然后将请求交给<code>WebHandler</code>去处理。</li><li><code>WebHandler</code>则会加载当前路由下需要执行的过滤器链（<strong><code>Filter chain</code></strong>），然后按照顺序逐一执行过滤器（后面称为**<code>Filter</code>**）。</li><li>图中<code>Filter</code>被虚线分为左右两部分，是因为<code>Filter</code>内部的逻辑分为<code>pre</code>和<code>post</code>两部分，分别会在请求路由到微服务<strong>之前</strong>和<strong>之后</strong>被执行。</li><li>只有所有<code>Filter</code>的<code>pre</code>逻辑都依次顺序执行通过后，请求才会被路由到微服务。</li><li>微服务返回结果后，再倒序执行<code>Filter</code>的<code>post</code>逻辑。</li><li>最终把响应结果返回。</li></ol><p>如图中所示，最终请求转发是有一个名为<code>NettyRoutingFilter</code>的过滤器来执行的，而且这个过滤器是整个过滤器链中顺序最靠后的一个。<strong>如果我们能够定义一个过滤器，在其中实现登录校验逻辑，并且将过滤器执行顺序定义到</strong>**<code>NettyRoutingFilter</code>**<strong>之前</strong>，这就符合我们的需求了。</p><p>网关过滤器链中的过滤器有两种：</p><ul><li><strong><code>GatewayFilter</code></strong>：路由过滤器，作用范围比较灵活，可以是任意指定的路由<code>Route</code>.</li><li><strong><code>GlobalFilter</code></strong>：全局过滤器，作用范围是所有路由，不可配置。</li></ul><h2 id="GatewayFilter">GatewayFilter</h2><p>该过滤器实现，需要先创建一个类继承AbstractGatewayFilterFactory,然后重写Apply方法。还需要在对应的application文件中进行配置，注意！该类的名称一定要以GatewayFilterFactory为后缀。在yaml需要配置，可以全局也可以单个服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrintAny</span> <span class="comment"># 此处直接以自定义的GatewayFilterFactory类名称前缀类声明过滤器</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://test-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="string">-Path=/test/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">PrintAny=key,</span> <span class="string">value</span> <span class="comment"># 逗号之前是请求头的key，逗号之后是value </span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>我这里测试直接使用了全局过滤器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintAnyGatewayFilterFactory</span> <span class="comment">// 父类泛型是内部类的Config类型</span></span><br><span class="line">                <span class="keyword">extends</span> <span class="title class_">AbstractGatewayFilterFactory</span>&lt;PrintAnyGatewayFilterFactory.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GatewayFilter <span class="title function_">apply</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="comment">// OrderedGatewayFilter是GatewayFilter的子类，包含两个参数：</span></span><br><span class="line">        <span class="comment">// - GatewayFilter：过滤器</span></span><br><span class="line">        <span class="comment">// - int order值：值越小，过滤器执行优先级越高</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedGatewayFilter</span>(<span class="keyword">new</span> <span class="title class_">GatewayFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">                <span class="comment">// 获取config值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> config.getA();</span><br><span class="line">                <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> config.getB();</span><br><span class="line">                <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> config.getC();</span><br><span class="line">                <span class="comment">// 编写过滤器逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">                System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">                System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">                <span class="comment">// 放行</span></span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义配置属性，成员变量名称很重要，下面会用到</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String a;</span><br><span class="line">        <span class="keyword">private</span> String b;</span><br><span class="line">        <span class="keyword">private</span> String c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将变量名称依次返回，顺序很重要，将来读取参数时需要按顺序获取</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">shortcutFieldOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> List.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 返回当前配置类的类型，也就是内部的Config</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;Config&gt; <span class="title function_">getConfigClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Config.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GlobalFilter">GlobalFilter</h2><p>这个是在项目中使用的过滤器，他使用比较简答其实，不支持动态参数，因为项目只做一个过滤并且将用户信息传参，所以就用GlobalFilter，他只要实现两个接口，一个GlobalFilter，一个ordered(排序的可以不给)。ordered可以设置过滤器的执行顺序，按照自己业务情况来。因为项目中使用的这个，测试用例就不写了。</p><h2 id="登录校验">登录校验</h2><p>这里我们要先把配置类写好在gateway服务中，创建过滤器，当然秘钥和校验路径要在yaml配置好。exchange中有请求头信息，通过chain转发给其他服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtTool jwtTool;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthProperties authProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//用户拦截 校验</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="comment">//判断是否需要拦截</span></span><br><span class="line">        <span class="keyword">if</span> (ifExclude(request.getPath().toString())) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; headers = request.getHeaders().get(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(headers))&#123;</span><br><span class="line">            token = headers.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检验并解析 token</span></span><br><span class="line">        Long userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = jwtTool.parseToken(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//传递用户信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;userId = &quot;</span> + userId); <span class="comment">// 打印用户id</span></span><br><span class="line">        <span class="type">ServerWebExchange</span> <span class="variable">swe</span> <span class="operator">=</span> exchange.mutate().request(builder -&gt; builder.header(<span class="string">&quot;user-info&quot;</span>, userId.toString())).build();</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(swe);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">ifExclude</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前请求路径是否在排除路径列表中，如果在任意一个排除路径下，则不需要拦截</span></span><br><span class="line">        <span class="keyword">return</span> authProperties.getExcludePaths().stream().anyMatch(path -&gt; antPathMatcher.match(path, string));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户信息传递">用户信息传递</h2><p>现在我们把用户ID发送到了请求头中并且命名为user-info,那我们再定义一个拦截器，将请求头中的用户id拿到放到threadlocal里面就可以了。下面是流程图。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808212831153.png" alt="image-20250808212831153"></p><p>由于每个微服务都有获取登录用户的需求，因此拦截器我们直接写在<code>hm-common</code>中，并写好自动装配。这样微服务只需要引入<code>hm-common</code>就可以直接具备拦截器功能，无需重复编写。在hm-common定义一个拦截器实现HandlerInterceptor接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"><span class="comment">//之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//取出用户id并存到thread local</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;user-info&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(userId))&#123;</span><br><span class="line">            UserContext.setUser(Long.valueOf(userId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserContext.removeUser();<span class="comment">//移除用户</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用到了这个接口就讲一下把。</p><p><strong><code>HandlerInterceptor</code> 接口</strong><br>这是 Spring MVC 提供的拦截器接口，用于在控制器（Controller）方法执行前后插入自定义逻辑，主要有三个方法：</p><ul><li><code>preHandle</code>：请求到达控制器<strong>之前</strong>执行（预处理）</li><li><code>postHandle</code>：控制器方法执行完成但视图未渲染<strong>之前</strong>执行（后处理）</li><li><code>afterCompletion</code>：整个请求完成（包括视图渲染）<strong>之后</strong>执行（资源清理）</li></ul><p>同时这里我们要引入一个springMvc的配置类，配置刚刚的拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">UserInfoInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里并不会直接生效，因为其他微服务的并不会扫描到这个包，基于SpringBoot的自动装配原理，我们要将其添加到<code>resources</code>目录下的<code>META-INF/spring.factories</code>文件中。这里我后面会复习自动装配的原理的。这个时候threadlocal里面就有我们存入的用户信息了。</p><h2 id="OpenFeign传递用户">OpenFeign传递用户</h2><p>还有存在一个问题，就是当我们下单服务的时候，订单服务获取到了用户信息保存订单，但是到清理购物车的到时候，在购物车服务是没有当前用户的ID的，就会导致购物车服务不知道删除哪个用户的购物车。注意因为是不同的服务，所以不是同一个线程也就不是同一个threadlocal。由于微服务获取用户信息是通过拦截器在请求头中读取，因此要想实现微服务之间的用户信息传递，就<strong>必须在微服务发起调用时把用户信息存入请求头</strong>。因为我们是使用<strong>OpenFeign</strong>实现微服务之间互相调用的，我们可以将OpenFeign每次的发起请求都携带登录用户信息就好了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808214052181.png" alt="image-20250808214052181"></p><p>Feign有一个拦截器接口<strong>feign.RequestInterceptor</strong>，只要实现这个接口并实现apply方法就行了，利用<code>RequestTemplate</code>类来添加请求头，将用户信息保存到请求头中。可以在之前api模块中DefaultFeignClient里面注册一个方法bean。这样就完成了通过gateway实现服务之前通讯啦！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RequestInterceptor <span class="title function_">userInfoRequestInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestInterceptor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate template)</span> &#123;</span><br><span class="line">            <span class="comment">// 获取登录用户</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserContext.getUser();</span><br><span class="line">            <span class="keyword">if</span>(userId == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果为空则直接跳过</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果不为空则放入请求头中，传递给下游微服务</span></span><br><span class="line">            template.header(<span class="string">&quot;user-info&quot;</span>, userId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置管理">配置管理</h2><blockquote><p>后面的配置管理其实就是公共yaml的配置，通过定义一个属性类@ConfigurationProperties(prefix = “hm.cart”)可以实现热更新 。后面放一个动态路由的配置代码。具体就不讲了，网上教程比较多。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmall.gateway.routers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.cloud.nacos.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.listener.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.exception.*;</span><br><span class="line"><span class="keyword">import</span> com.hmall.common.utils.*;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.*;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> DynamicRouteLoader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2025/8/5 16:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicRouteLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NacosConfigManager nacosConfigManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouteDefinitionWriter writer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; routeIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATA_ID</span> <span class="operator">=</span> <span class="string">&quot;dynamic-route.json&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP</span> <span class="operator">=</span> <span class="string">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initRouteConfigListener</span><span class="params">()</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">configAndSignListener</span> <span class="operator">=</span> nacosConfigManager.getConfigService()</span><br><span class="line">                .getConfigAndSignListener(DATA_ID, GROUP, <span class="number">5000</span>, <span class="keyword">new</span> <span class="title class_">Listener</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Executor <span class="title function_">getExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveConfigInfo</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                        <span class="comment">//监听到更新了 更新路由表</span></span><br><span class="line">                        log.debug(<span class="string">&quot;监听到路由配置变更，&#123;&#125;&quot;</span>, s);</span><br><span class="line">                        updateRouteConfig(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">//第一次启动时候初始化路由表</span></span><br><span class="line">        log.info(<span class="string">&quot;初始化路由表&quot;</span>);</span><br><span class="line">        updateRouteConfig(configAndSignListener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateRouteConfig</span><span class="params">(String config)</span>&#123;</span><br><span class="line">        List&lt;RouteDefinition&gt; routeDefinitions = JSONUtil.toList(config, RouteDefinition.class);</span><br><span class="line">        <span class="comment">// 2.1.删除旧的路由表</span></span><br><span class="line">        routeIds.forEach(routeId -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.delete(Mono.just(routeId)).subscribe();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;删除路由表失败&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        routeIds.clear();</span><br><span class="line">        <span class="comment">// 2.2.判断是否有新的路由要更新</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(routeDefinitions)) &#123;</span><br><span class="line">            <span class="comment">// 无新路由配置，直接结束</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        routeDefinitions.forEach(routeDefinition -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.save(Mono.just(routeDefinition)).subscribe();</span><br><span class="line">                routeIds.add(routeDefinition.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;更新路由表失败&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="微服务保护（Sentinel）">微服务保护（Sentinel）</h1><p>我们可以通过阿里开发的Sentinel实现微服务的保护，它里面自带qps实时监控和直接对请求接口<strong>簇点链路</strong>进行熔断和流控以及隔离。</p><h3 id="报错±-add-opens-java-base-java-lang-ALL-UNNAMED">报错±-add-opens=java.base/java.lang=ALL-UNNAMED</h3><h2 id="请求限流">请求限流</h2><p>服务故障最重要原因，就是并发太高！解决了这个问题，就能避免大部分故障。当然，接口的并发不是一直很高，而是突发的。因此请求限流，就是<strong>限制或控制</strong>接口访问的并发流量，避免服务因流量激增而出现故障。</p><p>请求限流往往会有一个限流器，数量高低起伏的并发请求曲线，经过限流器就变的非常平稳。这就像是水电站的大坝，起到蓄水的作用，可以通过开关控制水流出的大小，让下游水流始终维持在一个平稳的量。</p><p><strong>项目</strong>：我们这里直接对购物车设置qps为10，每秒发100个请求，发现拒绝qps90，通过10。实现限流</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808150758362.png" alt="image-20250808150758362"></p><h2 id="线程隔离">线程隔离</h2><p>当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。线程隔离正是解决这个问题的好办法。t</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808151348705.png" alt="image-20250808151348705"></p><p>轮船的船舱会被隔板分割为N个相互隔离的密闭舱，假如轮船触礁进水，只有损坏的部分密闭舱会进水，而其他舱由于相互隔离，并不会进水。这样就把进水控制在部分船体，避免了整个船舱进水而沉没。为了避免某个接口故障或压力过大导致整个服务不可用，我们可以限定每个接口可以使用的资源范围，也就是将其“隔离”起来。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808151437176.png" alt="image-20250808151437176"></p><p>如图所示，我们给查询购物车业务限定可用线程数量上限为20，这样即便查询购物车的请求因为查询商品服务而出现故障，也不会导致服务器的线程资源被耗尽，不会影响到其它接口。因为我们是<strong>FeignClien</strong>接口，所以项目中进行隔离的时候要开启Feign的Sentinel功能支持。</p><p><strong>项目</strong>：我们对查询商品接口进行流控，因为查询购物车的下级链路是查询商品。</p><h2 id="服务熔断">服务熔断</h2><p>线程隔离虽然避免了雪崩问题，但故障服务（商品服务）依然会拖慢购物车服务（服务调用方）的接口响应速度。而且商品查询的故障依然会导致查询购物车功能出现故障，购物车业务也变的不可用了。</p><p>所以，我们要做两件事情：</p><ul><li><strong>编写服务降级逻辑</strong>：就是服务调用失败后的处理逻辑，根据业务场景，可以抛出异常，也可以返回友好提示或默认数据。</li><li><strong>异常统计和熔断</strong>：统计服务提供方的异常比例，当比例过高表明该接口会影响到其它服务，应该拒绝调用该接口，而是直接走降级逻辑。</li></ul><p><strong>项目</strong>：这里我们用了FallbackFactory给FeignClient编写降级逻辑，有异常的时候返回空数据。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808151531472.png" alt="image-20250808151531472"></p><h1 id="分布式事务（Seata）">分布式事务（Seata）</h1><p>在我们购物车提交订单业务中，在原本的单体项目中，我通过在提交订单方法中@Transactional,保证了事务的一致性。防止提交订单的时候购物车删除商品，但是在业务执行完成之前发生了报错(模拟库存没了)，没有进行数据的回滚，导致购物车数据消失了而且没提交订单的情况。注册为单体事务，会保证ACID特性。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808130021852.png" alt="image-20250808130021852"></p><p>由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务：</p><ul><li>交易服务：下单事务</li><li>购物车服务：清理购物车事务</li><li>库存服务：扣减库存事务</li></ul><p>整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为<strong>分支事务</strong>。多个有关联的分支事务一起就组成了<strong>全局事务</strong>。我们必须保证整个全局事务同时成功或失败，每一个分支事务就是传统的<strong>单体事务</strong>，都可以满足ACID特性，经过测试在微服务中<strong>无法满足</strong>整个业务流程的ACID，参与事务的多个子业务在不同的微服务，跨越了不同的数据库。虽然每个单独的业务都能在本地遵循ACID，但是它们<strong>互相之间没有感知</strong>，不知道有人失败了，无法保证最终结果的统一，也就无法遵循ACID的事务特性了。</p><blockquote><p>这就是分布式事务问题，出现以下情况之一就可能产生分布式事务问题：</p><ul><li>业务跨多个服务实现</li><li>业务跨多个数据源实现</li></ul></blockquote><h2 id="Seata">Seata</h2><p>这里采用使用阿里开源的Seata解决分布式的事务问题。分布式事务产生的根本原因就是互相没感知么，那解决思路就像之前学Redis分布式锁一样，找一个能管理所有单体事务的东西。这里<strong>事务协调者</strong>，他的任务就是监控每个单体事务，判断事务提交和失败，然后找一个全局事务，保证全局事务下每个事务都要一起提交或者回滚。Seata也是这么个思路。</p><p>他分了TM，TC，RM。三个角色管理事务。</p><ul><li><strong>TC(Transaction Coordinator)-事务协调者</strong>：维护全局和分支事务的状态，协调全局事务提交或回滚。</li><li><strong>TM (Transaction Manager)-事务管理器</strong>：定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li><strong>RM (Resource Manager)-资源管理器</strong>：管理分支事务，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808132858193.png" alt="image-20250808132858193"></p><p>其中，<strong>TM</strong>和<strong>RM</strong>可以理解为Seata的客户端部分，引入到参与事务的微服务依赖中即可。将来<strong>TM</strong>和<strong>RM</strong>就会协助微服务，实现本地分支事务与<strong>TC</strong>之间交互，实现事务的提交或回滚。</p><p>而<strong>TC</strong>服务则是事务协调中心，是一个独立的微服务，需要单独部署。部署过程就省略了，这里直接说一下Seata的两种分布式解决方案，AT和XA。一共有四种还有TCC和SAGA</p><h2 id="XA模式">XA模式</h2><p>这种模式是<strong>强一致性</strong>事务，分两阶段的操作。首先TM会开启全局事务并管理分支事务</p><p>RM一阶段操作</p><ol><li>注册分支事务到TC</li><li>执行业务sql但是不提交</li><li>报告事务的状态成功或失败</li></ol><p>TC和RM二阶段操作</p><ol><li>TC检查各分支的状态，全成功就提交，有一个失败就回滚，通知RM执行操作</li><li>听到TC检查分支事务的状态决定是否全部提交</li></ol><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808135450904.png" alt="image-20250808135450904"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>事务的强一致性，保证了ACID原则</li><li>常用数据库都支持，实现简单，没有代码入侵@GlobalTransaction</li></ul><p>缺点：</p><ul><li>类似于串行操作，当二阶段没结束的时候，一阶段会锁定数据库资源，RM管理的<code>微服务无法再执行其他操作</code>，当二阶段执行完毕以后才会释放一阶段的资源，会导致性能过差。</li></ul><h2 id="AT模式-默认">AT模式(默认)</h2><p><code>AT</code>模式同样是分阶段提交的事务模型，不过缺弥补了<code>XA</code>模型中资源锁定周期过长的缺陷。他的工作原理是这样的前面部分一样，但是在RM执行sql 的时候会直接提交**（这个时候会释放数据库锁）<strong>，那如何进行数据回滚呢，他采用了快照，要使用AT模式，要在每个数据库建一个undo log表，他会在执行sql前记录更新前的数据，放到undo log表中，当后期TC通知RM提交的时候会删除log，如果要回滚，就按照记录的log进行数据回滚，回滚以后再删除数据，它是</strong>最终一致性**事务。这其实就是空间换时间的一种思想，保证直接提交，那么如果数据要回滚，就要记录数据。但是正常业务中其实回滚的操作是比较少的，所以用AT模式性能比较好，综合下来也比较好用，它也有缺点</p><p>——（假设这次会失败回滚）当分支业务提交以后~回滚之前，这段时间有其他业务访问数据库，会出现数据库不一致的问题，这是无法避免的，但是这段时间很短，要作取舍。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250808141301723.png" alt="image-20250808141301723"></p><h2 id="区别">区别</h2><ul><li><code>XA</code>模式一阶段不提交事务，锁定资源；<code>AT</code>模式一阶段直接提交，不锁定资源。</li><li><code>XA</code>模式依赖数据库机制实现回滚；<code>AT</code>模式利用数据快照实现数据回滚。</li><li><code>XA</code>模式强一致；<code>AT</code>模式最终一致</li></ul>]]></content>
    
    
    <summary type="html">梳理的微服务重要知识点！</summary>
    
    
    
    <category term="学习笔记" scheme="https://u7u7.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="微服务" scheme="https://u7u7.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="个人理解" scheme="https://u7u7.top/tags/%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    
    <category term="项目" scheme="https://u7u7.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>力扣刷题</title>
    <link href="https://u7u7.top/posts/leetcodeSF.html"/>
    <id>https://u7u7.top/posts/leetcodeSF.html</id>
    <published>2025-08-01T03:00:25.000Z</published>
    <updated>2025-08-20T01:46:07.478Z</updated>
    
    <content type="html"><![CDATA[<p>力扣算法题——这里都是自己做过的，打算从2025年8月开始能保持在一天一道的频率。力扣热门100题进行了标注。我看热门题里面二叉树和动态规划是不太熟的，要抽时间花功夫学习一下。</p><h1 id="哈希">哈希</h1><h2 id="2025-07-161-两数之和简单">2025-07-16<a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a><code>简单</code></h2><blockquote><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>题解：用hash值中的containskey方法，遍历一遍数组，存在和target-num1一样大的数字num2，代表num1+num2=target，value记录下标。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target-nums[i]),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2025-07-1649-字母异位词分组中等">2025-07-16<a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a><code>中等</code></h2><blockquote><p>题解：遍历子串数组，全部按acsill码排序。排好序向map中添加，存在就列表添加，不存在创建key，打印value</p><p>给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="comment">//排序 eat -&gt; aet</span></span><br><span class="line">            <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">            Arrays.sort(chars);</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">            List&lt;String&gt; listRes = map.getOrDefault(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            listRes.add(str);</span><br><span class="line">            map.put(key,listRes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2025-07-22128-最长连续序列中等">2025-07-22<a href="https://leetcode.cn/problems/longest-consecutive-sequence/">128. 最长连续序列</a><code>中等</code></h2><blockquote><p>题解：先将所有数字放hashset中，存在遍历set，存在当前数字小1的中断当前循环。这样能最小开始算，当有比当前数字大1的while循环，一直+1，直到不存在，记录长度。这样就能找到最长连续的整数长度。</p><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length&lt;=<span class="number">1</span>) <span class="keyword">return</span> length;</span><br><span class="line">        Set&lt;Integer&gt; numSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            numSet.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> longestStreak=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> currentStreak=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : numSet)&#123;</span><br><span class="line">            <span class="keyword">if</span> (numSet.contains(num-<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentNum</span> <span class="operator">=</span> num;</span><br><span class="line">            currentStreak=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (numSet.contains(currentNum+<span class="number">1</span>))&#123;</span><br><span class="line">                currentNum++;</span><br><span class="line">                currentStreak++;</span><br><span class="line">            &#125;</span><br><span class="line">            longestStreak = Math.max(longestStreak, currentStreak);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longestStreak;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双指针">双指针</h1><h2 id="2025-07-06283-移动零简单">2025-07-06<a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a><code>简单</code></h2><blockquote><p>题解：把遍历的所有非零数给新数组，两个数组一样长，新数组没赋值的后面全0</p><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一次遍历的时候，j指针记录非0的个数，只要是非0的统统都赋给nums[j]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>) &#123;</span><br><span class="line">                nums[j++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//非0元素统计完了，剩下的都是0了</span></span><br><span class="line">        <span class="comment">//所以第二次遍历把末尾的元素都赋为0即可</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=j;i&lt;nums.length;++i) &#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2025-07-2311-盛最多水的容器中等">2025-07-23<a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a><code>中等</code></h2><blockquote><p>题解：左右指针，一个在最左边一个在最右边，当左边高度比右边小，建立临时变量为当前左侧长度，一直左指针右移，直到大于外循环左侧长度统计最大值。同理当右侧小，右侧向左边移。为什么可以这样移动？因为只要某一侧移动的时候，遇到的柱子比之前短，就一定代表存储量小，底短了高也短了。</p><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。返回容器可以储存的最大水量。</p></blockquote><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250814172644706.png" alt="image-20250814172644706"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> height.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxArea</span> <span class="operator">=</span> (right-left)*Math.min(height[left], height[right]);<span class="comment">//体积</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left]&lt;=height[right]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> height[left];</span><br><span class="line">                <span class="keyword">while</span> (left&lt;right &amp;&amp; height[left]&lt;=temp) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> height[right];</span><br><span class="line">                <span class="keyword">while</span> (left&lt;right &amp;&amp; height[right]&lt;=temp) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxArea = Math.max(maxArea, (right-left)*Math.min(height[left], height[right]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxArea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2025-07-1615-三数之和中等">2025-07-16<a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a><code>中等</code></h2><blockquote><p>题解：找到三个数相加为0，先排序，从左向右遍历，同时设置左右指针，左指针是当前索引+1，右指针是右侧，判断内缩，大于0右收缩，小于0左收缩。为0就收集并且去重左右指针移动，去除重复值。</p><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.AbstractList;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractList</span>&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">                init();</span><br><span class="line">                <span class="keyword">return</span> result.get(index);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">                init();</span><br><span class="line">                <span class="keyword">return</span> result.size();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Arrays.sort(nums);</span><br><span class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="comment">// 外层循环：固定三元组的第一个元素（索引i）</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">                    <span class="comment">// 左指针：i+1（第二个元素）</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 右指针：数组末尾（第三个元素）</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 双指针遍历：寻找与nums[i]之和为0的两个元素</span></span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                        <span class="comment">// 计算三数之和（用long避免int溢出）</span></span><br><span class="line">                        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + nums[left] + nums[right];</span><br><span class="line">                        <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 找到符合条件的三元组，添加到结果列表</span></span><br><span class="line">                            result.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                            <span class="comment">// 去重：跳过left指针后所有与当前nums[left]相同的元素</span></span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[++left]);</span><br><span class="line">                            <span class="comment">// 去重：跳过right指针前所有与当前nums[right]相同的元素</span></span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[--right]);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 和小于0：需要增大总和，左指针右移（数组已排序，右移后值变大）</span></span><br><span class="line">                            <span class="comment">// 同时跳过重复元素</span></span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[++left]);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 和大于0：需要减小总和，右指针左移（左移后值变小）</span></span><br><span class="line">                            <span class="comment">// 同时跳过重复元素</span></span><br><span class="line">                            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[--right]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 去重：跳过外层循环中与当前nums[i]相同的元素（避免重复三元组）</span></span><br><span class="line">                    <span class="keyword">while</span> (i &lt; nums.length - <span class="number">2</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2025-07-2442-接雨水困难">2025-07-24<a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a><code>困难</code></h1><blockquote><p>题解：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (height.length&lt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找最高柱子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; height.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[i]&gt;maxHeight)&#123;</span><br><span class="line">                maxHeight = height[i];</span><br><span class="line">                maxIndex=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxTemp=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//左侧积水</span></span><br><span class="line">        <span class="keyword">while</span> (i&lt;maxIndex)&#123;</span><br><span class="line">            <span class="keyword">if</span> (height[i]&gt;maxTemp) maxTemp=height[i];</span><br><span class="line">            res += maxTemp - height[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右侧积水</span></span><br><span class="line">        <span class="type">int</span> j=height.length-<span class="number">1</span>;</span><br><span class="line">        maxTemp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j&gt;maxIndex)&#123;</span><br><span class="line">            <span class="keyword">if</span> (height[j]&gt;maxTemp) maxTemp=height[j];</span><br><span class="line">            res += maxTemp - height[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="滑动窗口">滑动窗口</h1><h2 id="2025-07-193-无重复字符的最长子串中等">2025-07-19<a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a><code>中等</code></h2><blockquote><p>题解：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">char</span>[] occ = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxRes</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right=<span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> chars[right];<span class="comment">//右侧数据</span></span><br><span class="line">            occ[c]++;<span class="comment">//记录</span></span><br><span class="line">            <span class="comment">//有重复的从左边去除</span></span><br><span class="line">            <span class="keyword">while</span> (occ[c]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                occ[chars[left]]--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxRes = Math.max(maxRes, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxRes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2025-07-29438-找到字符串中所有字母异位词中等">2025-07-29<a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a><code>中等</code></h2><blockquote><p>题解：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sLen</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">pLen</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="keyword">if</span> (sLen &lt; pLen) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="type">int</span>[] pCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">int</span>[] sCount = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pLen; i++) pCount[p.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sLen;i++)&#123;</span><br><span class="line">            sCount[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            <span class="comment">//当i&gt;=pLen的时候需要把左侧移除</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=pLen) sCount[s.charAt(i-pLen) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;=pLen-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.equals(pCount, sCount))res.add(i-pLen+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="子串">子串</h1><h2 id="2025-07-31560-和为-K-的子数组中等">2025-07-31<a href="https://leetcode.cn/problems/subarray-sum-equals-k/">560. 和为 K 的子数组</a><code>中等</code></h2><blockquote><p>题解：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; pc = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;((<span class="type">int</span>) (nums.length / <span class="number">0.75</span>) + <span class="number">1</span>);</span><br><span class="line">        pc.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            p += num;</span><br><span class="line">            c += pc.getOrDefault(p - k, <span class="number">0</span>);</span><br><span class="line">            pc.merge(p, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2025-08-01239-滑动窗口最大值困难">2025-08-01<a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a><code>困难</code></h2><blockquote><p>tag -——<a href="https://leetcode.cn/tag/queue/">队列</a> <a href="https://leetcode.cn/tag/array/">数组</a> <a href="https://leetcode.cn/tag/sliding-window/">滑动 窗口 </a><a href="https://leetcode.cn/tag/monotonic-queue/">单调队列 </a><a href="https://leetcode.cn/tag/heap-priority-queue/">堆（优先队列）</a></p><p>题解：用栈的思想，窗口为k位,刚开始不进while循环，当队列长度大于k以后进行操作。将队列中如果靠前的数后面有比它大的就弹出，将最大值放进res</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span></span><br><span class="line"><span class="comment">输出：[3,3,5,5,6,7]*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span> || nums==<span class="literal">null</span>) <span class="keyword">return</span> nums;</span><br><span class="line">        <span class="type">int</span> len=nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len-k+<span class="number">1</span>];</span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">// 保证从大到小 如果前面数小则需要依次弹出，直至满足要求</span></span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty() &amp;&amp; nums[queue.peekLast()] &lt;= nums[i])&#123;</span><br><span class="line">                queue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 添加当前值对应的数组下标</span></span><br><span class="line">            queue.addLast(i);</span><br><span class="line">            <span class="comment">// 判断当前队列中队首的值是否有效</span></span><br><span class="line">            <span class="keyword">if</span>(queue.peek() &lt;= i-k)&#123;</span><br><span class="line">                queue.poll();   </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 当窗口长度为k时 保存当前窗口中最大值</span></span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt;=k) res[i-k+<span class="number">1</span>]=nums[queue.peek()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2025-08-0876-最小覆盖子串困难">2025-08-08<a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a><code>困难</code></h2><blockquote><p>tag——<a href="https://leetcode.cn/tag/hash-table/">哈希表</a><a href="https://leetcode.cn/tag/string/">字符串</a><a href="https://leetcode.cn/tag/sliding-window/">滑动窗口</a></p><p>题解：通过distance标志位，当右指针遍历到全部的子串，进循环看左侧，左侧减少到子串的某值统计长度，当左侧等于目标子串之一，distance减少，右指针继续找，找到distance，左侧再收缩</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//76 覆盖子串（滑动窗口）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取字符串长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sLen</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">tLen</span> <span class="operator">=</span> t.length();</span><br><span class="line">    <span class="comment">// 边界条件判断：如果s比t短，或者任一为空，则不可能存在覆盖子串</span></span><br><span class="line">    <span class="keyword">if</span> (sLen &lt; tLen || sLen == <span class="number">0</span> || tLen == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">char</span>[] sCharArray = s.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] tCharArray = t.toCharArray();</span><br><span class="line">    <span class="comment">// winFreq: 记录当前窗口中各字符出现的次数</span></span><br><span class="line">    <span class="comment">// tFreq: 记录字符串t中各字符出现的次数</span></span><br><span class="line">    <span class="type">int</span>[] winFreq = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">64</span>]; <span class="comment">// 窗口</span></span><br><span class="line">    <span class="type">int</span>[] tFreq = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">64</span>];   <span class="comment">// 统计t中字符出现的次数和位置</span></span><br><span class="line">    <span class="comment">// distance表示当前窗口中满足字符数量要求的字符种类数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始化最小长度为一个比可能最大值更大的数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minLen</span> <span class="operator">=</span> sLen + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计字符串t中每个字符的出现次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : tCharArray) &#123;</span><br><span class="line">        tFreq[c - <span class="string">&#x27;A&#x27;</span>]++; <span class="comment">// 通过字符与&#x27;A&#x27;的差值作为索引</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 滑动窗口的左右指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 记录最小覆盖子串的起始位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;  -&gt; &quot;BANC&quot;</span></span><br><span class="line">    <span class="keyword">while</span> (right &lt; sLen) &#123;</span><br><span class="line">        <span class="comment">// 如果当前字符不在t中，直接跳过</span></span><br><span class="line">        <span class="keyword">if</span> (tFreq[sCharArray[right] - <span class="string">&#x27;A&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当窗口中该字符的数量小于t中该字符的数量时，说明这个字符是需要的，增加distance</span></span><br><span class="line">        <span class="keyword">if</span> (winFreq[sCharArray[right] - <span class="string">&#x27;A&#x27;</span>] &lt; tFreq[sCharArray[right] - <span class="string">&#x27;A&#x27;</span>]) &#123;</span><br><span class="line">            distance++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新窗口中该字符的计数</span></span><br><span class="line">        winFreq[sCharArray[right] - <span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 当distance等于t的长度时，说明当前窗口已经包含了t的所有字符</span></span><br><span class="line">        <span class="keyword">while</span> (distance == tLen) &#123; <span class="comment">//ADOBEC</span></span><br><span class="line">            <span class="comment">// 记录最短长度并记录开头的下标</span></span><br><span class="line">            <span class="keyword">if</span> (right - left &lt; minLen) &#123;</span><br><span class="line">                minLen = right - left;</span><br><span class="line">                begin = left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果左边界字符不在t中，直接移动左指针</span></span><br><span class="line">            <span class="keyword">if</span> (tFreq[sCharArray[left] - <span class="string">&#x27;A&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果当前窗口中该字符的数量正好等于t中该字符的数量，</span></span><br><span class="line">            <span class="comment">// 移除该字符后将不再满足要求，需要减少distance</span></span><br><span class="line">            <span class="keyword">if</span> (winFreq[sCharArray[left] - <span class="string">&#x27;A&#x27;</span>] == tFreq[sCharArray[left] - <span class="string">&#x27;A&#x27;</span>]) &#123;</span><br><span class="line">                distance--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新窗口中该字符的计数</span></span><br><span class="line">            winFreq[sCharArray[left] - <span class="string">&#x27;A&#x27;</span>]--;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果minLen没有被更新过，说明没有找到覆盖子串</span></span><br><span class="line">    <span class="keyword">if</span> (minLen == sLen + <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 返回最小覆盖子串</span></span><br><span class="line">    <span class="keyword">return</span> s.substring(begin, begin + minLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="普通数组">普通数组</h1><h1 id="矩阵">矩阵</h1><h1 id="链表">链表</h1><h1 id="二叉树">二叉树</h1><h1 id="图论">图论</h1><h1 id="回溯">回溯</h1><h1 id="二分查找">二分查找</h1><h1 id="栈">栈</h1><h1 id="堆">堆</h1><h1 id="贪心算法">贪心算法</h1><h1 id="动态规格">动态规格</h1><h1 id="多维动态规划">多维动态规划</h1><h1 id="技巧">技巧</h1>]]></content>
    
    
    <summary type="html">HOT-100！</summary>
    
    
    
    <category term="算法" scheme="https://u7u7.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="项目" scheme="https://u7u7.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="算法" scheme="https://u7u7.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>线程池使用</title>
    <link href="https://u7u7.top/posts/ThreadPool.html"/>
    <id>https://u7u7.top/posts/ThreadPool.html</id>
    <published>2025-08-01T02:00:25.000Z</published>
    <updated>2025-08-25T01:30:22.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池优化百万数据插入数据库">线程池优化百万数据插入数据库</h1><p>构建User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> User <span class="title function_">buildUser</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> User.builder()</span><br><span class="line">            .openid(<span class="string">&quot;&quot;</span>+i)</span><br><span class="line">            .name(<span class="string">&quot;user_&quot;</span>+i)</span><br><span class="line">            .sex(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初版本单线程池</p><p>耗时29s</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单线程线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用AtomicInteger保证线程安全（原子操作+可见性）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ThreadHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定ArrayList初始容量（1000），减少扩容开销</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">                users.add(buildUser(i));</span><br><span class="line">                count.incrementAndGet(); <span class="comment">// 原子自增，线程安全</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">10000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    userService.saveBatch(users);</span><br><span class="line">                    users.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理最后不足数据</span></span><br><span class="line">            <span class="keyword">if</span> (!users.isEmpty()) &#123;</span><br><span class="line">                userService.saveBatch(users);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//捕获异常，避免任务无声中断</span></span><br><span class="line">            System.err.println(<span class="string">&quot;插入失败：&quot;</span> + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertBatch</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用Future获取任务执行结果，阻塞等待任务完成</span></span><br><span class="line">    Future&lt;?&gt; future = SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">ThreadHandler</span>());</span><br><span class="line">    future.get(); <span class="comment">// 关键：等待子线程任务执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时count已确保是最终值（因为future.get()已等待任务完成）</span></span><br><span class="line">    System.out.println(<span class="string">&quot;总耗时：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms，插入总数：&quot;</span> + count.get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭线程池，避免资源泄漏</span></span><br><span class="line">    SECKILL_ORDER_EXECUTOR.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化：线程池改造自定义线程池 总耗时：11429ms，插入总数：1000000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化1：自定义线程池（IO密集型任务，线程数=CPU核心数*2）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CPU_CORES</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CUSTOM_EXECUTOR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        CPU_CORES,                  <span class="comment">// 核心线程数（CPU核心数，减少上下文切换）</span></span><br><span class="line">        CPU_CORES * <span class="number">2</span>,              <span class="comment">// 最大线程数（IO密集型可适当增加）</span></span><br><span class="line">        <span class="number">60L</span>, TimeUnit.SECONDS,      <span class="comment">// 空闲线程存活时间</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">100</span>), <span class="comment">// 有界队列（避免无界队列OOM）</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;       <span class="comment">// 自定义线程工厂（便于调试）</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;batch-insert-thread-&quot;</span> + threadNum.getAndIncrement());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy() <span class="comment">// 拒绝策略：提交者执行（缓解压力）</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>数据分片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用AtomicInteger保证线程安全（原子操作+可见性）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">totalCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 每批插入数量（根据数据库性能调整）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BATCH_SIZE</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line"><span class="comment">// 总数据量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOTAL_DATA</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据分片任务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsertTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> start;  <span class="comment">// 分片起始索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> end;    <span class="comment">// 分片结束索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 事务内批量插入（减少事务提交开销） 在run方法外面减少事务提交次数</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; batchList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(BATCH_SIZE); <span class="comment">// 预分配容量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localCount</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 线程内计数（减少原子操作频率）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">namePrefix</span> <span class="operator">=</span> <span class="string">&quot;user_&quot;</span>; <span class="comment">// 预定义前缀，减少对象创建</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">                <span class="comment">// 直接使用构造方法创建对象，减少setter开销</span></span><br><span class="line">                batchList.add(<span class="keyword">new</span> <span class="title class_">User</span>(namePrefix+i));</span><br><span class="line">                localCount++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 达到批次大小则插入</span></span><br><span class="line">                <span class="keyword">if</span> (batchList.size() &gt;= BATCH_SIZE) &#123;</span><br><span class="line">                    saveBatch(batchList);</span><br><span class="line">                    batchList.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理剩余数据</span></span><br><span class="line">            <span class="keyword">if</span> (!batchList.isEmpty()) &#123;</span><br><span class="line">                saveBatch(batchList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最后统一更新总计数（减少AtomicInteger操作次数）</span></span><br><span class="line">            totalCount.addAndGet(localCount);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;插入失败：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">saveBatch</span><span class="params">(List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        userService.saveBatch(users, BATCH_SIZE); <span class="comment">// 指定批次大小适配框架</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBatchInsertWithCustomPool</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    List&lt;Future&lt;?&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化2：数据分片（每个线程处理约5-10万条，减少线程调度开销）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">perThreadData</span> <span class="operator">=</span> <span class="number">100000</span>; <span class="comment">// 每个线程处理10万条</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">threadCount</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) TOTAL_DATA / perThreadData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * perThreadData;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min((i + <span class="number">1</span>) * perThreadData, TOTAL_DATA);</span><br><span class="line">        futures.add(CUSTOM_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">InsertTask</span>(start, end)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待所有任务完成</span></span><br><span class="line">    <span class="keyword">for</span> (Future&lt;?&gt; future : futures) &#123;</span><br><span class="line">        future.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭线程池</span></span><br><span class="line">    CUSTOM_EXECUTOR.shutdown();</span><br><span class="line">    <span class="comment">// 等待线程池完全关闭（最多等1分钟）</span></span><br><span class="line">    CUSTOM_EXECUTOR.awaitTermination(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;总耗时：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms，插入总数：&quot;</span> + totalCount.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入jvm预热看看 总耗时：10142ms，插入总数：1000000</p><p>优化了一秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JVM预热方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">warmUp</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; warmUpList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        warmUpList.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;warmup_&quot;</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line">    userService.saveBatch(warmUpList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：一开始啊，用单线程处理百万条数据，慢悠悠地跑了 29 秒，纯属浪费多核 CPU 的力气。后来改了改，搞了个自定义线程池，按 CPU 核心数分配线程，把 100 万条数据切成一块一块的，让多个线程同时处理，这一下就快多了，直接降到 11 秒左右。中间还琢磨了些细节，比如计数的时候不让线程频繁抢着算，而是各自记完最后一起汇总；列表和字符串也提前准备好，少搞些重复创建的活儿。数据库那边也调了调，让每个线程处理的数据都放一个事务里提交，少让数据库来回跑 IO。最后还加了个 “热身” 步骤，让系统先跑点数据进入状态，这么一折腾，耗时就压到 10 秒了，比原来快了快两倍呢。</p><p>为什么只快了两倍：因为插入数据库是IO操作，在磁盘，处理事务，维护索引。这些操作中，并不是CPU单独干活，所以开多个核心数，也只是加快了CPU处理工作的效率。</p>]]></content>
    
    
    <summary type="html">处理百万数据插入数据库</summary>
    
    
    
    <category term="杂项" scheme="https://u7u7.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="项目" scheme="https://u7u7.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="JUC" scheme="https://u7u7.top/tags/JUC/"/>
    
    <category term="多线程" scheme="https://u7u7.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="调优" scheme="https://u7u7.top/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>面试题集</title>
    <link href="https://u7u7.top/posts/ms.html"/>
    <id>https://u7u7.top/posts/ms.html</id>
    <published>2025-07-28T04:00:25.000Z</published>
    <updated>2025-08-08T14:07:38.551Z</updated>
    
    <content type="html"><![CDATA[<p>推荐的几个八股文网站</p><div class="site-card-group"><a class="site-card" href="https://xiaolincoding.com/"><div class="img"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728135701.png"/></div><div class="info"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728141028.png"/><span class="title">小林coding</span><span class="desc">内容少</span></div></a><a class="site-card" href="https://javaguide.cn/"><div class="img"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728141622.png"/></div><div class="info"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728140855.png"/><span class="title">Javaguide</span><span class="desc">内容详细</span></div></a><a class="site-card" href="https://javabetter.cn/sidebar/sanfene/nixi.html"><div class="img"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728141704.png"/></div><div class="info"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728141409.png"/><span class="title">二哥</span><span class="desc">包含学习路线</span></div></a><a class="site-card" href="https://zha-ge.cn/"><div class="img"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728141720.png"/></div><div class="info"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728141502.png"/><span class="title">渣哥</span><span class="desc">支持AI</span></div></a><a class="site-card" href="https://www.mianshiya.com/"><div class="img"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728142542.png"/></div><div class="info"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20250728142648.png"/><span class="title">面试鸭</span><span class="desc">鱼皮的比较全</span></div></a></div><h1 id="JAVA面试">JAVA面试</h1><h2 id="NIO和AIO区别">NIO和AIO区别</h2><h2 id="面向对象和面向过程">面向对象和面向过程</h2><p>面向过程编程是以过程为中心的编程思想，将问题拆解为一系列的过程和步骤或者函数来解决问题，它的代码重用很差，但是效率较高。面向对象编程是以对象为中心，通过将问题拆解为对象的行为和属性和方法，通过不同对象的交互来解决问题，适合复杂和模块化的问题，代码重用性高。</p><h2 id="Stream流">Stream流</h2><p>它是java8以后引入的新特性，它可以对数据源比如集合 数组 io进行一系列的操作序列，像一个流水线一样将数据源一步一步的操作，它支持并行计算，大大提高了对数据源的处理效率。</p><h2 id="final关键字介绍一下">final关键字介绍一下</h2><p>final修饰类的话 类不能被继承，修饰方法，方法不能被重写，修饰变量，变量只能赋值一次，一般修饰的时候就赋值了。</p><h2 id="finally在try-catch">finally在try catch</h2><p>操作一些需要手动释放的资源时，保证这些资源能被正确关闭。即便在<code>try</code>块中发生异常，或者<code>try</code>块中的代码执行了<code>return</code>语句，<code>finally</code>块中的代码依然会执行。</p><h2 id="StringBuffer与StringBuilder">StringBuffer与StringBuilder</h2><p>StringBuffer：可变字符串、效率低、线程安全；适合多线程，每个线程都加了synchronized</p><p>StringBuilder：可变字符序列、效率高、线程不安全；适合单线程</p><h2 id="几种变量的区别">几种变量的区别</h2><table><thead><tr><th><strong>变量类型</strong></th><th><strong>定义位置</strong></th><th><strong>作用域</strong></th><th><strong>生命周期</strong></th><th><strong>初始化</strong></th><th><strong>共享性</strong></th></tr></thead><tbody><tr><td>局部变量</td><td>方法 / 代码块内部</td><td>声明它的方法 / 代码块内</td><td>方法 / 代码块执行期间</td><td>必须手动初始化</td><td>不共享</td></tr><tr><td>全局变量</td><td>类外部（Java 通过<code>static</code>模拟）</td><td>整个程序</td><td>程序运行期间</td><td>必须手动初始化</td><td>所有类共享</td></tr><tr><td>成员变量</td><td>类内部，无<code>static</code></td><td>整个类内部</td><td>对象创建到销毁</td><td>可默认初始化</td><td>每个对象独立副本</td></tr><tr><td>静态成员变量</td><td>类内部，有<code>static</code></td><td>整个类内部</td><td>类加载到卸载</td><td>可默认初始化</td><td>所有对象共享</td></tr></tbody></table><h2 id="线程池里面需要配置哪些主要参数">线程池里面需要配置哪些主要参数</h2><p>线程池（<code>ThreadPoolExecutor</code>）的主要配置参数，有核心线程数，最大线程数，线程空闲时间，时间单位，任务队列，线程工程和拒绝策略。线程创建的过程首先是提交任务，调用线程池的时候会判断当前任务的线程数是否小于核心线程数，如果小于，就创建核心线程，当运行的线程数等于核心线程数的时候，将任务放入任务队列中，如果还有新的任务来，任务队列满了，并且当前核心线程数小于最大线程数，会创建非核心线程数。如果达到最大线程数并且任务队列已满，会执行你设置的拒绝策略，最后任务执行完了，会销毁线程。</p><h2 id="创建线程"><strong>创建线程</strong></h2><p>线程的创建底层其实都是通过Thread类去实现，他有两个核心方法，一个start方法，一个run方法，start方法是启动线程，此时线程会等待cpu调度资源，当线程被调度以后会回调到线程，然后再执行run方法，对任务逻辑进一个执行。所以启动线程的方式只有thread的start方法，我们可以通过以下几种方式写我们的任务逻辑，在java中我们可以通过继承thread类，并且重写run方法，写我们的任务逻辑执行任务。还有通过实现runnable接口的run方法，会通过thread的构造函数，传入进去。也可以去结合futureTask和callable(有返回值)接口，实现异步任务的执行。</p><h2 id="线程池如果实现复用">线程池如果实现复用</h2><p>线程池的复用也是线程池的核心思想，它并不是线程使用完以后再拿回来，它的实现是通过线程池里面维护的阻塞队列实现的，当线程执行完一个任务以后，不会立刻结束，而是通过自旋的方式，它会从阻塞队列调用take或者poll方法，获取新的任务。如果队列中有任务，那线程就执行新的任务，如果队列中任务为空，那就要分几种情况，根据核心线程数，最大线程数，超时时间，是否允许回收。比如当前线程数没有达到核心线程数，那它会进入等待状态，等待阻塞队列来新的任务，如果超过核心线程数，并且允许回收，并且没任务了，就会回收，这样的逻辑实现线程的复用。</p><h2 id="线程池为什么不能使用无界队列">线程池为什么不能使用无界队列</h2><h2 id="阻塞队列什么情况会阻塞">阻塞队列什么情况会阻塞</h2><p>一般用于多线程之间实现线程安全通讯和协调</p><ul><li>阻塞操作<ul><li>当队列已满时，向队列中添加元素的操作（如<code>put</code>）会被阻塞，直到队列有空闲位置。</li><li>当队列为空时，从队列中获取元素的操作（如<code>take</code>）会被阻塞，直到队列中有元素可用。</li></ul></li><li><strong>线程安全</strong>：内部实现了锁机制（如<code>ReentrantLock</code>），确保多线程环境下操作的安全性。</li></ul><h2 id="线程的状态">线程的状态</h2><p>在JAVA中封装了线程的六种状态，第一种是new，当前线程被创建了，但是没有执行start方法，第二个就是runnable，此时线程已经执行了或者等待执行，此时CPU会调度资源分配任务给该线程，第三个是blocked，线程中有某个线程拿到了锁，其他线程会进去blocked阻塞状态，等待锁释放，第四个是waiting，线程等待其他线程执行完，这里我们一般是手动的去wait或者park，第五个是现在wait park加时间参数，线程会进入Time waiting状态，sleep同样会进去该状态。最后一个就是终止状态，执行完run方法以后进入终止状态。</p><h2 id="wait和blocked区别">wait和blocked区别</h2><p>wait和blocked触发条件不一样，首先wait是用户通过wait或者park手动主动去触发，然后需要通过notify进行一个手动唤醒。但是blocked是被动去触发，它是当遇到其他线程拿到锁以后，该线程会进入阻塞状态，直到线程拿到锁以后在会去执行任务。wait在执行的时候会主动的去释放锁，而blocked是要拿到监视器锁以后等待执行完再去释放锁。</p><h2 id="ThreadLocal">ThreadLocal</h2><p>threadlocal是单线程的副本变量，它是属于当前线程的，线程之间互相不影响，保证了线程变量的安全。它的结构是在thread里面有一个threadlocalmap是kv的集合，当我给threadlocal set的时候会将当前线程threadlocal对象当key  值为value。get也是一样，通过当前threadlocal在threadlocalmap中获取value。存在一个内存泄露问题 threadlocal和thread引用在栈中，对象在堆中，产生关键，thread里面还有一个threadlocalmap，他也是在堆中，并且和thread关联，同时它的key是弱引用，并且和threadlocal对象关联，这样在垃圾回收的时候，就回收只有弱引用关联的threadlocal，又因为value是强引用，thread存在value就存在。不销毁就一直存在，所以map会有一个key为null，value存在的情况，在线程池的情况下，线程又不会销毁，而是一直复用，那就会导致一直添加空key又有value导致内存溢出。所以我们需要在每次回收的时候手动remove将强引用的value删除。</p><h2 id="synchronized和ReentrantLock锁">synchronized和ReentrantLock锁</h2><p>synchronized是java中的一个关键字，而ReentrantLock是jdk提供的一个类，synchronized是jvm层面的，它是非公平锁，底层像悲观锁，自动加锁和自动释放。而ReentrantLock是api层面的锁，它可以实现非公平锁和公平锁，底层像乐观锁，加锁释放锁需要通过lock 和 unlock。</p><h2 id="CAS-悲观锁和乐观锁">CAS 悲观锁和乐观锁</h2><p>CAS是比较和交换，它的作用就是当几个线程同时执行一个任务的时候，线程会有一个old value 和 一个new value，它可以比较任务的状态值，一般状态值会有0,1两个状态，线程也会有0和1两个状态值，如果某个线程执行任务的时候，发现任务的状态值和自己old value一样，就会把任务的状态值改成new value，这样其他线程来的时候发现任务的状态值和自己的oldvalue不一样，就进入自旋，重复cas操作，直到任务状态和自己的oldvalue一样。那悲观锁就是线程悲观的认为线程一定会发生冲突，就会提前加锁防止其他线程同时并发操作。而乐观锁就是乐观的认为线程不会出现冲突，它就会进行一个检查，检查资源是否被修改了，若未被修改则成功提交，否则重试或放弃。</p><h2 id="饿汉式和懒汉式">饿汉式和懒汉式</h2><p>都是单例设计模式，饿汉式就是在类加载的时候就会迫不及待的创建实例对象，懒汉式是当类被加载的时候并不会实例化对象，而是在第一次执行getinstance方法中实例化对象，一般会在方法中加锁保证线程安全。饿汉式的加载模式实现简单，因为是jvm保证天然线程安全，但是会浪费资源的占用，因为有时候实例没有被使用就会资源浪费，而懒汉式实现相对复杂，第一次获取实例的速度比较慢，但是节约内存因为是按需创建的。</p><p>在 <code>nginx.conf</code> 或 <code>sites-available</code> 目录下创建配置文件，示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;              <span class="comment"># 监听端口</span></span><br><span class="line">    <span class="attribute">server_name</span> example.com;  <span class="comment"># 域名或IP</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend_server;  <span class="comment"># 后端服务器地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;       <span class="comment"># 传递原始请求头</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment"># 传递真实IP</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键配置参数说明</p><ul><li><strong>proxy_pass</strong>：后端服务器地址（支持 HTTP/HTTPS）</li><li>proxy_set_header：传递客户端请求头信息<ul><li><code>Host</code>：保留原始请求的域名</li><li><code>X-Real-IP</code>：传递客户端真实 IP</li><li><code>X-Forwarded-For</code>：记录完整代理链 IP</li><li><code>X-Forwarded-Proto</code>：传递请求协议（HTTP/HTTPS）</li></ul></li></ul><h2 id="简述一下JAVA三大特性">简述一下JAVA三大特性</h2><p>Java 的三大特性：</p><ol><li><strong>封装</strong>：将数据和操作数据的方法绑定在一起，隐藏内部实现细节，通过公共接口访问。</li><li><strong>继承</strong>：子类继承父类的属性和方法，实现代码复用和扩展。</li><li><strong>多态</strong>：同一方法可以根据对象类型的不同表现出不同的行为，通过继承和接口实现。</li></ol><h2 id="集合">集合</h2><p>Java 集合主要分为两大接口：</p><ol><li><strong>Collection</strong>：存储单个元素的集合。<ul><li><strong>List</strong>：有序可重复，如<code>ArrayList</code>、<code>LinkedList</code>。</li><li><strong>Set</strong>：无序不可重复，如<code>HashSet</code>、<code>TreeSet</code>。</li><li><strong>Queue</strong>：队列，如<code>LinkedList</code>、<code>PriorityQueue</code>。</li></ul></li><li><strong>Map</strong>：存储键值对的集合，如<code>HashMap</code>、<code>TreeMap</code>、<code>ConcurrentHashMap</code>。</li></ol><h2 id="linkedlist和-ArrayList-的对比">linkedlist和 <strong>ArrayList 的对比</strong></h2><p>linkedlist底层是双向链表存储的非连续内存，而arraylist是动态数组，它是连续内存存储的。那他们的扩容机制也是不一样的这也和他们底层实现是有关系，arraylist底层是动态数组，所以容量不足的时候，会创建新数组，再把元素复制，那一般新数组长度是原来的1.5倍，那linkedlist因为是链表的关系，它在插入时候是动态创建新节点。他们的共同点就是线程都不是很安全，需要synchronizedList包装。或者用copyonwirtearraylist。选择的话看插入数据的时候，如果是在尾端或者经常需要索引值查元素，这个时候选用arraylist，如果需要元素放头部或者中间，并且插入操作比较多，就选择linkedlist。</p><h2 id="hashMap底层实现">hashMap底层实现</h2><p>hashmap底层分java8之前和之后，因为在8的时候对它进行了一个优化，在8之前是采用一个链表+数组的方式去存储数据，那么在8以后是加了一个红黑树的方式存储，当数组长度大于64，链表超过8的时候，会从链表转成红黑树，提高了数据量大的时候的一个查询效率。因为都是数组+链表或者红黑树来实现，其实就是插入数据的时候会根据一个hash值进行数组的插入，也就是哈希桶么。如果发生hash冲突了，那么会在同样的hash值下面创建一个链表，是这样来存储数据的。通过 <code>(n - 1) &amp; hash</code> 确定元素位置，如果要存100个元素，容量设为多大，100/0.75么，负载因子是0.75，再加1，然后因为容量要是2的幂所以需要向上找2的幂。</p><h2 id="ConcurrentHashMap和hashmap的区别">ConcurrentHashMap和hashmap的区别</h2><p>最大的区别其实就是在多线程的情况下，hashmap是线程不安全的，因为底层原理是链表+数组么，并没有加锁，所以在高并发的情况下肯定会导致数据不一致，或者链表成环导致死循环的问题。而concurrenthashmap底层在以前是分布段锁+CAS比较时交换，那在JAVA8以后是使用CAS加synchronized锁，它会对链表的头结点加锁，这样在其他线程修改值的时候就会等待 它的特点是对数据在读操作不加锁，在写入操作先通过CAS插入，失败的话就加synchronized锁，提高并发效率。</p><h2 id="ConcurrentHashMap-为何禁止-null-作为-key？">ConcurrentHashMap 为何禁止 null 作为 key？</h2><ul><li>并发场景下，<code>null</code> 会导致 <strong>逻辑歧义</strong>：<code>get(null)</code> 返回 <code>null</code>，无法区分 “key 不存在” 和 “value 为 null”；</li><li>设计上保持与 <code>Hashtable</code>（线程安全且禁止 null key）的一致性，避免并发判断复杂，保障线程安全逻辑清晰。</li></ul><h2 id="如何创建线程">如何创建线程</h2><p>Java 创建线程的三种方式：</p><ol><li><p><strong>继承 Thread 类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用：new MyThread().start();</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现 Runnable 接口</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用：new Thread(new MyRunnable()).start();</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Runnable running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现 Callable 接口</strong>（支持返回值）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用：通过FutureTask和Thread执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="介绍Mybatis">介绍Mybatis</h2><p><strong>半自动 ORM（对象关系映射）框架</strong>，通过 XML 或注解将 SQL 语句与 Java 对象绑定，一般用#{name}的形式占位</p><ul><li><strong>XML 配置</strong>：通过 <code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code> 等标签编写 SQL。</li><li><strong>注解支持</strong>：使用 <code>@Select</code>、<code>@Insert</code> 等注解直接在接口中定义 SQL。</li></ul><h2 id="mybatis和mybatis-plus区别">mybatis和mybatis-plus区别</h2><p>mybatis是一般是用xml和注解手动编写SQL，mybatis-plus是内置了很多UURD的方法，基础的SQL编写代码会少很多。这样的话mybatis就比较适合一些复杂的业务逻辑，多表查询还要分组统计什么的。mybatis-plus的话复杂查询就需Lambda 表达式或 Wrapper 条件构造器来查询多表。分页是使用PageHelper(页码，每页显示) 。</p><h2 id="如何防止SQL注入">如何防止SQL注入</h2><p>优先使用 <code>#&#123;&#125;</code> 占位符将参数作为预编译语句的占位符（<code>?</code>）处理，底层使用 <code>PreparedStatement</code>，完全避免 SQL 注入。参数值（如 <code>1' OR '1'='1</code>）被自动转义为字符串，作为数据而非 SQL 代码处理。mybatis-plus的话是 <code>Wrapper</code> 条件构造器会自动使用预编译。使用lambda时候，<strong>参数类型会严格校验</strong>，防止非法 SQL，内置的很多插件都会防止sql注入。</p><h2 id="properties和yml和yaml的加载顺序和优先级以及区别">properties和yml和yaml的加载顺序和优先级以及区别</h2><p>properties是键值对，yml和yaml是树形结构么，Spring Boot 会按properties，yaml，yml加载<strong>同一目录</strong>下的配置文件，后加载的覆盖先加载的。特定环境配置（如 <code>application-dev.properties</code>）会覆盖默认（<code>application.properties</code>）。</p><h2 id="重载和重写的区别">重载和重写的区别</h2><p>定义位置不同：</p><ul><li>重载发生在<strong>同一个类中</strong>，是多个同名方法因参数列表不同（类型、数量、顺序）而共存的现象；</li><li>重写发生在<strong>子类与父类之间</strong>，子类通过相同参数列表覆盖父类的方法实现。</li></ul><p>多态：动态编译看左运行看右，静态编译看左运行看左</p><p>重载属于编译时多态（静态绑定）编译器根据调用时的参数类型直接确定方法版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> i)</span> &#123; ... &#125;  <span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123; ... &#125;  <span class="comment">// 方法2</span></span><br><span class="line">test(<span class="number">10</span>);  <span class="comment">// 编译时确定调用方法1</span></span><br></pre></td></tr></table></figure><p>重写属于</p><p>运行时多态（动态绑定）JVM 根据对象实际类型决定执行哪个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Parent</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">p.method();  <span class="comment">// 运行时调用Child的method()</span></span><br></pre></td></tr></table></figure><h2 id="和equals区别"><a href="https://blog.csdn.net/weixin_46460843/article/details/110310604?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=110310604&amp;sharerefer=PC&amp;sharesource=U7_7cc&amp;sharefrom=from_link">==和equals区别</a></h2><ul><li>“==”是运算符，如果是基本数据类型，则比较<strong>存储的值</strong>；如果是引用数据类型，则比较<strong>所指向对象的地址值</strong>。</li><li>equals是Object的方法，比较的是<strong>所指向的对象的地址值</strong>，一般情况下，重写之后比较的是<strong>对象的值</strong>。一般情况我们创建的类都会对equals方法进行重写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);    <span class="comment">//true，比较地址值：内容相同，因为常量池中只有一个“hello”，所以它们的地址值相同</span></span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">//true，比较内容：内容相同，因为常量池中只有一个“hello”，所以它们的地址值相同</span></span><br><span class="line">System.out.println(s1.equals(<span class="string">&quot;hello&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(s3 == s4);        <span class="comment">//false,比较地址值：s3和s4在堆内存中的地址值不同</span></span><br><span class="line">System.out.println(s3.equals(s4));    <span class="comment">//true，比较内容：内容相同</span></span><br></pre></td></tr></table></figure><h2 id="重写-equals-必并重写-hashCode">重写 equals()必并重写 hashCode</h2><p>Java 规范要求：<em><code>equals</code> 相等的对象，<code>hashCode</code> 必须相等</em>。若仅重写 <code>equals</code>，不重写 <code>hashCode</code>，会导致 <strong>哈希集合（如 <code>HashMap</code>、<code>HashSet</code>）逻辑错误</strong>（比如两个 <code>equals</code> 相等的对象因 <code>hashCode</code> 不同，被哈希表判定为不同键 / 元素，破坏唯一性）</p><h2 id="缓存与数据库如何保证数据一致性">缓存与数据库如何保证数据一致性</h2><ul><li><strong>Cache-Aside 模式</strong>：更新数据库后，<strong>删除缓存</strong>（而非更新，避免并发冲突）；</li><li><strong>延时双删</strong>：更新数据库 → 删缓存 → 短暂休眠（避免脏读）→ 再删缓存（处理并发更新延迟）；</li><li><strong>最终一致性</strong>：结合消息队列异步同步，保证最终数据一致。</li></ul><h2 id="JVM">JVM</h2><p>jvm jre jdk</p><p>JVM是java的虚拟机，帮助Java 实现 “一次编写，到处运行”，同时也是java跨平台使用的依靠，jre是运行java的环境，它包含了jvm，如果只运行编译好的jar包或者class文件，那么只需要有jre就行，但是如果要开发java，少不了需要编译，这时候就需要有jdk，jdk包含了jre和jvm，提供了很多java 的开发工具。编译器（javac），打包工具jar</p><h2 id="JUC">JUC</h2><h1 id="Spring面试">Spring面试</h1><h2 id="IOC和AOP">IOC和AOP</h2><p>是spring的两大重要特性，IOC就是控制反转、注入依赖么。他就是Spring将我们的类通过的方式，将他的创建和生命周期都放到Spring容器中统一管理，这样我们其他的类如果需要调用某个类就可以直接到Spring的容器工厂中去找。AOP就是IOC的一个扩展，他是面向切面编程，其实就是一个动态代理，通常情况他的作用就是能实现我们非业务的代码，不去影响实际的业务，其实就是在不动已经完成的业务代码，想要在加上非业务的代码的时候会用到AOP思想，比如要看日志，算接口时间，事务管理等。AOP有五大通知，前置 后置 环绕 异常 最终，添加和业务无关的逻辑。</p><h2 id="Bean的生命周期">Bean的生命周期</h2><p>IOC的加载其实就是一个Bean的创建么，Bean从创建到销毁就是它的生命周期，分为实例化，它是通过反射去找构造函数实例化的。再属性赋值，解析自动装配的，一般用@autowired或者@resource,解决了循环依赖的问题。接着是初始化，初始化的时候调用初始化生命周期回调，这个时候就可以使用该类了，最后容器关闭的时候，调用销毁生命周期回调，将Bean进行一个销毁处理。</p><h2 id="Spring-的自动装配过程如何识别要装配的类？会扫描全部类吗？">Spring 的自动装配过程如何识别要装配的类？会扫描全部类吗？</h2><p>Spring 识别要装配的类主要通过 <strong>组件扫描（Component Scan）</strong>，而非扫描项目中的全部类，具体逻辑如下：他会扫描spring用注解标记的一些类，将标记的类注册为 Bean。开发者需在配置中指定扫描的包路径（如<code>@ComponentScan(&quot;com.example&quot;)</code>），Spring 仅扫描该路径下的类，不会扫描所有类，以此提升效率。</p><h2 id="Spring-Boot-自动配置原理？">Spring Boot 自动配置原理？</h2><ol><li><strong>注解驱动</strong>：<code>@SpringBootApplication</code> 包含 <code>@EnableAutoConfiguration</code>，触发自动配置；</li><li><strong>SPI 机制</strong>：Spring 扫描 <code>META-INF/spring.factories</code>，加载所有 <code>AutoConfiguration</code> 类；</li><li><strong>条件装配</strong>：通过 <code>@Conditional</code>（如 <code>@ConditionalOnClass</code>、<code>@ConditionalOnBean</code>）判断环境是否满足，满足则自动创建 Bean。</li></ol><h2 id="Component和-Bean">@Component和@Bean</h2><p>首先在用途方面和使用方法不同，Component注解是标识普通的类，spring会通过Componentscan扫描将类注册到spring IOC容器中。@bean一般是在配置类中的方法，声明和手动配置一个bean对象。Component注解是spring自动创建和初始化的，bean注解可以手动控制bean的创建和配置过程</p><h2 id="autowired和-resource">@autowired和@resource</h2><p>autowired是按照类进行注入是Spring自带的，resource是按照对象名进行注入，对象名找不到就找类，它属于jdk</p><h2 id="SSM">SSM</h2><p>Spring + Spring MVC + MyBatis 三个框架的组合，是 Java 企业级开发中经典的 <strong>Web 应用架构</strong>。这三个框架各司其职，共同构成了一个完整的分层开发体系：</p><ul><li><strong>Spring</strong>：负责<strong>全局管理</strong>（IoC 容器、AOP 切面）和<strong>组件协调</strong>；</li><li><strong>Spring MVC</strong>：作为<strong>表现层框架</strong>，处理 HTTP 请求和响应；</li><li><strong>MyBatis</strong>：作为<strong>数据访问层框架</strong>，简化数据库操作。</li></ul><h2 id="TODO-JDK动态代理和CGLIB动态代理">TODO JDK动态代理和CGLIB动态代理</h2><h2 id="拦截器的使用场景">拦截器的使用场景</h2><p>拦截器其实就是一个AOP的思想，最常见的就是用户登录的时候进行身份验证和权限校验，还有日志的记录和监控，还有对传参出参的数据进行校验，看是否符合业务需求，还有前端跨域请求也有用到。</p><h2 id="拦截器和过滤器的区别">拦截器和过滤器的区别</h2><p>来源不同过滤器来自servlet而拦截器是spring，他们也是实现了不同的类，进行方法的实现，过滤器实现了filter接口，底层是通过一个filterchain类进行链的操作实现过滤的，而拦截器是实现handlerInterceptor接口。拦截器底层是通过反射实现的。他们在项目中所在位置也不一样，拦截器更接近controller层，所以经常用来做登录校验，过滤器就用来做编码规则等功能。</p><h2 id="Spring事务">Spring事务</h2><h3 id="Spring事务的创建">Spring事务的创建</h3><p>用一个注解@Transactional，在service层使用该注解设置隔离级别 传播级别 异常处理。复杂逻辑通常使用TransactionTemplate，核心都是保持业务操作数据时的原子性。</p><h3 id="Spring事务的隔离级别">Spring事务的隔离级别</h3><p>默认状态和数据库的隔离级别保持一致，还有读未提交，读已提交，可重复读和串行化。</p><h3 id="Spring事务的失效">Spring事务的失效</h3><p>第一个就是对非public方法，使用事务的时候会失效，因为事务其实基于AOP的，那AOP源码里面有写使用注解如果该方法为非public则会返回一个null值，第二个就是同一个类中，非事务方法中调用了事务方法也会导致失效，第三个就是事务在异常处理的时候，事务内部没有对异常抛出或者进行处理，导致事务无法回滚，第四个就是数据库不支持事务的话也会失效。</p><h3 id="Spring事务的传播行为">Spring事务的传播行为</h3><p>其实是一个事务调用另一个事务的情况，该事务的几种执行情况。具体不了解。</p><ol start="3"><li></li></ol><h2 id="Spring-中两个-id-相同的-bean-会报错吗？">Spring 中两个 id 相同的 bean 会报错吗？</h2><p><strong>会报错</strong>。Spring 容器中，<code>id</code> 是 bean 的唯一标识。若配置重复 <code>id</code>，容器初始化时会抛出 <strong><code>BeanDefinitionStoreException</code></strong>（冲突检测失败）。</p><h1 id="MYSQL面试">MYSQL面试</h1><h2 id="关系型数据库和非关系型数据库的区别">关系型数据库和非关系型数据库的区别</h2><p>关系型数据库有固定的表结构像mysql这种表和表之间存在关联，非关系型数据库没有固定的表结构，所以比较灵活。</p><h2 id="DDL和DML">DDL和DML</h2><p>DDL是对数据库表进行的操作，比如修改表结构，创建表，删除表。DML是对表数据的操作，比如插入数据，删除数据修改数据。</p><h2 id="笛卡尔积">笛卡尔积</h2><p>其实就是多表连接的时候，无连接条件的指定，就会导致查询的结果的行数是每个表行数相乘。所以要小表驱动大表，可以减少外层的循环次数。</p><h2 id="MySQL的连接方式">MySQL的连接方式</h2><p>内连接 左连接 右连接 全连接 左外连接 右外连接 交叉连接</p><h2 id="COUNT-COUNT-1-COUNT-列">COUNT(*) COUNT(1) COUNT(列)</h2><p>一般使用COUNT(<em>),其实在MySQL中count(</em>)和count1的查询效率是差不多的，如果列名为主键的情况下，count(列名)会比较快，他们的效率在不同的场景下是不同的，那么区别就是*是执行的时候包括了所有的列，计算出来是行数，即使是null也会记录，1是常量，忽略了所有的列，代表代码行，所以也不会忽略null，但是列名的话会去除null值，不统计。</p><h2 id="MySQL索引的理解">MySQL索引的理解</h2><p>MySQL的实现是选择的innodb，那innodb索引数据存储结构是使用的b+树，B+树是叶子节点存储数据，非叶子节点存储键值，同时非叶子节点父节点的元素都在子节点的元素中，并且是最大的一个，叶子节点有一个指向相邻链表的指针，方便范围查询。聚簇索引存储整行的数据和键值，非聚簇索引存储索引列的值和指向聚簇索引的键值。所以我们如果使用非聚簇索引，它会先找到索引列的值，再去找聚簇索引的键值，再通过聚簇索引的键值找到行数据，这样就会有一个回表的操作，进行两次查询的IO。所以我们可以使用组合索引来避免回表的操作，将所需要使用的列都设置为组合索引，这样查询字段的时候因为组合索引中已经有了对应的字段，就不会再去找聚簇索引了，可以直接找数据行。</p><h2 id="聚簇索引和非聚簇索引">聚簇索引和非聚簇索引</h2><p>在存储方式上不太一样，聚簇索引是索引结构和数据行一起存储的，而非聚簇索引是分开存储，一个表只能有一个聚簇索引而可以有多个非聚簇索引，效率上面聚簇索引效率高比较适合范围性的查找，而非聚簇索引效率比较低，查询会做两次IO。</p><h2 id="数据库慢查询和优化"><strong>数据库慢查询和优化</strong></h2><p>首先慢查询其实是MySQL能记录sql执行时间多长的语句的一个手段，它会把一些执行时间超过我们设置的慢查询阈值的语句写入慢查询日志中，我们要在MySQL中开启慢查询，设置slow_query_log设置为1 时间是long_query_time中设置，出现慢查询的sql语句都需要优化。首先是对sql语句的优化，这种一般根据我们的常识来优化，比如避免使用select*，模糊查询的时候百分号放到了前面，使用or，考虑使用union或者unionall，使用了不等于可以使用in，用了子查询with as，可以使用join，隐式转换，非正确函数处理字段。除了这些可以考虑使用索引来优化，我们可以使用explan关键字，查询有没有走索引，有没有全表扫描，有没有回表。我们会首先考虑给经常需要查询的列增加索引，和要连接条件的列建立所以同时我们可以使用覆盖索，可以给字段添加覆盖索引这样该列查询得时候就会在辅助索引树上面，可以有效地减小回表操作。我们可以适当使用前缀索引，并且正确使用联合索引避免过多的列使用覆盖索引。同时要避免范围查询数据因为mysql他走索引的话会从辅助索引宿舍找完再回主键找数据，所以找如果你的覆盖范围过大会导致他他还不如进行一遍全面扫描那因为mysql是自带一个优化器的那他可能就会走全表扫描。必要的时候可以考虑使用分批查询或者mysql的缓存大小或者分库分表读写分离。</p><h2 id="怎么优化SQL效率"><strong>怎么优化SQL效率</strong></h2><p>首先是对sql语句的优化，肯定要开启分析慢查询日志，筛选出效率比较低的sql语句，然后开始分析，是IO数据访问导致的还是CPU数据运算导致的，这时候会使用到explain分析出常见的sql语句中的问题。比如IO导致，可以索引优化，添加索引的覆盖范围，或者有多表操作，临时表过多，这类的问题，那么像索引优化我们应该遵循最左匹配么，防止sql语句筛选会多次全表查找，可以在字段匹配的时候注意数据类型一致，而且少用模糊匹配，如果是CPU数据运算导致的，那要看分组操作和排序是不是有问题，并且要减少函数的操作，因为底层都可能会涉及到全表查询，必要的时候也可以分批查询。再后面就是对数据库的配置了，比如缓存池的大小之类的，或者分库分表 读写分离的操作。</p><p>索引添加的时候优先考虑基数大的，或者经常作为查询条件的字段作为索引，就是唯一性的比如用户id，或者按照最左前缀匹配添加复合索引等等。同时要避免函数列和状态列。避免给经常更新的字段添加索引，或者唯一性 太差的字段添加索引。</p><p>用explain分析的时候可以查看type和一些信息，当发现全表查询或者全索引查询的时候，或者key为null，扫描行数过长，或者信息上说有临时表等等。像where，join，group by这些方法使用的时候都需要添加索引了。</p><h2 id="索引失效的场景">索引失效的场景</h2><p>索引列参与了sql查询的计算或使用了函数，like匹配用%开头，where匹配的时候存在隐式转换的问题，索引列进行了or连接，表非常小，全表扫描比索引查找还快的时候，还有就是使用group分组或者order排序的时候分组字段和索引顺序不一致。</p><h2 id="MySQL的事务">MySQL的事务</h2><p>MySQL的事务就是数据处理的时候的一些场景，需要保证一组SQL语句要么全部执行成功要么执行失败。事务有四大特性，首先是原子性，原子性就是比如当A给B转账，A扣钱，B加钱，A扣钱了B没收到钱，或者B收到，A没扣，这种情况MySQL会将数据回滚。第二个是一致性，事务执行前后，保持一致性，数据不被破坏。第三个是隔离性，当多个事务并发执行的时候，事务之间互不影响。最后一个是持久性，当数据库出现断电 崩溃等问题的时候，数据不会丢失，在MySQL里是通过redo log记录提高的修改，出现崩溃的情况时，会通过日志恢复数据。</p><h2 id="事务隔离级别">事务隔离级别</h2><p>有四大隔离级别，分别是读未提交，这个是一个事务读取了另一个事务没有提交的数据，会出现脏读的问题，接着就是读已提交，它只会读事务已经提交的数据，它解决了脏读的问题，提高了数据一致性，但是出现了不可重复读的问题，多次读取的结果不一样，然后就是RR可重复读，解决了脏读和不可重复读的问题。还有一个串行化，这个基本就是把事务进行串行处理，就不会出现并发的时候出现的各种事务问题。</p><h2 id="MVCC">MVCC</h2><p>MVCC实现了读已提交和可重复读两个事务隔离级别，MVCC是多版本并发控制，就和它的名字一样，是通过多版本的形式解决并发问题，它是一个无锁的机制，因为mysql经常要读，如果因为其他线程的写操作，上锁了导致读操作需要阻塞等待，这样效率非常差，所以出现了MVCC，当事务快照读的时候，将数据进行一个快照，会生成一个readview视图，MVCC会在线程修改删除数据的时候，会生成一个undo log，方便回滚的数据，如果有线程执行查询数据的时候，会按照规则判断数据有没有被其他线程更改，在查数据的过程中被修改了，MySQL会进行一个id的判断，他会从快照中找，当时它执行查询命令的时候的数据，这样就将多线程并发问题导致数据不一致问题进行了解决，并且不会影响性能。</p><h2 id="MySQL的锁（未解决）">MySQL的锁（未解决）</h2><h2 id="SQL-分页-limit-500000-10和-limit-10-速度一致？">SQL 分页 limit 500000,10和 limit 10 速度一致？</h2><p><strong>不一致</strong>。limit50000 10 需要跳过前面50w行，再取数据，数据库需扫描 500010 行，再丢弃前 500000 行，耗时远高于 直接取前 10 行。偏移量越大，性能越差。</p><h2 id="数据库中索引类型有哪些">数据库中索引类型有哪些</h2><h3 id="1-B-Tree-索引">1. <strong>B-Tree 索引</strong></h3><ul><li><strong>特点</strong>：最常用的索引类型，基于 B + 树结构实现，支持等值查询（<code>WHERE col = value</code>）、范围查询（<code>WHERE col BETWEEN a AND b</code>）和排序（<code>ORDER BY</code>）。</li><li><strong>适用场景</strong>：几乎所有场景，特别是范围查询。</li><li><strong>支持引擎</strong>：InnoDB、MyISAM、Memory 等。</li></ul><h3 id="2-哈希索引">2. <strong>哈希索引</strong></h3><ul><li><strong>特点</strong>：基于哈希表实现，仅支持等值查询（<code>=</code>、<code>IN()</code>），不支持范围查询。</li><li><strong>适用场景</strong>：内存表（Memory 引擎默认使用）或 InnoDB 的自适应哈希索引（由引擎自动创建）。</li><li><strong>支持引擎</strong>：Memory、InnoDB（自适应哈希索引）。</li></ul><h3 id="3-全文索引">3. <strong>全文索引</strong></h3><ul><li><p><strong>特点</strong>：专门用于文本搜索，支持<code>MATCH AGAINST</code>语法。</p></li><li><p><strong>适用场景</strong>：文章内容、评论等大文本字段的搜索。</p></li><li><p><strong>支持引擎</strong>：InnoDB（MySQL 5.6+）、MyISAM。</p></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> articles <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(content) AGAINST(<span class="string">&#x27;关键词&#x27;</span> <span class="keyword">IN</span> <span class="keyword">NATURAL</span> <span class="keyword">LANGUAGE</span> MODE);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-空间索引">4. <strong>空间索引</strong></h3><ul><li><strong>特点</strong>：用于存储和查询空间数据（如地理位置、几何形状）。</li><li><strong>适用场景</strong>：地图应用、地理信息系统（GIS）。</li><li><strong>支持引擎</strong>：InnoDB、MyISAM。</li><li><strong>注意</strong>：需要使用<code>SPATIAL</code>关键字创建，且字段类型必须为<code>GEOMETRY</code>、<code>POINT</code>等空间类型。</li></ul><h3 id="5-聚簇索引（Clustered-Index）">5. <strong>聚簇索引（Clustered Index）</strong></h3><ul><li><strong>特点</strong>：InnoDB 存储引擎特有的索引类型，数据行直接存储在索引的叶子节点中。</li><li><strong>主键即聚簇索引</strong>：每个表只能有一个聚簇索引，通常是主键。如果没有定义主键，InnoDB 会选择唯一非空索引或生成隐藏的聚簇索引。</li></ul><h3 id="6-辅助索引（Secondary-Index）">6. <strong>辅助索引（Secondary Index）</strong></h3><ul><li><strong>特点</strong>：除聚簇索引外的所有索引（如普通索引、唯一索引），叶子节点存储的是主键值（而非数据行）。</li><li><strong>回表查询</strong>：通过辅助索引查询数据时，可能需要先找到主键，再通过主键查询完整数据行。</li></ul><h3 id="7-组合索引（复合索引）">7. <strong>组合索引（复合索引）</strong></h3><ul><li><p><strong>特点</strong>：基于多个列创建的索引，遵循 “最左前缀原则”。</p></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age <span class="keyword">ON</span> users (name, age);</span><br><span class="line"><span class="comment">-- 支持查询：WHERE name = &#x27;张三&#x27; AND age = 20</span></span><br><span class="line"><span class="comment">-- 支持查询：WHERE name = &#x27;张三&#x27;（最左前缀）</span></span><br><span class="line"><span class="comment">-- 不支持查询：WHERE age = 20（跳过了name列）</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="8-唯一索引（Unique-Index）">8. <strong>唯一索引（Unique Index）</strong></h3><ul><li><p><strong>特点</strong>：确保索引列的值唯一，允许<code>NULL</code>（但每个<code>NULL</code>视为不同值）。</p></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_email <span class="keyword">ON</span> users (email);</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-主键索引（Primary-Key）">9. <strong>主键索引（Primary Key）</strong></h3><ul><li><strong>特点</strong>：特殊的唯一索引，不允许<code>NULL</code>，每个表只能有一个主键。</li><li><strong>聚簇索引关联</strong>：InnoDB 中主键即聚簇索引，决定数据的物理存储顺序。</li></ul><h3 id="10-覆盖索引（Covering-Index）">10. <strong>覆盖索引（Covering Index）</strong></h3><ul><li><p><strong>特点</strong>：索引包含所有查询需要的字段，无需回表查询数据。</p></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 若索引包含name和age，则直接通过索引返回结果，无需访问数据行。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="11-函数索引（Functional-Index）">11. <strong>函数索引（Functional Index）</strong></h3><ul><li><p><strong>特点</strong>：基于表达式或函数创建的索引。</p></li><li><p><strong>支持版本</strong>：MySQL 5.7+。</p></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_upper_name <span class="keyword">ON</span> users (<span class="built_in">UPPER</span>(name));</span><br><span class="line"><span class="comment">-- 支持查询：WHERE UPPER(name) = &#x27;ZHANGSAN;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Redis">Redis</h1><h2 id="redis和mq的机制和原理">redis和mq的机制和原理</h2><ul><li><strong>Redis</strong>：以 <strong>内存存储 + 单线程模型</strong> 为基础，通过高效数据结构、持久化和集群方案，实现高速缓存与分布式能力。</li><li><strong>MQ</strong>：以 <strong>生产者 - 队列 - 消费者</strong> 为模型，通过异步解耦、流量控制和持久化，解决分布式系统的通信协作问题。<br>两者常配合（如 Redis 缓存加速，MQ 异步解耦），构建高性能、高可靠的分布式架构。</li></ul><h2 id="配置Redis时候要序列化配置">配置Redis时候要序列化配置</h2><p>因为如果不配置序列化器，RedisTemplate会使用默认的序列化器（JdkSerializationRedisSerializer）。<br>默认序列化器的问题：序列化后的数据是Java特有的二进制格式，不可读且不通用。在RedisConfig类中，使用了以下序列化器：StringRedisSerializer</p><h2 id="Redis的缓存一致性">Redis的缓存一致性</h2><p>redis和MySQL的数据一致性问题，主要要围绕着写操作，因为在更新和删除的时候会产生一致性问题，一般是用旁路缓存模式，它在读操作的时候会先查看缓存中数据，缓存命中的话返回，如果没有就查数据库，再将数据写入缓存中，那写操作它是先更新数据库再将缓存删除。这样就保证了一致性。</p><h2 id="Redis的二级缓存">Redis的二级缓存</h2><p>分为本地缓存和分布式缓存，本地缓存就是放在本地存储key value，分布式缓存一般是用于解决本地缓存无法跨实例共享缓存的一致性和缓存穿透 击穿 雪崩的问题。</p><h2 id="讲一下缓存穿透，缓存击穿，缓存雪崩">讲一下缓存穿透，缓存击穿，缓存雪崩</h2><p>缓存穿透就是因为一般设计业务的时候，会优先访问缓存中数据是否存在，如果不存在访问数据库，攻击者就是可以用这一点构造恶意请求，多次访问数据库，导致数据库压力过大。这种情况可以对访问请求进行合法性检查，过滤非法字符或者使用布隆过滤器过滤，再决定是否访问数据库。或者给redis设置null值或者空字符串。</p><p>缓存击穿就是当缓存数据过期或者失效的时候，攻击者并发访问失效数据，这样会直接访问数据库，导致高并发，给数据库造成压力。解决方式可以在缓存失效或者过期前，进行预更新或者延迟更新，让攻击者不知道更新的时间。第二个就是解决并发攻击，这里可以使用锁，互斥锁和分布式锁，过期或者失效的时候有线程没有访问到缓存中数据，则给该线程一个锁， 这个时候就可以增加一个判断如果有锁，则查询数据，同时释放锁，并将数据更新到缓存，如果没有锁就线程等待。或者逻辑过期，添加逻辑时间字段，当现在请求接口的时候，先判断当前时间是否在过期时间之前，如果未过期，将数据直接返回，如果过期了，进行缓存重建，加上互斥锁，重新查找一次数据库，封装新的过期时间，将数据放入缓存中。那么在过期时间以后的所有线程，只有拿到锁的线程进行了缓存修改，后面线程发现时间都没过期，就拿修改后的数据。所以会有一个数据一致性的问题，在过期时间内的数据都是旧数据。</p><p>缓存雪崩是缓存中大量的数据全部失效，导致非常多的请求直接访问数据库，导致数据库压力剧增。最简单的是给每个key的TTL增加随机值，缓存预热的时候给缓存数据的设置过期时间TTL的时候定义一个范围，追加该范围的随机数。这种情况一般使用分布式集群提高可靠性或者限流，要么多级缓存。</p><h2 id="Redis的分布式锁">Redis的分布式锁</h2><p>通过SetNx命令实现，当客户端尝试使用<code>SETNX</code>命令设置一个特定的key，值可以是任意唯一标识客户端的字符串，会返回一个true表示加锁成功，这样其他的客户端就不能再访问这个key了。当该客户端使用完或者过期时间到了，会删除这个key这个锁就释放了。过期时间的设置会用一个看门狗的机制，在java中使用redisson的锁实现，会自动处理锁的续期、可重入等问题，还支持公平锁、联锁、红锁等更复杂的分布式锁场景。</p><h2 id="三种分布式锁的区别">三种分布式锁的区别</h2><h2 id="哨兵机制">哨兵机制</h2><h2 id="场景题">场景题</h2><h2 id="用户登录的流程开发">用户登录的流程开发</h2><p>用户通过前端输入用户名和密码，或者扫码，手机号等方式进行登陆。后端接受到数据，进行验证，验证成功会生成一个token，那一般我们为了防止泄漏，我们会将token返回，同时对token进行一个加密，生成我们所谓的jwt令牌。我会选择设置jwt令牌的过期时间，放在redis中，后续用户进行一系列操作的时候，我会设置一个拦截器，将用户持有的token和jwt令牌进行校验，校验通过正常操作，不通过返回token过期，重新登录。token过期这里看业务需求，如果甲方要求，用户在操作的时候不要过期，那么就在用户带着token访问其他网页的时候，进行一个jwt令牌的过期时间刷新，当长时间在一个页面没操作的时候，过期时间到了，就跳转登录界面重新登录，或者回到不用登录的首页。</p><h2 id="Token如何续费">Token如何续费</h2><p>可以通过刷新令牌的方式行续费，当用户的登录的时候，我们后端拿到一个访问令牌和刷新令牌，当访问令牌失效了，达到我们设置的失效时间了，还要请求访问的时候，就可以通过刷新令牌，请求新的访问令牌给用户。</p><h1 id="项目难点亮点">项目难点亮点</h1><h2 id="execl导入">execl导入</h2><h2 id="execl导出">execl导出</h2><p>用了execlwrite类，我先进行了分批查询数据库，构造不同的sheet页，最后导出数据到sheet页中，中间加同步锁。然后把刚刚的异步任务放到线程池里面，等任务执行完刷新流并关闭流。实现多线程导出优化导出效率。</p><h2 id="多端操作同一个数据">多端操作同一个数据</h2><h2 id="JVM调优">JVM调优</h2><h2 id="心跳机制">心跳机制</h2><h2 id="MySQL死锁">MySQL死锁</h2><h2 id="拦截器-Filter-和过滤器-interceptor">拦截器(Filter)和过滤器(interceptor)</h2><p>过滤器是在web.xml进行配置的并且依赖servlet容器，而拦截器是在spring的配置文件中或者通过注解的方式配置不依赖servlet容器。过滤器只能过滤request和response请求，而拦截器多了一些springMVC的一些请求方式，比如handler和exception进行操作。在执行顺序也有区别，Filter是在servlet容器接收到请求，但是没被调用的时候使用，interceptor是在servlet调用以后，响应还没发送到客户端之前运行的。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250801172121578.png" alt="image-20250801172121578"></p><h2 id="内存溢出问题">内存溢出问题</h2><h2 id="spring">spring</h2><h2 id="spring-bean">spring bean</h2><h2 id="ioc-aop">ioc aop</h2><h2 id="事务管理">事务管理</h2><h2 id="springboot">springboot</h2><h1 id="业务类">业务类</h1><h2 id="PO-DO、DTO、VO、BO">PO/DO、DTO、VO、BO</h2><p>一个DO类对应的数据库的表结构，字段名和表名对应，一般是类通过驼峰命名法。DTO是前端返回给后端的数据封装的类，用于接受前端数据，VO则是返回前端所需要的类。BO是当我们正常编写代码，经常需要自己存储一些相同的数据的时候，我们可以选则自己新建一个类，用于存放一些常用参数，可以优化代码。</p><h1 id="大数据">大数据</h1><h2 id="Hadoop怎么配置流程-需要改什么文件">Hadoop怎么配置流程 需要改什么文件</h2><ol><li><strong>基础环境准备</strong>：<ul><li>安装 Java 并配置<code>JAVA_HOME</code>环境变量。</li><li>配置 SSH 无密码登录。</li></ul></li><li><strong>核心配置文件修改</strong>（位于<code>$HADOOP_HOME/etc/hadoop</code>目录）：<ul><li><code>core-site.xml</code>：配置 Hadoop 核心参数，如 HDFS 的 NameNode 地址。</li><li><code>hdfs-site.xml</code>：配置 HDFS 参数，如副本数、数据存储位置。</li><li><code>mapred-site.xml</code>：配置 MapReduce 参数，指定资源调度框架。</li><li><code>yarn-site.xml</code>：配置 YARN 参数，如 ResourceManager 和 NodeManager 地址。</li></ul></li><li><strong>环境变量配置</strong>：<ul><li><code>hadoop-env.sh</code>：设置 Hadoop 运行环境，如 Java 路径。</li></ul></li></ol><h2 id="Hive怎么配置并和mysql连接">Hive怎么配置并和mysql连接</h2><ol><li><strong>基础配置</strong>：<ul><li>修改<code>hive-site.xml</code>，配置元数据存储位置：</li></ul></li><li><strong>依赖准备</strong>：<ul><li>将 MySQL JDBC驱动（如<code>mysql-connector-java.jar</code>）放入 Hive 的<code>lib</code>目录。</li></ul></li><li><strong>初始化元数据库</strong>：<ul><li>执行<code>schematool -initSchema -dbType mysql</code>初始化 MySQL 元数据库。</li></ul></li></ol><h1 id="部署">部署</h1><h2 id="为什么使用docker">为什么使用docker</h2><p>因为我们之前这个项目提交给甲方的时候，他是分配给我们一个云服务器，他在验收的时候会重启所有的服务器，那这里就需要考虑到一个部署持久化的问题，所以我们使用了docker，将我们本地服务器的依赖和环境打镜像，迁移到甲方的云服务器，写了脚本在服务器启动后就自动运行我们的项目，jar包。正常使用docker部署的原因，是它的部署效率高并且方便维护，还有持久化啊，数据迁移都比较方便，支持的技术栈和兼容性也比较好。</p>]]></content>
    
    
    <summary type="html">常见面试题梳理</summary>
    
    
    
    <category term="面试" scheme="https://u7u7.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="项目" scheme="https://u7u7.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="SpringBoot" scheme="https://u7u7.top/tags/SpringBoot/"/>
    
    <category term="Mysql" scheme="https://u7u7.top/tags/Mysql/"/>
    
    <category term="Redis" scheme="https://u7u7.top/tags/Redis/"/>
    
    <category term="Mybatis-plus" scheme="https://u7u7.top/tags/Mybatis-plus/"/>
    
    <category term="Mybatis" scheme="https://u7u7.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>优探社交购云平台</title>
    <link href="https://u7u7.top/posts/dp.html"/>
    <id>https://u7u7.top/posts/dp.html</id>
    <published>2025-07-28T03:00:25.000Z</published>
    <updated>2025-08-03T12:24:07.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优探社交购云平台">优探社交购云平台</h1><p>主要是使用redis+Springboot+mysql+mybatis-plus的项目。目的是锻炼redis的使用和引入消息队列方便学习mq。消息队列部分redis使用stream来实现。</p><h2 id="秒杀总结-重点"><strong>秒杀总结(重点):</strong></h2><p>项目中秒杀场景是使用可以抢购某个优惠劵。秒杀会出现的情况，一秒会有千万的用户同时点击，访问接口。会存在的问题并解决：</p><ol><li>保证订单 ID 全局唯一，避免规律性泄露业务数据；</li><li>防止库存超卖，确保实际卖出数量不超过库存；</li><li>应对高并发请求，避免数据库压力过大导致系统崩溃。</li></ol><p><strong>注意！！并发采用jmter模拟</strong></p><h3 id="1、保证订单ID全局唯一"><strong>1、保证订单ID全局唯一</strong></h3><p>若使用数据库自增 ID，存在两个缺陷：</p><ol><li>ID 规律性明显，易被猜测敏感信息（如每日订单量）</li><li>单表数据量过大时需拆库拆表，自增 ID 无法保证全局唯一。</li></ol><p><strong>解决方案</strong>：基于 Redis 实现全局唯一 ID 生成器</p><ul><li><p>ID 组成</p><ul><li>符号位（1bit，固定为 0）；</li><li>时间戳（31bit，以秒为单位，可覆盖 69 年）；</li><li>序列号（32bit，秒内计数器，支持每秒生成 2³² 个唯一 ID）。</li></ul></li><li><p>实现逻辑</p><ul><li><p>生成当前时间戳（相对于起始时间戳的偏移量）；</p></li><li><p>按日期生成 Redis 自增序列号（确保每日序列号独立）；</p></li><li><p>拼接时间戳和序列号，生成全局唯一 ID。</p></li></ul></li></ul><h3 id="2、解决超卖问题">2、解决超卖问题</h3><p>问题的产生，大量请求同时访问数据库，判断当前商品有库存，执行库存扣减的代码，会导致超卖。</p><p>解决的方式，通过后续的更新，对该方法进行了慢慢的修改。</p><h4 id="2-1-使用数据库乐观锁">2.1 使用数据库乐观锁</h4><p>刚开始采用乐观锁版本控制，在数据库层面通过版本号和库存判断条件确保扣减库存的原子性，解决并发更新导致超卖。</p><details class="folding-tag" cyan close><summary> 通过数据库解决超卖代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seckillVoucherService.update().setSql(<span class="string">&quot;stock= stock -1&quot;</span>).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">    .update().gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>); <span class="comment">//where id = ? and stock &gt; 0</span></span><br></pre></td></tr></table></figure><p>原理:</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653369268550.png" alt="1653369268550"></p>              </div>            </details><h3 id="3、解决一人一单问题">3、解决一人一单问题</h3><p>TODO 一人一单存在的问题，同样是并发场景会出现问题</p><h4 id="3-1-初始版数据库判断">3.1 初始版数据库判断</h4><p>这个如果不考虑高并发的场景，比较简单，只需要判断订单表中是否存在该用户id就好。</p><details class="folding-tag" cyan close><summary> 通过数据库解决一人一单问题 </summary>              <div class='content'>              <p><strong>解决</strong>：重点其实在5的部分，现在是先通过查询数据库判断用户是否下过单,再决定是否可以下单扣除库存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询优惠券</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断秒杀是否已经结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.一人一单逻辑</span></span><br><span class="line">    <span class="comment">// 5.1.用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">    <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户已经购买过了</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6，扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update().gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>);;</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 7.1.订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 7.3.代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存在问题</strong>:现在的问题还是和之前一样，并发过来，查询数据库，都不存在订单，所以我们还是需要加锁，但是乐观锁比较适合更新数据，而现在是插入数据，所以我们需要使用悲观锁操作</p>              </div>            </details><p><strong>解决</strong>：首先我们的初始方案是封装了一个createVoucherOrder方法，同时为了确保他线程安全，在方法上添加了一synchronized 锁。再在原方法中调用createVoucherOrder方法。</p><details class="folding-tag" cyan close><summary> 通过悲观锁解决 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">         <span class="comment">// 5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经购买过了</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">// 7.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">// 7.2.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">// 7.3.代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存在问题</strong>:这样添加锁，锁的粒度太粗了，在使用锁过程中，控制<strong>锁粒度</strong> 是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会锁住，所以我们需要去控制锁的粒度</p>              </div>            </details><p><strong>解决</strong>：这段代码需要修改为：intern() 这个方法是从常量池中拿到数据，如果我们直接使用userId.toString() 他拿到的对象实际上是不同的对象，new出来的对象，我们使用锁必须保证锁必须是同一把，所以我们需要使用intern()方法</p><details class="folding-tag" cyan close><summary> 解决锁粒度太粗的问题 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span>  Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="keyword">synchronized</span>(userId.toString().intern())&#123;</span><br><span class="line">        <span class="comment">// 5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经购买过了</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">            .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">// 7.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">// 7.2.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">// 7.3.代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存在问题</strong>:当前方法被spring的事务控制，如果你在方法内部加锁，可能会导致当前方法事务还没有提交，但是锁已经释放也会导致问题。</p>              </div>            </details><p>解决：我们选择将当前方法整体包裹起来，确保事务不会出现问题。</p><details class="folding-tag" cyan close><summary> 解决事务问题 </summary>              <div class='content'>              <p>在seckillVoucher 方法中，添加以下逻辑，这样就能保证事务的特性，同时也控制了锁的粒度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (userId.toString().intern())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.createVoucherOrder(voucherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (userId.toString().intern())&#123;</span><br><span class="line"><span class="type">ISeckillVoucherService</span> <span class="variable">proxy</span> <span class="operator">=</span> (ISeckillVoucherService) AopContext.currentProxy();</span><br><span class="line"><span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h4 id="3-2-分布式锁解决锁失效">3.2 分布式锁解决锁失效</h4><p><strong>有关锁失效原因分析</strong></p><p>由于现在我们部署了多个tomcat，每个tomcat都有一个属于自己的jvm，那么假设在服务器A的tomcat内部，有两个线程，这两个线程由于使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的，但是如果现在是服务器B的tomcat内部，又有两个线程，但是他们的锁对象写的虽然和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2实现互斥，这就是 集群环境下，syn锁失效的原因，在这种情况下，我们就需要使用分布式锁来解决这个问题。</p><p>分布式锁：满足分布式系统或集群模式下多进程可见并且<strong>互斥</strong>的锁。</p><p>分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653374296906.png" alt="1653374296906"></p><p>我们可以使用setnx方法。当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p><details class="folding-tag" cyan close><summary> 分布式锁初使用 </summary>              <div class='content'>              <p>利用setnx方法进行加锁，同时增加过期时间，防止死锁，此方法可以保证加锁和增加过期时间具有原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">&quot;lock:&quot;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取线程标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId()</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">            .setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>释放锁逻辑</li></ul><p>SimpleRedisLock</p><p>释放锁，防止删除别人的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//通过del删除锁</span></span><br><span class="line">    stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改业务代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">      <span class="comment">// 1.查询优惠券</span></span><br><span class="line">      <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">      <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">      <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">          <span class="comment">// 尚未开始</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3.判断秒杀是否已经结束</span></span><br><span class="line">      <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">          <span class="comment">// 尚未开始</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 4.判断库存是否充足</span></span><br><span class="line">      <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 库存不足</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">      <span class="comment">//创建锁对象(新增代码)</span></span><br><span class="line">      <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">      <span class="comment">//获取锁对象</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line"><span class="comment">//加锁失败</span></span><br><span class="line">      <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取代理对象(事务)</span></span><br><span class="line">          <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">          <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">//释放锁</span></span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p><strong>问题</strong>：会存在一个锁误删的情况，比如同时进来了线程ABC，我们是有设置过期时间的。假如线程A业务阻塞了，执行时间超过了过期时间，此时锁过期了自动删除。线程B拿到了锁，并开始执行业务，业务还没执行完。线程A终于执行完了，此时主动删除了锁。锁又空闲了，线程C又拿到了锁。开始执行业务，B又执行完了，删除了锁，这样是锁误删的情况。</p><details class="folding-tag" cyan close><summary> 线程标识解决锁误删 </summary>              <div class='content'>              <p>如标题一样，我们给线程锁的时候可以给一个线程标识，表示这个锁给了线程B。线程A执行完业务，要删除锁的时候，发现不是自己曾经拿到的锁，那就不删除。这样就解决了锁误删。我们通过UUID给线程增加标识。</p>              </div>            </details><p><strong>问题</strong>：存在一个极端的锁误删问题，因为我们的代码并没有保证原子性，所以会出现这种情况——当线程A任务执行完毕，判断锁是否属于自己的时候，判断为true，准备执行删除锁的操作，在删除之前，锁过期时间到了，此时锁被redis删除，线程B拿到了锁，然后A才执行删除锁操作，这样又把线程B的锁给删了。那我们就需要将拿锁，判断锁，删除锁保证原子性。</p><details class="folding-tag" cyan close><summary> Lua脚本保证原子性 </summary>              <div class='content'>              <p>这个时候顺利引出redis自带的lua脚本，通过call命令保证多条命令的原子性。它也可以通过then来保证上一条命令执行完以后返回的结果执行不同的操作，这一块也保证了原子性。这是它的优点也是为什么程序员后期不完全使用redission，而使用调用lua脚本的方式保证原子性的原因。同时它可以传递key和value的参数，所以可以判断返回值，实现我们上面判断线程标识。</p><p>改造SimpleRedisLock执行lua脚本</p><div class="tabs" id="java执行lua脚本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#java执行lua脚本-1">Java</button></li><li class="tab"><button type="button" data-href="#java执行lua脚本-2">Lua脚本</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="java执行lua脚本-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用lua脚本</span></span><br><span class="line">    stringRedisTemplate.execute(</span><br><span class="line">            UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),<span class="comment">//锁key</span></span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());<span class="comment">//线程标识value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="java执行lua脚本-2"><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span></span><br><span class="line"><span class="comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 一致，则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;DEL&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不一致，则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong>测试</strong>：第一个线程进来，得到了锁，手动删除锁，模拟锁超时了，其他线程会执行lua来抢锁，当第一天线程利用lua删除锁时，lua能保证他不能删除他的锁，第二个线程删除锁时，利用lua同样可以保证不会删除别人的锁，同时还能保证原子性。</p>              </div>            </details><h4 id="3-3-redisson解决四大问题">3.3 redisson解决四大问题</h4><p>基于setnx实现的分布式锁存在下面的问题：</p><p><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。</p><p><strong>不可重试</strong>：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p><p><strong>超时释放</strong>：我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患</p><p><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653546070602-17538468019109.png" alt="1653546070602"></p><p>Redisson对代码的改造，这里我要说一下，redisson配置好redis以后，它是自带获取锁和释放锁的方法的。它底层保证了原子性和解决了上面的部分问题，详细在下面分布式锁-redission中有，比较抽象，但是底层其实还是使用了lua脚本。看完源码谈谈自己的理解的可重入机制。看门狗和主从就不细说了。</p><blockquote><p>说白了，先判断锁存在，不存在就，说明是首次操作创建锁，若主锁存在，且哈希表中存在当前线程的标识（<code>ARGV[2]</code>），说明是<strong>同一线程再次请求锁</strong>（可重入场景）将重入次数+1，再设置过期时间。返回nil表示重入锁成功。锁被其他线程持有的时候 return redis.call(‘pttl’, KEYS[1]);</p></blockquote><div class="tabs" id="redisson"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redisson-1">Redisson客户端配置</button></li><li class="tab"><button type="button" data-href="#redisson-2">代码改造</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redisson-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.150.101:6379&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建RedissonClient对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redisson-2"><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Long userId = UserHolder.getUser().getId();</span><br><span class="line">//创建锁对象 这个代码不用了，因为我们现在要使用分布式锁</span><br><span class="line">//SimpleRedisLock lock = new SimpleRedisLock(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">RLock lock = redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">//获取锁对象</span><br><span class="line">boolean isLock = lock.tryLock();</span><br><span class="line">//加锁失败</span><br><span class="line"><span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">    //获取代理对象(事务)</span><br><span class="line">    IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    //释放锁</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="4、异步秒杀">4、异步秒杀</h3><p>这里的优化思路是看Tomcat部分，我们为了保证原子性会牺牲效率，现在我们的程序类似于串行化。需要先查券在判断库存，再查订单看是不是一人一单，再减少库存再存订单。我们可以将判断库存和用户是否下过单放在redis中判断，为了保证原子性使用lua脚本，通过返回值判断是否能下单，我们可以将能下单的任务，丢到一个阻塞队列中，另一个线程来执行该队列中的任务。实现异步下单。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653562234886.png" alt="1653562234886"></p><ul><li>先利用Redis完成库存余量、一人一单判断，完成抢单业务</li><li>再将下单业务放入阻塞队列，利用独立线程异步下单</li></ul><p>实现步骤：</p><blockquote><ol><li>首先在保存秒杀券的时候，将库存信息存一份到redis；seckill:stock:订单ID 为key  库存量为value</li><li>编写lua脚本，参数需要3个value，<strong>优惠券ID 用户ID和订单ID</strong>,脚本业务判断库存是否充足，用户是否下单，不满足就返回1或者2。返回0代表能顺利下单，此时扣除redis优惠券库存-1，保存用户ID到redis(set类型) seckill:order:订单ID 用户为key value为ID。</li><li>执行逻辑: JAVA代码需要创建线程池newSingleThreadExecutor和阻塞队列BlockingQueue。这里都是用的基础的，不用配置参数。类初始化后线程池会分配空闲线程执行new VoucherOrderHandler()。这是一个任务类，就是可以被线程执行的一段代码。线程会一直不断的执行他的run方法，但是我们代码中while(True)从队列中获取订单信息，这里使用了take方法。**BlockingQueue的take()方法是一个阻塞式获取元素的方法 当队列中没有元素时，调用take()的线程会被挂起（阻塞），进入WAITING状态，不会占用 CPU 资源；直到有其他线程向队列中添加了元素（即新任务入队），阻塞的线程才会被唤醒，继续执行take()并返回新元素。**当用户点击抢购秒杀发起请求的时候，执行seckillVoucher方法，先执行lua脚本，判断结果是否为0，结果不为0直接返回无库存或者下过单了。如果为0将创建voucherOrder对象并放入阻塞队列中去，同时获取代理对象(后面代码保证事务的)。当拿到订单信息以后，会执行创建订单handleVoucherOrder(voucherOrder);创建订单的时候加锁保证了一人一单，因为防止事务失效（因为spring事务是在threadlocal线程副本变量中，其他线程拿不到，这里是多线程会事务失效），所以将接口定义在最外面可以调用创建订单方法保证事务性。此时创建订单任务执行数据库扣减库存和保存订单ID的操作。</li></ol></blockquote><p>代码如下:</p><div class="tabs" id="阻塞队列秒杀"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#阻塞队列秒杀-1">Lua脚本</button></li><li class="tab"><button type="button" data-href="#阻塞队列秒杀-2">放阻塞队列</button></li><li class="tab active"><button type="button" data-href="#阻塞队列秒杀-3">线程池分配任务</button></li><li class="tab"><button type="button" data-href="#阻塞队列秒杀-4">更新数据库</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="阻塞队列秒杀-1"><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 参数列表</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> userId = ARGV[<span class="number">2</span>]</span><br><span class="line"><span class="comment">--消息队列使用</span></span><br><span class="line"><span class="keyword">local</span> orderId = ARGV[<span class="number">3</span>]</span><br><span class="line"><span class="comment">-- 数据key</span></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"><span class="comment">-- 判断库存是否充足</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&quot;get&quot;</span>,stockKey) ~= <span class="literal">nil</span> <span class="keyword">and</span> <span class="built_in">tonumber</span>(redis.call(<span class="string">&quot;get&quot;</span>,stockKey))  &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&quot;sismember&quot;</span>,orderKey,userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 用户已购买</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 扣减库存 userId存set集合返回0</span></span><br><span class="line">redis.call(<span class="string">&quot;incrby&quot;</span>,stockKey,<span class="number">-1</span>)</span><br><span class="line">redis.call(<span class="string">&quot;sadd&quot;</span>,orderKey,userId)</span><br><span class="line"><span class="comment">-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ... 消息队列使用</span></span><br><span class="line"><span class="comment">--redis.call(&#x27;xadd&#x27;, &#x27;stream.orders&#x27;, &#x27;*&#x27;, &#x27;userId&#x27;, userId, &#x27;voucherId&#x27;, voucherId, &#x27;id&#x27;, orderId)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="阻塞队列秒杀-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用接口的时候就执行将任务丢阻塞队列并获取代理对象</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">        SECKILL_SCRIPT,</span><br><span class="line">        Collections.emptyList(),</span><br><span class="line">        voucherId.toString(), userId.toString(), String.valueOf(orderId)</span><br><span class="line">    );</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">    <span class="comment">// 2.判断结果是否为0</span></span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.1.不为0 ，代表没有购买资格</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">// 2.4.用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 2.5.代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    <span class="comment">// 2.6.放入阻塞队列</span></span><br><span class="line">    orderTasks.add(voucherOrder);</span><br><span class="line">    <span class="comment">//3.获取代理对象</span></span><br><span class="line">    proxy = (IVoucherOrderService)AopContext.currentProxy();</span><br><span class="line">    <span class="comment">//4.返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="阻塞队列秒杀-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步处理线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">//创建阻塞队列</span></span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks =<span class="keyword">new</span>  <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="comment">//在类初始化之后执行，因为当这个类初始化好了之后，随时都是有可能要执行的</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">   SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于线程池处理的任务</span></span><br><span class="line"><span class="comment">// 当初始化完毕后，就会去从对列中去拿信息</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 1.获取队列中的订单信息</span></span><br><span class="line">                    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                    <span class="comment">// 2.创建订单</span></span><br><span class="line">                    handleVoucherOrder(voucherOrder);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;处理订单异常&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取用户</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">            <span class="comment">// 2.创建锁对象</span></span><br><span class="line">            <span class="type">RLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">            <span class="comment">// 3.尝试获取锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.lock();</span><br><span class="line">            <span class="comment">// 4.判断是否获得锁成功</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                <span class="comment">// 获取锁失败，直接返回失败或者重试</span></span><br><span class="line">                log.error(<span class="string">&quot;不允许重复下单！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//注意：由于是spring的事务是放在threadLocal中，此时的是多线程，事务会失效</span></span><br><span class="line">                proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                redisLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="阻塞队列秒杀-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">    <span class="comment">// 5.1.查询订单</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();</span><br><span class="line">    <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户已经购买过了</span></span><br><span class="line">        log.error(<span class="string">&quot;用户已经购买过了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">        .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">        .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">        .update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 扣减失败</span></span><br><span class="line">        log.error(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    save(voucherOrder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="5、消息队列">5、消息队列</h3><p>消息队列其实就是一个中间件，可以把一些任务丢在消息队列中，他的好处<strong>解耦</strong>，比如生产者发完挂了，消费者未消费，反正只要数据存到了消息队列中，数据就相当于一份备份，能保证数据不丢失。我们下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653574849336.png" alt="1653574849336"></p><p>因为一般消息队列MQ,会有其他的中间件使用，这里学习redis可以使用redis支持的mq，实际业务中不经常使用，所以不做重点要求，看三种消息队列的对比，我们选择stream来实现消息队列的代码改造，Stream还支持消费组。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653578560691.png" alt="1653578560691"></p><p>通过Stream结构作为消息队列实现异步秒杀下单，代码进行改造。这里逻辑不讲了不是很重要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span></span><br><span class="line">                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                    Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                    StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                    StreamOffset.create(<span class="string">&quot;stream.orders&quot;</span>, ReadOffset.lastConsumed())</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 2.判断订单信息是否为空</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 如果为null，说明没有消息，继续下一次循环</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map&lt;Object, Object&gt; value = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 3.创建订单</span></span><br><span class="line">                createVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">// 4.确认消息 XACK</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(<span class="string">&quot;s1&quot;</span>, <span class="string">&quot;g1&quot;</span>, record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理订单异常&quot;</span>, e);</span><br><span class="line">                <span class="comment">//处理异常消息</span></span><br><span class="line">                handlePendingList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePendingList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0</span></span><br><span class="line">                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                    Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                    StreamReadOptions.empty().count(<span class="number">1</span>),</span><br><span class="line">                    StreamOffset.create(<span class="string">&quot;stream.orders&quot;</span>, ReadOffset.from(<span class="string">&quot;0&quot;</span>))</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 2.判断订单信息是否为空</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 如果为null，说明没有异常消息，结束循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map&lt;Object, Object&gt; value = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 3.创建订单</span></span><br><span class="line">                createVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">// 4.确认消息 XACK</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(<span class="string">&quot;s1&quot;</span>, <span class="string">&quot;g1&quot;</span>, record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理pendding订单异常&quot;</span>, e);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、jmeter测试高并发，添加token">6、jmeter测试高并发，添加token</h3><p>这一块是在从异步秒杀下单那边测试多个用户同时下单的时候，出现的问题，因为之前没使用过jmeter。老师那边直接发送了1000条请求，但是每个请求都需要有对应的token，老师提供的数据库中用户已经新建好了，这里我们需要手动向redis添加token，并且要把token保存到一个txt文件，方便jmeter按行调用。这里我写了一个测试类。执行完会再resource下面生成一个tokens.txt。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tokenTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//从数据库用户表拿全部user</span></span><br><span class="line">        List&lt;User&gt; userList = userService.list();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">            <span class="comment">//将token写入文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;tokens.txt&quot;</span>, <span class="literal">false</span>); <span class="comment">// 先清空原文件</span></span><br><span class="line">                writer.write(token + System.lineSeparator());</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;错误信息&#123;&#125;&quot;</span>, String.valueOf(e));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">            <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">            Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">                    CopyOptions.create()</span><br><span class="line">                            .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">                            .setFieldValueEditor((fieldName,fieldValue)-&gt;fieldValue.toString()));</span><br><span class="line">            stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jmeter配置，HTTP信息头管理器中配置authorization ${token}。对了记得加断言，将success断言设置true。不然会都是返回成功无法判断报告的异常了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250730155921675.png" alt="image-20250730155921675"></p><h2 id="1、短信登录">1、短信登录</h2><h3 id="1-1、导入优探社交购云平台项目">1.1、导入优探社交购云平台项目</h3><h4 id="1-1-1-、导入SQL">1.1.1 、导入SQL</h4><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653057872536.png" alt="1653057872536"></p><h4 id="1-1-2、有关当前模型">1.1.2、有关当前模型</h4><p>手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。</p><p>在tomcat支撑起并发流量后，我们如果让tomcat直接去访问Mysql，根据经验Mysql企业级服务器只要上点并发，一般是16或32 核心cpu，32 或64G内存，像企业级mysql加上固态硬盘能够支撑的并发，大概就是4000起~7000左右，上万并发， 瞬间就会让Mysql服务器的cpu，硬盘全部打满，容易崩溃，所以我们在高并发场景下，会选择使用mysql集群，同时为了进一步降低Mysql的压力，同时增加访问的性能，我们也会加入Redis，同时使用Redis集群使得Redis对外提供更好的服务。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653059409865.png" alt="1653059409865"></p><h4 id="1-1-3、导入后端项目">1.1.3、导入后端项目</h4><p>在资料中提供了一个项目源码：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653060237073.png" alt="1653060237073"></p><h4 id="1-1-4、导入前端工程">1.1.4、导入前端工程</h4><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653060337562.png" alt="1653060337562"></p><h3 id="1-2、redis设计">1.2、redis设计</h3><p>首先我们要思考一下利用redis来存储数据，那么到底使用哪种结构呢？由于存入的数据比较简单，我们可以考虑使用String，或者是使用哈希，如下图，如果使用String，注意他的value，用多占用一点空间，如果使用哈希，则他的value中只会存储他数据本身，如果不是特别在意内存，其实使用String就可以啦。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653319261433.png" alt="1653319261433"></p><h4 id="1-2-1、设计key的具体细节">1.2.1、设计key的具体细节</h4><p>所以我们可以使用String结构，就是一个简单的key，value键值对的方式，但是关于key的处理，session他是每个用户都有自己的session，但是redis的key是共享的，咱们就不能使用code了</p><p>在设计这个key的时候，我们之前讲过需要满足两点</p><p>1、key要具有唯一性</p><p>2、key要方便携带</p><p>如果我们采用phone：手机号这个的数据来存储当然是可以的，但是如果把这样的敏感数据存储到redis中并且从页面中带过来毕竟不太合适，所以我们在后台生成一个随机串token，然后让前端带来这个token就能完成我们的整体逻辑了</p><h4 id="1-2-2、整体访问流程">1.2.2、整体访问流程</h4><p>当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到redis，并且生成token作为redis的key，当我们校验用户是否登录时，会去携带着token进行访问，从redis中取出token对应的value，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到threadLocal中，并且放行。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653319474181.png" alt="1653319474181"></p><h3 id="1-3、使用redis完成短信登录">1.3、使用redis完成短信登录</h3><p><strong>UserController代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone)</span> &#123;</span><br><span class="line">    <span class="comment">//发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span> userService.sendCode(phone);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm)</span>&#123;</span><br><span class="line">    <span class="comment">//实现登录功能</span></span><br><span class="line">    <span class="keyword">return</span> userService.login(loginForm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserServiceImpl代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">    <span class="comment">//校验手机号</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取验证码code</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//存入redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(RedisConstants.LOGIN_CODE_KEY + phone, code, RedisConstants.LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line">    log.debug(<span class="string">&quot;发送验证码 phone=&#123;&#125;,code = &#123;&#125;&quot;</span>,phone, code);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录 要先将验证码取出来</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(RedisConstants.LOGIN_CODE_KEY + phone);</span><br><span class="line">    <span class="keyword">if</span> (cacheCode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号未注册&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="comment">//查看手机号和验证码是否一致</span></span><br><span class="line">    <span class="keyword">if</span> (!cacheCode.equals(code)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">    <span class="comment">// 5.判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 6.不存在，创建新用户并保存</span></span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 7.保存用户信息到 redis中</span></span><br><span class="line">    <span class="comment">// 7.1.随机生成token，作为登录令牌</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">// 7.2.将User对象转为HashMap存储</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">    Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">            CopyOptions.create()</span><br><span class="line">                    .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">                    .setFieldValueEditor((fieldName,fieldValue)-&gt;fieldValue.toString()));</span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(RedisConstants.LOGIN_USER_KEY + token, userMap);</span><br><span class="line">    <span class="comment">// 7.3.设置token有效期</span></span><br><span class="line">    stringRedisTemplate.expire(RedisConstants.LOGIN_USER_KEY + token, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-解决状态登录刷新问题">1.4 解决状态登录刷新问题</h3><h4 id="1-4-1-初始方案思路总结：">1.4.1 初始方案思路总结：</h4><p>在这个方案中，他确实可以使用对应路径的拦截，同时刷新登录token令牌的存活时间，但是现在这个拦截器他只是拦截需要被拦截的路径，假设当前用户访问了一些不需要拦截的路径，那么这个拦截器就不会生效，所以此时令牌刷新的动作实际上就不会执行，所以这个方案他是存在问题的</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653320822964.png" alt="1653320822964"></p><h4 id="1-4-2-优化方案">1.4.2 优化方案</h4><p>既然之前的拦截器无法对不需要拦截的路径生效，那么我们可以添加一个拦截器，在第一个拦截器中拦截所有的路径，把第二个拦截器做的事情放入到第一个拦截器中，同时刷新令牌，因为第一个拦截器有了threadLocal的数据，所以此时第二个拦截器只需要判断拦截器中的user对象是否存在即可，完成整体刷新功能。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653320764547.png" alt="1653320764547"></p><h4 id="1-4-3-代码">1.4.3 代码</h4><p><strong>RefreshTokenInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.基于TOKEN获取redis中的用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span>  <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">        <span class="comment">// 3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.将查询到的hash数据转为UserDTO</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 6.存在，保存用户信息到 ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">// 7.刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 8.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>LoginInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.判断是否需要拦截（ThreadLocal中是否有用户）</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有，需要拦截，设置状态码</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="comment">// 拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有用户，则放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、商户查询缓存">2、商户查询缓存</h2><h3 id="2-1-添加商户缓存">2.1 添加商户缓存</h3><p>在我们查询商户信息时，我们是直接操作从数据库中去进行查询的，大致逻辑是这样，直接查询数据库那肯定慢咯，所以我们需要增加缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//这里是直接查询数据库</span></span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-1-、缓存模型和思路">2.1.1 、缓存模型和思路</h4><p>标准的操作方式就是查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入redis。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653322097736.png" alt="1653322097736"></p><h4 id="2-1-2、代码实现-使用SpringCache-缓存双写">2.1.2、代码实现 使用SpringCache(缓存双写)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = CACHE_SHOP_KEY,key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Shop <span class="title function_">queryById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = CACHE_SHOP_KEY,key = &quot;#shop.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateShop</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateById(shop);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-3、实现cacheable设置ttl">2.1.3、实现cacheable设置ttl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建ObjectMapper用于处理序列化和反序列化</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 注册JavaTimeModule以支持Java 8日期时间类型</span></span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">        <span class="comment">// 禁用将日期序列化为时间戳格式，保持可读性</span></span><br><span class="line">        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">        <span class="comment">// 启用默认的多态类型信息处理，以便在反序列化时保留类型信息</span></span><br><span class="line">        objectMapper.activateDefaultTyping(</span><br><span class="line">                objectMapper.getPolymorphicTypeValidator(),</span><br><span class="line">                ObjectMapper.DefaultTyping.NON_FINAL,</span><br><span class="line">                JsonTypeInfo.As.PROPERTY</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 创建通用的Jackson2 JSON Redis序列化器</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>(objectMapper);</span><br><span class="line">        <span class="comment">// 定义默认的缓存配置，设置缓存条目过期时间为10分钟，并使用定义好的序列化器</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">defaultConfig</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofMinutes(<span class="number">10</span>))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer));</span><br><span class="line">        <span class="comment">// 创建缓存配置映射，允许为不同的缓存名称定义不同的配置</span></span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; cacheConfigurations = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 为店铺缓存设置单独的过期时间（1小时）</span></span><br><span class="line">        cacheConfigurations.put(CACHE_SHOP_KEY, defaultConfig.entryTtl(Duration.ofDays(<span class="number">1</span>)));</span><br><span class="line">        <span class="comment">// 构建RedisCacheManager实例，使用默认配置和自定义的缓存配置初始化</span></span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(connectionFactory)</span><br><span class="line">                .cacheDefaults(defaultConfig)</span><br><span class="line">                .withInitialCacheConfigurations(cacheConfigurations)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-解决缓存穿透问题">2.2 解决缓存穿透问题</h3><p>缓存穿透就是因为一般设计业务的时候，会优先访问缓存中数据是否存在，如果不存在访问数据库，攻击者就是可以用这一点构造恶意请求，多次访问数据库，导致数据库压力过大。这种情况可以对访问请求进行合法性检查，过滤非法字符或者使用布隆过滤器过滤，再决定是否访问数据库。或者给redis设置null值或者空字符串。</p><p>常见的解决方案有两种：</p><ul><li>缓存空对象<ul><li>优点：实现简单，维护方便</li><li>缺点：<ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li>布隆过滤<ul><li>优点：内存占用较少，没有多余key</li><li>缺点：<ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ul><p>**缓存空对象思路分析：**当我们客户端访问不存在的数据时，先请求redis，但是此时redis中没有数据，此时会访问到数据库，但是数据库中也没有数据，这个数据穿透了缓存，直击数据库，我们都知道数据库能够承载的并发不如redis这么高，如果大量的请求同时过来访问这种不存在的数据，这些请求就都会访问到数据库，简单的解决方案就是哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到缓存了</p><p>**布隆过滤：**布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中，</p><p>假设布隆过滤器判断这个数据不存在，则直接返回</p><p>这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653326156516.png" alt="1653326156516"></p><h4 id="2-2-1-编码解决商品查询的缓存穿透问题：">2.2.1 编码解决商品查询的缓存穿透问题：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = CACHE_SHOP_KEY,key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Shop <span class="title function_">queryById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;    <span class="comment">//缓存穿透()</span></span><br><span class="line">            <span class="comment">//缓存穿透</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY +id,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>核心思路如下：</p><p>在原来的逻辑中，我们如果发现这个数据在mysql中不存在，直接就返回404了，这样是会存在缓存穿透问题的</p><p>现在的逻辑中：如果这个数据不存在，我们不会返回404 ，还是会把这个数据写入到Redis中，并且将value设置为空，欧当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653327124561.png" alt="1653327124561"></p><p><strong>小总结：</strong></p><p>缓存穿透产生的原因是什么？</p><ul><li>用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力</li></ul><p>缓存穿透的解决方案有哪些？</p><ul><li>缓存null值</li><li>布隆过滤</li><li>增强id的复杂度，避免被猜测id规律</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数的限流</li></ul><h3 id="2-3-缓存雪崩问题及解决思路">2.3 缓存雪崩问题及解决思路</h3><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>解决方案：</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653327884526.png" alt="1653327884526"></p><h3 id="2-4-缓存击穿问题及解决思路">2.4 缓存击穿问题及解决思路</h3><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p>常见的解决方案有两种：</p><ul><li>互斥锁</li><li>逻辑过期</li></ul><p>逻辑分析：假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653328022622.png" alt="1653328022622"></p><p>解决方案一、使用锁来解决：</p><p>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。</p><p>假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653328288627.png" alt="1653328288627"></p><p>解决方案二、逻辑过期方案</p><p>方案分析：我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。</p><p>我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p><p>这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653328663897.png" alt="1653328663897"></p><p>进行对比</p><p>**互斥锁方案：**由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响</p><p><strong>逻辑过期方案：</strong> 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653357522914.png" alt="1653357522914"></p><h3 id="2-5-利用互斥锁解决缓存击穿问题">2.5 利用互斥锁解决缓存击穿问题</h3><p>核心思路：相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是 进行查询之后，如果从缓存没有查询到数据，则进行互斥锁的获取，获取互斥锁后，判断是否获得到了锁，如果没有获得到，则休眠，过一会再进行尝试，直到获取到锁为止，才能进行查询</p><p>如果获取到了锁的线程，再去进行查询，查询后将数据写入redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑，防止缓存击穿</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653357860001.png" alt="1653357860001"></p><p><strong>操作锁的代码：</strong></p><p>核心思路就是利用redis的setnx方法来表示获取锁，该方法含义是redis中如果没有这个key，则插入成功，返回1，在stringRedisTemplate中返回true，  如果有这个key则插入失败，则返回0，在stringRedisTemplate返回false，我们可以通过true，或者是false，来表示是否有线程成功插入key，成功插入的key的线程我们认为他就是获得到锁的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>操作代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存击穿 互斥锁</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryRedis</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id; <span class="comment">//缓存key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopValue</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//是否存在缓存</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopValue))&#123;</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopValue, Shop.class);<span class="comment">//直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否是空值</span></span><br><span class="line">    <span class="keyword">if</span> (shopValue != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//空值返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缓存重建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    Shop shop;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">            <span class="comment">//没锁 等待</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryRedis(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        shop = getById(id);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);<span class="comment">//模拟重建延迟</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//缓存穿透</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id,<span class="string">&quot;&quot;</span>,CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY+id, JSONUtil.toJsonStr(shop),CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unLock(lockKey);<span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6、利用逻辑过期解决缓存击穿问题">2.6、利用逻辑过期解决缓存击穿问题</h3><p><strong>需求：修改根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题</strong></p><p>思路分析：当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653360308731.png" alt="1653360308731"></p><p>如果封装数据：因为现在redis中存储的数据的value需要带上过期时间，此时要么你去修改原来的实体类，要么你</p><p><strong>步骤一、</strong></p><p>新建一个实体类，我们采用第二个方案，这个方案，对原来代码没有侵入性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤二、</strong></p><p>在<strong>ShopServiceImpl</strong> 新增此方法，利用单元测试进行缓存预热</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShopRedis</span><span class="params">(Long id, Long time)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);<span class="comment">//模拟耗时 线程并发测试</span></span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(time));</span><br><span class="line">    stringRedisTemplate.opsForValue().set(RedisConstants.CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单元测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">textSaveShop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    shopService.saveShopRedis(<span class="number">1L</span>,<span class="number">10L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤三：正式代码</p><p><strong>ShopServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">( Long id )</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//未命中 返回空</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(json))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//命中 反序列化</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);</span><br><span class="line">    <span class="comment">//判断是否过期</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">        <span class="comment">//未过期</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//过期 缓存重建</span></span><br><span class="line">    <span class="comment">// 6.1.获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">    <span class="comment">// 6.2.判断是否获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//重建缓存</span></span><br><span class="line">                <span class="built_in">this</span>.saveShopRedis(id,<span class="number">20L</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                 unLock(lockKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6.4.返回过期的商铺信息</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7、封装Redis工具类">2.7、封装Redis工具类</h3><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：</p><ul><li>方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</li><li>方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓</li></ul><p>存击穿问题</p><ul><li>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</li><li>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ul><p>将逻辑进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CacheClient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2025/7/19 14:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存击穿 互斥锁</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id; <span class="comment">//缓存key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//是否存在缓存</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);<span class="comment">//直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//空值返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//缓存重建</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span> + key;</span><br><span class="line">        R r;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                <span class="comment">//没锁 等待</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, unit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//成功</span></span><br><span class="line">            r = dbFallback.apply(id);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);<span class="comment">//模拟重建延迟</span></span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//缓存穿透</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            &#125;</span><br><span class="line">            set(key, r, time, unit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unLock(lockKey);<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑过期</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//未命中 返回空</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//命中 反序列化</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">        <span class="comment">//判断是否过期</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//未过期</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//过期 缓存重建</span></span><br><span class="line">        <span class="comment">// 6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span> + key;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">// 6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">newR</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">// 重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, newR, time, unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    unLock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、优惠卷秒杀"><strong>3、优惠卷秒杀</strong></h2><h3 id="3-1-全局唯一ID">3.1 -全局唯一ID</h3><p>每个店铺都可以发布优惠券：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653362612286.png" alt="1653362612286"></p><p>当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题：</p><ul><li>id的规律性太明显</li><li>受单表数据量的限制</li></ul><p>场景分析：如果我们的id具有太明显的规则，用户或者说商业对手很容易猜测出来我们的一些敏感信息，比如商城在一天时间内，卖出了多少单，这明显不合适。</p><p>场景分析二：随着我们商城规模越来越大，mysql的单表的容量不宜超过500W，数据量过大之后，我们要进行拆库拆表，但拆分表了之后，他们从逻辑上讲他们是同一张表，所以他们的id是不能一样的， 于是乎我们需要保证id的唯一性。</p><p><strong>全局ID生成器</strong>，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653363100502.png" alt="1653363100502"></p><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653363172079.png" alt="1653363172079">ID的组成部分：符号位：1bit，永远为0</p><p>时间戳：31bit，以秒为单位，可以使用69年</p><p>序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</p><h3 id="3-2-Redis实现全局唯一Id">3.2 -Redis实现全局唯一Id</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1640995200L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdWorker</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.生成序列号</span></span><br><span class="line">        <span class="comment">// 2.1.获取当前日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.2.自增长</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><p>知识小贴士：关于countdownlatch</p><p>countdownlatch名为信号枪：主要的作用是同步协调在多线程的等待于唤醒问题</p><p>我们如果没有CountDownLatch ，那么由于程序是异步的，当异步程序没有执行完时，主线程就已经执行完了，然后我们期望的是分线程全部走完之后，主线程再走，所以我们此时需要使用到CountDownLatch</p><p>CountDownLatch 中有两个最重要的方法</p><p>1、countDown</p><p>2、await</p><p>await 方法 是阻塞方法，我们担心分线程没有执行完时，main线程就先执行，所以使用await可以让main线程阻塞，那么什么时候main线程不再阻塞呢？当CountDownLatch  内部维护的 变量变为0时，就不再阻塞，直接放行，那么什么时候CountDownLatch   维护的变量变为0 呢，我们只需要调用一次countDown ，内部变量就减少1，我们让分线程和变量绑定， 执行完一个分线程就减少一个变量，当分线程全部走完，CountDownLatch 维护的变量就是0，此时await就不再阻塞，统计出来的时间也就是所有分线程执行完后的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testIdWorker</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">        es.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line">    latch.await();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;time = &quot;</span> + (end - begin));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-添加优惠卷">3.3 添加优惠卷</h3><p>每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653365145124.png" alt="1653365145124"></p><p>tb_voucher：优惠券的基本信息，优惠金额、使用规则等<br>tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</p><p>平价卷由于优惠力度并不是很大，所以是可以任意领取</p><p>而代金券由于优惠力度大，所以像第二种卷，就得限制数量，从表结构上也能看出，特价卷除了具有优惠卷的基本信息以外，还具有库存，抢购时间，结束时间等等字段</p><p>**新增普通卷代码：  **VoucherController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">    voucherService.save(voucher);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增秒杀卷代码：</strong></p><p><strong>VoucherController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addSeckillVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">    voucherService.addSeckillVoucher(voucher);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>VoucherServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line">    <span class="comment">// 保存秒杀库存到Redis中</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-实现秒杀下单">3.4 实现秒杀下单</h3><p>下单核心思路：当我们点击抢购时，会触发右侧的请求，我们只需要编写对应的controller即可</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653365839526.png" alt="1653365839526"></p><p>秒杀下单应该思考的内容：</p><p>下单时需要判断两点：</p><ul><li>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单</li><li>库存是否充足，不足则无法下单</li></ul><p>下单核心逻辑分析：</p><p>当用户开始进行下单，我们应当去查询优惠卷信息，查询到优惠卷信息，判断是否满足秒杀条件</p><p>比如时间是否充足，如果时间充足，则进一步判断库存是否足够，如果两者都满足，则扣减库存，创建订单，然后返回订单id，如果有一个条件不满足则直接结束。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653366238564.png" alt="1653366238564"></p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询优惠券</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断秒杀是否已经结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5，扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 6.1.订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">// 6.2.用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 6.3.代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-库存超卖问题分析">3.5 库存超卖问题分析</h3><p>有关超卖问题分析：在我们原有代码中是这么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">       <span class="comment">// 库存不足</span></span><br><span class="line">       <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//5，扣减库存</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">           .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">           .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">   <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">       <span class="comment">//扣减库存</span></span><br><span class="line">       <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>假设线程1过来查询库存，判断出来库存大于1，正准备去扣减库存，但是还没有来得及去扣减，此时线程2过来，线程2也去查询库存，发现这个数量一定也大于1，那么这两个线程都会去扣减库存，最终多个线程相当于一起去扣减库存，此时就会出现库存的超卖问题。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653368335155.png" alt="1653368335155"></p><p>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：而对于加锁，我们通常有两种解决方案：见下图：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653368562591.png" alt="1653368562591"></p><p><strong>悲观锁：</strong></p><p>悲观锁可以实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等</p><p><strong>乐观锁：</strong></p><p>乐观锁：会有一个版本号，每次操作数据会对版本号+1，再提交回数据时，会去校验是否比之前的版本大1 ，如果大1 ，则进行操作成功，这套机制的核心逻辑在于，如果在操作过程中，版本号只比原来大1 ，那么就意味着操作过程中没有人对他进行过修改，他的操作就是安全的，如果不大1，则数据被修改过，当然乐观锁还有一些变种的处理方式比如cas</p><p>乐观锁的典型代表：就是cas，利用cas进行无锁化机制加锁，var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 == 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值</p><p>其中do while 是为了在操作失败时，再次进行自旋操作，即把之前的逻辑再操作一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> var5;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">&#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> var5;</span><br></pre></td></tr></table></figure><p><strong>课程中的使用方式：</strong></p><p>课程中的使用方式是没有像cas一样带自旋的操作，也没有对version的版本号+1 ，他的操作逻辑是在操作时，对版本号进行+1 操作，然后要求version 如果是1 的情况下，才能操作，那么第一个线程在操作后，数据库中的version变成了2，但是他自己满足version=1 ，所以没有问题，此时线程2执行，线程2 最后也需要加上条件version =1 ，但是现在由于线程1已经操作过了，所以线程2，操作时就不满足version=1 的条件了，所以线程2无法执行成功</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653369268550.png" alt="1653369268550"></p><h3 id="3-6-乐观锁解决超卖问题">3.6 乐观锁解决超卖问题</h3><p><strong>修改代码方案一、</strong></p><p>VoucherOrderServiceImpl 在扣减库存时，改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>) <span class="comment">//set stock = stock -1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,voucher.getStock()).update(); <span class="comment">//where id = ？ and stock = ?</span></span><br></pre></td></tr></table></figure><p>以上逻辑的核心含义是：只要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败</p><p><strong>修改代码方案二、</strong></p><p>之前的方式要修改前后都保持一致，但是这样我们分析过，成功的概率太低，所以我们的乐观锁需要变一下，改成stock大于0 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update().gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>); <span class="comment">//where id = ? and stock &gt; 0</span></span><br></pre></td></tr></table></figure><p><strong>知识小扩展：</strong></p><p>针对cas中的自旋压力过大，我们可以使用Longaddr这个类去解决</p><p>Java8 提供的一个对AtomicLong改进后的一个类，LongAdder</p><p>大量线程并发更新一个原子性的时候，天然的问题就是自旋，会导致并发性问题，当然这也比我们直接使用syn来的好</p><p>所以利用这么一个类，LongAdder来进行优化</p><p>如果获取某个值，则会对cell和base的值进行递增，最后返回一个完整的值</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653370271627.png" alt="1653370271627"></p><h3 id="3-6-优惠券秒杀-一人一单">3.6 优惠券秒杀-一人一单</h3><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单</p><p><strong>现在的问题在于：</strong></p><p>优惠卷是为了引流，但是目前的情况是，一个人可以无限制的抢这个优惠卷，所以我们应当增加一层逻辑，让一个用户只能下一个单，而不是让一个用户下多个单</p><p>具体操作逻辑如下：比如时间是否充足，如果时间充足，则进一步判断库存是否足够，然后再根据优惠卷id和用户id查询是否已经下过这个订单，如果下过这个订单，则不再下单，否则进行下单</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653371854389.png" alt="1653371854389"></p><p>VoucherOrderServiceImpl</p><p><strong>初步代码：增加一人一单逻辑</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询优惠券</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断秒杀是否已经结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.一人一单逻辑</span></span><br><span class="line">    <span class="comment">// 5.1.用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">    <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户已经购买过了</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6，扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 7.1.订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 7.3.代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存在问题</strong>:现在的问题还是和之前一样，并发过来，查询数据库，都不存在订单，所以我们还是需要加锁，但是乐观锁比较适合更新数据，而现在是插入数据，所以我们需要使用悲观锁操作</p><p>**注意:**在这里提到了非常多的问题，我们需要慢慢的来思考，首先我们的初始方案是封装了一个createVoucherOrder方法，同时为了确保他线程安全，在方法上添加了一把synchronized 锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">         <span class="comment">// 5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经购买过了</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">// 7.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">// 7.2.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">// 7.3.代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>，但是这样添加锁，锁的粒度太粗了，在使用锁过程中，控制<strong>锁粒度</strong> 是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会锁住，所以我们需要去控制锁的粒度，以下这段代码需要修改为：<br>intern() 这个方法是从常量池中拿到数据，如果我们直接使用userId.toString() 他拿到的对象实际上是不同的对象，new出来的对象，我们使用锁必须保证锁必须是同一把，所以我们需要使用intern()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span>  Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"><span class="keyword">synchronized</span>(userId.toString().intern())&#123;</span><br><span class="line">         <span class="comment">// 5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line">        <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经购买过了</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">// 7.1.订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">// 7.2.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">// 7.3.代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        save(voucherOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是以上代码还是存在问题，问题的原因在于当前方法被spring的事务控制，如果你在方法内部加锁，可能会导致当前方法事务还没有提交，但是锁已经释放也会导致问题，所以我们选择将当前方法整体包裹起来，确保事务不会出现问题：如下：</p><p>在seckillVoucher 方法中，添加以下逻辑，这样就能保证事务的特性，同时也控制了锁的粒度</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653373434815.png" alt="1653373434815"></p><p>但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653383810643.png" alt="1653383810643"></p><h3 id="3-7-集群环境下的并发问题">3.7 集群环境下的并发问题</h3><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。</p><p>1、我们将服务启动两份，端口分别为8081和8082：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653373887844.png" alt="1653373887844"></p><p>2、然后修改nginx的conf目录下的nginx.conf文件，配置反向代理和负载均衡：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653373908620.png" alt="1653373908620"></p><p><strong>具体操作(略)</strong></p><p><strong>有关锁失效原因分析</strong></p><p>由于现在我们部署了多个tomcat，每个tomcat都有一个属于自己的jvm，那么假设在服务器A的tomcat内部，有两个线程，这两个线程由于使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的，但是如果现在是服务器B的tomcat内部，又有两个线程，但是他们的锁对象写的虽然和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2实现互斥，这就是 集群环境下，syn锁失效的原因，在这种情况下，我们就需要使用分布式锁来解决这个问题。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653374044740.png" alt="1653374044740"></p><h2 id="4、分布式锁"><strong>4、分布式锁</strong></h2><h3 id="4-1-、基本原理和实现方式对比">4.1 、基本原理和实现方式对比</h3><p>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</p><p>分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653374296906.png" alt="1653374296906"></p><p>那么分布式锁他应该满足一些什么样的条件呢？</p><p>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p><p>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</p><p>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</p><p>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</p><p>安全性：安全也是程序中必不可少的一环</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653381992018.png" alt="1653381992018"></p><p>常见的分布式锁有三种</p><p>Mysql：mysql本身就带有锁机制，但是由于mysql性能本身一般，所以采用分布式锁的情况下，其实使用mysql作为分布式锁比较少见</p><p>Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁</p><p>Zookeeper：zookeeper也是企业级开发中较好的一个实现分布式锁的方案，由于本套视频并不讲解zookeeper的原理和分布式锁的实现，所以不过多阐述</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653382219377.png" alt="1653382219377"></p><h3 id="4-2-、Redis分布式锁的实现核心思路">4.2 、Redis分布式锁的实现核心思路</h3><p>实现分布式锁时需要实现的两个基本方法：</p><ul><li><p>获取锁：</p><ul><li>互斥：确保只能有一个线程获取锁</li><li>非阻塞：尝试一次，成功返回true，失败返回false</li></ul></li><li><p>释放锁：</p><ul><li>手动释放</li><li>超时释放：获取锁时添加一个超时时间</li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653382669900.png" alt="1653382669900"></p></li></ul><p>核心思路：</p><p>我们利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653382830810.png" alt="1653382830810"></p><h3 id="4-3-实现分布式锁版本一">4.3 实现分布式锁版本一</h3><ul><li>加锁逻辑</li></ul><p><strong>锁的基本接口</strong></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1656079017728.png" alt="1656079017728"></p><p><strong>SimpleRedisLock</strong></p><p>利用setnx方法进行加锁，同时增加过期时间，防止死锁，此方法可以保证加锁和增加过期时间具有原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX=<span class="string">&quot;lock:&quot;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取线程标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId()</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">            .setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>释放锁逻辑</li></ul><p>SimpleRedisLock</p><p>释放锁，防止删除别人的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//通过del删除锁</span></span><br><span class="line">    stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改业务代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">      <span class="comment">// 1.查询优惠券</span></span><br><span class="line">      <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">      <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">      <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">          <span class="comment">// 尚未开始</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3.判断秒杀是否已经结束</span></span><br><span class="line">      <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">          <span class="comment">// 尚未开始</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 4.判断库存是否充足</span></span><br><span class="line">      <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 库存不足</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">      <span class="comment">//创建锁对象(新增代码)</span></span><br><span class="line">      <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">      <span class="comment">//获取锁对象</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line"><span class="comment">//加锁失败</span></span><br><span class="line">      <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取代理对象(事务)</span></span><br><span class="line">          <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">          <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">//释放锁</span></span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Redis分布式锁误删情况说明">4.4 Redis分布式锁误删情况说明</h3><p>逻辑说明：</p><p>持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明</p><p>解决方案：解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653385920025.png" alt="1653385920025"></p><h3 id="4-5-解决Redis分布式锁误删问题">4.5 解决Redis分布式锁误删问题</h3><p>需求：修改之前的分布式锁实现，满足：在获取锁时存入线程标示（可以用UUID表示）<br>在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</p><ul><li>如果一致则释放锁</li><li>如果不一致则不释放锁</li></ul><p>核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653387398820.png" alt="1653387398820"></p><p>具体代码如下：加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">   <span class="comment">// 获取线程标示</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">   <span class="comment">// 获取锁</span></span><br><span class="line">   <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">   <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取线程标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">// 获取锁中的标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    <span class="comment">// 判断标示是否一致</span></span><br><span class="line">    <span class="keyword">if</span>(threadId.equals(id)) &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有关代码实操说明：</strong></p><p>在我们修改完此处代码后，我们重启工程，然后启动两个线程，第一个线程持有锁后，手动释放锁，第二个线程 此时进入到锁内部，再放行第一个线程，此时第一个线程由于锁的value值并非是自己，所以不能释放锁，也就无法删除别人的锁，此时第二个线程能够正确释放锁，通过这个案例初步说明我们解决了锁误删的问题。</p><h3 id="4-6-分布式锁的原子性问题">4.6 分布式锁的原子性问题</h3><p>更为极端的误删逻辑说明：</p><p>线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生，</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653387764938.png" alt="1653387764938"></p><h3 id="4-7-Lua脚本解决多条命令原子性问题">4.7 Lua脚本解决多条命令原子性问题</h3><p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%8D%E7%82%B9%E4%BB%8B%E7%BB%8DRedis%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8lua%E5%8E%BB%E6%93%8D%E4%BD%9Credis%EF%BC%8C%E5%8F%88%E8%83%BD%E4%BF%9D%E8%AF%81%E4%BB%96%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8B%BF%E9%94%81%E6%AF%94%E9%94%81%E5%88%A0%E9%94%81%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%80%A7%E5%8A%A8%E4%BD%9C%E4%BA%86%EF%BC%8C%E4%BD%9C%E4%B8%BAJava%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%99%E4%B8%80%E5%9D%97%E5%B9%B6%E4%B8%8D%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A6%81%E6%B1%82%EF%BC%8C%E5%B9%B6%E4%B8%8D%E9%9C%80%E8%A6%81%E5%A4%A7%E5%AE%B6%E8%BF%87%E4%BA%8E%E7%B2%BE%E9%80%9A%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E4%BB%96%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E5%8D%B3%E5%8F%AF%E3%80%82">https://www.runoob.com/lua/lua-tutorial.html，这里重点介绍Redis提供的调用函数，我们可以使用lua去操作redis，又能保证他的原子性，这样就可以实现拿锁比锁删锁是一个原子性动作了，作为Java程序员这一块并不作一个简单要求，并不需要大家过于精通，只需要知道他有什么作用即可。</a></p><p>这里重点介绍Redis提供的调用函数，语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;命令名称&#x27;</span>, <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;其它参数&#x27;</span>, ...)</span><br></pre></td></tr></table></figure><p>例如，我们要执行set name jack，则脚本是这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行 set name jack</span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure><p>例如，我们要先执行set name Rose，再执行get name，则脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先执行 set name jack</span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>)</span><br><span class="line"># 再执行 get name</span><br><span class="line"><span class="keyword">local</span> name = redis.call(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"># 返回</span><br><span class="line"><span class="keyword">return</span> name</span><br></pre></td></tr></table></figure><p>写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653392181413.png" alt="1653392181413"></p><p>例如，我们要执行 redis.call(‘set’, ‘name’, ‘jack’) 这个脚本，语法如下：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653392218531.png" alt="1653392218531"></p><p>如果脚本中的key、value不想写死，可以作为参数传递。key类型参数会放入KEYS数组，其它参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组获取这些参数：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653392438917.png" alt="1653392438917"></p><p>接下来我们来回一下我们释放锁的逻辑：</p><p>释放锁的业务流程是这样的</p><p>​1、获取锁中的线程标示</p><p>​2、判断是否与指定的标示（当前线程标示）一致</p><p>​3、如果一致则释放锁（删除）</p><p>​4、如果不一致则什么都不做</p><p>如果用Lua脚本来表示则是这样的：</p><p>最终我们操作redis的拿锁比锁删锁的lua脚本就会变成这样</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span></span><br><span class="line"><span class="comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 一致，则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;DEL&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不一致，则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="4-8-利用Java代码调用Lua脚本改造分布式锁">4.8 利用Java代码调用Lua脚本改造分布式锁</h3><p>lua脚本本身并不需要大家花费太多时间去研究，只需要知道如何调用，大致是什么意思即可，所以在笔记中并不会详细的去解释这些lua表达式的含义。</p><p>我们的RedisTemplate中，可以利用execute方法去执行lua脚本，参数对应关系就如下图股</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653393304844.png" alt="1653393304844"></p><p><strong>Java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用lua脚本</span></span><br><span class="line">    stringRedisTemplate.execute(</span><br><span class="line">            UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line">经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了~</span><br></pre></td></tr></table></figure><p>小总结：</p><p>基于Redis的分布式锁实现思路：</p><ul><li>利用set nx ex获取锁，并设置过期时间，保存线程标示</li><li>释放锁时先判断线程标示是否与自己一致，一致则删除锁<ul><li>特性：<ul><li>利用set nx满足互斥性</li><li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性</li><li>利用Redis集群保证高可用和高并发特性</li></ul></li></ul></li></ul><p>笔者总结：我们一路走来，利用添加过期时间，防止死锁问题的发生，但是有了过期时间之后，可能出现误删别人锁的问题，这个问题我们开始是利用删之前 通过拿锁，比锁，删锁这个逻辑来解决的，也就是删之前判断一下当前这把锁是否是属于自己的，但是现在还有原子性问题，也就是我们没法保证拿锁比锁删锁是一个原子性的动作，最后通过lua表达式来解决这个问题</p><p>但是目前还剩下一个问题锁不住，什么是锁不住呢，你想一想，如果当过期时间到了之后，我们可以给他续期一下，比如续个30s，就好像是网吧上网， 网费到了之后，然后说，来，网管，再给我来10块的，是不是后边的问题都不会发生了，那么续期问题怎么解决呢，可以依赖于我们接下来要学习redission啦</p><p><strong>测试逻辑：</strong></p><p>第一个线程进来，得到了锁，手动删除锁，模拟锁超时了，其他线程会执行lua来抢锁，当第一天线程利用lua删除锁时，lua能保证他不能删除他的锁，第二个线程删除锁时，利用lua同样可以保证不会删除别人的锁，同时还能保证原子性。</p><h2 id="5、分布式锁-redission"><strong>5、分布式锁-redission</strong></h2><h3 id="5-1-分布式锁-redission功能介绍">5.1 分布式锁-redission功能介绍</h3><p>基于setnx实现的分布式锁存在下面的问题：</p><p><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。</p><p><strong>不可重试</strong>：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p><p>**超时释放：**我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患</p><p><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653546070602.png" alt="1653546070602"></p><p>那么什么是Redission呢</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p><p>Redission提供了分布式锁的多种多样的功能</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653546736063.png" alt="1653546736063"></p><h3 id="5-2-分布式锁-Redission快速入门">5.2 分布式锁-Redission快速入门</h3><p>引入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">3.13</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置Redisson客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.150.101:6379&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建RedissonClient对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何使用Redission的分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissionClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRedisson</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//获取锁(可重入)，指定锁的名称</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">    <span class="comment">//尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//判断获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行业务&quot;</span>);          </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 VoucherOrderServiceImpl</p><p>注入RedissonClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询优惠券</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">        <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 尚未开始</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.判断秒杀是否已经结束</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 尚未开始</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.判断库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 库存不足</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//创建锁对象 这个代码不用了，因为我们现在要使用分布式锁</span></span><br><span class="line">        <span class="comment">//SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">        <span class="comment">//获取锁对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">       </span><br><span class="line"><span class="comment">//加锁失败</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取代理对象(事务)</span></span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-分布式锁-redission可重入锁原理">5.3 分布式锁-redission可重入锁原理</h3><p>在Lock锁中，他是借助于底层的一个voaltile的一个state变量来记录重入的状态的，比如当前没有人持有这把锁，那么state=0，假如有人持有这把锁，那么state=1，如果持有这把锁的人再次持有这把锁，那么state就会+1 ，如果是对于synchronized而言，他在c语言代码中会有一个count，原理和state类似，也是重入一次就加一，释放一次就-1 ，直到减少成0 时，表示当前这把锁没有被人持有。</p><p>在redission中，我们的也支持支持可重入锁</p><p>在分布式锁中，他采用hash结构用来存储锁，其中大key表示表示这把锁是否存在，用小key表示当前这把锁被哪个线程持有，所以接下来我们一起分析一下当前的这个lua表达式</p><p>这个地方一共有3个参数</p><blockquote><p><strong>KEYS[1] ： 锁名称</strong></p><p><strong>ARGV[1]：  锁失效时间</strong></p><p><strong>ARGV[2]：  id + “:” + threadId; 锁的小key</strong></p></blockquote><blockquote><ul><li>说白了，先判断锁存在，不存在就，说明是首次操作创建锁，若主锁存在，且哈希表中存在当前线程的标识（<code>ARGV[2]</code>），说明是<strong>同一线程再次请求锁</strong>（可重入场景）将重入次数+1，再设置过期时间。返回nil表示重入锁成功。锁被其他线程持有的时候 return redis.call(‘pttl’, KEYS[1]);</li></ul></blockquote><p>exists: 判断数据是否存在  name：是lock是否存在,如果==0，就表示当前这把锁不存在</p><p>redis.call(‘hset’, KEYS[1], ARGV[2], 1);此时他就开始往redis里边去写数据 ，写成一个hash结构</p><p>Lock{</p><p>​    id + <strong>“:”</strong> + threadId :  1</p><p>}</p><p>如果当前这把锁存在，则第一个条件不满足，再判断</p><p>redis.call(‘hexists’, KEYS[1], ARGV[2]) == 1</p><p>此时需要通过大key+小key判断当前这把锁是否是属于自己的，如果是自己的，则进行</p><p>redis.call(‘hincrby’, KEYS[1], ARGV[2], 1)</p><p>将当前这个锁的value进行+1 ，redis.call(‘pexpire’, KEYS[1], ARGV[1]); 然后再对其设置过期时间，如果以上两个条件都不满足，则表示当前这把锁抢锁失败，最后返回pttl，即为当前这把锁的失效时间</p><p>如果小伙帮们看了前边的源码， 你会发现他会去判断当前这个方法的返回值是否为null，如果是null，则对应则前两个if对应的条件，退出抢锁逻辑，如果返回的不是null，即走了第三个分支，在源码处会进行while(true)的自旋抢锁。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">              <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653548087334.png" alt="1653548087334"></p><h3 id="5-4-分布式锁-redission锁重试和WatchDog机制">5.4 分布式锁-redission锁重试和WatchDog机制</h3><p><strong>说明</strong>：由于课程中已经说明了有关tryLock的源码解析以及其看门狗原理，所以笔者在这里给大家分析lock()方法的源码解析，希望大家在学习过程中，能够掌握更多的知识</p><p>抢锁过程中，获得当前线程，通过tryAcquire进行抢锁，该抢锁逻辑和之前逻辑相同</p><p>1、先判断当前这把锁是否存在，如果不存在，插入一把锁，返回null</p><p>2、判断当前这把锁是否是属于当前线程，如果是，则返回null</p><p>所以如果返回是null，则代表着当前这哥们已经抢锁完毕，或者可重入完毕，但是如果以上两个条件都不满足，则进入到第三个条件，返回的是锁的失效时间，同学们可以自行往下翻一点点，你能发现有个while( true) 再次进行tryAcquire进行抢锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line"><span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(-<span class="number">1</span>, leaseTime, unit, threadId);</span><br><span class="line"><span class="comment">// lock acquired</span></span><br><span class="line"><span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来会有一个条件分支，因为lock方法有重载方法，一个是带参数，一个是不带参数，如果带带参数传入的值是-1，如果传入参数，则leaseTime是他本身，所以如果传入了参数，此时leaseTime != -1 则会进去抢锁，抢锁的逻辑就是之前说的那三个逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是没有传入时间，则此时也会进行抢锁， 而且抢锁时间是默认看门狗时间 commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout()</p><p>ttlRemainingFuture.onComplete((ttlRemaining, e) 这句话相当于对以上抢锁进行了监听，也就是说当上边抢锁完毕后，此方法会被调用，具体调用的逻辑就是去后台开启一个线程，进行续约逻辑，也就是看门狗线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                        commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                        TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lock acquired</span></span><br><span class="line">    <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">        scheduleExpirationRenewal(threadId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> ttlRemainingFuture;</span><br></pre></td></tr></table></figure><p>此逻辑就是续约逻辑，注意看commandExecutor.getConnectionManager().newTimeout（） 此方法</p><p>Method(  <strong>new</strong> TimerTask() {},参数2 ，参数3  )</p><p>指的是：通过参数2，参数3 去描述什么时候去做参数1的事情，现在的情况是：10s之后去做参数一的事情</p><p>因为锁的失效时间是30s，当10s之后，此时这个timeTask 就触发了，他就去进行续约，把当前这把锁续约成30s，如果操作成功，那么此时就会递归调用自己，再重新设置一个timeTask()，于是再过10s后又再设置一个timerTask，完成不停的续约</p><p>那么大家可以想一想，假设我们的线程出现了宕机他还会续约吗？当然不会，因为没有人再去调用renewExpiration这个方法，所以等到时间之后自然就释放了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">renewExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ExpirationEntry</span> <span class="variable">ee</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">    <span class="keyword">if</span> (ee == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">ExpirationEntry</span> <span class="variable">ent</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">            <span class="keyword">if</span> (ent == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">threadId</span> <span class="operator">=</span> ent.getFirstThreadId();</span><br><span class="line">            <span class="keyword">if</span> (threadId == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">            future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                    <span class="comment">// reschedule itself</span></span><br><span class="line">                    renewExpiration();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    </span><br><span class="line">    ee.setTimeout(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-分布式锁-redission锁的MutiLock原理">5.5 分布式锁-redission锁的MutiLock原理</h3><p>为了提高redis的可用性，我们会搭建集群或者主从，现在以主从为例</p><p>此时我们去写命令，写在主机上， 主机会将数据同步给从机，但是假设在主机还没有来得及把数据写入到从机去的时候，此时主机宕机，哨兵会发现主机宕机，并且选举一个slave变成master，而此时新的master中实际上并没有锁信息，此时锁信息就已经丢掉了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653553998403.png" alt="1653553998403"></p><p>为了解决这个问题，redission提出来了MutiLock锁，使用这把锁咱们就不使用主从了，每个节点的地位都是一样的， 这把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获得锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653554055048.png" alt="1653554055048"></p><p>那么MutiLock 加锁原理是什么呢？笔者画了一幅图来说明</p><p>当我们去设置了多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁，但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms，假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功，如果在4500ms有线程加锁失败，则会再次去进行重试.</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653553093967.png" alt="1653553093967"></p><h2 id="6、秒杀优化"><strong>6、秒杀优化</strong></h2><h3 id="6-1-秒杀优化-异步秒杀思路">6.1 秒杀优化-异步秒杀思路</h3><p>我们来回顾一下下单流程</p><p>当用户发起请求，此时会请求nginx，nginx会访问到tomcat，而tomcat中的程序，会进行串行操作，分成如下几个步骤</p><p>1、查询优惠卷</p><p>2、判断秒杀库存是否足够</p><p>3、查询订单</p><p>4、校验是否是一人一单</p><p>5、扣减库存</p><p>6、创建订单</p><p>在这六步操作中，又有很多操作是要去操作数据库的，而且还是一个线程串行执行， 这样就会导致我们的程序执行的很慢，所以我们需要异步程序执行，那么如何加速呢？</p><p>在这里笔者想给大家分享一下课程内没有的思路，看看有没有小伙伴这么想，比如，我们可以不可以使用异步编排来做，或者说我开启N多线程，N多个线程，一个线程执行查询优惠卷，一个执行判断扣减库存，一个去创建订单等等，然后再统一做返回，这种做法和课程中有哪种好呢？答案是课程中的好，因为如果你采用我刚说的方式，如果访问的人很多，那么线程池中的线程可能一下子就被消耗完了，而且你使用上述方案，最大的特点在于，你觉得时效性会非常重要，但是你想想是吗？并不是，比如我只要确定他能做这件事，然后我后边慢慢做就可以了，我并不需要他一口气做完这件事，所以我们应当采用的是课程中，类似消息队列的方式来完成我们的需求，而不是使用线程池或者是异步编排的方式来完成这个需求</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653560986599.png" alt="1653560986599"></p><p>优化方案：我们将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息，这样程序不就超级快了吗？而且也不用担心线程池消耗殆尽的问题，因为这里我们的程序中并没有手动使用任何线程池，当然这里边有两个难点</p><p>第一个难点是我们怎么在redis中去快速校验一人一单，还有库存判断</p><p>第二个难点是由于我们校验和tomct下单是两个线程，那么我们如何知道到底哪个单他最后是否成功，或者是下单完成，为了完成这件事我们在redis操作完之后，我们会将一些信息返回给前端，同时也会把这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询我们tomcat中的下单逻辑是否完成了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653561657295.png" alt="1653561657295"></p><p>我们现在来看看整体思路：当用户下单之后，判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠卷存入到redis中，并且返回0，整个过程需要保证是原子性的，我们可以使用lua来操作</p><p>当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653562234886.png" alt="1653562234886"></p><h3 id="6-2-秒杀优化-Redis完成秒杀资格判断">6.2 秒杀优化-Redis完成秒杀资格判断</h3><p>需求：</p><ul><li><p>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</p></li><li><p>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</p></li><li><p>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</p></li><li><p>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1656080546603.png" alt="1656080546603"></p></li></ul><p>VoucherServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line">    <span class="comment">// 保存秒杀库存到Redis中</span></span><br><span class="line">    <span class="comment">//SECKILL_STOCK_KEY 这个变量定义在RedisConstans中</span></span><br><span class="line">    <span class="comment">//private static final String SECKILL_STOCK_KEY =&quot;seckill:stock:&quot;</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整lua表达式</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.参数列表</span></span><br><span class="line"><span class="comment">-- 1.1.优惠券id</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 1.2.用户id</span></span><br><span class="line"><span class="keyword">local</span> userId = ARGV[<span class="number">2</span>]</span><br><span class="line"><span class="comment">-- 1.3.订单id</span></span><br><span class="line"><span class="keyword">local</span> orderId = ARGV[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.数据key</span></span><br><span class="line"><span class="comment">-- 2.1.库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line"><span class="comment">-- 2.2.订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.脚本业务</span></span><br><span class="line"><span class="comment">-- 3.1.判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 3.2.库存不足，返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 3.3.存在，说明是重复下单，返回2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.4.扣库存 incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>, stockKey, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">-- 3.5.下单（保存用户）sadd orderKey userId 创建seckill:order:</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>, orderKey, userId)</span><br><span class="line"><span class="comment">-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...</span></span><br><span class="line">redis.call(<span class="string">&#x27;xadd&#x27;</span>, <span class="string">&#x27;stream.orders&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;userId&#x27;</span>, userId, <span class="string">&#x27;voucherId&#x27;</span>, voucherId, <span class="string">&#x27;id&#x27;</span>, orderId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>当以上lua表达式执行完毕后，剩下的就是根据步骤3,4来执行我们接下来的任务了</p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">            SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(),</span><br><span class="line">            voucherId.toString(), userId.toString(), String.valueOf(orderId)</span><br><span class="line">    );</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">    <span class="comment">// 2.判断结果是否为0</span></span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 2.1.不为0 ，代表没有购买资格</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TODO 保存阻塞队列</span></span><br><span class="line">    <span class="comment">// 3.返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-秒杀优化-基于阻塞队列实现秒杀优化">6.3 秒杀优化-基于阻塞队列实现秒杀优化</h3><p>VoucherOrderServiceImpl</p><p>修改下单动作，现在我们去下单时，是通过lua表达式去原子执行判断逻辑，如果判断我出来不为0 ，则要么是库存不足，要么是重复下单，返回错误信息，如果是0，则把下单的逻辑保存到队列中去，然后异步执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步处理线程池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//在类初始化之后执行，因为当这个类初始化好了之后，随时都是有可能要执行的</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">   SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于线程池处理的任务</span></span><br><span class="line"><span class="comment">// 当初始化完毕后，就会去从对列中去拿信息</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 1.获取队列中的订单信息</span></span><br><span class="line">                    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                    <span class="comment">// 2.创建订单</span></span><br><span class="line">                    handleVoucherOrder(voucherOrder);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;处理订单异常&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取用户</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">            <span class="comment">// 2.创建锁对象</span></span><br><span class="line">            <span class="type">RLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">            <span class="comment">// 3.尝试获取锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.lock();</span><br><span class="line">            <span class="comment">// 4.判断是否获得锁成功</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                <span class="comment">// 获取锁失败，直接返回失败或者重试</span></span><br><span class="line">                log.error(<span class="string">&quot;不允许重复下单！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//注意：由于是spring的事务是放在threadLocal中，此时的是多线程，事务会失效</span></span><br><span class="line">                proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                redisLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks =<span class="keyword">new</span>  <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.执行lua脚本</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">                SECKILL_SCRIPT,</span><br><span class="line">                Collections.emptyList(),</span><br><span class="line">                voucherId.toString(), userId.toString(), String.valueOf(orderId)</span><br><span class="line">        );</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">        <span class="comment">// 2.判断结果是否为0</span></span><br><span class="line">        <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.1.不为0 ，代表没有购买资格</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;库存不足&quot;</span> : <span class="string">&quot;不能重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">// 2.4.用户id</span></span><br><span class="line">        voucherOrder.setUserId(userId);</span><br><span class="line">        <span class="comment">// 2.5.代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        <span class="comment">// 2.6.放入阻塞队列</span></span><br><span class="line">        orderTasks.add(voucherOrder);</span><br><span class="line">        <span class="comment">//3.获取代理对象</span></span><br><span class="line">         proxy = (IVoucherOrderService)AopContext.currentProxy();</span><br><span class="line">        <span class="comment">//4.返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">        <span class="comment">// 5.1.查询订单</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();</span><br><span class="line">        <span class="comment">// 5.2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经购买过了</span></span><br><span class="line">           log.error(<span class="string">&quot;用户已经购买过了&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            log.error(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>小总结：</strong></p><p>秒杀业务的优化思路是什么？</p><ul><li>先利用Redis完成库存余量、一人一单判断，完成抢单业务</li><li>再将下单业务放入阻塞队列，利用独立线程异步下单</li><li>基于阻塞队列的异步秒杀存在哪些问题？<ul><li>内存限制问题</li><li>数据安全问题</li></ul></li></ul><h2 id="7、Redis消息队列"><strong>7、Redis消息队列</strong></h2><h3 id="7-1-Redis消息队列-认识消息队列">7.1 Redis消息队列-认识消息队列</h3><p>什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：</p><ul><li>消息队列：存储和管理消息，也被称为消息代理（Message Broker）</li><li>生产者：发送消息到消息队列</li><li>消费者：从消息队列获取消息并处理消息</li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653574849336.png" alt="1653574849336"></p><p>使用队列的好处在于 **解耦：**所谓解耦，举一个生活中的例子就是：快递员(生产者)把快递放到快递柜里边(Message Queue)去，我们(消费者)从快递柜里边去拿东西，这就是一个异步，如果耦合，那么这个快递员相当于直接把快递交给你，这事固然好，但是万一你不在家，那么快递员就会一直等你，这就浪费了快递员的时间，所以这种思想在我们日常开发中，是非常有必要的。</p><p>这种场景在我们秒杀中就变成了：我们下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。</p><p>这里我们可以使用一些现成的mq，比如kafka，rabbitmq等等，但是呢，如果没有安装mq，我们也可以直接使用redis提供的mq方案，降低我们的部署和学习成本。</p><h3 id="7-2-Redis消息队列-基于List实现消息队列">7.2 Redis消息队列-基于List实现消息队列</h3><p><strong>基于List结构模拟消息队列</strong></p><p>消息队列（Message Queue），字面意思就是存放消息的队列。而Redis的list数据结构是一个双向链表，很容易模拟出队列效果。</p><p>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现。<br>不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653575176451.png" alt="1653575176451"></p><p>基于List的消息队列有哪些优缺点？<br>优点：</p><ul><li>利用Redis存储，不受限于JVM内存上限</li><li>基于Redis的持久化机制，数据安全性有保证</li><li>可以满足消息有序性</li></ul><p>缺点：</p><ul><li>无法避免消息丢失</li><li>只支持单消费者</li></ul><h3 id="7-3-Redis消息队列-基于PubSub的消息队列">7.3 Redis消息队列-基于PubSub的消息队列</h3><p>PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。</p><p>SUBSCRIBE channel [channel] ：订阅一个或多个频道<br>PUBLISH channel msg ：向一个频道发送消息<br>PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653575506373.png" alt="1653575506373"></p><p>基于PubSub的消息队列有哪些优缺点？<br>优点：</p><ul><li>采用发布订阅模型，支持多生产、多消费</li></ul><p>缺点：</p><ul><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出时数据丢失</li></ul><h3 id="7-4-Redis消息队列-基于Stream的消息队列">7.4 Redis消息队列-基于Stream的消息队列</h3><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p><p>发送消息的命令：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577301737.png" alt="1653577301737"></p><p>例如：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577349691.png" alt="1653577349691"></p><p>读取消息的方式之一：XREAD</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577445413.png" alt="1653577445413"></p><p>例如，使用XREAD读取第一个消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577643629.png" alt="1653577643629"></p><p>XREAD阻塞方式，读取最新的消息：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577659166.png" alt="1653577659166"></p><p>在业务开发中，我们可以循环的调用XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577689129.png" alt="1653577689129"></p><p>注意：当我们指定起始ID为$时，代表读取最新的消息，如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现漏读消息的问题</p><p>STREAM类型消息队列的XREAD命令特点：</p><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul><h3 id="7-5-Redis消息队列-基于Stream的消息队列-消费者组">7.5 Redis消息队列-基于Stream的消息队列-消费者组</h3><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577801668.png" alt="1653577801668"></p><p>创建消费者组：<br><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653577984924.png" alt="1653577984924"><br>key：队列名称<br>groupName：消费者组名称<br>ID：起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息<br>MKSTREAM：队列不存在时自动创建队列<br>其它常见命令：</p><p><strong>删除指定的消费者组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP DESTORY key groupName</span><br></pre></td></tr></table></figure><p><strong>给指定的消费者组添加消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP CREATECONSUMER key groupname consumername</span><br></pre></td></tr></table></figure><p><strong>删除消费者组中的指定消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP DELCONSUMER key groupname consumername</span><br></pre></td></tr></table></figure><p>从消费者组读取消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</span><br></pre></td></tr></table></figure><ul><li>group：消费组名称</li><li>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</li><li>count：本次查询的最大数量</li><li>BLOCK milliseconds：当没有消息时最长等待时间</li><li>NOACK：无需手动ACK，获取到消息后自动确认</li><li>STREAMS key：指定队列名称</li><li>ID：获取消息的起始ID：</li></ul><p>“&gt;”：从下一个未消费的消息开始<br>其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始</p><p>消费者监听消息的基本思路：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653578211854.png" alt="1653578211854">STREAM类型消息队列的XREADGROUP命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p>最后我们来个小对比</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653578560691.png" alt="1653578560691"></p><h3 id="7-6-基于Redis的Stream结构作为消息队列，实现异步秒杀下单">7.6 基于Redis的Stream结构作为消息队列，实现异步秒杀下单</h3><p>需求：</p><ul><li>创建一个Stream类型的消息队列，名为stream.orders</li><li>修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId</li><li>项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单\</li></ul><p>修改lua表达式,新增3.6</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1656082824939.png" alt="1656082824939"></p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span></span><br><span class="line">                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                    Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                    StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                    StreamOffset.create(<span class="string">&quot;stream.orders&quot;</span>, ReadOffset.lastConsumed())</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 2.判断订单信息是否为空</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 如果为null，说明没有消息，继续下一次循环</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map&lt;Object, Object&gt; value = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 3.创建订单</span></span><br><span class="line">                createVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">// 4.确认消息 XACK</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(<span class="string">&quot;s1&quot;</span>, <span class="string">&quot;g1&quot;</span>, record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理订单异常&quot;</span>, e);</span><br><span class="line">                <span class="comment">//处理异常消息</span></span><br><span class="line">                handlePendingList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlePendingList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0</span></span><br><span class="line">                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                    Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                    StreamReadOptions.empty().count(<span class="number">1</span>),</span><br><span class="line">                    StreamOffset.create(<span class="string">&quot;stream.orders&quot;</span>, ReadOffset.from(<span class="string">&quot;0&quot;</span>))</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">// 2.判断订单信息是否为空</span></span><br><span class="line">                <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 如果为null，说明没有异常消息，结束循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                Map&lt;Object, Object&gt; value = record.getValue();</span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 3.创建订单</span></span><br><span class="line">                createVoucherOrder(voucherOrder);</span><br><span class="line">                <span class="comment">// 4.确认消息 XACK</span></span><br><span class="line">                stringRedisTemplate.opsForStream().acknowledge(<span class="string">&quot;s1&quot;</span>, <span class="string">&quot;g1&quot;</span>, record.getId());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;处理pendding订单异常&quot;</span>, e);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8、达人探店">8、达人探店</h2><h3 id="8-1、达人探店-发布探店笔记">8.1、达人探店-发布探店笔记</h3><p>发布探店笔记</p><p>探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个：<br>tb_blog：探店笔记表，包含笔记中的标题、文字、图片等<br>tb_blog_comments：其他用户对探店笔记的评价</p><p><strong>具体发布流程</strong></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653578992639.png" alt="1653578992639"></p><p>上传接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;blog&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile image)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取原始文件名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 生成新文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> createNewFileName(originalFilename);</span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));</span><br><span class="line">            <span class="comment">// 返回结果</span></span><br><span class="line">            log.debug(<span class="string">&quot;文件上传成功，&#123;&#125;&quot;</span>, fileName);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：同学们在操作时，需要修改SystemConstants.IMAGE_UPLOAD_DIR 自己图片所在的地址，在实际开发中图片一般会放在nginx上或者是云存储上。</p><p>BlogController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/blog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IBlogService blogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">        <span class="comment">//获取登录用户</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">        blog.setUpdateTime(user.getId());</span><br><span class="line">        <span class="comment">//保存探店博文</span></span><br><span class="line">        blogService.saveBlog(blog);</span><br><span class="line">        <span class="comment">//返回id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-达人探店-查看探店笔记">8.2 达人探店-查看探店笔记</h3><p>实现查看发布探店笔记的接口</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653579931626.png" alt="1653579931626"></p><p>实现代码：</p><p>BlogServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询blog</span></span><br><span class="line">    <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="keyword">if</span> (blog == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;笔记不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.查询blog有关的用户</span></span><br><span class="line">    queryBlogUser(blog);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-达人探店-点赞功能">8.3 达人探店-点赞功能</h3><p>初始代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//修改点赞数量</span></span><br><span class="line">    blogService.update().setSql(<span class="string">&quot;liked = liked +1 &quot;</span>).eq(<span class="string">&quot;id&quot;</span>,id).update();</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题分析：这种方式会导致一个用户无限点赞，明显是不合理的</p><p>造成这个问题的原因是，我们现在的逻辑，发起请求只是给数据库+1，所以才会出现这个问题</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653581590453.png" alt="1653581590453"></p><p>完善点赞功能</p><p>需求：</p><ul><li>同一个用户只能点赞一次，再次点击则取消点赞</li><li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）</li></ul><p>实现步骤：</p><ul><li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ul><p>为什么采用set集合：</p><p>因为我们的数据是不能重复的，当用户操作过之后，无论他怎么操作，都是</p><p>具体步骤：</p><p>1、在Blog 添加一个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Boolean isLike;</span><br></pre></td></tr></table></figure><p>2、修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">       <span class="comment">// 1.获取登录用户</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">       <span class="comment">// 2.判断当前登录用户是否已经点赞</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">isMember</span> <span class="operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());</span><br><span class="line">       <span class="keyword">if</span>(BooleanUtil.isFalse(isMember))&#123;</span><br><span class="line">            <span class="comment">//3.如果未点赞，可以点赞</span></span><br><span class="line">           <span class="comment">//3.1 数据库点赞数+1</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">           <span class="comment">//3.2 保存用户到Redis的set集合</span></span><br><span class="line">           <span class="keyword">if</span>(isSuccess)&#123;</span><br><span class="line">               stringRedisTemplate.opsForSet().add(key,userId.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//4.如果已点赞，取消点赞</span></span><br><span class="line">           <span class="comment">//4.1 数据库点赞数-1</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">           <span class="comment">//4.2 把用户从Redis的set集合移除</span></span><br><span class="line">           <span class="keyword">if</span>(isSuccess)&#123;</span><br><span class="line">               stringRedisTemplate.opsForSet().remove(key,userId.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-达人探店-点赞排行榜">8.4 达人探店-点赞排行榜</h3><p>在探店笔记的详情页面，应该把给该笔记点赞的人显示出来，比如最早点赞的TOP5，形成点赞排行榜：</p><p>之前的点赞是放到set集合，但是set集合是不能排序的，所以这个时候，咱们可以采用一个可以排序的set集合，就是咱们的sortedSet</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653805077118.png" alt="1653805077118"></p><p>我们接下来来对比一下这些集合的区别是什么</p><p>所有点赞的人，需要是唯一的，所以我们应当使用set或者是sortedSet</p><p>其次我们需要排序，就可以直接锁定使用sortedSet啦</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653805203758.png" alt="1653805203758"></p><p>修改代码</p><p>BlogServiceImpl</p><p>点赞逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">likeBlog</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="comment">// 1.获取登录用户</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">     <span class="comment">// 2.判断当前登录用户是否已经点赞</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">     <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">     <span class="keyword">if</span> (score == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 3.如果未点赞，可以点赞</span></span><br><span class="line">         <span class="comment">// 3.1.数据库点赞数 + 1</span></span><br><span class="line">         <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked + 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">         <span class="comment">// 3.2.保存用户到Redis的set集合  zadd key value score</span></span><br><span class="line">         <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">             stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 4.如果已点赞，取消点赞</span></span><br><span class="line">         <span class="comment">// 4.1.数据库点赞数 -1</span></span><br><span class="line">         <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> update().setSql(<span class="string">&quot;liked = liked - 1&quot;</span>).eq(<span class="string">&quot;id&quot;</span>, id).update();</span><br><span class="line">         <span class="comment">// 4.2.把用户从Redis的set集合移除</span></span><br><span class="line">         <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">             stringRedisTemplate.opsForZSet().remove(key, userId.toString());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> Result.ok();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isBlogLiked</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">     <span class="comment">// 1.获取登录用户</span></span><br><span class="line">     <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">     <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 用户未登录，无需查询是否点赞</span></span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getId();</span><br><span class="line">     <span class="comment">// 2.判断当前登录用户是否已经点赞</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;blog:liked:&quot;</span> + blog.getId();</span><br><span class="line">     <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());</span><br><span class="line">     blog.setIsLike(score != <span class="literal">null</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>点赞列表查询列表</p><p>BlogController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> blogService.queryBlogLikes(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BlogService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> BLOG_LIKED_KEY + id;</span><br><span class="line">    <span class="comment">// 1.查询top5的点赞用户 zrange key 0 4</span></span><br><span class="line">    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (top5 == <span class="literal">null</span> || top5.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.解析出其中的用户id</span></span><br><span class="line">    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    <span class="comment">// 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1)</span></span><br><span class="line">    List&lt;UserDTO&gt; userDTOS = userService.query()</span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list()</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(userDTOS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、好友关注">9、好友关注</h2><h3 id="9-1-好友关注-关注和取消关注">9.1 好友关注-关注和取消关注</h3><p>针对用户的操作：可以对用户进行关注和取消关注功能。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653806140822.png" alt="1653806140822"></p><p>实现思路：</p><p>需求：基于该表数据结构，实现两个接口：</p><ul><li>关注和取关接口</li><li>判断是否关注的接口</li></ul><p>关注是User之间的关系，是博主与粉丝的关系，数据库中有一张tb_follow表来标示：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653806253817.png" alt="1653806253817"></p><p>注意: 这里需要把主键修改为自增长，简化开发。</p><p>FollowController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关注</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId, <span class="meta">@PathVariable(&quot;isFollow&quot;)</span> Boolean isFollow)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> followService.follow(followUserId, isFollow);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取消关注</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/or/not/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long followUserId)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> followService.isFollow(followUserId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FollowService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">取消关注service</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">isFollow</span><span class="params">(Long followUserId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">// 2.查询是否关注 select count(*) from tb_follow where user_id = ? and follow_user_id = ?</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId).count();</span><br><span class="line">        <span class="comment">// 3.判断</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(count &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> 关注service</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, Boolean isFollow)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取登录用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + userId;</span><br><span class="line">        <span class="comment">// 1.判断到底是关注还是取关</span></span><br><span class="line">        <span class="keyword">if</span> (isFollow) &#123;</span><br><span class="line">            <span class="comment">// 2.关注，新增数据</span></span><br><span class="line">            <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">            follow.setUserId(userId);</span><br><span class="line">            follow.setFollowUserId(followUserId);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(follow);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?</span></span><br><span class="line">            remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;()</span><br><span class="line">                    .eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-好友关注-共同关注">9.2 好友关注-共同关注</h3><p>想要去看共同关注的好友，需要首先进入到这个页面，这个页面会发起两个请求</p><p>1、去查询用户的详情</p><p>2、去查询用户的笔记</p><p>以上两个功能和共同关注没有什么关系，大家可以自行将笔记中的代码拷贝到idea中就可以实现这两个功能了，我们的重点在于共同关注功能。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653806706296.png" alt="1653806706296"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserController 根据id查询用户</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line"><span class="comment">// 查询详情</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line"><span class="keyword">return</span> Result.ok(userDTO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BlogController  根据id查询博主的探店笔记</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/of/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogByUserId</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="comment">// 根据用户查询</span></span><br><span class="line">Page&lt;Blog&gt; page = blogService.query()</span><br><span class="line">.eq(<span class="string">&quot;user_id&quot;</span>, id).page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));</span><br><span class="line"><span class="comment">// 获取当前页数据</span></span><br><span class="line">List&lt;Blog&gt; records = page.getRecords();</span><br><span class="line"><span class="keyword">return</span> Result.ok(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来看看共同关注如何实现：</p><p>需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同关注呢。</p><p>当然是使用我们之前学习过的set集合咯，在set集合中，有交集并集补集的api，我们可以把两人的关注的人分别放入到一个set集合中，然后再通过api去查看这两个set集合中的交集数据。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653806973212.png" alt="1653806973212"></p><p>我们先来改造当前的关注列表</p><p>改造原因是因为我们需要在用户关注了某位用户后，需要将数据放入到set集合中，方便后续进行共同关注，同时当取消关注时，也需要从set集合中进行删除</p><p>FollowServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">follow</span><span class="params">(Long followUserId, Boolean isFollow)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + userId;</span><br><span class="line">    <span class="comment">// 1.判断到底是关注还是取关</span></span><br><span class="line">    <span class="keyword">if</span> (isFollow) &#123;</span><br><span class="line">        <span class="comment">// 2.关注，新增数据</span></span><br><span class="line">        <span class="type">Follow</span> <span class="variable">follow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Follow</span>();</span><br><span class="line">        follow.setUserId(userId);</span><br><span class="line">        follow.setFollowUserId(followUserId);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(follow);</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            <span class="comment">// 把关注用户的id，放入redis的set集合 sadd userId followerUserId</span></span><br><span class="line">            stringRedisTemplate.opsForSet().add(key, followUserId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> remove(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Follow&gt;()</span><br><span class="line">                .eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;follow_user_id&quot;</span>, followUserId));</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            <span class="comment">// 把关注用户的id从Redis集合中移除</span></span><br><span class="line">            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体的关注代码：</strong></p><p>FollowServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">followCommons</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + userId;</span><br><span class="line">    <span class="comment">// 2.求交集</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> <span class="string">&quot;follows:&quot;</span> + id;</span><br><span class="line">    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key, key2);</span><br><span class="line">    <span class="keyword">if</span> (intersect == <span class="literal">null</span> || intersect.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 无交集</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.解析id集合</span></span><br><span class="line">    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 4.查询用户</span></span><br><span class="line">    List&lt;UserDTO&gt; users = userService.listByIds(ids)</span><br><span class="line">            .stream()</span><br><span class="line">            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> Result.ok(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-好友关注-Feed流实现方案">9.3 好友关注-Feed流实现方案</h3><p>当我们关注了用户后，这个用户发了动态，那么我们应该把这些数据推送给用户，这个需求，其实我们又把他叫做Feed流，关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。</p><p>对于传统的模式的内容解锁：我们是需要用户去通过搜索引擎或者是其他的方式去解锁想要看的内容</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653808641260.png" alt="1653808641260"></p><p>对于新型的Feed流的的效果：不需要我们用户再去推送信息，而是系统分析用户到底想要什么，然后直接把内容推送给用户，从而使用户能够更加的节约时间，不用主动去寻找。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653808993693.png" alt="1653808993693"></p><p>Feed流的实现有两种模式：</p><p>Feed流产品有两种常见模式：<br>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈</p><ul><li>优点：信息全面，不会有缺失。并且实现也相对简单</li><li>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</li></ul><p>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户</p><ul><li>优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷</li><li>缺点：如果算法不精准，可能起到反作用<br>本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种：</li></ul><p>我们本次针对好友的操作，采用的就是Timeline的方式，只需要拿到我们关注用户的信息，然后按照时间排序即可</p><p>，因此采用Timeline的模式。该模式的实现方案有三种：</p><ul><li>拉模式</li><li>推模式</li><li>推拉结合</li></ul><p><strong>拉模式</strong>：也叫做读扩散</p><p>该模式的核心含义就是：当张三和李四和王五发了消息后，都会保存在自己的邮箱中，假设赵六要读取信息，那么他会从读取他自己的收件箱，此时系统会从他关注的人群中，把他关注人的信息全部都进行拉取，然后在进行排序</p><p>优点：比较节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清楚。</p><p>缺点：比较延迟，当用户读取数据时才去关注的人里边去读取数据，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653809450816.png" alt="1653809450816"></p><p><strong>推模式</strong>：也叫做写扩散。</p><p>推模式是没有写邮箱的，当张三写了一个内容，此时会主动的把张三写的内容发送到他的粉丝收件箱中去，假设此时李四再来读取，就不用再去临时拉取了</p><p>优点：时效快，不用临时拉取</p><p>缺点：内存压力大，假设一个大V写信息，很多人关注他， 就会写很多分数据到粉丝那边去</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653809875208.png" alt="1653809875208"></p><p><strong>推拉结合模式</strong>：也叫做读写混合，兼具推和拉两种模式的优点。</p><p>推拉模式是一个折中的方案，站在发件人这一段，如果是个普通的人，那么我们采用写扩散的方式，直接把数据写入到他的粉丝中去，因为普通的人他的粉丝关注量比较小，所以这样做没有压力，如果是大V，那么他是直接将数据先写入到一份到发件箱里边去，然后再直接写一份到活跃粉丝收件箱里边去，现在站在收件人这端来看，如果是活跃粉丝，那么大V和普通的人发的都会直接写入到自己收件箱里边来，而如果是普通的粉丝，由于他们上线不是很频繁，所以等他们上线时，再从发件箱里边去拉信息。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653812346852.png" alt="1653812346852"></p><h3 id="9-4-好友关注-推送到粉丝收件箱">9.4 好友关注-推送到粉丝收件箱</h3><p>需求：</p><ul><li>修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱</li><li>收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现</li><li>查询收件箱数据时，可以实现分页查询</li></ul><p>Feed流中的数据会不断更新，所以数据的角标也在变化，因此不能采用传统的分页模式。</p><p>传统了分页在feed流是不适用的，因为我们的数据会随时发生变化</p><p>假设在t1 时刻，我们去读取第一页，此时page = 1 ，size = 5 ，那么我们拿到的就是10~6 这几条记录，假设现在t2时候又发布了一条记录，此时t3 时刻，我们来读取第二页，读取第二页传入的参数是page=2 ，size=5 ，那么此时读取到的第二页实际上是从6 开始，然后是6~2 ，那么我们就读取到了重复的数据，所以feed流的分页，不能采用原始方案来做。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653813047671.png" alt="1653813047671"></p><p>Feed流的滚动分页</p><p>我们需要记录每次操作的最后一条，然后从这个位置开始去读取数据</p><p>举个例子：我们从t1时刻开始，拿第一页数据，拿到了10~6，然后记录下当前最后一次拿取的记录，就是6，t2时刻发布了新的记录，此时这个11放到最顶上，但是不会影响我们之前记录的6，此时t3时刻来拿第二页，第二页这个时候拿数据，还是从6后一点的5去拿，就拿到了5-1的记录。我们这个地方可以采用sortedSet来做，可以进行范围查询，并且还可以记录当前获取数据时间戳最小值，就可以实现滚动分页了</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653813462834.png" alt="1653813462834"></p><p>核心的意思：就是我们在保存完探店笔记后，获得到当前笔记的粉丝，然后把数据推送到粉丝的redis中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(Blog blog)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取登录用户</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    blog.setUserId(user.getId());</span><br><span class="line">    <span class="comment">// 2.保存探店笔记</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> save(blog);</span><br><span class="line">    <span class="keyword">if</span>(!isSuccess)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;新增笔记失败!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.查询笔记作者的所有粉丝 select * from tb_follow where follow_user_id = ?</span></span><br><span class="line">    List&lt;Follow&gt; follows = followService.query().eq(<span class="string">&quot;follow_user_id&quot;</span>, user.getId()).list();</span><br><span class="line">    <span class="comment">// 4.推送笔记id给所有粉丝</span></span><br><span class="line">    <span class="keyword">for</span> (Follow follow : follows) &#123;</span><br><span class="line">        <span class="comment">// 4.1.获取粉丝id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> follow.getUserId();</span><br><span class="line">        <span class="comment">// 4.2.推送</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY + userId;</span><br><span class="line">        stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.返回id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-5好友关注-实现分页查询收邮箱">9.5好友关注-实现分页查询收邮箱</h3><p>需求：在个人主页的“关注”卡片中，查询并展示推送的Blog信息：</p><p>具体操作如下：</p><p>1、每次查询完成后，我们要分析出查询出数据的最小时间戳，这个值会作为下一次查询的条件</p><p>2、我们需要找到与上一次查询相同的查询个数作为偏移量，下次查询时，跳过这些查询过的数据，拿到我们需要的数据</p><p>综上：我们的请求参数中就需要携带 lastId：上一次查询的最小时间戳 和偏移量这两个参数。</p><p>这两个参数第一次会由前端来指定，以后的查询就根据后台结果作为条件，再次传递到后台。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653819821591.png" alt="1653819821591"></p><p>一、定义出来具体的返回值实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScrollResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Long minTime;</span><br><span class="line">    <span class="keyword">private</span> Integer offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BlogController</p><p>注意：RequestParam 表示接受url地址栏传参的注解，当方法上参数的名称和url地址栏不相同时，可以通过RequestParam 来进行指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/of/follow&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogOfFollow</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(&quot;lastId&quot;)</span> Long max, <span class="meta">@RequestParam(value = &quot;offset&quot;, defaultValue = &quot;0&quot;)</span> Integer offset)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> blogService.queryBlogOfFollow(max, offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BlogServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryBlogOfFollow</span><span class="params">(Long max, Integer offset)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取当前用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 2.查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> FEED_KEY + userId;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet()</span><br><span class="line">        .reverseRangeByScoreWithScores(key, <span class="number">0</span>, max, offset, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 3.非空判断</span></span><br><span class="line">    <span class="keyword">if</span> (typedTuples == <span class="literal">null</span> || typedTuples.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.解析数据：blogId、minTime（时间戳）、offset</span></span><br><span class="line">    List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(typedTuples.size());</span><br><span class="line">    <span class="type">long</span> <span class="variable">minTime</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">os</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : typedTuples) &#123; <span class="comment">// 5 4 4 2 2</span></span><br><span class="line">        <span class="comment">// 4.1.获取id</span></span><br><span class="line">        ids.add(Long.valueOf(tuple.getValue()));</span><br><span class="line">        <span class="comment">// 4.2.获取分数(时间戳）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> tuple.getScore().longValue();</span><br><span class="line">        <span class="keyword">if</span>(time == minTime)&#123;</span><br><span class="line">            os++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            minTime = time;</span><br><span class="line">            os = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">os = minTime == max ? os : os + offset;</span><br><span class="line">    <span class="comment">// 5.根据id查询blog</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">    List&lt;Blog&gt; blogs = query().in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        <span class="comment">// 5.1.查询blog有关的用户</span></span><br><span class="line">        queryBlogUser(blog);</span><br><span class="line">        <span class="comment">// 5.2.查询blog是否被点赞</span></span><br><span class="line">        isBlogLiked(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.封装并返回</span></span><br><span class="line">    <span class="type">ScrollResult</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScrollResult</span>();</span><br><span class="line">    r.setList(blogs);</span><br><span class="line">    r.setOffset(os);</span><br><span class="line">    r.setMinTime(minTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、附近商户">10、附近商户</h2><h3 id="10-1、附近商户-GEO数据结构的基本用法">10.1、附近商户-GEO数据结构的基本用法</h3><p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：</p><ul><li>GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）</li><li>GEODIST：计算指定的两个点之间的距离并返回</li><li>GEOHASH：将指定member的坐标转为hash字符串形式并返回</li><li>GEOPOS：返回指定member的坐标</li><li>GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃</li><li>GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能</li><li>GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能</li></ul><h3 id="10-2、-附近商户-导入店铺数据到GEO">10.2、 附近商户-导入店铺数据到GEO</h3><p>具体场景说明：</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653822036941.png" alt="1653822036941"></p><p>当我们点击美食之后，会出现一系列的商家，商家中可以按照多种排序方式，我们此时关注的是距离，这个地方就需要使用到我们的GEO，向后台传入当前app收集的地址(我们此处是写死的) ，以当前坐标作为圆心，同时绑定相同的店家类型type，以及分页信息，把这几个条件传入后台，后台查询出对应的数据再返回。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653822021827.png" alt="1653822021827"></p><p>我们要做的事情是：将数据库表中的数据导入到redis中去，redis中的GEO，GEO在redis中就一个menber和一个经纬度，我们把x和y轴传入到redis做的经纬度位置去，但我们不能把所有的数据都放入到menber中去，毕竟作为redis是一个内存级数据库，如果存海量数据，redis还是力不从心，所以我们在这个地方存储他的id即可。</p><p>但是这个时候还有一个问题，就是在redis中并没有存储type，所以我们无法根据type来对数据进行筛选，所以我们可以按照商户类型做分组，类型相同的商户作为同一组，以typeId为key存入同一个GEO集合中即可</p><p>代码</p><p>HmDianPingApplicationTests</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">loadShopData</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询店铺信息</span></span><br><span class="line">    List&lt;Shop&gt; list = shopService.list();</span><br><span class="line">    <span class="comment">// 2.把店铺分组，按照typeId分组，typeId一致的放到一个集合</span></span><br><span class="line">    Map&lt;Long, List&lt;Shop&gt;&gt; map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId));</span><br><span class="line">    <span class="comment">// 3.分批完成写入Redis</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        <span class="comment">// 3.1.获取类型id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">typeId</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> SHOP_GEO_KEY + typeId;</span><br><span class="line">        <span class="comment">// 3.2.获取同类型的店铺的集合</span></span><br><span class="line">        List&lt;Shop&gt; value = entry.getValue();</span><br><span class="line">        List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(value.size());</span><br><span class="line">        <span class="comment">// 3.3.写入redis GEOADD key 经度 纬度 member</span></span><br><span class="line">        <span class="keyword">for</span> (Shop shop : value) &#123;</span><br><span class="line">            <span class="comment">// stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());</span></span><br><span class="line">            locations.add(<span class="keyword">new</span> <span class="title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(</span><br><span class="line">                    shop.getId().toString(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Point</span>(shop.getX(), shop.getY())</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line">        stringRedisTemplate.opsForGeo().add(key, locations);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-3-附近商户-实现附近商户功能">10.3 附近商户-实现附近商户功能</h3><p>SpringDataRedis的2.3.9版本并不支持Redis 6.2提供的GEOSEARCH命令，因此我们需要提示其版本，修改自己的POM</p><p>第一步：导入pom</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.6</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">6.1</span><span class="number">.6</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>第二步：</p><p>ShopController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/of/type&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;typeId&quot;)</span> Integer typeId,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;x&quot;, required = false)</span> Double x,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;y&quot;, required = false)</span> Double y</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> shopService.queryShopByType(typeId, current, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShopServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryShopByType</span><span class="params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.判断是否需要根据坐标查询</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="literal">null</span> || y == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 不需要坐标查询，按数据库查询</span></span><br><span class="line">            Page&lt;Shop&gt; page = query()</span><br><span class="line">                    .eq(<span class="string">&quot;type_id&quot;</span>, typeId)</span><br><span class="line">                    .page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));</span><br><span class="line">            <span class="comment">// 返回数据</span></span><br><span class="line">            <span class="keyword">return</span> Result.ok(page.getRecords());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.计算分页参数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> (current - <span class="number">1</span>) * SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> current * SystemConstants.DEFAULT_PAGE_SIZE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.查询redis、按照距离排序、分页。结果：shopId、distance</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> SHOP_GEO_KEY + typeId;</span><br><span class="line">        GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo() <span class="comment">// GEOSEARCH key BYLONLAT x y BYRADIUS 10 WITHDISTANCE</span></span><br><span class="line">                .search(</span><br><span class="line">                        key,</span><br><span class="line">                        GeoReference.fromCoordinate(x, y),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Distance</span>(<span class="number">5000</span>),</span><br><span class="line">                        RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)</span><br><span class="line">                );</span><br><span class="line">        <span class="comment">// 4.解析出id</span></span><br><span class="line">        <span class="keyword">if</span> (results == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();</span><br><span class="line">        <span class="keyword">if</span> (list.size() &lt;= from) &#123;</span><br><span class="line">            <span class="comment">// 没有下一页了，结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.1.截取 from ~ end的部分</span></span><br><span class="line">        List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list.size());</span><br><span class="line">        Map&lt;String, Distance&gt; distanceMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(list.size());</span><br><span class="line">        list.stream().skip(from).forEach(result -&gt; &#123;</span><br><span class="line">            <span class="comment">// 4.2.获取店铺id</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">shopIdStr</span> <span class="operator">=</span> result.getContent().getName();</span><br><span class="line">            ids.add(Long.valueOf(shopIdStr));</span><br><span class="line">            <span class="comment">// 4.3.获取距离</span></span><br><span class="line">            <span class="type">Distance</span> <span class="variable">distance</span> <span class="operator">=</span> result.getDistance();</span><br><span class="line">            distanceMap.put(shopIdStr, distance);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 5.根据id查询Shop</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">        List&lt;Shop&gt; shops = query().in(<span class="string">&quot;id&quot;</span>, ids).last(<span class="string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="string">&quot;)&quot;</span>).list();</span><br><span class="line">        <span class="keyword">for</span> (Shop shop : shops) &#123;</span><br><span class="line">            shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.返回</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(shops);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="11、用户签到">11、用户签到</h2><h4 id="11-1、用户签到-BitMap功能演示">11.1、用户签到-BitMap功能演示</h4><p>我们针对签到功能完全可以通过mysql来完成，比如说以下这张表</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653823145495.png" alt="1653823145495"></p><p>用户一次签到，就是一条记录，假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条</p><p>每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22 字节的内存，一个月则最多需要600多字节</p><p>我们如何能够简化一点呢？其实可以考虑小时候一个挺常见的方案，就是小时候，咱们准备一张小小的卡片，你只要签到就打上一个勾，我最后判断你是否签到，其实只需要到小卡片上看一看就知道了</p><p>我们可以采用类似这样的方案来实现我们的签到需求。</p><p>我们按月来统计用户签到信息，签到记录为1，未签到则记录为0.</p><p>把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。这样我们就用极小的空间，来实现了大量数据的表示</p><p>Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653824498278.png" alt="1653824498278"></p><p>BitMap的操作命令有：</p><ul><li>SETBIT：向指定位置（offset）存入一个0或1</li><li>GETBIT ：获取指定位置（offset）的bit值</li><li>BITCOUNT ：统计BitMap中值为1的bit位的数量</li><li>BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值</li><li>BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回</li><li>BITOP ：将多个BitMap的结果做位运算（与 、或、异或）</li><li>BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置</li></ul><h4 id="11-2-、用户签到-实现签到功能">11.2 、用户签到-实现签到功能</h4><p>需求：实现签到接口，将当前用户当天签到信息保存到Redis中</p><p>思路：我们可以把年和月作为bitMap的key，然后保存到一个bitMap中，每次签到就到对应的位上把数字从0变成1，只要对应是1，就表明说明这一天已经签到了，反之则没有签到。</p><p>我们通过接口文档发现，此接口并没有传递任何的参数，没有参数怎么确实是哪一天签到呢？这个很容易，可以通过后台代码直接获取即可，然后到对应的地址上去修改bitMap。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653833970361.png" alt="1653833970361"></p><p><strong>代码</strong></p><p>UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> userService.sign();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取当前登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 2.获取日期</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="comment">// 3.拼接key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_SIGN_KEY + userId + keySuffix;</span><br><span class="line">    <span class="comment">// 4.获取今天是本月的第几天</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">    <span class="comment">// 5.写入Redis SETBIT key offset 1</span></span><br><span class="line">    stringRedisTemplate.opsForValue().setBit(key, dayOfMonth - <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-3-用户签到-签到统计">11.3 用户签到-签到统计</h4><p>**问题1：**什么叫做连续签到天数？<br>从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653834455899.png" alt="1653834455899"></p><p>Java逻辑代码：获得当前这个月的最后一次签到数据，定义一个计数器，然后不停的向前统计，直到获得第一个非0的数字即可，每得到一个非0的数字计数器+1，直到遍历完所有的数据，就可以获得当前月的签到总天数了</p><p>**问题2：**如何得到本月到今天为止的所有签到数据？</p><p>BITFIELD key GET u[dayOfMonth] 0</p><p>假设今天是10号，那么我们就可以从当前月的第一天开始，获得到当前这一天的位数，是10号，那么就是10位，去拿这段时间的数据，就能拿到所有的数据了，那么这10天里边签到了多少次呢？统计有多少个1即可。</p><p><strong>问题3：如何从后向前遍历每个bit位？</strong></p><p>注意：bitMap返回的数据是10进制，哪假如说返回一个数字8，那么我哪儿知道到底哪些是0，哪些是1呢？我们只需要让得到的10进制数字和1做与运算就可以了，因为1只有遇见1 才是1，其他数字都是0 ，我们把签到结果和1进行与操作，每与一次，就把签到结果向右移动一位，依次内推，我们就能完成逐个遍历的效果了。</p><p>需求：实现下面接口，统计当前用户截止当前时间在本月的连续签到天数</p><p>有用户有时间我们就可以组织出对应的key，此时就能找到这个用户截止这天的所有签到记录，再根据这套算法，就能统计出来他连续签到的次数了</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653835784444.png" alt="1653835784444"></p><p>代码</p><p><strong>UserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/sign/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.signCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">signCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取当前登录用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 2.获取日期</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">    <span class="comment">// 3.拼接key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">keySuffix</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;:yyyyMM&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> USER_SIGN_KEY + userId + keySuffix;</span><br><span class="line">    <span class="comment">// 4.获取今天是本月的第几天</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">    <span class="comment">// 5.获取本月截止今天为止的所有的签到记录，返回的是一个十进制的数字 BITFIELD sign:5:202203 GET u14 0</span></span><br><span class="line">    List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(</span><br><span class="line">            key,</span><br><span class="line">            BitFieldSubCommands.create()</span><br><span class="line">                    .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="number">0</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span> || result.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 没有任何签到结果</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> result.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="literal">null</span> || num == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6.循环遍历</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 6.1.让这个数字与1做与运算，得到数字的最后一个bit位  // 判断这个bit位是否为0</span></span><br><span class="line">        <span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果为0，说明未签到，结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不为0，说明已签到，计数器+1</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span></span><br><span class="line">        num &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-4-额外加餐-关于使用bitmap来解决缓存穿透的方案">11.4 额外加餐-关于使用bitmap来解决缓存穿透的方案</h4><p>回顾<strong>缓存穿透</strong>：</p><p>发起了一个数据库不存在的，redis里边也不存在的数据，通常你可以把他看成一个攻击</p><p>解决方案：</p><ul><li><p>判断id&lt;0</p></li><li><p>如果数据库是空，那么就可以直接往redis里边把这个空数据缓存起来</p></li></ul><p>第一种解决方案：遇到的问题是如果用户访问的是id不存在的数据，则此时就无法生效</p><p>第二种解决方案：遇到的问题是：如果是不同的id那就可以防止下次过来直击数据</p><p>所以我们如何解决呢？</p><p>我们可以将数据库的数据，所对应的id写入到一个list集合中，当用户过来访问的时候，我们直接去判断list中是否包含当前的要查询的数据，如果说用户要查询的id数据并不在list集合中，则直接返回，如果list中包含对应查询的id数据，则说明不是一次缓存穿透数据，则直接放行。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653836416586.png" alt="1653836416586"></p><p>现在的问题是这个主键其实并没有那么短，而是很长的一个 主键</p><p>哪怕你单独去提取这个主键，但是在11年左右，淘宝的商品总量就已经超过10亿个</p><p>所以如果采用以上方案，这个list也会很大，所以我们可以使用bitmap来减少list的存储空间</p><p>我们可以把list数据抽象成一个非常大的bitmap，我们不再使用list，而是将db中的id数据利用哈希思想，比如：</p><p>id % bitmap.size  = 算出当前这个id对应应该落在bitmap的哪个索引上，然后将这个值从0变成1，然后当用户来查询数据时，此时已经没有了list，让用户用他查询的id去用相同的哈希算法， 算出来当前这个id应当落在bitmap的哪一位，然后判断这一位是0，还是1，如果是0则表明这一位上的数据一定不存在，  采用这种方式来处理，需要重点考虑一个事情，就是误差率，所谓的误差率就是指当发生哈希冲突的时候，产生的误差。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653836578970.png" alt="1653836578970"></p><p>12、UV统计</p><h3 id="12-1-、UV统计-HyperLogLog">12.1 、UV统计-HyperLogLog</h3><p>首先我们搞懂两个概念：</p><ul><li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。</li><li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。</li></ul><p>通常来说UV会比PV大很多，所以衡量同一个网站的访问量，我们需要综合考虑很多因素，所以我们只是单纯的把这两个值作为一个参考值</p><p>UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖，那怎么处理呢？</p><p>Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考：<a href="https://juejin.cn/post/6844903785744056333#heading-0">https://juejin.cn/post/6844903785744056333#heading-0</a><br>Redis中的HLL是基于string结构实现的，单个HLL的内存<strong>永远小于16kb</strong>，<strong>内存占用低</strong>的令人发指！作为代价，其测量结果是概率性的，<strong>有小于0.81％的误差</strong>。不过对于UV统计来说，这完全可以忽略。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653837988985.png" alt="1653837988985"></p><h3 id="12-2-UV统计-测试百万数据的统计">12.2 UV统计-测试百万数据的统计</h3><p>测试思路：我们直接利用单元测试，向HyperLogLog中添加100万条数据，看看内存占用和统计效果如何</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/1653838053608.png" alt="1653838053608"></p><p>经过测试：我们会发生他的误差是在允许范围内，并且内存占用极小</p>]]></content>
    
    
    <summary type="html">学习项目从0-1</summary>
    
    
    
    <category term="项目" scheme="https://u7u7.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="项目" scheme="https://u7u7.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="SpringBoot" scheme="https://u7u7.top/tags/SpringBoot/"/>
    
    <category term="Mysql" scheme="https://u7u7.top/tags/Mysql/"/>
    
    <category term="Redis" scheme="https://u7u7.top/tags/Redis/"/>
    
    <category term="Mybatis-plus" scheme="https://u7u7.top/tags/Mybatis-plus/"/>
    
    <category term="Mybatis" scheme="https://u7u7.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>算法题</title>
    <link href="https://u7u7.top/posts/suanfaProject.html"/>
    <id>https://u7u7.top/posts/suanfaProject.html</id>
    <published>2025-07-27T14:16:25.000Z</published>
    <updated>2025-08-12T01:08:44.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-算法题">C++算法题</h1><h2 id="十进制转八进制">十进制转八进制</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eightSystem</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; num; <span class="comment">//进制几次</span></span><br><span class="line"><span class="keyword">return</span>; <span class="comment">//停止递归</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">eightSystem</span>(num / <span class="number">8</span>); <span class="comment">//整除再进入函数体</span></span><br><span class="line">cout &lt;&lt; num % <span class="number">8</span>; <span class="comment">//输出余数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="built_in">eightSystem</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二的幂次方">二的幂次方</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">two</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">14</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pow</span>(<span class="number">2</span>, i) &lt;= x) <span class="comment">//找到最接近目标值的2的次数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;2&quot;</span>; <span class="comment">//剩下一个2</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;2(0)&quot;</span>; <span class="comment">//剩下一个1</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2(&quot;</span>; </span><br><span class="line"><span class="built_in">two</span>(i);  <span class="comment">//继续递归</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;)&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">x -= <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">two</span>(<span class="number">137</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="神牛果">神牛果</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  a[<span class="number">10000</span>] = &#123;&#125;; <span class="comment">//存放牛的肚量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; <span class="comment">//牛的数量</span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> b=<span class="number">0</span>; <span class="comment">//存放每组牛的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a, a + n); <span class="comment">//排序 1 2 5 8  1+8 2+5</span></span><br><span class="line"><span class="comment">//搭配 最大的和最小的搭配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b &lt; a[i] + a[n - i - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">b = a[i] + a[n - i - <span class="number">1</span>];<span class="comment">//存放和</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="笨小孩">笨小孩</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  a[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, x,time=<span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i]; <span class="comment">// 存放每门课</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a, a + n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">time += x * a[i]; <span class="comment">//每门课花费的时间</span></span><br><span class="line"><span class="comment">//学完一门课 花的时间变快</span></span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; time;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="美元汇率">美元汇率</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> k=<span class="number">1</span>;<span class="comment">//当天是美元还是马克</span></span><br><span class="line"><span class="type">int</span> n; <span class="comment">//天数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>] = &#123;&#125;; <span class="comment">//存放汇率</span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i]; <span class="comment">// 存放每天的汇率 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> x=<span class="number">100</span>; <span class="comment">//手里的钱</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果手里是美元 </span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//第二天汇率小于第一天换成马克 </span></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &lt; a[i])&#123;</span><br><span class="line"><span class="comment">// 100 400   400=100*(400 / 100)</span></span><br><span class="line">x = x * (a[i] / <span class="number">100</span>);</span><br><span class="line">k=<span class="number">0</span>; <span class="comment">//变成马克 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果手里是马克</span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt; a[i])&#123;</span><br><span class="line">x = x /a[i] * <span class="number">100</span>;</span><br><span class="line">k=<span class="number">1</span>; <span class="comment">//变成美元 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//最后一天一定要是美元 最后一项 </span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)  x = x /a[n<span class="number">-1</span>] * <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="力扣算法刷题">力扣算法刷题</h1><h2 id="leetcode算法题">leetcode算法题</h2><blockquote><p>之前做了很多算法题，但是因为没有写笔记的原因，效果不太好，先把之前写的算法题的代码都放上来。以后写的算法题，要做好笔记。因为力扣做题都是给你一个函数的模版让你写题目，一般都是有返回值的，所以都可以放一个代码中去。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> December;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.rmi.CORBA.Util;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        runningSum(arr);</span><br><span class="line">        canConstruct(<span class="string">&quot;aab&quot;</span>,<span class="string">&quot;baa&quot;</span>);</span><br><span class="line">        solution.minOperations(<span class="string">&quot;110&quot;</span>);</span><br><span class="line">        System.out.println(solution.secondHighest(<span class="string">&quot;ck077&quot;</span>));</span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">22</span>,<span class="number">27</span>,<span class="number">33</span>,<span class="number">57</span>,<span class="number">66</span>,<span class="number">77</span>&#125;;</span><br><span class="line"><span class="comment">//        int[] arr = new int[]&#123;-1,0,3,9,11,13,22,27,33,57,66,77&#125;;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> searchInsert(arr1, <span class="number">1</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="type">int</span>[] nums  = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        solution.twoSum(nums,<span class="number">8</span>);</span><br><span class="line">        solution.maxSubArray(nums);</span><br><span class="line">        solution.lengthOfLongestSubstring(<span class="string">&quot;pwwkep&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;123456789&quot;</span>.substring(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>,s2 = <span class="string">&quot;eidboaoo&quot;</span>;</span><br><span class="line">        solution.checkInclusion(s1, s2);</span><br><span class="line">        solution.mostCompetitive(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>&#125;,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    力扣P1673贪心算法 自己半暴力做出来的 题解都用了数据栈 所以88个点只过了86个 后面学数据栈回头再来做一下</span></span><br><span class="line"><span class="comment">//    public int[] mostCompetitive(int[] nums, int k) &#123;</span></span><br><span class="line"><span class="comment">//        int len  = nums.length;</span></span><br><span class="line"><span class="comment">//        int[] ints = new int[k];</span></span><br><span class="line"><span class="comment">//        int min=0;</span></span><br><span class="line"><span class="comment">//        int start = 0;</span></span><br><span class="line"><span class="comment">//        for (int x = 0;x&lt;k;x++)&#123;</span></span><br><span class="line"><span class="comment">//            for (int n = start; n &lt; len-k+x;n++)&#123;</span></span><br><span class="line"><span class="comment">//                if (nums[min] &gt; nums[n+1])&#123;</span></span><br><span class="line"><span class="comment">//                    min = n+1;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            ints[x] = nums[min];</span></span><br><span class="line"><span class="comment">//            start = min;</span></span><br><span class="line"><span class="comment">//            min +=1 ;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return ints;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//正确解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> n-k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.size()&gt;<span class="number">0</span> &amp;&amp; last&gt;<span class="number">0</span> &amp;&amp; stack.get(stack.size()-<span class="number">1</span>)&gt;nums[i]) &#123;</span><br><span class="line">                stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">                last --;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = stack.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//P567 字符串排序优解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkInclusion</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=s1.length(),n2=s2.length();</span><br><span class="line">        <span class="keyword">if</span> (n1&gt;n2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;n1;x++)&#123;</span><br><span class="line">            cnt[s1.charAt(x) - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">str</span> <span class="operator">=</span> s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            cnt[str] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (cnt[str] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                cnt[s2.charAt(left) - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i-left+<span class="number">1</span> == n1)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1480</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] runningSum(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] += nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public boolean checkInclusion(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//        int n = s1.length(), m = s2.length();</span></span><br><span class="line"><span class="comment">//        if (n &gt; m) &#123;</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int[] cnt = new int[26];</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line"><span class="comment">//            --cnt[s1.charAt(i) - &#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int left = 0;</span></span><br><span class="line"><span class="comment">//        for (int right = 0; right &lt; m; ++right) &#123;</span></span><br><span class="line"><span class="comment">//            int x = s2.charAt(right) - &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">//            ++cnt[x];</span></span><br><span class="line"><span class="comment">//            while (cnt[x] &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//                --cnt[s2.charAt(left) - &#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">//                ++left;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (right - left + 1 == n) &#123;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//力扣P383</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ransomNote.length() &gt; magazine.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray()) &#123;</span><br><span class="line">            cnt[c - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : ransomNote.toCharArray()) &#123;</span><br><span class="line">            cnt[c - <span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">            <span class="keyword">if</span>(cnt[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P412</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fizzBuzz</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;FizzBuzz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arrayList.add(String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P876 链表中间节点</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P1769</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] minOperations(String boxes) &#123;</span><br><span class="line">        String[] split = boxes.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[split.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;split.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;split.length;x++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (split[x].equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">                    count += Math.abs(x-i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ints[i] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//力扣P1796</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">secondHighest</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; ay = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">47</span> &amp;&amp; i &lt;  <span class="number">58</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!ay.contains(i - <span class="number">48</span>))&#123;</span><br><span class="line">                    ay.add(i-<span class="number">48</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(ay);</span><br><span class="line">        <span class="keyword">if</span> (ay.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ay.get(ay.size()-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P35优解 双指针</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)&#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P704二分查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">            <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P977 输入一个升序的数组，然后返回一个数据各位置平方，也是升序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">//第一种 自己就是直接每位平方再重新排序 执行时间5ms</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line">        <span class="comment">//    nums[i] = nums[i]*nums[i];</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//Arrays.parallelSort(nums);</span></span><br><span class="line">        <span class="comment">//return nums;</span></span><br><span class="line">        <span class="comment">//下面是双指针</span></span><br><span class="line">        <span class="comment">//思路 因为是升序，所以数的平方的最大值一定是两边,把这个大的数 放新数组右边 然后两界限往内夹</span></span><br><span class="line">        <span class="type">int</span>[] result  = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//给result倒着插入的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//右界限</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//左界限</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123; <span class="comment">//当左边等于右边 停止</span></span><br><span class="line">            <span class="keyword">if</span> (nums[left]*nums[left] &lt; nums[right]*nums[right])&#123; <span class="comment">//两边判断大小 右边大</span></span><br><span class="line">                result[k--] = nums[right]*nums[right]; <span class="comment">//大的插入最新数组右边 右边下标-1</span></span><br><span class="line">                right--; <span class="comment">//右界限往内移1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//左边大</span></span><br><span class="line">                result[k--] = nums[left]*nums[left]; <span class="comment">//大的插入最新数组右边 左边下标-1</span></span><br><span class="line">                left++; <span class="comment">//左界限往内移1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P189 轮转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//int count = nums.length;</span></span><br><span class="line">        <span class="comment">//int newNums[] = new int[count];</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; count; i++) &#123;</span></span><br><span class="line">        <span class="comment">//    newNums[(i+k) % count] = nums[i];</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//System.arraycopy(newNums, 0, nums, 0, count); //打印</span></span><br><span class="line">        reversal(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        reversal(nums,<span class="number">0</span>,k-<span class="number">1</span>);</span><br><span class="line">        reversal(nums,k,nums.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转 下标为start 和 end 间的反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversal(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)&#123;</span><br><span class="line">        <span class="keyword">while</span> (start&lt;end)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P283移动〇</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length,left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] != <span class="number">0</span>)&#123;</span><br><span class="line">                res(nums,left,right);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">res</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[x];</span><br><span class="line">        nums[x] = nums[y];</span><br><span class="line">        nums[y] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p344 反转字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = s.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1832 全字母句</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkIfPangram</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] booleans = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sentence.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> sentence.charAt(i);</span><br><span class="line">            booleans[c - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">boolean</span> x : booleans)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!x)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣217</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p1 两数之和优解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123; <span class="comment">//是否有该key</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P3 无重复字符的最长子串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(ch))&#123;</span><br><span class="line">                start = Math.max(map.get(ch)+<span class="number">1</span>,start);</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max,end - start + <span class="number">1</span>);</span><br><span class="line">            map.put(ch,end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//p53最大数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> nums[<span class="number">0</span>], previous = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i :nums)&#123;</span><br><span class="line">            previous = Math.max(previous+i, i);</span><br><span class="line">            ans = Math.max(previous, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p88</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> m -<span class="number">1</span>,p2 = n -<span class="number">1</span>,length = m + n -<span class="number">1</span>,i;</span><br><span class="line">        <span class="keyword">while</span> (p1&gt;=<span class="number">0</span> || p2 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == -<span class="number">1</span>)&#123;</span><br><span class="line">                i = nums2[p2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p2 == -<span class="number">1</span>)&#123;</span><br><span class="line">                i = nums1[p1--];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2])&#123;</span><br><span class="line">                i = nums2[p2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                i = nums1[p1--];</span><br><span class="line">            &#125;</span><br><span class="line">            nums1[length--] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String x)</span> &#123;</span><br><span class="line">        String[] s = x.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s[i]);</span><br><span class="line">            s[i] = stringBuffer.reverse().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P19 删除链表倒数第N个结点</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">second</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line">        second.next = second.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1672</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumWealth</span><span class="params">(<span class="type">int</span>[][] accounts)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] i: accounts)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k : i)&#123;</span><br><span class="line">                max1 += k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max1 &gt; max)&#123;</span><br><span class="line">                max = max1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还没怎么学习的链表题目中也有几道，后面学数据结构的时候再巩固一下 自定义链表代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> December;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val, ListNode next) &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="力扣题记">力扣题记</h2><h3 id="力扣P1673贪心算法">力扣P1673贪心算法</h3><ul><li>自己半暴力做出来的 题解都用了数据栈 所以88个点只过了86个 后面学数据栈回头再来做一下</li></ul><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20230109223549100.png" alt="image-20230109223549100"></p><ul><li>没过的原因自己也知道，因为自己空间复杂度是k*nums.length也就是所需要的数组长度和原数组的长度的循环次数 下面是自己的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span>  <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="type">int</span> min=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//思路:从倒数k之前先找最小值(防止k取不够) 然后从该索引再开始 取的位置可以往后移一格 以此类推</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;k;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> start; n &lt; len-k+x;n++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[min] &gt; nums[n+<span class="number">1</span>])&#123;</span><br><span class="line">                min = n+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ints[x] = nums[min];</span><br><span class="line">        start = min;</span><br><span class="line">        min +=<span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是python中似乎比较简单，因为可以从尾部删除，我用java模仿的话，模仿出来需要新建一个arrayList</li><li>题解原理：看了很久才明白题解代码的巧妙之处先把数组中值加一个到列表，然后如果该值不满足三个任何条件中一个(代码中有)，就再往列表加入一个数组的值，再把新加入的值和后面的数组的值比，如果比后面的大就删除。如此一直，直到删除的数够了(比如数组长度是10，我需要数组长度为3的最具竞争力的，那我需要把原数组的值删除7次，只要3个值)，需要的最具竞争力的数组也够了。</li></ul><blockquote><p>下面是python和java对该题使用单调栈的代码对比</p></blockquote><div class="tabs" id="contrast"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#contrast-1">python代码</button></li><li class="tab"><button type="button" data-href="#contrast-2">java代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="contrast-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mostCompetitive</span>(<span class="params">self, nums, k</span>):</span><br><span class="line">        stack = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        last = n-k</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> last <span class="keyword">and</span> stack[-<span class="number">1</span>] &gt; nums[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">                last -= <span class="number">1</span></span><br><span class="line">            stack.append(nums[i])</span><br><span class="line">        <span class="keyword">return</span> stack[:k]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="contrast-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> n-k;</span><br><span class="line">        <span class="comment">//核心代码是下面的循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.size()&gt;<span class="number">0</span> &amp;&amp; last&gt;<span class="number">0</span> &amp;&amp; stack.get(stack.size()-<span class="number">1</span>)&gt;nums[i]) &#123;</span><br><span class="line">                stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">                last --;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = stack.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="力扣P136-异或算法">力扣P136 异或算法</h3><blockquote><p>题目不难 简单来说就是找出数组中只存在一个的数 其他的数字都是出现过两次 找只出现过一次的那个数                      利用到了  异或中的交换律 数组中所有的数都异或 有两个的 都会变成0 最后只会剩下出现过一次的数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">              nums[<span class="number">0</span>] ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="力扣P15-双指针">力扣P15 双指针</h3><blockquote><p>题目为给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p>难点在防止重复的地方  代码讲解点都在代码中了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums); <span class="comment">//先排序</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//创建一个list里面好添加需要的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; nums.length - <span class="number">2</span>; x++) &#123; <span class="comment">//循环直到倒数第三个</span></span><br><span class="line">        <span class="keyword">if</span> (nums[x] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//如果第一位大于0 总和就永远不会小于0</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; nums[x] == nums[x - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">//如果该数和前一位相同 暂停本次循环 防止重复数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x + <span class="number">1</span>, z = nums.length - <span class="number">1</span>;  <span class="comment">//设置左和右指针</span></span><br><span class="line">        <span class="keyword">while</span> (y &lt; z) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[x] + nums[y] + nums[z]; <span class="comment">//相加的总和值</span></span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123; <span class="comment">//小于0 左指针 向右</span></span><br><span class="line">                y++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123; <span class="comment">//大于0 右指针向左</span></span><br><span class="line">                z--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(nums[x], nums[y], nums[z])));</span><br><span class="line">                <span class="keyword">while</span> (y &lt; z &amp;&amp; nums[y] == nums[++y]) ; <span class="comment">//当条件满足时 为满足不重复的三元组 左右指针的值就不能跟原来一样了 加入while循环 直到指针区间的两边 跟满足条件的时候不同</span></span><br><span class="line">                <span class="keyword">while</span> (y &lt; z &amp;&amp; nums[z] == nums[--z]) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蓝桥杯题库">蓝桥杯题库</h2><h3 id="编号2120">编号2120</h3><p>题目不难，找到规律就行了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20230315093825402.png" alt="image-20230315093825402"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//在此输入您的代码...</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">Ax</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(Ax.substring(<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>]; <span class="comment">//A9超出 所以设置6个</span></span><br><span class="line">    <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">aNumOne</span> <span class="operator">=</span> <span class="number">1189</span>; <span class="comment">//定义初始值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">bNumOne</span> <span class="operator">=</span> <span class="number">841</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        a[i] = aNumOne;</span><br><span class="line">        aNumOne = aNumOne / <span class="number">2</span>; <span class="comment">//取整添加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">        b[j] = bNumOne;</span><br><span class="line">        bNumOne = bNumOne / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(a[num/<span class="number">2</span>]);<span class="comment">//偶数按索引取数组</span></span><br><span class="line">        System.out.println(b[num/<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(b[(num-<span class="number">1</span>)/<span class="number">2</span>]);<span class="comment">//奇数数前后取头</span></span><br><span class="line">        System.out.println(a[(num+<span class="number">1</span>)/<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    scan.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编号468">编号468</h3><p>回文日期</p><blockquote><p>题目很清晰明了，但是需要讨论的特殊条件比较多。就是日期规范性，每个月每个天数不一样，还有日期开头不为0，学份12月以内，不可为0，等等。在我最初的版本都是有一条一条if规范出来的。后来优化算法的时候，发现有些测试点，蓝桥杯是没有设置一些特殊检查点的所以像30天和28 29这种特殊月。所以后面闰月和2月都没用添加判断语句，但是也顺利通过了，耗时有点久。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">99999999</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">99999999</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> i+<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">yearage</span>  <span class="operator">=</span> i/<span class="number">1000000</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fanzhuanyearage</span> <span class="operator">=</span> yearage/<span class="number">10</span>+yearage%<span class="number">10</span>*<span class="number">10</span>;<span class="comment">//反转day</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">yearlaster</span>  <span class="operator">=</span> i%<span class="number">1000000</span>/<span class="number">10000</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fanzhuanyearlaster</span>  <span class="operator">=</span> yearlaster/<span class="number">10</span>+yearlaster%<span class="number">10</span>*<span class="number">10</span>; <span class="comment">//反转month</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> i%<span class="number">10000</span>/<span class="number">100</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">day</span>   <span class="operator">=</span> i%<span class="number">100</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastday</span> <span class="operator">=</span> i%<span class="number">10</span>; <span class="comment">//最后一天不能为0 因为反转以后首不为0</span></span><br><span class="line">            <span class="keyword">if</span>(month &lt;= <span class="number">12</span> &amp;&amp;  day &lt;= <span class="number">31</span> &amp;&amp;  lastday != <span class="number">0</span> &amp;&amp; fanzhuanyearage&lt;=<span class="number">31</span> &amp;&amp; fanzhuanyearlaster&lt;=<span class="number">12</span> &amp;&amp; fanzhuanyearlaster != <span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(huiwen(num))&#123;</span><br><span class="line">                 <span class="comment">//设置回文 为第一个  </span></span><br><span class="line">                <span class="keyword">if</span>(res &gt; Integer.parseInt(num))&#123;</span><br><span class="line">                    res = Integer.parseInt(num);</span><br><span class="line">                    System.out.println(num);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果为AB回文直接停止</span></span><br><span class="line">                <span class="keyword">if</span>(ABhuiwen(num))&#123;</span><br><span class="line">                    System.out.println(num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断闰年</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ruiyear</span><span class="params">(String num)</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> Integer.parseInt(num);</span><br><span class="line">      <span class="keyword">return</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断回文数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">huiwen</span><span class="params">(String num)</span>&#123;</span><br><span class="line">      <span class="type">char</span>[] c  = num.toCharArray();</span><br><span class="line">      <span class="keyword">return</span> c[<span class="number">0</span>] == c[<span class="number">7</span>] &amp;&amp; c[<span class="number">1</span>] == c[<span class="number">6</span>] &amp;&amp; c[<span class="number">2</span>] == c[<span class="number">5</span>] &amp;&amp; c[<span class="number">3</span>] == c[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断AB回文数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ABhuiwen</span><span class="params">(String num)</span>&#123;</span><br><span class="line">      <span class="type">char</span>[] c  = num.toCharArray();</span><br><span class="line">      <span class="keyword">return</span> c[<span class="number">0</span>] == c[<span class="number">2</span>] &amp;&amp; c[<span class="number">2</span>] == c[<span class="number">5</span>] &amp;&amp; c[<span class="number">5</span>] == c[<span class="number">7</span>] &amp;&amp; c[<span class="number">1</span>] == c[<span class="number">3</span>] &amp;&amp; c[<span class="number">3</span>] == c[<span class="number">4</span>] &amp;&amp; c[<span class="number">4</span>] == c[<span class="number">6</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="今日小爬虫">今日小爬虫</h2><p>1月27号 抖音刷到一个Java爬虫的案例 自己试着更改敲了一遍</p><blockquote><p>难点在两次连接 所要实现的代码功能为 利用java爬虫爬取该页面中，点击图片后跳转的链接中的高清背景图</p></blockquote><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20230127143522704.png" alt="image-20230127143522704"></p><blockquote><p>跳转后的页面 我拿赵怀真举例 检查中利用标签如何使用 已经写在图片中了</p></blockquote><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20230127144106376.png" alt="image-20230127144106376"></p><p>使用IDEA 需要导入jsoup包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> htmlPhoto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Connection;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">htmlPhoto</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//Java爬虫</span></span><br><span class="line">        <span class="comment">//1.建立连接</span></span><br><span class="line">        <span class="comment">//网页链接 https://pvp.qq.com/web201605/herolist.shtml</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> Jsoup.connect(<span class="string">&quot;https://pvp.qq.com/web201605/herolist.shtml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过链接获取 Document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> connection.get();</span><br><span class="line">        <span class="comment">//2.找到ul标签对象</span></span><br><span class="line">        <span class="comment">//通过Document对象 找class为 herolist clearfix的ul</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">elementUl</span> <span class="operator">=</span> document.selectFirst(<span class="string">&quot;[class=herolist clearfix]&quot;</span>);</span><br><span class="line">        <span class="comment">//找ul中的li</span></span><br><span class="line">        <span class="keyword">assert</span> elementUl != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elementLis</span> <span class="operator">=</span> elementUl.select(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.for 循环读取li集合</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">countHero</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//共计下载的图片数量</span></span><br><span class="line">        <span class="keyword">for</span> (Element elementLi:elementLis)&#123;</span><br><span class="line">            <span class="comment">//得到li中的a-href的路径</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">elementA</span> <span class="operator">=</span> elementLi.selectFirst(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            <span class="comment">//a标签中间的名字</span></span><br><span class="line">            <span class="keyword">assert</span> elementA != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">heroName</span> <span class="operator">=</span> elementA.text();</span><br><span class="line">            <span class="comment">//获取href的内容 然后拼接前面的链接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">hrefUrl</span> <span class="operator">=</span> elementA.attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;https://pvp.qq.com/web201605/&quot;</span> + hrefUrl;</span><br><span class="line">            <span class="comment">//创建新的连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> Jsoup.connect(path);</span><br><span class="line">            <span class="comment">//根据链接创建新的document对象</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">newDocument</span> <span class="operator">=</span> connect.get();</span><br><span class="line">            <span class="type">Element</span> <span class="variable">elementDiv</span> <span class="operator">=</span> newDocument.selectFirst(<span class="string">&quot;[class=zk-con1 zk-con]&quot;</span>);</span><br><span class="line">            <span class="comment">//获取element中的style属性</span></span><br><span class="line">            <span class="keyword">assert</span> elementDiv != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">backgroundURL</span> <span class="operator">=</span> elementDiv.attr(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">            <span class="comment">//background:url(&#x27;//game.gtimg.cn/images/yxzj/img201606/skin/hero-info/545/545-bigskin-1.jpg&#x27;) center 0</span></span><br><span class="line">            <span class="comment">//裁出需要的图片地址 两个单引号中间</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> backgroundURL.indexOf(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> backgroundURL.lastIndexOf(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">photoURL</span> <span class="operator">=</span> backgroundURL.substring(left + <span class="number">1</span>, right);</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https:&quot;</span> + photoURL);</span><br><span class="line">            <span class="comment">//已经获取到了图片的路径 url了 只需要通过IO流进行下载即可</span></span><br><span class="line">            System.out.println(<span class="string">&quot;下载&quot;</span> + heroName+<span class="string">&quot;的高清1080P图片...&quot;</span>);</span><br><span class="line">            <span class="comment">//输入流 读取刚刚的图片</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> url.openStream();</span><br><span class="line">            <span class="comment">//输出流 下载到本地</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E://IOTest/wzImg/&quot;</span> + heroName + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">//下载图片</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> is.read(bytes);</span><br><span class="line">            <span class="keyword">while</span> (count!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,count);</span><br><span class="line">                fos.flush();</span><br><span class="line">                count = is.read(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            fos.close();</span><br><span class="line">            countHero+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;共计&quot;</span>+countHero+<span class="string">&quot;位英雄图片全部下载完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用该案例以及方法的使用，可以用java爬虫到很多不加密网站的图片或者视频链接 进行下载 如图已下载到该文件夹</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20230127185113640.png" alt="image-20230127185113640"></p><h3 id="BUG点">BUG点</h3><p>网页的一个BUG，我看网页中113个英雄，下载只有93个。我自己的代码是没什么问题的，然后检查中也是113个标签，当我不知所措的时候，我点开了网页的源代码。发现其中是从云中君开始的，也就是源代码中只有93英雄，但是检查中的确英雄数量是齐全的，所以应该是他网页的一些问题，但为什么这样我也不清楚，检查和源代码不一样，页面显示的效果竟然和源代码不一样。但是问题不大，思路已经清楚了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20230131191045116.png" alt="image-20230131191045116"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20230131191214943.png" alt="image-20230131191214943"></p>]]></content>
    
    
    <summary type="html">算法刷题</summary>
    
    
    
    <category term="算法" scheme="https://u7u7.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="C++" scheme="https://u7u7.top/tags/C/"/>
    
    <category term="Python" scheme="https://u7u7.top/tags/Python/"/>
    
    <category term="算法" scheme="https://u7u7.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机配置</title>
    <link href="https://u7u7.top/posts/Vm.html"/>
    <id>https://u7u7.top/posts/Vm.html</id>
    <published>2025-06-29T05:00:25.000Z</published>
    <updated>2025-08-03T12:24:07.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VM虚拟机centos7联网">VM虚拟机centos7联网</h1><p>正常创建centos7虚拟机进入命令行</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240820110048592.png" alt="image-20240820110048592"></p><h2 id="DHCP自动获取IP">DHCP自动获取IP</h2><p>1.通过镜像创建centos7的时候网络选择NAT桥接</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240820120910717.png" alt="image-20240820120910717"></p><p>2、在VMware界面（管理员方式启动）点击“编辑”里面的“虚拟网络编辑器”，确认勾选DHCP服务将IP地址分配给<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&amp;spm=1001.2101.3001.7020">虚拟机</a>，并设置子网IP(默认就好)。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240820121136836.png" alt="image-20240820121136836"></p><p>3、点击NAT模式旁边的“NAT设置”，然后修改与子网IP同网段下的网关IP，就是前三位必须相同，</p><p>即192.168.100要相同，最后一位数不相同即可（自动设置，默认ok），最后点击“确认”保存设置。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240820121216587.png" alt="image-20240820121216587"></p><p>4.命令行，进网络配置文件目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@xxx~]<span class="comment"># cd /etc/sysconfig/network-scripts/ #进目录</span></span><br><span class="line">[root@xxx~]<span class="comment"># vi ifcfg-ens33 #修改网络配置</span></span><br></pre></td></tr></table></figure><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240820121406202.png" alt="image-20240820121406202"></p><p>5.编辑ifcfg-ens33文件</p><ul><li>修改ONBOOT=yes即可</li></ul><p>6<a href="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240820121528268.png">6!</a></p><p>6.重启网卡刷新网络配置</p><p>方式一:重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xxx ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure><p>方式二:重启网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 network-scripts]<span class="comment"># service network restart</span></span><br></pre></td></tr></table></figure><p>7.ping外网检查</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240820121848247.png" alt="image-20240820121848247"></p>]]></content>
    
    
    <summary type="html">centos7联网</summary>
    
    
    
    <category term="杂项" scheme="https://u7u7.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="问题解决" scheme="https://u7u7.top/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>GoC国赛特训(二)</title>
    <link href="https://u7u7.top/posts/goc02.html"/>
    <id>https://u7u7.top/posts/goc02.html</id>
    <published>2024-07-05T07:34:19.502Z</published>
    <updated>2025-08-20T03:06:52.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7月9日第二次训练题">7月9日第二次训练题</h1><div class="site-card-group"><a class="site-card" href="https://vip.51goc.com/static/gocWebNet/gocWebNet.html?submitBt=0&insert=0&ra=60&winName=20200413"><div class="img"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20240629094929.png"/></div><div class="info"><img src=" https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/chengguo.jpg"/><span class="title">goc编译环境</span><span class="desc">web端</span></div></a></div>  <h2 id="2365矩形外框B">2365矩形外框B</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623180651332.png" alt="image-20240623180651332"></p><h2 id="2369腾图">2369腾图</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174555103.png" alt="image-20240623174555103"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628165336683.png" alt="image-20240628165336683"></p><h2 id="2370变化的立方体">2370变化的立方体</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175645692.png" alt="image-20240623175645692"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175654138.png" alt="image-20240623175654138"></p><h1 id="6月29日课堂笔记">6月29日课堂笔记</h1><h2 id="坐标">坐标</h2><h3 id="什么是坐标">什么是坐标</h3><p>坐标由两个数，通常是(x, y)，表示一个点在水平 和垂直方向上的距离。如图红点所在的位置。我们将画x轴和y轴的交点坐标设置为(0,0)</p><p><strong>红点离y轴的距离是x轴坐标，红点离x轴的距离是y轴坐标</strong></p><p>因此红点的坐标(x,y)为(2,3)</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240629165446863.png" alt="image-20240629165446863"></p><h3 id="goc关于坐标的命令">goc关于坐标的命令</h3><table><thead><tr><th>坐标命令</th><th>功能</th><th>说明</th><th></th></tr></thead><tbody><tr><td><strong>名称</strong>：获取X坐标：getX( )</td><td>获得笔当前位置的X坐标值，并返回这个值。</td><td>getX( )没有参数，但会返回X坐标值，是函数型命令。格式可以不用“pen.”开头。</td><td></td></tr><tr><td><strong>名称</strong>：获取Y坐标：getY( )</td><td>获得笔当前位置的Y坐标值，并返回这个值。</td><td>getY( )没有参数但会返回Y坐标值，是函数型命令。格式可以不用“pen.”开头。</td><td></td></tr><tr><td><strong>名称</strong>：获取角度：getAngle( )</td><td>获得笔当前的方向角度值，并返回这个值。</td><td>getAngle( )没有参数但会返回角度值，是函数型命令。格式可以不用“pen.”开头。</td><td></td></tr><tr><td><strong>名称</strong>：设置角度：pen.setAngle( a )</td><td>直接设置笔的方向为指定的角度。</td><td>setAngle命令不管现在笔的方向，直接定位到角度a。</td><td></td></tr><tr><td><strong>名称</strong>：连线：pen.lineTo( x,y )</td><td>笔的位置移动到指定的坐标，并画出线段。</td><td>lineTo命令会画出线条，但笔的方向不改变。</td><td></td></tr><tr><td><strong>名称</strong>：移动 pen.moveTo( x, y )</td><td>直接把笔的位置移动到指定的坐标，但不画图。</td><td>moveTo命令不会画出线条，笔的方向也不会改变。</td><td></td></tr></tbody></table><h2 id="勾股定理">勾股定理</h2><p>假设给定一个直角三角形，直角相邻的两个边为a,b。最长的边为c,我们可以知道如下公式:<br>$$<br>a^2+b^2=c^2<br>$$<br>如果想知道c的长度，可以使用sqrt函数，代表开根，sqrt(16)=4,sqrt(4)=2<br>$$<br>c=\sqrt{a^2+b^2}=sqrt(a<em>a+b</em>b)<br>$$</p><p>当我们不知道某个边的长度时候，可以通过getY() 计算出长度。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240629172121147.png" alt="image-20240629172121147"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//勾股定理 两个直角边的平方和=斜边的平方</span></span><br><span class="line">    <span class="comment">//30 60的直角三角形 直角边100  斜边200</span></span><br><span class="line">    p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    p.<span class="built_in">setAngle</span>(<span class="number">30</span>).<span class="built_in">fd</span>(<span class="number">200</span>).<span class="built_in">setAngle</span>(<span class="number">180</span>);</span><br><span class="line">    p.<span class="built_in">fd</span>(<span class="built_in">getY</span>()).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">青科赛特训第二次</summary>
    
    
    
    <category term="杂项" scheme="https://u7u7.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="C++" scheme="https://u7u7.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>6月总结</title>
    <link href="https://u7u7.top/posts/23conclusion06.html"/>
    <id>https://u7u7.top/posts/23conclusion06.html</id>
    <published>2024-07-01T06:00:25.000Z</published>
    <updated>2024-07-01T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="23年总结6月总结">23年总结6月总结</h1><h2 id="一、知识点汇总">一、知识点汇总</h2><h3 id="6-1-6-9">6.1-6.9</h3><ul><li><p><strong>这周的内容</strong> ：综合指标推荐算法  清洗整合 缺失值预测 spark代码服务器运行 spark转py清洗数据</p></li><li><p><strong>难点</strong>： py清洗数据  随机森林对字段预测</p></li></ul><p>​<strong>个人理解</strong>:</p><ul><li><p>这周很糟糕啊，新的数据一出来，就有很多困难一下子摆在自己面前，但是时间已经要来不及了，首先是我将spark清洗进数据库，花费了40分钟一次，虽说是只用一次，但是有很多地方是需要调教的。而且spark并不是导入一次就算了，一些预测和推荐算法是要使用python的。原本自己spark清洗就用了java处理io，spark处理其他，效率是相当慢，推荐接口又需要用py写。更夸张的是新数据一给，web端大致看了一下数据，50w条，而且跟之前的结构有很大的区别，这样不知道spark的代码要清洗到什么时候，就打算全部转python了，清洗和接口都用py。相当于之前一个月清洗的代码基本报废，只有思路是在的。我先试了一下pyspark写，发现也很慢，后面直接没有用spark，单独用python处理数据的pandas，发现比spark快了几十倍啊。搜索发现小数据还是python占优，但是数据一大，内存会顶不住。因为是使用内存处理数据的，所以会快很多。因为之前使用过pandas帮别人做过很多作业，花了一天就上手了，先把hdfs的数据下载下来，一个文件夹下两三个，后面读文件的部分替换成hdfs就好了。大致三种文件四种数据格式，一天能解决一种。</p></li><li><p>随机森林是一种机器学习算法吧，它基于多棵决策树的集成。每个决策树都会用一部分数据进行训练，并为每个样本生成一个预测结果。然后，通过多个决策树的预测结果的投票或平均值来得出最终的预测结果。在进行预测时，如果输入样本存在缺失值，随机森林会根据已有的决策树模型进行预测。对于有缺失特征的样本，在每棵决策树中对应的特征都会被设置为缺失值，然后根据已有模型进行预测。最后，通过汇总所有决策树的预测结果，得到最终的预测结果。说白了就是根据没有缺失值的行，推测出有缺失值的行的缺失值的值，这种算法比线性回归会科学人性化很多，然而在我的数据集比较少的情况下，缺失值hot会趋向于平均值，然而这里是使用的sparkMl，我已经打算弃用spark了，所以这部分的预测算法白学了，又要去使用新的，感觉线性回归应该对于景区hot预测是没什么问题的。</p></li></ul><h3 id="6-12-6-20">6.12-6.20</h3><ul><li><p><strong>这周的学习内容</strong> ：读取hdfs文件 优化pandas读取文件效率 服务器配置安装 数据导入达梦 接口修改 注释添加</p></li><li><p><strong>难点</strong>：读取hdfs文件 修达梦数据库的BUG  线性回归算法</p></li></ul><p>​<strong>个人理解</strong>:</p><ul><li>读hdfs文件这边，花费了大量时间使用一种无线BUG的方法，hdfs3模块真不知道为什么会说一直找不到这个找不到那个，但是在python包下面都是有的，使用sys指定都没用。后面使用hdfs，也会报错，但是报错信息不一样，一直是连接不到web什么的，hdfs3修好以后也是这样，考虑到服务器可能还要重装几次，就弃用hdfs3这个模块了，使用hdfs，刚开始比赛方提供的是一个映射域名+9000端口，我去平台开了台虚拟机，ping他提供的这个映射域名，会返回一个IP地址的，我自己电脑ping了一下竟然能ping通，那这个就是公网了，根本不用平台的机子也能拿到，但是还是一直报conncat，web之类的，反正就是连接不到，换成50070其他端口会直接报端口错误，我又去测试自己虚拟机上面的hdfs，发现能取到，搜索说是hadoop的配置文件需要查看，但是数据是比赛方提供的，我们又不能操作他们的机子。问达梦的人给我答非所问，突然无意中换成了9870端口，发现没报错了，list测试竟然有了。花了两天时间，值得注意的是我昨天在群里说了是公网的问题，他说不是，结果第二天就关了，ping不通了，看来之前的确是公网。</li><li>这达梦数据库的bug真的很多，莫名其妙的，一模一样的步骤就要看运气，会出现不同的报错，在不同的服务器会出现很多报错。然后就是dmPython和sqlalchemy_dm，这两个安装以后也会出现找不到什么包之类的问题，光解决这些问题，一个服务器搭建就要花费几个小时，关键他平台的速度还贼慢，不让使用中国镜像真没搞懂100kb的速度这样弄来是什么意思。</li><li>之前sparkml的随机森林替换成线性回归了，线性回归对训练数据会比较依赖。大致讲一下原理吧。挺好理解的，就比如我用到线性回归的其中一个地方，预测hot字段，景区影响hot的有哪些字段，grade和qty，那我就根据同时有hot grade qty的数据，计算出三者的模糊关系，为什么是模糊的关系呢，因为存在的数据三者关系也不是固定的。打个比方，y=kx+b这样一个一元一次方程(实际并不是),不同的数据会有很多种k和b。线性回归算法的目标是通过求解k和b的最佳组合，使得建立的线性模型与真实的数据尽可能地接近。具体而言，它会通过最小化预测值与真实值之间的误差，来找到最优的斜率和截距。计算原理是这样，设计原理是相关值之间是一个相互的关系，就比如刷抖音，你给某个视频点了赞，视频也会记录你喜欢这个视频，就能通过你点赞的数据推测出你喜欢的视频，也能将某个视频，推荐给经常给该类视频点赞的人。线性回归的模型套起来还是简单的，因为这模型不能训练的，是一次性的，所以偏差值不会很大，准确性只能说中规中矩。</li></ul><h2 id="二-小组项目总结">二:小组项目总结:</h2><ul><li>在这次比赛项目中，作为队长，我不仅需要完成自己负责的模块部分，更重要的是负责组织和安排小组成员的工作。回顾目前项目制作过程，我认为我在工作安排方面有以下几点反思和改进的地方。首先，我发现有时候我只是简单地告诉他们完成某个任务，而没有具体说明要达到的目标和时间要求。这导致一些情况下前后端配合感到困惑，并且无法高效地完成任务。以后需要更加清晰地传达任务的目标和要求，提供明确的时间表和衡量指标，使每个成员能够清楚地知道他们需要做什么，并在规定的时间内完成。</li><li>之前做的任务表其实是有时间安排的，但是计划跟着变化走，那个表也就没什么用了。我觉得我们组的实力在工作室各个领域都还是挺强的，问题最大的地方在于沟通，在平台出来之前，因为我那部分基本都解决了，所以基本每天都会问一下他们的进度，哪些地方需要怎样的接口，然后再跟后端讲，这样的沟通方式其实还是可以的，因为前端可能只知道自己需要实现什么样的功能，我会去询问，然后商量需要什么样的数据，我在告诉后端哪些功能有，要写什么样的接口，sql方面能帮助的还会提供一下帮助。</li><li>平台出来以后，因为上个月的努力基本白费了，本来想着数据是差不多了，一天两天时间搞一下就行了，就能帮前后端写写代码，或者写文档了。结果差这么多，那几天又担心来不及，都在自己埋头把数据处理了，数据我也有跟小组成员说过数据结构和变动，有变动其实不多，要改的接口和功能是不多的，即使没有数据也是能进行的，但是他们都是在等我搞好数据，导致工作进度效率变慢了几天，新数据确实加上补充缺失值和rating计算加上了很多功能，之前很多null的值，我都处理掉了，新数据搞了可能一个星期吧。这段时间没有怎么让前后端沟通，确实是有点忙不过来了。然后有很多地方的接口都是还没写的，之前我其实是有注意到的，那部分功能需要新数据才能用，就先让他们将其他地方该能写好的地方写好了，就意识到自己数据搞的越慢项目就快不起来，加了几天班终于把数据搞好了，最近几天的效率是之前没数据的很多倍，可能是没数据接口那边不太好感觉吧，因为没法测试。总的来说，通过反思和总结这次比赛项目中对自己小组工作安排的经验，我知道自己有很多地方还是需要加强改进的，应该督促前后端加强自主沟通，而不是自己当传话筒，能够更好地发挥队长的职责，提升小组的工作效率和质量，取得更好的成绩。</li><li>这大半个月是走入项目的末尾了，自己负责的代码部分基本完成了，为什么是基本完成，可能有些地方接口要添加或者要修改一下。但是是小事情的了，接下来的时间就开始主攻文档了，文档方面因为借鉴的不多，所以感觉还是要花费一些功夫的。这个月刚开始来平台和数据的时候真是把我吓一了跳，数据多了这么多，还格式不一样，清洗数据部分之前的时间真都白瞎了。平台 也不是整的很明白其实，好在磕磕绊绊的都解决了，项目开发也步入了正轨了。</li></ul>]]></content>
    
    
    <summary type="html">23年创新工作室6月总结</summary>
    
    
    
    <category term="工作月总结" scheme="https://u7u7.top/categories/%E5%B7%A5%E4%BD%9C%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://u7u7.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>GoC国赛特训(一)</title>
    <link href="https://u7u7.top/posts/goc01.html"/>
    <id>https://u7u7.top/posts/goc01.html</id>
    <published>2024-06-28T09:17:25.000Z</published>
    <updated>2025-08-20T03:07:10.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7月6日第一次训练题">7月6日第一次训练题</h1><div class="site-card-group"><a class="site-card" href="https://vip.51goc.com/static/gocWebNet/gocWebNet.html?submitBt=0&insert=0&ra=60&winName=20200413"><div class="img"><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/20240629094929.png"/></div><div class="info"><img src=" https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/chengguo.jpg"/><span class="title">goc编译环境</span><span class="desc">web端</span></div></a></div>  <h2 id="2358偶数车辆和">2358偶数车辆和</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174050751.png" alt="image-20240623174050751"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174057642.png" alt="image-20240623174057642"></p><h2 id="2361黑色印记">2361黑色印记</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628154114419.png" alt="image-20240628154114419"></p><h2 id="2362挑选日期">2362挑选日期</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174130144.png" alt="image-20240623174130144"></p><h2 id="2363车辆统计">2363车辆统计</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175620853.png" alt="image-20240623175620853"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175632380.png" alt="image-20240623175632380"></p><h2 id="2365矩形外框B">2365矩形外框B</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623180651332.png" alt="image-20240623180651332"></p><h1 id="7月6日课堂笔记">7月6日课堂笔记</h1><h2 id="坐标">坐标</h2><h3 id="什么是坐标">什么是坐标</h3><p>坐标由两个数，通常是(x, y)，表示一个点在水平 和垂直方向上的距离。如图红点所在的位置。我们将画x轴和y轴的交点坐标设置为(0,0)</p><p><strong>红点离y轴的距离是x轴坐标，红点离x轴的距离是y轴坐标</strong></p><p>因此红点的坐标(x,y)为(2,3)</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240629165446863.png" alt="image-20240629165446863"></p><h3 id="goc关于坐标的命令">goc关于坐标的命令</h3><table><thead><tr><th>坐标命令</th><th>功能</th><th>说明</th><th></th></tr></thead><tbody><tr><td><strong>名称</strong>：获取X坐标：getX( )</td><td>获得笔当前位置的X坐标值，并返回这个值。</td><td>getX( )没有参数，但会返回X坐标值，是函数型命令。格式可以不用“pen.”开头。</td><td></td></tr><tr><td><strong>名称</strong>：获取Y坐标：getY( )</td><td>获得笔当前位置的Y坐标值，并返回这个值。</td><td>getY( )没有参数但会返回Y坐标值，是函数型命令。格式可以不用“pen.”开头。</td><td></td></tr><tr><td><strong>名称</strong>：获取角度：getAngle( )</td><td>获得笔当前的方向角度值，并返回这个值。</td><td>getAngle( )没有参数但会返回角度值，是函数型命令。格式可以不用“pen.”开头。</td><td></td></tr><tr><td><strong>名称</strong>：设置角度：pen.setAngle( a )</td><td>直接设置笔的方向为指定的角度。</td><td>setAngle命令不管现在笔的方向，直接定位到角度a。</td><td></td></tr><tr><td><strong>名称</strong>：连线：pen.lineTo( x,y )</td><td>笔的位置移动到指定的坐标，并画出线段。</td><td>lineTo命令会画出线条，但笔的方向不改变。</td><td></td></tr><tr><td><strong>名称</strong>：移动 pen.moveTo( x, y )</td><td>直接把笔的位置移动到指定的坐标，但不画图。</td><td>moveTo命令不会画出线条，笔的方向也不会改变。</td><td></td></tr></tbody></table><h2 id="勾股定理">勾股定理</h2><p>假设给定一个直角三角形，直角相邻的两个边为a,b。最长的边为c,我们可以知道如下公式:<br>$$<br>a^2+b^2=c^2<br>$$<br>如果想知道c的长度，可以使用sqrt函数，代表开根，sqrt(16)=4,sqrt(4)=2<br>$$<br>c=\sqrt{a^2+b^2}=sqrt(a<em>a+b</em>b)<br>$$</p><p>当我们不知道某个边的长度时候，可以通过getY() 计算出长度。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240629172121147.png" alt="image-20240629172121147"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//勾股定理 两个直角边的平方和=斜边的平方</span></span><br><span class="line">    <span class="comment">//30 60的直角三角形 直角边100  斜边200</span></span><br><span class="line">    p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    p.<span class="built_in">setAngle</span>(<span class="number">30</span>).<span class="built_in">fd</span>(<span class="number">200</span>).<span class="built_in">setAngle</span>(<span class="number">180</span>);</span><br><span class="line">    p.<span class="built_in">fd</span>(<span class="built_in">getY</span>()).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">青科赛特训第一次</summary>
    
    
    
    <category term="杂项" scheme="https://u7u7.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="C++" scheme="https://u7u7.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>GoC国赛特训</title>
    <link href="https://u7u7.top/posts/goc00.html"/>
    <id>https://u7u7.top/posts/goc00.html</id>
    <published>2024-06-28T08:00:25.000Z</published>
    <updated>2025-07-28T03:31:53.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOC国赛特训及答案">GOC国赛特训及答案</h1><h2 id="2356两个八分音符">2356两个八分音符</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623173955916.png" alt="image-20240623173955916"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">0</span>);</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">20</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">size</span>(<span class="number">4</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">70</span>).<span class="built_in">size</span>(<span class="number">10</span>).<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">110</span>).<span class="built_in">size</span>(<span class="number">4</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">oo</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2357变化的正三角形">2357变化的正三角形</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628153145817.png" alt="image-20240628153145817"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">100</span><span class="number">-10</span>*i).<span class="built_in">rt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">50</span><span class="number">-5</span>*i).<span class="built_in">lt</span>(<span class="number">60</span>+<span class="number">10</span>*i); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2358偶数车辆和">2358偶数车辆和</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174050751.png" alt="image-20240623174050751"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174057642.png" alt="image-20240623174057642"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">10</span>],sum;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">40</span>*i,a[i]/<span class="number">2.0</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i] % <span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            sum += a[i]*<span class="number">20</span>;</span><br><span class="line">            p.<span class="built_in">rr</span>(<span class="number">20</span>,a[i],<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">rr</span>(<span class="number">20</span>,a[i],<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//红面积 sum</span></span><br><span class="line">    <span class="comment">//长(2*n-1)*20=40n-20</span></span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">20</span>*n<span class="number">-20</span>,<span class="number">-1</span>*sum/(<span class="number">80</span>*n<span class="number">-40</span>));</span><br><span class="line">    p.<span class="built_in">rr</span>(<span class="number">40</span>*n<span class="number">-20</span>,sum/(<span class="number">40</span>*n<span class="number">-20</span>),<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2359矩形外框A">2359矩形外框A</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628153308344.png" alt="image-20240628153308344"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628153357201.png" alt="image-20240628153357201"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628153409419.png" alt="image-20240628153409419"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>],X,Y,max,res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(max&lt;a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">r</span>(<span class="number">100</span>,<span class="number">100</span>).<span class="built_in">up</span>();</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-50</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">o</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==max)&#123;</span><br><span class="line">            X=<span class="built_in">getX</span>();</span><br><span class="line">            Y=<span class="built_in">getY</span>();</span><br><span class="line">            res=i;</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[res]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>]+<span class="number">100</span> &amp;&amp; a[res]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>&amp;&amp;a[res]&gt;a[(res+<span class="number">3</span>)%<span class="number">4</span>]+<span class="number">100</span>)&#123;<span class="comment">//最大值很大</span></span><br><span class="line">        p.<span class="built_in">moveTo</span>(X,Y);</span><br><span class="line">        p.<span class="built_in">r</span>(max*<span class="number">2</span>,max*<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[(res+<span class="number">1</span>)%<span class="number">4</span>]&lt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">2</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])&#123;<span class="comment">//对角线</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;对角线&quot;</span>;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">            p.<span class="built_in">r</span>((a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>),(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//长为长 短为宽</span></span><br><span class="line">            <span class="keyword">if</span>((res%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;a[(res+<span class="number">1</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">1</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])||(res%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;a[(res+<span class="number">3</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">3</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">2</span>)%<span class="number">4</span>]))&#123;</span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>,max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//长为宽 短为长</span></span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>,max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2360绿色正三角形">2360绿色正三角形</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174108830.png" alt="image-20240623174108830"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">10</span>).<span class="built_in">rt</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">           p.<span class="built_in">rt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">75</span>).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">150</span>).<span class="built_in">rt</span>(<span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2361黑色印记">2361黑色印记</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628154114419.png" alt="image-20240628154114419"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">picU</span>(<span class="number">0</span>).<span class="built_in">up</span>();</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">283</span>,<span class="number">0</span>);</span><br><span class="line">    p.<span class="built_in">rr</span>(<span class="number">400</span>,<span class="number">400</span>,<span class="number">15</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">45</span>).<span class="built_in">rr</span>(<span class="number">400</span>,<span class="number">400</span>,<span class="number">15</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">150</span>).<span class="built_in">rt</span>(<span class="number">45</span>).<span class="built_in">rr</span>(<span class="number">90</span>,<span class="number">90</span>,<span class="number">0</span>).<span class="built_in">lt</span>(<span class="number">45</span>).<span class="built_in">bk</span>(<span class="number">150</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2362挑选日期">2362挑选日期</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174130144.png" alt="image-20240623174130144"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">up</span>();</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((a[i]+<span class="number">1</span>)%<span class="number">7</span>==<span class="number">6</span>)&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">20</span>,<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((a[i]+<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">20</span>,<span class="number">4</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">20</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2363车辆统计">2363车辆统计</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175620853.png" alt="image-20240623175620853"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175632380.png" alt="image-20240623175632380"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> avg,sum=<span class="number">0</span>,n,a[<span class="number">10</span>],max=<span class="number">0</span>;</span><br><span class="line">    p.<span class="built_in">hide</span>().<span class="built_in">speed</span>(<span class="number">9</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">        <span class="keyword">if</span>(max &lt; a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    avg = sum / n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,<span class="number">0</span>).<span class="built_in">fd</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(max==a[i]) p.<span class="built_in">up</span>().<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">o</span>(<span class="number">20</span>,<span class="number">1</span>).<span class="built_in">down</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,avg).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">c</span>(<span class="number">1</span>).<span class="built_in">fd</span>(<span class="number">20</span>*n<span class="number">-20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2364统计排水量">2364统计排水量</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628154344906.png" alt="image-20240628154344906"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628154553404.png" alt="image-20240628154553404"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>,n,a[<span class="number">15</span>],max=<span class="number">0</span>;</span><br><span class="line">    p.<span class="built_in">hide</span>().<span class="built_in">speed</span>(<span class="number">9</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(max &lt; a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,a[i]/max*<span class="number">150</span>).<span class="built_in">r</span>(<span class="number">20</span>,a[i]/max*<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2365矩形外框B">2365矩形外框B</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623180651332.png" alt="image-20240623180651332"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>],X,Y,max,res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(max&lt;a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">r</span>(<span class="number">100</span>,<span class="number">100</span>).<span class="built_in">up</span>();</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-50</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">o</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==max)&#123;</span><br><span class="line">            X=<span class="built_in">getX</span>();</span><br><span class="line">            Y=<span class="built_in">getY</span>();</span><br><span class="line">            res=i;</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[res]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>]+<span class="number">100</span> &amp;&amp; a[res]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>&amp;&amp;a[res]&gt;a[(res+<span class="number">3</span>)%<span class="number">4</span>]+<span class="number">100</span>)&#123;<span class="comment">//最大值很大</span></span><br><span class="line">        p.<span class="built_in">moveTo</span>(X,Y);</span><br><span class="line">        p.<span class="built_in">r</span>(max*<span class="number">2</span>,max*<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[(res+<span class="number">1</span>)%<span class="number">4</span>]&lt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">2</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])&#123;<span class="comment">//对角线</span></span><br><span class="line">            p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">            p.<span class="built_in">r</span>((a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>),(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//长为长 短为宽</span></span><br><span class="line">            <span class="keyword">if</span>((res%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;a[(res+<span class="number">1</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">1</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])||(res%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;a[(res+<span class="number">3</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">3</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">2</span>)%<span class="number">4</span>]))&#123;</span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>,max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//长为宽 短为长</span></span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>,max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2366彩色花朵">2366彩色花朵</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628155229283.png" alt="image-20240628155229283"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">picU</span>(<span class="number">0</span>); <span class="comment">//开启图形按照笔方向画</span></span><br><span class="line">    p.<span class="built_in">up</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">130</span>).<span class="built_in">ee</span>(<span class="number">20</span>,<span class="number">100</span>,<span class="number">13</span>).<span class="built_in">bk</span>(<span class="number">130</span>).<span class="built_in">rt</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">110</span>).<span class="built_in">ee</span>(<span class="number">30</span>,<span class="number">80</span>,<span class="number">14</span>).<span class="built_in">bk</span>(<span class="number">110</span>).<span class="built_in">rt</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2367变化的正方形">2367变化的正方形</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628151021609.png" alt="image-20240628151021609"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628150954532.png" alt="image-20240628150954532"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">c</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">200</span><span class="number">-20</span>*i).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2368彩色图形">2368彩色图形</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628150229616.png" alt="image-20240628150229616"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628150316832.png" alt="image-20240628150316832"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-300</span>,<span class="number">300</span>).<span class="built_in">up</span>().<span class="built_in">hide</span>().<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n+i;j++)&#123; <span class="comment">// 4 5 6 7 8</span></span><br><span class="line">            <span class="keyword">if</span>(j&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">                p.<span class="built_in">oo</span>(<span class="number">20</span>,(j<span class="number">-1</span>)%(n<span class="number">-1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p.<span class="built_in">oo</span>(<span class="number">20</span>,j);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">-300</span>,<span class="number">260</span><span class="number">-40</span>*i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2369腾图">2369腾图</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623174555103.png" alt="image-20240623174555103"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628165336683.png" alt="image-20240628165336683"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">12</span>).<span class="built_in">speed</span>(<span class="number">9</span>).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="type">int</span> n,a,b,o;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(n).<span class="built_in">rt</span>(<span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    a = <span class="number">2</span>*<span class="built_in">sqrt</span>(n*n-(n/<span class="number">2.0</span>)*(n/<span class="number">2.0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(a).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    b = a /<span class="number">2.0</span>;</span><br><span class="line">    p.<span class="built_in">fd</span>(b).<span class="built_in">lt</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b).<span class="built_in">rt</span>(<span class="number">30</span>).<span class="built_in">fd</span>(n/<span class="number">2.0</span>).<span class="built_in">bk</span>(n/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">150</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    o = b/<span class="number">2.0</span>/<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    p.<span class="built_in">up</span>().<span class="built_in">fd</span>(b/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(o).<span class="built_in">o</span>(o);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2370变化的立方体">2370变化的立方体</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175645692.png" alt="image-20240623175645692"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240623175654138.png" alt="image-20240623175654138"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：计算两个数的最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：计算三个数的最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcdOfThree</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先计算前两个数的GCD</span></span><br><span class="line">    <span class="type">int</span> gcdAB = <span class="built_in">gcd</span>(a, b);</span><br><span class="line">    <span class="comment">// 再用这个结果与第三个数计算GCD</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(gcdAB, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>],b;</span><br><span class="line">    p.<span class="built_in">speed</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    b=<span class="built_in">gcdOfThree</span>(a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=a[<span class="number">0</span>]/b;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(-b*i,-a[<span class="number">2</span>]);</span><br><span class="line">        p.<span class="built_in">fd</span>(a[<span class="number">2</span>]).<span class="built_in">rt</span>(<span class="number">45</span>).<span class="built_in">fd</span>(a[<span class="number">1</span>]).<span class="built_in">lt</span>(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=a[<span class="number">1</span>]/b;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(a[<span class="number">0</span>]).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(a[<span class="number">2</span>]);</span><br><span class="line">        p.<span class="built_in">up</span>().<span class="built_in">bk</span>(a[<span class="number">2</span>]).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(a[<span class="number">0</span>]).<span class="built_in">lt</span>(<span class="number">45</span>).<span class="built_in">fd</span>(b).<span class="built_in">lt</span>(<span class="number">135</span>).<span class="built_in">down</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a[<span class="number">2</span>]/b;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(-a[<span class="number">0</span>],-b*i-b);</span><br><span class="line">        p.<span class="built_in">fd</span>(a[<span class="number">0</span>]).<span class="built_in">lt</span>(<span class="number">45</span>).<span class="built_in">fd</span>(a[<span class="number">1</span>]).<span class="built_in">rt</span>(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2371矩形外框C">2371矩形外框C</h2><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628152010556.png" alt="image-20240628152010556"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20240628152027315.png" alt="image-20240628152027315"></p>]]></content>
    
    
    <summary type="html">2023青科赛特训题以及答案</summary>
    
    
    
    <category term="杂项" scheme="https://u7u7.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="C++" scheme="https://u7u7.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>旅牛网 v1.0.0</title>
    <link href="https://u7u7.top/posts/traval.html"/>
    <id>https://u7u7.top/posts/traval.html</id>
    <published>2024-06-20T08:30:25.000Z</published>
    <updated>2025-08-25T01:41:06.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="旅牛网">旅牛网</h1><blockquote><p>v1.0.0</p></blockquote><p>Base URLs:</p><ul><li><a href="http://127.0.0.1:80">测试环境: http://127.0.0.1:80</a></li></ul><h1 id="Default">Default</h1><h2 id="GET-flask测试">GET flask测试</h2><p>GET /</p><h3 id="请求参数">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;哈哈哈&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» data</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="旅牛网-城市Controller">旅牛网/城市Controller</h1><h2 id="GET-热门城市-x为省份-y为城市-z为热度值">GET 热门城市(x为省份 y为城市 z为热度值)</h2><p>GET /city/hot</p><h3 id="请求参数-2">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-2">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-城市列表">GET 城市列表</h2><p>GET /city/cityList</p><h3 id="请求参数-3">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-3">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-省份城市景区列表">GET 省份城市景区列表</h2><p>GET /city/provinceCityList</p><p>返回所有已知省份的已知城市的已知景点</p><h3 id="请求参数-4">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-4">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-该城市有几个景点">GET 该城市有几个景点</h2><p>GET /city/peopleCityList</p><h3 id="请求参数-5">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-5">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-城市景点总数平均值">GET 城市景点总数平均值</h2><p>GET /city/citySpotAvgRating</p><h3 id="请求参数-6">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-6">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h1 id="旅牛网-省份Controller">旅牛网/省份Controller</h1><h2 id="GET-热门省份">GET 热门省份</h2><p>GET /province/hotTop</p><h3 id="请求参数-7">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-7">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-返回所有的省份名">GET 返回所有的省份名</h2><p>GET /province/provinceList</p><h3 id="请求参数-8">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-8">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="POST-返回指定省份的所有城市">POST 返回指定省份的所有城市</h2><p>POST /province/provincePointCity</p><h3 id="请求参数-9">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>provinceName</td><td>query</td><td>string</td><td>否</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-9">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h1 id="旅牛网-景点Controller">旅牛网/景点Controller</h1><h2 id="GET-查询全部">GET 查询全部</h2><p>GET /spot/all</p><h3 id="请求参数-10">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-10">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-返回一个指定景区的信息">GET 返回一个指定景区的信息</h2><p>GET /spot/spot/item/{spotid}</p><h3 id="请求参数-11">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spotid</td><td>path</td><td>string</td><td>是</td><td>景区ID</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-11">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-接口测试">GET 接口测试</h2><p>GET /spot/test</p><h3 id="请求参数-12">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-12">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-点评最多-按照景区表的SUM">GET 点评最多(按照景区表的SUM)</h2><p>GET /spot/spotBySum</p><h3 id="请求参数-13">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-13">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-季节最热门景区-x轴-季节-y轴-景区-z轴-该季度总评论数">GET 季节最热门景区(x轴 季节 y轴 景区  z轴 该季度总评论数)</h2><p>GET /spot/seasonSpotSumInfo</p><h3 id="请求参数-14">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-14">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-景区搜索栏">GET 景区搜索栏</h2><p>GET /spot/spotInfoSearch</p><h3 id="请求参数-15">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-15">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-各景区评论数">GET 各景区评论数</h2><p>GET /spot/spotComInfo</p><h3 id="请求参数-16">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-16">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-单个景点的各项指标">GET 单个景点的各项指标</h2><p>GET /spot/spotFiveInfo/{spotId}</p><h3 id="请求参数-17">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spotId</td><td>path</td><td>string</td><td>是</td><td>景点ID</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-17">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-全部景点的平均各项指标">GET 全部景点的平均各项指标</h2><p>GET /spot/spotAllFiveInfo</p><h3 id="请求参数-18">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-18">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-各月景点评论和平均口碑">GET 各月景点评论和平均口碑</h2><p>GET /spot/stringListHashMap</p><h3 id="请求参数-19">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-19">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-某个景区来自各个省的游客数">GET 某个景区来自各个省的游客数</h2><p>GET /spot/spotProvincePeopleNum/{spotId}</p><h3 id="请求参数-20">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spotId</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-20">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-热度前十的景点">GET 热度前十的景点</h2><p>GET /spot/hotTop10</p><h3 id="请求参数-21">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-21">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-星评前十的景点">GET 星评前十的景点</h2><p>GET /spot/gradeTop10</p><h3 id="请求参数-22">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-22">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-推荐指数前十的景点">GET 推荐指数前十的景点</h2><p>GET /spot/ratingTop10</p><h3 id="请求参数-23">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-23">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-rating前十景区的各月评论数">GET rating前十景区的各月评论数</h2><p>GET /spot/ratingTop10CntInfo</p><h3 id="请求参数-24">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-24">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-rating前十景区的各省的人数">GET rating前十景区的各省的人数</h2><p>GET /spot/ratingTop10ProvinceInfo</p><h3 id="请求参数-25">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-25">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-季节前十评论数的景区">GET 季节前十评论数的景区</h2><p>GET /spot/seasonSpot10SumInfo</p><h3 id="请求参数-26">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-26">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-景区等级数量">GET 景区等级数量</h2><p>GET /spot/SpotLevelCnt</p><h3 id="请求参数-27">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-27">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h1 id="旅牛网-用户相关接口">旅牛网/用户相关接口</h1><h2 id="POST-注册用户">POST 注册用户</h2><p>POST /user/enroll</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-28">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr><tr><td>body</td><td>body</td><td><a href="#schemauserinfo">UserInfo</a></td><td>否</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-28">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-生成验证码">GET 生成验证码</h2><p>GET /user/code/image</p><h3 id="请求参数-29">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-29">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-2">返回数据结构</h3><h2 id="POST-登录">POST 登录</h2><p>POST /user/login</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shearCaptcha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-30">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr><tr><td>body</td><td>body</td><td><a href="#schemauserlogindto">UserLoginDTO</a></td><td>否</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-30">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="POST-重置密码">POST 重置密码</h2><p>POST /user/fixp</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shearCaptcha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-31">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr><tr><td>body</td><td>body</td><td><a href="#schemauserlogindto">UserLoginDTO</a></td><td>否</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-31">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="POST-重置用户名">POST 重置用户名</h2><p>POST /user/fixu</p><h3 id="请求参数-32">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>userName</td><td>query</td><td>string</td><td>否</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-32">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-用户收藏">GET 用户收藏</h2><p>GET /user/userCollection</p><h3 id="请求参数-33">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-33">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-添加足迹">GET 添加足迹</h2><p>GET /user/spotFootPrint/add</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spotName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-34">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr><tr><td>body</td><td>body</td><td><a href="#schemauserfootprint">UserFootPrint</a></td><td>否</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-34">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="POST-添加足迹">POST 添加足迹</h2><p>POST /user/spotFootPrint/add</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spotName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-35">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr><tr><td>body</td><td>body</td><td><a href="#schemauserfootprint">UserFootPrint</a></td><td>否</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-35">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-足迹列表">GET 足迹列表</h2><p>GET /user/spotFootPrintList</p><h3 id="请求参数-36">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-36">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-足迹省份">GET 足迹省份</h2><p>GET /user/spotFootPrintProvinceList</p><h3 id="请求参数-37">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-37">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-足迹城市">GET 足迹城市</h2><p>GET /user/spotFootPrintCityList</p><h3 id="请求参数-38">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>province</td><td>query</td><td>string</td><td>否</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-38">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-检查这个景点是否被收藏过">GET 检查这个景点是否被收藏过</h2><p>GET /user/checkCollection/{spotId}</p><h3 id="请求参数-39">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spotId</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-39">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="GET-添加收藏或者取消收藏某景点">GET 添加收藏或者取消收藏某景点</h2><p>GET /user/addOrDeleteUserCollection/{spotId}</p><p>flag 0是取消1是尝试收藏</p><h3 id="请求参数-40">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spotId</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-40">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h1 id="旅牛网-推荐业务">旅牛网/推荐业务</h1><h2 id="POST-景区搜索栏推荐LEVEL-SPOT-NAME">POST 景区搜索栏推荐LEVEL,SPOT_NAME</h2><p>POST /recommend/spotInfoSearch</p><h3 id="请求参数-41">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>level</td><td>query</td><td>string</td><td>否</td><td>none</td></tr><tr><td>spotName</td><td>query</td><td>string</td><td>否</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-41">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h2 id="POST-智能景区搜索栏推荐">POST 智能景区搜索栏推荐</h2><p>POST /recommend/AISpotInfoSearch</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;provinceList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cityList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typeList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;levelList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-42">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr><tr><td>body</td><td>body</td><td><a href="#schemarecommendsearch">RecommendSearch</a></td><td>否</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-42">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaajaxresult">AjaxResult</a></td></tr></tbody></table><h1 id="旅牛网-python中转">旅牛网/python中转</h1><h2 id="GET-查询各省来访人数">GET 查询各省来访人数</h2><p>GET /api/keyword/spot/peopleCount/</p><h3 id="请求参数-43">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-43">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaobject">Object</a></td></tr></tbody></table><h2 id="GET-景区评论区好评一般差评数">GET 景区评论区好评一般差评数</h2><p>GET /api/keyword/spot/commentTypes/{spot_id}</p><h3 id="请求参数-44">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-44">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaobject">Object</a></td></tr></tbody></table><h2 id="GET-查询对应景区所有评论">GET 查询对应景区所有评论</h2><p>GET /api/keyword/spot/commentAll/{spot_id}</p><h3 id="请求参数-45">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-45">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaobject">Object</a></td></tr></tbody></table><h2 id="POST-景区跟高频词有关的评论">POST 景区跟高频词有关的评论</h2><p>POST /api/keyword/spot/comments/{spot_id}</p><h3 id="请求参数-46">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>keyWord</td><td>query</td><td>string</td><td>否</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-46">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaobject">Object</a></td></tr></tbody></table><h2 id="GET-查询对应景区的高频词">GET 查询对应景区的高频词</h2><p>GET /api/keyword/spot/comment/{spot_id}</p><h3 id="请求参数-47">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-47">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td><a href="#schemaobject">Object</a></td></tr></tbody></table><h1 id="py推荐">py推荐</h1><h2 id="GET-查询对应景区的高频词-2">GET 查询对应景区的高频词</h2><p>GET /spot/comment/{spot_id}</p><h3 id="请求参数-48">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>integer</td><td>是</td><td>景区id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-48">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-3">返回数据结构</h3><h2 id="POST-景区跟高频词有关的评论-2">POST 景区跟高频词有关的评论</h2><p>POST /spot/comments/{spot_id}</p><h3 id="请求参数-49">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>keyWord</td><td>query</td><td>string</td><td>否</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-49">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-4">返回数据结构</h3><h2 id="GET-查询对应景区所有评论-2">GET 查询对应景区所有评论</h2><p>GET /spot/commentAll/{spot_id}</p><h3 id="请求参数-50">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>integer</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>记录不存在</p></blockquote><h3 id="返回结果-50">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>404</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.5.4">Not Found</a></td><td>记录不存在</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-5">返回数据结构</h3><h2 id="GET-景区评论区好评一般差评数-2">GET 景区评论区好评一般差评数</h2><p>GET /spot/commentTypes/{spot_id}/</p><h3 id="请求参数-51">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>spot_id</td><td>path</td><td>string</td><td>是</td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><h3 id="返回结果-51">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-6">返回数据结构</h3><h2 id="GET-查询各省来访人数-2">GET 查询各省来访人数</h2><p>GET /spot/peopleCount/</p><p>查询每个省的来访人数</p><h3 id="请求参数-52">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>成功</p></blockquote><h3 id="返回结果-52">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-7">返回数据结构</h3><h1 id="苍穹管理端-分类相关接口">苍穹管理端/分类相关接口</h1><h2 id="PUT-修改分类">PUT 修改分类</h2><p>PUT /admin/category</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-53">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>CategoryDTO</td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>分类id</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>分类名称</td></tr><tr><td>» sort</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>排序</td></tr><tr><td>» type</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>分类类型</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-53">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-8">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-新增分类">POST 新增分类</h2><p>POST /admin/category</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-54">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>CategoryDTO</td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>none</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>分类名称</td></tr><tr><td>» sort</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>排序，按照升序排序</td></tr><tr><td>» type</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>分类类型：1为菜品分类，2为套餐分类</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-54">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-9">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="DELETE-根据id删除分类">DELETE 根据id删除分类</h2><p>DELETE /admin/category</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-55">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>query</td><td>string</td><td>是</td><td></td><td>分类id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-55">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-10">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-分类分页查询">GET 分类分页查询</h2><p>GET /admin/category/page</p><h3 id="请求参数-56">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>query</td><td>string</td><td>否</td><td></td><td>分类名称</td></tr><tr><td>page</td><td>query</td><td>string</td><td>是</td><td></td><td>页码</td></tr><tr><td>pageSize</td><td>query</td><td>string</td><td>是</td><td></td><td>每页记录数</td></tr><tr><td>type</td><td>query</td><td>string</td><td>否</td><td></td><td>分类类型：1为菜品分类，2为套餐分类</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-56">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-11">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» total</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» records</td><td>[object]</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» type</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» sort</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createUser</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateUser</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-启用、禁用分类">POST 启用、禁用分类</h2><p>POST /admin/category/status/{status}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-57">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>path</td><td>string</td><td>是</td><td></td><td>1为启用，0为禁用</td></tr><tr><td>id</td><td>query</td><td>string</td><td>是</td><td></td><td>分类id</td></tr><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-57">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-12">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-根据类型查询分类">GET 根据类型查询分类</h2><p>GET /admin/category/list</p><h3 id="请求参数-58">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>query</td><td>string</td><td>否</td><td></td><td>分类类型：1为菜品分类，2为套餐分类</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-58">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-13">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«List«Category»»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» Category</td><td>object</td><td>false</td><td>none</td><td>Category</td><td>none</td></tr><tr><td>»»» createTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» sort</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» type</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹管理端-员工相关接口">苍穹管理端/员工相关接口</h1><h2 id="PUT-修改密码">PUT 修改密码</h2><p>PUT /admin/employee/editPassword</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;empId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;newPassword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;oldPassword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-59">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>PasswordEditDTO</td><td>none</td></tr><tr><td>» empId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>员工id</td></tr><tr><td>» newPassword</td><td>body</td><td>string</td><td>是</td><td></td><td>新密码</td></tr><tr><td>» oldPassword</td><td>body</td><td>string</td><td>是</td><td></td><td>旧密码</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-59">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-14">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-启用、禁用员工账号">POST 启用、禁用员工账号</h2><p>POST /admin/employee/status/{status}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-60">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>path</td><td>string</td><td>是</td><td></td><td>状态，1为启用 0为禁用</td></tr><tr><td>id</td><td>query</td><td>string</td><td>是</td><td></td><td>员工id</td></tr><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-60">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-15">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-员工分页查询">GET 员工分页查询</h2><p>GET /admin/employee/page</p><h3 id="请求参数-61">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>query</td><td>string</td><td>否</td><td></td><td>员工姓名</td></tr><tr><td>page</td><td>query</td><td>string</td><td>是</td><td></td><td>页码</td></tr><tr><td>pageSize</td><td>query</td><td>string</td><td>是</td><td></td><td>每页记录数</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;idNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-61">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-16">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» total</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» records</td><td>[object]</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» username</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» password</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» phone</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» sex</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» idNumber</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createTime</td><td>string¦null</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createUser</td><td>number¦null</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateUser</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-员工登录">POST 员工登录</h2><p>POST /admin/employee/login</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-62">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>EmployeeLoginDTO</td><td>none</td></tr><tr><td>» password</td><td>body</td><td>string</td><td>是</td><td></td><td>密码</td></tr><tr><td>» username</td><td>body</td><td>string</td><td>是</td><td></td><td>用户名</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-62">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-17">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«EmployeeLoginVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td>EmployeeLoginVO</td><td>员工登录返回的数据格式</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>主键值</td></tr><tr><td>»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>姓名</td></tr><tr><td>»» token</td><td>string</td><td>false</td><td>none</td><td></td><td>jwt令牌</td></tr><tr><td>»» userName</td><td>string</td><td>false</td><td>none</td><td></td><td>用户名</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-新增员工">POST 新增员工</h2><p>POST /admin/employee</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;idNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-63">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>EmployeeDTO</td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>员工id</td></tr><tr><td>» idNumber</td><td>body</td><td>string</td><td>是</td><td></td><td>身份证</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>姓名</td></tr><tr><td>» phone</td><td>body</td><td>string</td><td>是</td><td></td><td>手机号</td></tr><tr><td>» sex</td><td>body</td><td>string</td><td>是</td><td></td><td>性别</td></tr><tr><td>» username</td><td>body</td><td>string</td><td>是</td><td></td><td>用户名</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-63">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-18">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-编辑员工信息">PUT 编辑员工信息</h2><p>PUT /admin/employee</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;idNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-64">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>EmployeeDTO</td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>none</td></tr><tr><td>» idNumber</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» phone</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» sex</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» username</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-64">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-19">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-根据id查询员工">GET 根据id查询员工</h2><p>GET /admin/employee/{id}</p><h3 id="请求参数-65">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>员工id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;idNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-65">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-20">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«Employee»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>Employee</td><td>none</td></tr><tr><td>»» createTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» createUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» idNumber</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» password</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» phone</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» sex</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» updateTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» updateUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» username</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-退出登录">POST 退出登录</h2><p>POST /admin/employee/logout</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-66">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>empty object</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-66">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-21">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹管理端-套餐相关接口">苍穹管理端/套餐相关接口</h1><h2 id="PUT-修改套餐">PUT 修改套餐</h2><p>PUT /admin/setmeal</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;setmealDishes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-67">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>SetmealDTO</td><td>none</td></tr><tr><td>» categoryId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>分类id</td></tr><tr><td>» description</td><td>body</td><td>string</td><td>否</td><td></td><td>套餐描述</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>套餐id</td></tr><tr><td>» image</td><td>body</td><td>string</td><td>是</td><td></td><td>套餐图片路径</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>套餐名称</td></tr><tr><td>» price</td><td>body</td><td>number</td><td>是</td><td></td><td>套餐价格</td></tr><tr><td>» setmealDishes</td><td>body</td><td>[object]</td><td>是</td><td></td><td>套餐和菜品关联关系</td></tr><tr><td>»» SetmealDish</td><td>body</td><td>object</td><td>否</td><td>SetmealDish</td><td>none</td></tr><tr><td>»»» copies</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>菜品份数</td></tr><tr><td>»»» dishId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>菜品id</td></tr><tr><td>»»» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>关系表主键值</td></tr><tr><td>»»» name</td><td>body</td><td>string</td><td>是</td><td></td><td>菜品名称</td></tr><tr><td>»»» price</td><td>body</td><td>number</td><td>是</td><td></td><td>菜品价格</td></tr><tr><td>»»» setmealId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>套餐id</td></tr><tr><td>» status</td><td>body</td><td>integer(int32)</td><td>否</td><td></td><td>套餐起售状态</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-67">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-22">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="DELETE-批量删除套餐">DELETE 批量删除套餐</h2><p>DELETE /admin/setmeal</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-68">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>ids</td><td>query</td><td>string</td><td>是</td><td></td><td>ids</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-68">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-23">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-新增套餐">POST 新增套餐</h2><p>POST /admin/setmeal</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;setmealDishes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-69">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>SetmealDTO</td><td>none</td></tr><tr><td>» categoryId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>分类id</td></tr><tr><td>» description</td><td>body</td><td>string</td><td>否</td><td></td><td>套餐描述</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>套餐id</td></tr><tr><td>» image</td><td>body</td><td>string</td><td>是</td><td></td><td>套餐图片</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>套餐名称</td></tr><tr><td>» price</td><td>body</td><td>number</td><td>是</td><td></td><td>套餐价格</td></tr><tr><td>» setmealDishes</td><td>body</td><td>[object]</td><td>是</td><td></td><td>套餐包含的菜品</td></tr><tr><td>»» SetmealDish</td><td>body</td><td>object</td><td>否</td><td>SetmealDish</td><td>none</td></tr><tr><td>»»» copies</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>份数</td></tr><tr><td>»»» dishId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>菜品id</td></tr><tr><td>»»» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>套餐和菜品关系id</td></tr><tr><td>»»» name</td><td>body</td><td>string</td><td>是</td><td></td><td>菜品名称</td></tr><tr><td>»»» price</td><td>body</td><td>number</td><td>是</td><td></td><td>菜品价格</td></tr><tr><td>»»» setmealId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>套餐id</td></tr><tr><td>» status</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>套餐状态：1位起售 0为停售</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-69">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-24">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-分页查询">GET 分页查询</h2><p>GET /admin/setmeal/page</p><h3 id="请求参数-70">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>categoryId</td><td>query</td><td>string</td><td>否</td><td></td><td>分类id</td></tr><tr><td>name</td><td>query</td><td>string</td><td>否</td><td></td><td>套餐名称</td></tr><tr><td>page</td><td>query</td><td>string</td><td>是</td><td></td><td>页码</td></tr><tr><td>pageSize</td><td>query</td><td>string</td><td>是</td><td></td><td>每页记录数</td></tr><tr><td>status</td><td>query</td><td>string</td><td>否</td><td></td><td>套餐起售状态</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-70">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-25">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» total</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» records</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» categoryId</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» price</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» description</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» image</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» categoryName</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-套餐起售、停售">POST 套餐起售、停售</h2><p>POST /admin/setmeal/status/{status}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-71">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>path</td><td>string</td><td>是</td><td></td><td>套餐状态，1表示起售，0表示停售</td></tr><tr><td>id</td><td>query</td><td>string</td><td>是</td><td></td><td>套餐id</td></tr><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-71">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-26">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-根据id查询套餐">GET 根据id查询套餐</h2><p>GET /admin/setmeal/{id}</p><h3 id="请求参数-72">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>套餐id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setmealDishes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-72">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-27">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«SetmealVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>SetmealVO</td><td>none</td></tr><tr><td>»» categoryId</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» categoryName</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» description</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» image</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» price</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» setmealDishes</td><td>[object]</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» SetmealDish</td><td>object</td><td>false</td><td>none</td><td>SetmealDish</td><td>none</td></tr><tr><td>»»»» copies</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» dishId</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» id</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» price</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» setmealId</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» status</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» updateTime</td><td>string(date-time)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹管理端-工作台接口">苍穹管理端/工作台接口</h1><h2 id="GET-查询今日运营数据">GET 查询今日运营数据</h2><p>GET /admin/workspace/businessData</p><h3 id="请求参数-73">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;newUsers&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderCompletionRate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;turnover&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unitPrice&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;validOrderCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-73">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-28">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«BusinessDataVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>BusinessDataVO</td><td>none</td></tr><tr><td>»» newUsers</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>新增用户数</td></tr><tr><td>»» orderCompletionRate</td><td>number(double)</td><td>true</td><td>none</td><td></td><td>订单完成率</td></tr><tr><td>»» turnover</td><td>number(double)</td><td>true</td><td>none</td><td></td><td>营业额</td></tr><tr><td>»» unitPrice</td><td>number(double)</td><td>true</td><td>none</td><td></td><td>平均客单价</td></tr><tr><td>»» validOrderCount</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>有效订单数</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查询套餐总览">GET 查询套餐总览</h2><p>GET /admin/workspace/overviewSetmeals</p><h3 id="请求参数-74">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;discontinued&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-74">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-29">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«SetmealOverViewVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>SetmealOverViewVO</td><td>none</td></tr><tr><td>»» discontinued</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>已停售套餐数量</td></tr><tr><td>»» sold</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>已启售套餐数量</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查询菜品总览">GET 查询菜品总览</h2><p>GET /admin/workspace/overviewDishes</p><h3 id="请求参数-75">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;discontinued&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-75">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-30">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«DishOverViewVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>DishOverViewVO</td><td>none</td></tr><tr><td>»» discontinued</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>已停售菜品数量</td></tr><tr><td>»» sold</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>已启售菜品数量</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查询订单管理数据">GET 查询订单管理数据</h2><p>GET /admin/workspace/overviewOrders</p><h3 id="请求参数-76">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allOrders&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cancelledOrders&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;completedOrders&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deliveredOrders&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;waitingOrders&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-76">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-31">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«OrderOverViewVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>OrderOverViewVO</td><td>none</td></tr><tr><td>»» allOrders</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>全部订单</td></tr><tr><td>»» cancelledOrders</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>已取消数量</td></tr><tr><td>»» completedOrders</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>已完成数量</td></tr><tr><td>»» deliveredOrders</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>待派送数量</td></tr><tr><td>»» waitingOrders</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>待接单数量</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹管理端-店铺操作接口">苍穹管理端/店铺操作接口</h1><h2 id="GET-获取营业状态">GET 获取营业状态</h2><p>GET /admin/shop/status</p><h3 id="请求参数-77">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-77">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-32">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«int»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>店铺营业状态：1为营业，0为打烊</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-设置营业状态">PUT 设置营业状态</h2><p>PUT /admin/shop/{status}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-78">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>path</td><td>string</td><td>是</td><td></td><td>店铺营业状态：1为营业，0为打烊</td></tr><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-78">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-33">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹管理端-数据统计相关接口">苍穹管理端/数据统计相关接口</h1><h2 id="GET-导出Excel报表接口">GET 导出Excel报表接口</h2><p>GET /admin/report/export</p><h3 id="请求参数-79">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><h3 id="返回结果-79">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-34">返回数据结构</h3><h2 id="GET-查询销量排名top10接口">GET 查询销量排名top10接口</h2><p>GET /admin/report/top10</p><h3 id="请求参数-80">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>begin</td><td>query</td><td>string</td><td>是</td><td></td><td>开始日期</td></tr><tr><td>end</td><td>query</td><td>string</td><td>是</td><td></td><td>结束日期</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nameList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;numberList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-80">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-35">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«SalesTop10ReportVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>SalesTop10ReportVO</td><td>none</td></tr><tr><td>»» nameList</td><td>string</td><td>true</td><td>none</td><td></td><td>商品名称列表，以逗号分隔</td></tr><tr><td>»» numberList</td><td>string</td><td>true</td><td>none</td><td></td><td>销量列表，以逗号分隔</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-用户统计接口">GET 用户统计接口</h2><p>GET /admin/report/userStatistics</p><h3 id="请求参数-81">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>begin</td><td>query</td><td>string</td><td>是</td><td></td><td>开始日期</td></tr><tr><td>end</td><td>query</td><td>string</td><td>是</td><td></td><td>结束日期</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;newUserList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalUserList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-81">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-36">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«UserReportVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>UserReportVO</td><td>none</td></tr><tr><td>»» dateList</td><td>string</td><td>true</td><td>none</td><td></td><td>日期列表，以逗号分隔</td></tr><tr><td>»» newUserList</td><td>string</td><td>true</td><td>none</td><td></td><td>新增用户数列表，以逗号分隔</td></tr><tr><td>»» totalUserList</td><td>string</td><td>true</td><td>none</td><td></td><td>总用户量列表，以逗号分隔</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-营业额统计接口">GET 营业额统计接口</h2><p>GET /admin/report/turnoverStatistics</p><h3 id="请求参数-82">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>begin</td><td>query</td><td>string</td><td>是</td><td></td><td>开始日期</td></tr><tr><td>end</td><td>query</td><td>string</td><td>是</td><td></td><td>结束日期</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;turnoverList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-82">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-37">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«TurnoverReportVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>TurnoverReportVO</td><td>none</td></tr><tr><td>»» dateList</td><td>string</td><td>true</td><td>none</td><td></td><td>日期列表，日期之间以逗号分隔</td></tr><tr><td>»» turnoverList</td><td>string</td><td>true</td><td>none</td><td></td><td>营业额列表，营业额之间以逗号分隔</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-订单统计接口">GET 订单统计接口</h2><p>GET /admin/report/ordersStatistics</p><h3 id="请求参数-83">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>begin</td><td>query</td><td>string</td><td>是</td><td></td><td>开始日期</td></tr><tr><td>end</td><td>query</td><td>string</td><td>是</td><td></td><td>结束日期</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dateList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderCompletionRate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderCountList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalOrderCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;validOrderCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;validOrderCountList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-83">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-38">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«OrderReportVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>OrderReportVO</td><td>none</td></tr><tr><td>»» dateList</td><td>string</td><td>true</td><td>none</td><td></td><td>日期列表，以逗号分隔</td></tr><tr><td>»» orderCompletionRate</td><td>number(double)</td><td>true</td><td>none</td><td></td><td>订单完成率</td></tr><tr><td>»» orderCountList</td><td>string</td><td>true</td><td>none</td><td></td><td>订单数列表，以逗号分隔</td></tr><tr><td>»» totalOrderCount</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>订单总数</td></tr><tr><td>»» validOrderCount</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>有效订单数</td></tr><tr><td>»» validOrderCountList</td><td>string</td><td>true</td><td>none</td><td></td><td>有效订单数列表，以逗号分隔</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹管理端-菜品相关接口">苍穹管理端/菜品相关接口</h1><h2 id="PUT-修改菜品">PUT 修改菜品</h2><p>PUT /admin/dish</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-84">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>DishDTO</td><td>none</td></tr><tr><td>» categoryId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>none</td></tr><tr><td>» description</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» flavors</td><td>body</td><td>[object]</td><td>否</td><td></td><td>none</td></tr><tr><td>»» DishFlavor</td><td>body</td><td>object</td><td>否</td><td>DishFlavor</td><td>none</td></tr><tr><td>»»» dishId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>»»» value</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>none</td></tr><tr><td>» image</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» price</td><td>body</td><td>number</td><td>是</td><td></td><td>none</td></tr><tr><td>» status</td><td>body</td><td>integer(int32)</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-84">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-39">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="DELETE-批量删除菜品">DELETE 批量删除菜品</h2><p>DELETE /admin/dish</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-85">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>ids</td><td>query</td><td>string</td><td>是</td><td></td><td>菜品id，之间用逗号分隔</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-85">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-40">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-新增菜品">POST 新增菜品</h2><p>POST /admin/dish</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-86">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>DishDTO</td><td>none</td></tr><tr><td>» categoryId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>分类id</td></tr><tr><td>» description</td><td>body</td><td>string</td><td>否</td><td></td><td>菜品描述</td></tr><tr><td>» flavors</td><td>body</td><td>[object]</td><td>否</td><td></td><td>口味</td></tr><tr><td>»» DishFlavor</td><td>body</td><td>object</td><td>否</td><td>DishFlavor</td><td>none</td></tr><tr><td>»»» dishId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>菜品id</td></tr><tr><td>»»» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>口味id</td></tr><tr><td>»»» name</td><td>body</td><td>string</td><td>是</td><td></td><td>口味名称</td></tr><tr><td>»»» value</td><td>body</td><td>string</td><td>是</td><td></td><td>口味值</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>菜品id</td></tr><tr><td>» image</td><td>body</td><td>string</td><td>是</td><td></td><td>菜品图片路径</td></tr><tr><td>» name</td><td>body</td><td>string</td><td>是</td><td></td><td>菜品名称</td></tr><tr><td>» price</td><td>body</td><td>number</td><td>是</td><td></td><td>菜品价格</td></tr><tr><td>» status</td><td>body</td><td>integer(int32)</td><td>否</td><td></td><td>菜品状态：1为起售，0为停售</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-86">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-41">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-根据id查询菜品">GET 根据id查询菜品</h2><p>GET /admin/dish/{id}</p><h3 id="请求参数-87">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>菜品id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-87">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-42">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«DishVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>DishVO</td><td>none</td></tr><tr><td>»» categoryId</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» categoryName</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» description</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» flavors</td><td>[object]</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» DishFlavor</td><td>object</td><td>false</td><td>none</td><td>DishFlavor</td><td>none</td></tr><tr><td>»»»» dishId</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» id</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» value</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» image</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» price</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» status</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» updateTime</td><td>string(date-time)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-根据分类id查询菜品">GET 根据分类id查询菜品</h2><p>GET /admin/dish/list</p><h3 id="请求参数-88">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>categoryId</td><td>query</td><td>string</td><td>是</td><td></td><td>分类id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-88">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-43">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«List«Dish»»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» Dish</td><td>object</td><td>false</td><td>none</td><td>Dish</td><td>none</td></tr><tr><td>»»» categoryId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» description</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» image</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» price</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-菜品分页查询">GET 菜品分页查询</h2><p>GET /admin/dish/page</p><h3 id="请求参数-89">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>categoryId</td><td>query</td><td>string</td><td>否</td><td></td><td>分类id</td></tr><tr><td>name</td><td>query</td><td>string</td><td>否</td><td></td><td>菜品名称</td></tr><tr><td>page</td><td>query</td><td>string</td><td>是</td><td></td><td>页码</td></tr><tr><td>pageSize</td><td>query</td><td>string</td><td>是</td><td></td><td>每页记录数</td></tr><tr><td>status</td><td>query</td><td>string</td><td>否</td><td></td><td>分类状态</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-89">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-44">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» total</td><td>number</td><td>true</td><td>none</td><td></td><td>总记录数</td></tr><tr><td>»» records</td><td>[object]</td><td>true</td><td>none</td><td></td><td>当前页数据</td></tr><tr><td>»»» id</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» categoryId</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» price</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» image</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» description</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» categoryName</td><td>string</td><td>true</td><td>none</td><td></td><td>分类名称</td></tr></tbody></table><h2 id="POST-菜品起售、停售">POST 菜品起售、停售</h2><p>POST /admin/dish/status/{status}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-90">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>path</td><td>string</td><td>是</td><td></td><td>菜品状态：1为起售，0为停售</td></tr><tr><td>id</td><td>query</td><td>string</td><td>是</td><td></td><td>菜品id</td></tr><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-90">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-45">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹管理端-订单管理接口">苍穹管理端/订单管理接口</h1><h2 id="PUT-取消订单">PUT 取消订单</h2><p>PUT /admin/order/cancel</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cancelReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-91">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>OrdersCancelDTO</td><td>none</td></tr><tr><td>» cancelReason</td><td>body</td><td>string</td><td>是</td><td></td><td>订单取消原因</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>订单id</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-91">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-46">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-各个状态的订单数量统计">GET 各个状态的订单数量统计</h2><p>GET /admin/order/statistics</p><h3 id="请求参数-92">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;confirmed&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deliveryInProgress&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;toBeConfirmed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-92">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-47">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«OrderStatisticsVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>OrderStatisticsVO</td><td>none</td></tr><tr><td>»» confirmed</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>待派送数量</td></tr><tr><td>»» deliveryInProgress</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>派送中数量</td></tr><tr><td>»» toBeConfirmed</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>待接单数量</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-完成订单">PUT 完成订单</h2><p>PUT /admin/order/complete/{id}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-93">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>订单id</td></tr><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-93">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-48">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-拒单">PUT 拒单</h2><p>PUT /admin/order/rejection</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rejectionReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-94">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>OrdersRejectionDTO</td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>订单id</td></tr><tr><td>» rejectionReason</td><td>body</td><td>string</td><td>是</td><td></td><td>拒单原因</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-94">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-49">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-接单">PUT 接单</h2><p>PUT /admin/order/confirm</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-95">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>OrdersConfirmDTO</td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>订单id</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-95">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-50">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查询订单详情">GET 查询订单详情</h2><p>GET /admin/order/details/{id}</p><h3 id="请求参数-96">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>订单id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;addressBookId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cancelReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cancelTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkoutTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deliveryStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;estimatedDeliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderDetailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orderId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderDishes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;packAmount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payMethod&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejectionReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tablewareNumber&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tablewareStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-96">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-51">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«OrderVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td>OrderVO</td><td>none</td></tr><tr><td>»» address</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» addressBookId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» amount</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cancelReason</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cancelTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» checkoutTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» consignee</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» deliveryStatus</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» deliveryTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» estimatedDeliveryTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» number</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» orderDetailList</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» OrderDetail</td><td>object</td><td>false</td><td>none</td><td>OrderDetail</td><td>none</td></tr><tr><td>»»»» amount</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» dishFlavor</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» dishId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» image</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» number</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» orderId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» setmealId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» orderDishes</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» orderTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» packAmount</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» payMethod</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» payStatus</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» phone</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» rejectionReason</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» remark</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» tablewareNumber</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» tablewareStatus</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» userId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» userName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-派送订单">PUT 派送订单</h2><p>PUT /admin/order/delivery/{id}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-97">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>订单id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-97">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-52">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-订单搜索">GET 订单搜索</h2><p>GET /admin/order/conditionSearch</p><h3 id="请求参数-98">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>beginTime</td><td>query</td><td>string</td><td>否</td><td></td><td>beginTime</td></tr><tr><td>endTime</td><td>query</td><td>string</td><td>否</td><td></td><td>endTime</td></tr><tr><td>number</td><td>query</td><td>string</td><td>否</td><td></td><td>number</td></tr><tr><td>page</td><td>query</td><td>string</td><td>是</td><td></td><td>page</td></tr><tr><td>pageSize</td><td>query</td><td>string</td><td>是</td><td></td><td>pageSize</td></tr><tr><td>phone</td><td>query</td><td>string</td><td>否</td><td></td><td>phone</td></tr><tr><td>status</td><td>query</td><td>string</td><td>否</td><td></td><td>status</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;addressBookId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orderTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;checkoutTime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;payMethod&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;payStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cancelReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rejectionReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cancelTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;estimatedDeliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deliveryStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;packAmount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tablewareNumber&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tablewareStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orderDishes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-98">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-53">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» total</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» records</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» number</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» userId</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» addressBookId</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» orderTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» checkoutTime</td><td>null¦null</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» payMethod</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» payStatus</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» amount</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» remark</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» userName</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» phone</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» address</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» consignee</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» cancelReason</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» rejectionReason</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» cancelTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» estimatedDeliveryTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» deliveryStatus</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» deliveryTime</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» packAmount</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» tablewareNumber</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» tablewareStatus</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» orderDishes</td><td>string</td><td>true</td><td>none</td><td></td><td>订单包含的菜品，以字符串形式展示</td></tr></tbody></table><h1 id="苍穹管理端-通用接口">苍穹管理端/通用接口</h1><h2 id="POST-文件上传">POST 文件上传</h2><p>POST /admin/common/upload</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">file:</span> <span class="string">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-99">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td></td><td>none</td></tr><tr><td>» file</td><td>body</td><td>string(binary)</td><td>是</td><td></td><td>文件</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-99">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-54">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>true</td><td>none</td><td></td><td>文件上传路径</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-分类接口">苍穹用户端/C端-分类接口</h1><h2 id="GET-条件查询">GET 条件查询</h2><p>GET /user/category/list</p><h3 id="请求参数-100">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>query</td><td>string</td><td>否</td><td></td><td>分类类型：1 菜品分类 2 套餐分类</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-100">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-55">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«List«Category»»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» Category</td><td>object</td><td>false</td><td>none</td><td>Category</td><td>none</td></tr><tr><td>»»» createTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» sort</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» type</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-地址簿接口">苍穹用户端/C端-地址簿接口</h1><h2 id="POST-新增地址">POST 新增地址</h2><p>POST /user/addressBook</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cityCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;districtCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;districtName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provinceCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-101">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>AddressBook</td><td>none</td></tr><tr><td>» cityCode</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» cityName</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» consignee</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» detail</td><td>body</td><td>string</td><td>是</td><td></td><td>详细地址</td></tr><tr><td>» districtCode</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» districtName</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>none</td></tr><tr><td>» isDefault</td><td>body</td><td>integer(int32)</td><td>否</td><td></td><td>none</td></tr><tr><td>» label</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» phone</td><td>body</td><td>string</td><td>是</td><td></td><td>手机号</td></tr><tr><td>» provinceCode</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» provinceName</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» sex</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» userId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-101">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-56">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-根据id修改地址">PUT 根据id修改地址</h2><p>PUT /user/addressBook</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;cityCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;districtCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;districtName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provinceCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-102">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>AddressBook</td><td>none</td></tr><tr><td>» cityCode</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» cityName</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» consignee</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» detail</td><td>body</td><td>string</td><td>是</td><td></td><td>详细地址</td></tr><tr><td>» districtCode</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» districtName</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>主键值</td></tr><tr><td>» isDefault</td><td>body</td><td>integer(int32)</td><td>否</td><td></td><td>none</td></tr><tr><td>» label</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» phone</td><td>body</td><td>string</td><td>是</td><td></td><td>手机号</td></tr><tr><td>» provinceCode</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» provinceName</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr><tr><td>» sex</td><td>body</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>» userId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-102">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-57">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="DELETE-根据id删除地址">DELETE 根据id删除地址</h2><p>DELETE /user/addressBook</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-103">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>query</td><td>string</td><td>是</td><td></td><td>地址id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-103">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-58">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查询当前登录用户的所有地址信息">GET 查询当前登录用户的所有地址信息</h2><p>GET /user/addressBook/list</p><h3 id="请求参数-104">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provinceCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cityCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;districtCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;districtName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-104">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-59">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» userId</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» consignee</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» phone</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» sex</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» provinceCode</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» provinceName</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cityCode</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cityName</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» districtCode</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» districtName</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» detail</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» label</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» isDefault</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查询默认地址">GET 查询默认地址</h2><p>GET /user/addressBook/default</p><h3 id="请求参数-105">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cityCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;districtCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;districtName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provinceCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-105">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-60">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«AddressBook»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td>AddressBook</td><td>none</td></tr><tr><td>»» cityCode</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cityName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» consignee</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» detail</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» districtCode</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» districtName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» isDefault</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» label</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» phone</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» provinceCode</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» provinceName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» sex</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» userId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-设置默认地址">PUT 设置默认地址</h2><p>PUT /user/addressBook/default</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-106">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>AddressBook</td><td>none</td></tr><tr><td>» id</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>地址id</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-106">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-61">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-根据id查询地址">GET 根据id查询地址</h2><p>GET /user/addressBook/{id}</p><h3 id="请求参数-107">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>地址id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cityCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provinceCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;districtName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;districtCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-107">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-62">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» phone</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» consignee</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» userId</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cityCode</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» provinceName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» provinceCode</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» sex</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» districtName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» districtCode</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cityName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» isDefault</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» label</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» detail</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-套餐浏览接口">苍穹用户端/C端-套餐浏览接口</h1><h2 id="GET-根据分类id查询套餐">GET 根据分类id查询套餐</h2><p>GET /user/setmeal/list</p><h3 id="请求参数-108">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>categoryId</td><td>query</td><td>string</td><td>是</td><td></td><td>分类id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateUser&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-108">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-63">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«List«Setmeal»»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» Setmeal</td><td>object</td><td>false</td><td>none</td><td>Setmeal</td><td>none</td></tr><tr><td>»»» categoryId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» description</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» image</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» price</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateUser</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-根据套餐id查询包含的菜品">GET 根据套餐id查询包含的菜品</h2><p>GET /user/setmeal/dish/{id}</p><h3 id="请求参数-109">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>套餐id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;copies&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-109">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-64">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«List«DishItemVO»»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>[object]</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»» DishItemVO</td><td>object</td><td>false</td><td>none</td><td>DishItemVO</td><td>none</td></tr><tr><td>»»» copies</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>份数</td></tr><tr><td>»»» description</td><td>string</td><td>true</td><td>none</td><td></td><td>菜品描述</td></tr><tr><td>»»» image</td><td>string</td><td>true</td><td>none</td><td></td><td>菜品图片路径</td></tr><tr><td>»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>菜品名称</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-店铺操作接口">苍穹用户端/C端-店铺操作接口</h1><h2 id="GET-获取营业状态-2">GET 获取营业状态</h2><p>GET /user/shop/status</p><h3 id="请求参数-110">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-110">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-65">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«int»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>店铺状态：1为营业，0为打烊</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-用户接口">苍穹用户端/C端-用户接口</h1><h2 id="POST-登录-2">POST 登录</h2><p>POST /user/user/login</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-111">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>UserLoginDTO</td><td>none</td></tr><tr><td>» code</td><td>body</td><td>string</td><td>是</td><td></td><td>微信授权码</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;openid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-111">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-66">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«UserLoginVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>UserLoginVO</td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>用户id</td></tr><tr><td>»» openid</td><td>string</td><td>true</td><td>none</td><td></td><td>微信用户openid</td></tr><tr><td>»» token</td><td>string</td><td>true</td><td>none</td><td></td><td>jwt令牌</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-退出">POST 退出</h2><p>POST /user/user/logout</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-112">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>empty object</td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-112">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-67">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-菜品浏览接口">苍穹用户端/C端-菜品浏览接口</h1><h2 id="GET-根据分类id查询菜品-2">GET 根据分类id查询菜品</h2><p>GET /user/dish/list</p><h3 id="请求参数-113">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>categoryId</td><td>query</td><td>string</td><td>是</td><td></td><td>分类id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flavors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-113">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-68">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«List«DishVO»»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» DishVO</td><td>object</td><td>false</td><td>none</td><td>DishVO</td><td>none</td></tr><tr><td>»»» categoryId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» categoryName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» description</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» flavors</td><td>[object]</td><td>false</td><td>none</td><td></td><td>菜品口味</td></tr><tr><td>»»»» DishFlavor</td><td>object</td><td>false</td><td>none</td><td>DishFlavor</td><td>none</td></tr><tr><td>»»»»» dishId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»»» value</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» image</td><td>string</td><td>false</td><td>none</td><td></td><td>菜品图片路径</td></tr><tr><td>»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>菜品名称</td></tr><tr><td>»»» price</td><td>number</td><td>false</td><td>none</td><td></td><td>价格</td></tr><tr><td>»»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» updateTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-订单接口">苍穹用户端/C端-订单接口</h1><h2 id="GET-催单">GET 催单</h2><p>GET /user/order/reminder/{id}</p><h3 id="请求参数-114">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>订单id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-114">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-69">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-再来一单">POST 再来一单</h2><p>POST /user/order/repetition/{id}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-115">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>订单id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-115">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-70">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-历史订单查询">GET 历史订单查询</h2><p>GET /user/order/historyOrders</p><h3 id="请求参数-116">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>page</td><td>query</td><td>string</td><td>是</td><td></td><td>页面</td></tr><tr><td>pageSize</td><td>query</td><td>string</td><td>是</td><td></td><td>每页记录数</td></tr><tr><td>status</td><td>query</td><td>string</td><td>否</td><td></td><td>订单状态</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;addressBookId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orderTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;checkoutTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;payMethod&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;payStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cancelReason&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rejectionReason&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cancelTime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;estimatedDeliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deliveryStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deliveryTime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;packAmount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tablewareNumber&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tablewareStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orderDetailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;orderId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-116">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-71">返回数据结构</h3><p>状态码 <strong>200</strong></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» total</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» records</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» number</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» status</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» userId</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» addressBookId</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» orderTime</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» checkoutTime</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» payMethod</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» payStatus</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» amount</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» remark</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» userName</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» phone</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» address</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» consignee</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» cancelReason</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» rejectionReason</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» cancelTime</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» estimatedDeliveryTime</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» deliveryStatus</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» deliveryTime</td><td>null</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» packAmount</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» tablewareNumber</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» tablewareStatus</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» orderDetailList</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» id</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» name</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» orderId</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» dishId</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» setmealId</td><td>null</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» dishFlavor</td><td>null¦null</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» number</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» amount</td><td>number</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» image</td><td>string</td><td>true</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-取消订单-2">PUT 取消订单</h2><p>PUT /user/order/cancel/{id}</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-117">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>订单id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-117">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-72">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查询订单详情-2">GET 查询订单详情</h2><p>GET /user/order/orderDetail/{id}</p><h3 id="请求参数-118">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>path</td><td>string</td><td>是</td><td></td><td>订单id</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;addressBookId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cancelReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cancelTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkoutTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;consignee&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deliveryStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;estimatedDeliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderDetailList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orderId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;packAmount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payMethod&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejectionReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tablewareNumber&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tablewareStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-118">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-73">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«OrderVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>false</td><td>none</td><td>OrderVO</td><td>none</td></tr><tr><td>»» address</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» addressBookId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» amount</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cancelReason</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» cancelTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» checkoutTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» consignee</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» deliveryStatus</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» deliveryTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» estimatedDeliveryTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» number</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» orderDetailList</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» OrderDetail</td><td>object</td><td>false</td><td>none</td><td>OrderDetail</td><td>none</td></tr><tr><td>»»»» amount</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» dishFlavor</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» dishId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» image</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» number</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» orderId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»»» setmealId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» orderTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» packAmount</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» payMethod</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» payStatus</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» phone</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» rejectionReason</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» remark</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» status</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» tablewareNumber</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» tablewareStatus</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» userId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» userName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-用户下单">POST 用户下单</h2><p>POST /user/order/submit</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;addressBookId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deliveryStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;estimatedDeliveryTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packAmount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payMethod&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tablewareNumber&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tablewareStatus&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-119">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>OrdersSubmitDTO</td><td>none</td></tr><tr><td>» addressBookId</td><td>body</td><td>integer(int64)</td><td>是</td><td></td><td>地址簿id</td></tr><tr><td>» amount</td><td>body</td><td>number</td><td>是</td><td></td><td>总金额</td></tr><tr><td>» deliveryStatus</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>配送状态：  1立即送出  0选择具体时间</td></tr><tr><td>» estimatedDeliveryTime</td><td>body</td><td>string</td><td>是</td><td></td><td>预计送达时间</td></tr><tr><td>» packAmount</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>打包费</td></tr><tr><td>» payMethod</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>付款方式</td></tr><tr><td>» remark</td><td>body</td><td>string</td><td>是</td><td></td><td>备注</td></tr><tr><td>» tablewareNumber</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>餐具数量</td></tr><tr><td>» tablewareStatus</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>餐具数量状态  1按餐量提供  0选择具体数量</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderAmount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-119">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-74">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«OrderSubmitVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>OrderSubmitVO</td><td>none</td></tr><tr><td>»» id</td><td>integer(int64)</td><td>true</td><td>none</td><td></td><td>订单id</td></tr><tr><td>»» orderAmount</td><td>number</td><td>true</td><td>none</td><td></td><td>订单金额</td></tr><tr><td>»» orderNumber</td><td>string</td><td>true</td><td>none</td><td></td><td>订单号</td></tr><tr><td>»» orderTime</td><td>string(date-time)</td><td>true</td><td>none</td><td></td><td>下单时间</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="PUT-订单支付">PUT 订单支付</h2><p>PUT /user/order/payment</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;orderNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payMethod&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-120">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>OrdersPaymentDTO</td><td>none</td></tr><tr><td>» orderNumber</td><td>body</td><td>string</td><td>是</td><td></td><td>订单号</td></tr><tr><td>» payMethod</td><td>body</td><td>integer(int32)</td><td>是</td><td></td><td>支付方式</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nonceStr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paySign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeStamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;signType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;packageStr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-120">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-75">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«OrderPaymentVO»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>object</td><td>true</td><td>none</td><td>OrderPaymentVO</td><td>none</td></tr><tr><td>»» nonceStr</td><td>string(date-time)</td><td>true</td><td>none</td><td></td><td>随机字符串</td></tr><tr><td>»» paySign</td><td>string</td><td>true</td><td>none</td><td></td><td>签名</td></tr><tr><td>»» timeStamp</td><td>string</td><td>true</td><td>none</td><td></td><td>时间戳</td></tr><tr><td>»» signType</td><td>string</td><td>true</td><td>none</td><td></td><td>签名算法</td></tr><tr><td>»» packageStr</td><td>string</td><td>true</td><td>none</td><td></td><td>统一下单接口返回的 prepay_id 参数值</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="苍穹用户端-C端-购物车接口">苍穹用户端/C端-购物车接口</h1><h2 id="POST-删除购物车中一个商品">POST 删除购物车中一个商品</h2><p>POST /user/shoppingCart/sub</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-121">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>ShoppingCartDTO</td><td>none</td></tr><tr><td>» dishFlavor</td><td>body</td><td>string</td><td>否</td><td></td><td>口味</td></tr><tr><td>» dishId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>菜品id</td></tr><tr><td>» setmealId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>套餐id</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-121">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-76">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="GET-查看购物车">GET 查看购物车</h2><p>GET /user/shoppingCart/list</p><h3 id="请求参数-122">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-08-24T14:15:22Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-122">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-77">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«List«ShoppingCart»»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>[object]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»» ShoppingCart</td><td>object</td><td>false</td><td>none</td><td>ShoppingCart</td><td>none</td></tr><tr><td>»»» amount</td><td>number</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» createTime</td><td>string(date-time)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» dishFlavor</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» dishId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» id</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» image</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» number</td><td>integer(int32)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» setmealId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>»»» userId</td><td>integer(int64)</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="POST-添加购物车">POST 添加购物车</h2><p>POST /user/shoppingCart/add</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dishFlavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dishId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;setmealId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="请求参数-123">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>object</td><td>否</td><td>ShoppingCartDTO</td><td>none</td></tr><tr><td>» dishFlavor</td><td>body</td><td>string</td><td>否</td><td></td><td>口味</td></tr><tr><td>» dishId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>菜品id</td></tr><tr><td>» setmealId</td><td>body</td><td>integer(int64)</td><td>否</td><td></td><td>套餐id</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-123">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-78">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="DELETE-清空购物车">DELETE 清空购物车</h2><p>DELETE /user/shoppingCart/clean</p><blockquote><p>Body 请求参数</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="请求参数-124">请求参数</h3><table><thead><tr><th>名称</th><th>位置</th><th>类型</th><th>必选</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>header</td><td>string</td><td>是</td><td></td><td>none</td></tr><tr><td>body</td><td>body</td><td>string</td><td>否</td><td></td><td>none</td></tr></tbody></table><blockquote><p>返回示例</p></blockquote><blockquote><p>200 Response</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回结果-124">返回结果</h3><table><thead><tr><th>状态码</th><th>状态码含义</th><th>说明</th><th>数据模型</th></tr></thead><tbody><tr><td>200</td><td><a href="https://tools.ietf.org/html/rfc7231#section-6.3.1">OK</a></td><td>成功</td><td>Inline</td></tr></tbody></table><h3 id="返回数据结构-79">返回数据结构</h3><p>状态码 <strong>200</strong></p><p><em>R«string»</em></p><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>» code</td><td>integer(int32)</td><td>true</td><td>none</td><td></td><td>none</td></tr><tr><td>» data</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>» msg</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h1 id="数据模型">数据模型</h1><h2 id="tocS_RecommendSearch">RecommendSearch</h2><p><a id="schemarecommendsearch"></a><br><a id="schema_RecommendSearch"></a><br><a id="tocSrecommendsearch"></a><br><a id="tocsrecommendsearch"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;provinceList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cityList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typeList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;levelList&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new ArrayList&lt;&gt;()&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性">属性</h3><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>provinceList</td><td>[string]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>cityList</td><td>[string]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>typeList</td><td>[string]</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>levelList</td><td>[string]</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="tocS_UserFootPrint">UserFootPrint</h2><p><a id="schemauserfootprint"></a><br><a id="schema_UserFootPrint"></a><br><a id="tocSuserfootprint"></a><br><a id="tocsuserfootprint"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spotName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性-2">属性</h3><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>userId</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>provinceName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>cityName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>spotName</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="tocS_UserLoginDTO">UserLoginDTO</h2><p><a id="schemauserlogindto"></a><br><a id="schema_UserLoginDTO"></a><br><a id="tocSuserlogindto"></a><br><a id="tocsuserlogindto"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shearCaptcha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性-3">属性</h3><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>false</td><td>none</td><td></td><td>用户账号，用户名</td></tr><tr><td>password</td><td>string</td><td>false</td><td>none</td><td></td><td>用户账号密码</td></tr><tr><td>shearCaptcha</td><td>string</td><td>false</td><td>none</td><td></td><td>验证码</td></tr><tr><td>userid</td><td>string</td><td>false</td><td>none</td><td></td><td>用户主键</td></tr></tbody></table><h2 id="tocS_Object">Object</h2><p><a id="schemaobject"></a><br><a id="schema_Object"></a><br><a id="tocSobject"></a><br><a id="tocsobject"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性-4">属性</h3><p><em>None</em></p><h2 id="tocS_UserInfo">UserInfo</h2><p><a id="schemauserinfo"></a><br><a id="schema_UserInfo"></a><br><a id="tocSuserinfo"></a><br><a id="tocsuserinfo"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性-5">属性</h3><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>userid</td><td>string</td><td>false</td><td>none</td><td></td><td>用户主键</td></tr><tr><td>username</td><td>string</td><td>false</td><td>none</td><td></td><td>用户账号，用户名</td></tr><tr><td>password</td><td>string</td><td>false</td><td>none</td><td></td><td>用户账号密码</td></tr></tbody></table><h2 id="tocS_Student">Student</h2><p><a id="schemastudent"></a><br><a id="schema_Student"></a><br><a id="tocSstudent"></a><br><a id="tocsstudent"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;place&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性-6">属性</h3><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>name</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>money</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr><tr><td>place</td><td>string</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table><h2 id="tocS_AjaxResult">AjaxResult</h2><p><a id="schemaajaxresult"></a><br><a id="schema_AjaxResult"></a><br><a id="tocSajaxresult"></a><br><a id="tocsajaxresult"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="属性-7">属性</h3><table><thead><tr><th>名称</th><th>类型</th><th>必选</th><th>约束</th><th>中文名</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>object</td><td>false</td><td>none</td><td></td><td>none</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">旅牛网接口文档</summary>
    
    
    
    <category term="项目" scheme="https://u7u7.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="shell" scheme="https://u7u7.top/tags/shell/"/>
    
    <category term="http" scheme="https://u7u7.top/tags/http/"/>
    
    <category term="javascript" scheme="https://u7u7.top/tags/javascript/"/>
    
    <category term="ruby" scheme="https://u7u7.top/tags/ruby/"/>
    
    <category term="python" scheme="https://u7u7.top/tags/python/"/>
    
    <category term="php" scheme="https://u7u7.top/tags/php/"/>
    
    <category term="java" scheme="https://u7u7.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>GoC</title>
    <link href="https://u7u7.top/posts/Goc.html"/>
    <id>https://u7u7.top/posts/Goc.html</id>
    <published>2024-06-06T05:00:25.000Z</published>
    <updated>2025-08-20T03:10:46.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOC练习题">GOC练习题</h1><h2 id="5月17号训练">5月17号训练</h2><h3 id="正五边形">正五边形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">hide</span>().<span class="built_in">c</span>(<span class="number">14</span>).<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p. <span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">72</span>);</span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十二边形">十二边形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">14</span>).<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">120</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五角星">五角星</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p. <span class="built_in">hide</span>().<span class="built_in">c</span>(<span class="number">14</span>).<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">144</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空心五角星">空心五角星</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p. <span class="built_in">hide</span>().<span class="built_in">c</span>(<span class="number">14</span>).<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">144</span>).<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">lt</span>(<span class="number">72</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空心十角星">空心十角星</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p. <span class="built_in">hide</span>().<span class="built_in">c</span>(<span class="number">14</span>).<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">72</span>).<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">lt</span>(<span class="number">36</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十五色十五边形">十五色十五边形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p. <span class="built_in">hide</span>().<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">c</span>(i).<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">rt</span>(<span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十五色针">十五色针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p. <span class="built_in">hide</span>().<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">        p. <span class="built_in">down</span>().<span class="built_in">c</span>(i).<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">up</span>();</span><br><span class="line">        p.<span class="built_in">bk</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="彩色回文">彩色回文</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p. <span class="built_in">hide</span>().<span class="built_in">size</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">c</span>(i).<span class="built_in">fd</span>(i*<span class="number">10</span>+<span class="number">10</span>).<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="花朵">花朵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p. <span class="built_in">speed</span>(<span class="number">9</span>).<span class="built_in">picU</span>(<span class="number">0</span>).<span class="built_in">up</span>();<span class="comment">//设置画图方向随着笔头</span></span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">a</span>(<span class="number">100</span>,<span class="number">180</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//画叶于下半部分</span></span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,<span class="number">-100</span>).<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">a</span>(<span class="number">100</span>,<span class="number">90</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//完成右边叶子上半部分 1/4个圆</span></span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-100</span>,<span class="number">-100</span>).<span class="built_in">a</span>(<span class="number">100</span>,<span class="number">90</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//完成左边叶于上半部分</span></span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,<span class="number">-200</span>).<span class="built_in">down</span>().<span class="built_in">fd</span>(<span class="number">300</span>).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="comment">//移动到花的尾端向上画茎</span></span><br><span class="line">    <span class="comment">//画花朵 十二个正十二边形</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">12</span>;j++)&#123;</span><br><span class="line">            p. <span class="built_in">fd</span>(<span class="number">25</span>).<span class="built_in">rt</span>(<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">30</span>);<span class="comment">//每个正十二边形差角</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5月23号训练">5月23号训练</h2><h3 id="32968-写数字"><strong>32968.写数字</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">hide</span>().<span class="built_in">size</span>(<span class="number">20</span>);</span><br><span class="line">    p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">c</span>(<span class="number">7</span>).<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">9</span>).<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">c</span>(<span class="number">11</span>).<span class="built_in">fd</span>(<span class="number">50</span>);</span><br><span class="line">    p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">c</span>(<span class="number">8</span>).<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">c</span>(<span class="number">4</span>).<span class="built_in">fd</span>(<span class="number">50</span>);</span><br><span class="line">    p.<span class="built_in">up</span>().<span class="built_in">bk</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">down</span>().<span class="built_in">c</span>(<span class="number">13</span>).<span class="built_in">bk</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="79208-有色正多边形"><strong>79208.有色正多边形</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin &gt;&gt; a&gt;&gt;b;</span><br><span class="line">    p.<span class="built_in">hide</span>().<span class="built_in">c</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">360.0</span>/a).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32971-圆堆堆"><strong>32971.圆堆堆</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">up</span>().<span class="built_in">size</span>(<span class="number">10</span>).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">c</span>(<span class="number">3</span>-i).<span class="built_in">o</span>(<span class="number">50</span>).<span class="built_in">fd</span>(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">bk</span>(i*<span class="number">100</span>).<span class="built_in">lt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32972-冰壶场地"><strong>32972.冰壶场地</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">r</span>(<span class="number">600</span>,<span class="number">140</span>,<span class="number">1</span>).<span class="built_in">text</span>(<span class="string">&quot;我爱编程&quot;</span>,<span class="number">2</span>,<span class="number">50</span>).<span class="built_in">hide</span>();</span><br><span class="line">    p. <span class="built_in">moveTo</span>(<span class="number">450</span>/<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    p. <span class="built_in">oo</span>(<span class="number">40</span>).<span class="built_in">oo</span>(<span class="number">30</span>, <span class="number">15</span>).<span class="built_in">oo</span>(<span class="number">22</span>,<span class="number">1</span>).<span class="built_in">oo</span>(<span class="number">12</span>,<span class="number">15</span>);</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-450</span>/<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">40</span>).<span class="built_in">oo</span>(<span class="number">30</span>, <span class="number">15</span>).<span class="built_in">oo</span>(<span class="number">22</span>,<span class="number">1</span>).<span class="built_in">oo</span>(<span class="number">12</span>,<span class="number">15</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    c = a*a+b*b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(a).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b).<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断C是否为正整数</span></span><br><span class="line">    <span class="type">int</span> res =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">150</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c/i==i) res=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">1</span>)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b).<span class="built_in">lineTo</span>(<span class="number">0</span>,a).<span class="built_in">lineTo</span>(a,a+b).<span class="built_in">lineTo</span>(a+b,b).<span class="built_in">lineTo</span>(b,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7811-变色花"><strong>7811.变色花</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">picU</span>(<span class="number">0</span>).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">ee</span>(<span class="number">30</span>,<span class="number">80</span>,<span class="number">14</span>).<span class="built_in">rt</span>(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">50</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32977-柱状成绩单"><strong>32977.柱状成绩单</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> score[<span class="number">8</span>],max;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">        cin&gt;&gt;score[i];</span><br><span class="line">        <span class="keyword">if</span>(max&lt;score[i]) max=score[i]; <span class="comment">//找到最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">-80</span>*<span class="number">4</span>+<span class="number">80</span>*(i<span class="number">-1</span>),score[i]/<span class="number">2</span>);<span class="comment">//移动到柱状图最中间画矩形</span></span><br><span class="line">        <span class="comment">//score&gt;=180 绿</span></span><br><span class="line">        <span class="keyword">if</span>(score[i] &gt;= <span class="number">180</span>)&#123;</span><br><span class="line">            p.<span class="built_in">rr</span>(<span class="number">50</span>,score[i],<span class="number">12</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">rr</span>(<span class="number">50</span>,score[i],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(score[i] == max)&#123;</span><br><span class="line">            p.<span class="built_in">up</span>().<span class="built_in">fd</span>(score[i]/<span class="number">2</span>+<span class="number">30</span>).<span class="built_in">oo</span>(<span class="number">30</span>,<span class="number">12</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4年级训练">3-4年级训练</h2><h3 id="7744-波浪线"><strong>7744.波浪线</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">rt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">lt</span>(<span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7751-彩色线条"><strong>7751.彩色线条</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">30</span>*i,<span class="number">0</span>);</span><br><span class="line">        p.<span class="built_in">c</span>(i).<span class="built_in">size</span>(i+<span class="number">1</span>).<span class="built_in">fd</span>(<span class="number">150</span>).<span class="built_in">bk</span>(<span class="number">150</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7835-颜色多变的灯笼"><strong>7835.颜色多变的灯笼</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    p.<span class="built_in">up</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">10</span>).<span class="built_in">oo</span>(<span class="number">10</span>,a).<span class="built_in">fd</span>(<span class="number">10</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8356-正十六边形的花"><strong>8356.正十六边形的花</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">9</span>).<span class="built_in">size</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">rt</span>(<span class="number">360</span>/<span class="number">16.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">125</span>,<span class="number">25</span>);</span><br><span class="line">    p.<span class="built_in">text</span>(<span class="string">&quot;我爱编程&quot;</span>,<span class="number">9</span>,<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6674-排排蛋"><strong>6674.排排蛋</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">up</span>().<span class="built_in">moveTo</span>(<span class="number">-300</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">ee</span>(<span class="number">50</span>,<span class="number">30</span>,<span class="number">5</span>).<span class="built_in">oo</span>(<span class="number">15</span>,<span class="number">1</span>).<span class="built_in">fd</span>(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6376-彩色摩天轮"><strong>6376.彩色摩天轮</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">c</span>(i).<span class="built_in">fd</span>(<span class="number">200</span>).<span class="built_in">oo</span>(<span class="number">40</span>).<span class="built_in">bk</span>(<span class="number">200</span>).<span class="built_in">rt</span>(<span class="number">360</span>/<span class="number">15.0</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-6年级训练">5-6年级训练</h2><h3 id="6007-彩色的阶梯"><strong>6007.彩色的阶梯</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">c</span>(i).<span class="built_in">fd</span>(<span class="number">10</span>+<span class="number">5</span>*i).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">10</span>+<span class="number">5</span>*i).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7750-橙片"><strong>7750.橙片</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">100</span>,<span class="number">14</span>).<span class="built_in">oo</span>(<span class="number">90</span>,<span class="number">13</span>).<span class="built_in">size</span>(<span class="number">5</span>).<span class="built_in">c</span>(<span class="number">14</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">90</span>).<span class="built_in">bk</span>(<span class="number">90</span>).<span class="built_in">rt</span>(<span class="number">36</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">up</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">18</span>).<span class="built_in">fd</span>(<span class="number">55</span>).<span class="built_in">oo</span>(<span class="number">5</span>,<span class="number">15</span>).<span class="built_in">bk</span>(<span class="number">55</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">54</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="225-彩色花朵"><strong>225.彩色花朵</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">picU</span>(<span class="number">0</span>); <span class="comment">//开启图形按照笔方向画</span></span><br><span class="line">    p.<span class="built_in">up</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">130</span>).<span class="built_in">ee</span>(<span class="number">20</span>,<span class="number">100</span>,<span class="number">13</span>).<span class="built_in">bk</span>(<span class="number">130</span>).<span class="built_in">rt</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">110</span>).<span class="built_in">ee</span>(<span class="number">30</span>,<span class="number">80</span>,<span class="number">14</span>).<span class="built_in">bk</span>(<span class="number">110</span>).<span class="built_in">rt</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5013-限速60标志"><strong>5013.限速60标志</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">150</span>,<span class="number">15</span>).<span class="built_in">oo</span>(<span class="number">140</span>,<span class="number">1</span>).<span class="built_in">oo</span>(<span class="number">120</span>,<span class="number">15</span>);</span><br><span class="line">    p.<span class="built_in">text</span>(<span class="string">&quot;60&quot;</span>,<span class="number">0</span>,<span class="number">180</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6041-三角魔方"><strong>6041.三角魔方</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">100</span><span class="number">-10</span>*i).<span class="built_in">rt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">50</span><span class="number">-5</span>*i).<span class="built_in">lt</span>(<span class="number">60</span>+<span class="number">10</span>*i);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初中训练">初中训练</h2><h3 id="6041-三角魔方-2"><strong>6041.三角魔方</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">30</span>).<span class="built_in">speed</span>(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">30</span>).<span class="built_in">rt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">30</span>).<span class="built_in">lt</span>(<span class="number">60</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    p.<span class="built_in">lt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">30</span>).<span class="built_in">lt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">240</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5013-限速60标志-2"><strong>5013.限速60标志</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">150</span>,<span class="number">15</span>).<span class="built_in">oo</span>(<span class="number">140</span>,<span class="number">1</span>).<span class="built_in">oo</span>(<span class="number">120</span>,<span class="number">15</span>);</span><br><span class="line">    p.<span class="built_in">text</span>(<span class="string">&quot;60&quot;</span>,<span class="number">0</span>,<span class="number">180</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6685-收集落叶"><strong>6685.收集落叶</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">70</span>*i,<span class="number">0</span>);</span><br><span class="line">        p.<span class="built_in">ee</span>(<span class="number">30</span>,<span class="number">100</span>,<span class="number">13</span>);</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">               p.<span class="built_in">bk</span>(<span class="number">40</span>).<span class="built_in">lt</span>(<span class="number">30</span>).<span class="built_in">fd</span>(<span class="number">30</span>).<span class="built_in">bk</span>(<span class="number">30</span>).<span class="built_in">rt</span>(<span class="number">30</span>); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               p.<span class="built_in">bk</span>(<span class="number">40</span>).<span class="built_in">rt</span>(<span class="number">30</span>).<span class="built_in">fd</span>(<span class="number">30</span>).<span class="built_in">bk</span>(<span class="number">30</span>).<span class="built_in">lt</span>(<span class="number">30</span>); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">bk</span>(<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4992-十一边形花环"><strong>4992.十一边形花环</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">80</span>).<span class="built_in">oo</span>(<span class="number">15</span>,<span class="number">5</span>).<span class="built_in">bk</span>(<span class="number">40</span>).<span class="built_in">rt</span>(<span class="number">360</span>/<span class="number">11.0</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2369-腾图"><strong>2369.腾图</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">12</span>).<span class="built_in">speed</span>(<span class="number">9</span>).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="type">int</span> n,a,b,o;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(n).<span class="built_in">rt</span>(<span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    a = <span class="number">2</span>*<span class="built_in">sqrt</span>(n*n-(n/<span class="number">2.0</span>)*(n/<span class="number">2.0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(a).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    b = a /<span class="number">2.0</span>;</span><br><span class="line">    p.<span class="built_in">fd</span>(b).<span class="built_in">lt</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b).<span class="built_in">rt</span>(<span class="number">30</span>).<span class="built_in">fd</span>(n/<span class="number">2.0</span>).<span class="built_in">bk</span>(n/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">150</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    o = b/<span class="number">2.0</span>/<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    p.<span class="built_in">up</span>().<span class="built_in">fd</span>(b/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(o).<span class="built_in">o</span>(o);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7674-两科成绩">7674. 两科成绩</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">20</span>],g[<span class="number">20</span>],h[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; f[i] &gt;&gt; g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> max,maxxb;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="type">int</span> sum =f[j]+g[j];</span><br><span class="line">            <span class="keyword">if</span>(max &lt; sum || (sum == max &amp;&amp; f[j] &gt; f[maxxb]))&#123;</span><br><span class="line">               max = f[j]+g[j]; </span><br><span class="line">               maxxb=j; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">0</span>,<span class="number">-20</span>*i);</span><br><span class="line">        p.<span class="built_in">c</span>(<span class="number">14</span>).<span class="built_in">fd</span>(f[maxxb]).<span class="built_in">c</span>(<span class="number">11</span>).<span class="built_in">fd</span>(g[maxxb]);</span><br><span class="line">        f[maxxb]=g[maxxb]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6月5号训练">6月5号训练</h2><h3 id="34079-数据统计"><strong>34079.数据统计</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,x,a[<span class="number">5</span>];</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    p.<span class="built_in">hide</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">90</span>) a[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="number">80</span>) a[<span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="number">70</span>) a[<span class="number">2</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="number">60</span>) a[<span class="number">3</span>]++;</span><br><span class="line">        <span class="keyword">else</span>  a[<span class="number">4</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,a[i]*<span class="number">5</span>).<span class="built_in">rr</span>(<span class="number">20</span>,a[i]*<span class="number">10</span>,i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12512-冠状病毒"><strong>12512.冠状病毒</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">80</span>,<span class="number">3</span>).<span class="built_in">o</span>(<span class="number">100</span>).<span class="built_in">picU</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            p.<span class="built_in">up</span>().<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">down</span>().<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">ee</span>(<span class="number">20</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">up</span>().<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">down</span>().<span class="built_in">fd</span>(<span class="number">40</span>).<span class="built_in">ee</span>(<span class="number">20</span>,<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">0</span>,<span class="number">0</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/n);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20857-多个正多边形"><strong>20857.多个正多边形</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// n多边形数量 k 正多边形</span></span><br><span class="line">    p.<span class="built_in">speed</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//内角和 180*(k-2) 内角 180*(k-2) / k</span></span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90.0</span>*(k<span class="number">-2</span>)/k); <span class="comment">//转角的一半</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">30</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/k);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90.0</span>*(k<span class="number">-2</span>)/k).<span class="built_in">moveTo</span>(<span class="number">0</span>,<span class="number">0</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/n);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="398-山峰">398.山峰</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">11</span>];</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a[n];</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,a[<span class="number">0</span>]/<span class="number">2.0</span>).<span class="built_in">r</span>(<span class="number">20</span>,a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">//山峰不为首个和最后一个</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>] &amp;&amp; a[i]&gt;a[i<span class="number">-1</span>] &amp;&amp; i!=n<span class="number">-1</span>)&#123;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,a[i]/<span class="number">2.0</span>).<span class="built_in">rr</span>(<span class="number">20</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,a[i]/<span class="number">2.0</span>).<span class="built_in">r</span>(<span class="number">20</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="585-数字表示"><strong>585.数字表示</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//计算数字长度 m</span></span><br><span class="line">    p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">up</span>().<span class="built_in">hide</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=n; i &gt; <span class="number">0</span>; i = i/ <span class="number">10</span>) &#123;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        p.<span class="built_in">oo</span>(<span class="number">20</span>,n%<span class="number">10</span>).<span class="built_in">fd</span>(<span class="number">40</span>);</span><br><span class="line">        n = n / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="394-织鱼网"><strong>394.织鱼网</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    cin &gt;&gt;m &gt;&gt;n;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">45</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>*n;j++)&#123;</span><br><span class="line">            <span class="comment">//1画上波浪</span></span><br><span class="line">            p. <span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">rt</span> (<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span> (<span class="number">90</span>);</span><br><span class="line">            <span class="comment">//旋转画下波浪</span></span><br><span class="line">            <span class="keyword">if</span>(j==n<span class="number">-1</span>) p.<span class="built_in">rt</span>(<span class="number">180</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回到画正方形组的初始位置再次循环</span></span><br><span class="line">        p.<span class="built_in">up</span>().<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">180</span>).<span class="built_in">down</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2023年青科赛真题">2023年青科赛真题</h2><h3 id="2356两个八分音符">2356两个八分音符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">0</span>);</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">20</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">size</span>(<span class="number">4</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">70</span>).<span class="built_in">size</span>(<span class="number">10</span>).<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">110</span>).<span class="built_in">size</span>(<span class="number">4</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">oo</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2357变化的正三角形">2357变化的正三角形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">100</span><span class="number">-10</span>*i).<span class="built_in">rt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">50</span><span class="number">-5</span>*i).<span class="built_in">lt</span>(<span class="number">60</span>+<span class="number">10</span>*i); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2358偶数车辆和">2358偶数车辆和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">10</span>],sum;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">40</span>*i,a[i]/<span class="number">2.0</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i] % <span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            sum += a[i]*<span class="number">20</span>;</span><br><span class="line">            p.<span class="built_in">rr</span>(<span class="number">20</span>,a[i],<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">rr</span>(<span class="number">20</span>,a[i],<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//红面积 sum</span></span><br><span class="line">    <span class="comment">//长(2*n-1)*20=40n-20</span></span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">20</span>*n<span class="number">-20</span>,<span class="number">-1</span>*sum/(<span class="number">80</span>*n<span class="number">-40</span>));</span><br><span class="line">    p.<span class="built_in">rr</span>(<span class="number">40</span>*n<span class="number">-20</span>,sum/(<span class="number">40</span>*n<span class="number">-20</span>),<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2359矩形外框A">2359矩形外框A</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>],X,Y,max,res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(max&lt;a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">r</span>(<span class="number">100</span>,<span class="number">100</span>).<span class="built_in">up</span>();</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-50</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">o</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==max)&#123;</span><br><span class="line">            X=<span class="built_in">getX</span>();</span><br><span class="line">            Y=<span class="built_in">getY</span>();</span><br><span class="line">            res=i;</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[res]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>]+<span class="number">100</span> &amp;&amp; a[res]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>&amp;&amp;a[res]&gt;a[(res+<span class="number">3</span>)%<span class="number">4</span>]+<span class="number">100</span>)&#123;<span class="comment">//最大值很大</span></span><br><span class="line">        p.<span class="built_in">moveTo</span>(X,Y);</span><br><span class="line">        p.<span class="built_in">r</span>(max*<span class="number">2</span>,max*<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[(res+<span class="number">1</span>)%<span class="number">4</span>]&lt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">2</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])&#123;<span class="comment">//对角线</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;对角线&quot;</span>;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">            p.<span class="built_in">r</span>((a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>),(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//长为长 短为宽</span></span><br><span class="line">            <span class="keyword">if</span>((res%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;a[(res+<span class="number">1</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">1</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])||(res%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;a[(res+<span class="number">3</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">3</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">2</span>)%<span class="number">4</span>]))&#123;</span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>,max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//长为宽 短为长</span></span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>,max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2360绿色正三角形">2360绿色正三角形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">10</span>).<span class="built_in">rt</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">           p.<span class="built_in">rt</span>(<span class="number">60</span>).<span class="built_in">fd</span>(<span class="number">75</span>).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">150</span>).<span class="built_in">rt</span>(<span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2361黑色印记">2361黑色印记</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">picU</span>(<span class="number">0</span>).<span class="built_in">up</span>();</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">283</span>,<span class="number">0</span>);</span><br><span class="line">    p.<span class="built_in">rr</span>(<span class="number">400</span>,<span class="number">400</span>,<span class="number">15</span>);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">45</span>).<span class="built_in">rr</span>(<span class="number">400</span>,<span class="number">400</span>,<span class="number">15</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">150</span>).<span class="built_in">rt</span>(<span class="number">45</span>).<span class="built_in">rr</span>(<span class="number">90</span>,<span class="number">90</span>,<span class="number">0</span>).<span class="built_in">lt</span>(<span class="number">45</span>).<span class="built_in">bk</span>(<span class="number">150</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2362挑选日期">2362挑选日期</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">up</span>();</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((a[i]+<span class="number">1</span>)%<span class="number">7</span>==<span class="number">6</span>)&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">20</span>,<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((a[i]+<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">20</span>,<span class="number">4</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">20</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2363车辆统计">2363车辆统计</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> avg,sum=<span class="number">0</span>,n,a[<span class="number">10</span>],max=<span class="number">0</span>;</span><br><span class="line">    p.<span class="built_in">hide</span>().<span class="built_in">speed</span>(<span class="number">9</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">        <span class="keyword">if</span>(max &lt; a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    avg = sum / n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,<span class="number">0</span>).<span class="built_in">fd</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(max==a[i]) p.<span class="built_in">up</span>().<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">o</span>(<span class="number">20</span>,<span class="number">1</span>).<span class="built_in">down</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,avg).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">c</span>(<span class="number">1</span>).<span class="built_in">fd</span>(<span class="number">20</span>*n<span class="number">-20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2364统计排水量">2364统计排水量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>,n,a[<span class="number">15</span>],max=<span class="number">0</span>;</span><br><span class="line">    p.<span class="built_in">hide</span>().<span class="built_in">speed</span>(<span class="number">9</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(max &lt; a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,a[i]/max*<span class="number">150</span>).<span class="built_in">r</span>(<span class="number">20</span>,a[i]/max*<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2365矩形外框B">2365矩形外框B</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>],X,Y,max,res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(max&lt;a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">r</span>(<span class="number">100</span>,<span class="number">100</span>).<span class="built_in">up</span>();</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-50</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">o</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==max)&#123;</span><br><span class="line">            X=<span class="built_in">getX</span>();</span><br><span class="line">            Y=<span class="built_in">getY</span>();</span><br><span class="line">            res=i;</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[res]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>]+<span class="number">100</span> &amp;&amp; a[res]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>&amp;&amp;a[res]&gt;a[(res+<span class="number">3</span>)%<span class="number">4</span>]+<span class="number">100</span>)&#123;<span class="comment">//最大值很大</span></span><br><span class="line">        p.<span class="built_in">moveTo</span>(X,Y);</span><br><span class="line">        p.<span class="built_in">r</span>(max*<span class="number">2</span>,max*<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[(res+<span class="number">1</span>)%<span class="number">4</span>]&lt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">2</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])&#123;<span class="comment">//对角线</span></span><br><span class="line">            p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">            p.<span class="built_in">r</span>((a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>),(a[res]+a[(res+<span class="number">2</span>)%<span class="number">4</span>]+<span class="number">100</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//长为长 短为宽</span></span><br><span class="line">            <span class="keyword">if</span>((res%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;a[(res+<span class="number">1</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">2</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">1</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">3</span>)%<span class="number">4</span>])||(res%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;a[(res+<span class="number">3</span>)%<span class="number">4</span>]&gt;a[(res+<span class="number">1</span>)%<span class="number">4</span>] &amp;&amp; a[(res+<span class="number">3</span>)%<span class="number">4</span>] &gt; a[(res+<span class="number">2</span>)%<span class="number">4</span>]))&#123;</span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+a[(res+<span class="number">1</span>+<span class="number">2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>,max+<span class="built_in">myMax</span>(a[(res+<span class="number">2</span>-res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">3</span>-res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//长为宽 短为长</span></span><br><span class="line">                p.<span class="built_in">moveTo</span>(X/<span class="built_in">abs</span>(X)*(<span class="number">50</span>+max-(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>)/<span class="number">2.0</span>),Y/<span class="built_in">abs</span>(Y)*(<span class="number">50</span>+max-(max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>)/<span class="number">2.0</span>));</span><br><span class="line">                p.<span class="built_in">r</span>(max+<span class="built_in">myMax</span>(a[(res+<span class="number">1</span>+res%<span class="number">2</span>)%<span class="number">4</span>],a[(res+<span class="number">2</span>+res%<span class="number">2</span>)%<span class="number">4</span>])+<span class="number">100</span>,max+a[(res+<span class="number">3</span><span class="number">-2</span>*(res%<span class="number">2</span>))%<span class="number">4</span>]+<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2366彩色花朵">2366彩色花朵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">picU</span>(<span class="number">0</span>); <span class="comment">//开启图形按照笔方向画</span></span><br><span class="line">    p.<span class="built_in">up</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">130</span>).<span class="built_in">ee</span>(<span class="number">20</span>,<span class="number">100</span>,<span class="number">13</span>).<span class="built_in">bk</span>(<span class="number">130</span>).<span class="built_in">rt</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">110</span>).<span class="built_in">ee</span>(<span class="number">30</span>,<span class="number">80</span>,<span class="number">14</span>).<span class="built_in">bk</span>(<span class="number">110</span>).<span class="built_in">rt</span>(<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2367变化的正方形">2367变化的正方形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">c</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">200</span><span class="number">-20</span>*i).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2368彩色图形">2368彩色图形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">-300</span>,<span class="number">300</span>).<span class="built_in">up</span>().<span class="built_in">hide</span>().<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;n+i;j++)&#123; <span class="comment">// 4 5 6 7 8</span></span><br><span class="line">            <span class="keyword">if</span>(j&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">                p.<span class="built_in">oo</span>(<span class="number">20</span>,(j<span class="number">-1</span>)%(n<span class="number">-1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p.<span class="built_in">oo</span>(<span class="number">20</span>,j);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">-300</span>,<span class="number">260</span><span class="number">-40</span>*i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2369腾图">2369腾图</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">c</span>(<span class="number">12</span>).<span class="built_in">speed</span>(<span class="number">9</span>).<span class="built_in">hide</span>();</span><br><span class="line">    <span class="type">int</span> n,a,b,o;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(n).<span class="built_in">rt</span>(<span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    a = <span class="number">2</span>*<span class="built_in">sqrt</span>(n*n-(n/<span class="number">2.0</span>)*(n/<span class="number">2.0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(a).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    b = a /<span class="number">2.0</span>;</span><br><span class="line">    p.<span class="built_in">fd</span>(b).<span class="built_in">lt</span>(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b).<span class="built_in">rt</span>(<span class="number">30</span>).<span class="built_in">fd</span>(n/<span class="number">2.0</span>).<span class="built_in">bk</span>(n/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">150</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    o = b/<span class="number">2.0</span>/<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    p.<span class="built_in">up</span>().<span class="built_in">fd</span>(b/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(o).<span class="built_in">o</span>(o);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2370变化的立方体">2370变化的立方体</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：计算两个数的最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：计算三个数的最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcdOfThree</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先计算前两个数的GCD</span></span><br><span class="line">    <span class="type">int</span> gcdAB = <span class="built_in">gcd</span>(a, b);</span><br><span class="line">    <span class="comment">// 再用这个结果与第三个数计算GCD</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(gcdAB, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>],b;</span><br><span class="line">    p.<span class="built_in">speed</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    b=<span class="built_in">gcdOfThree</span>(a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=a[<span class="number">0</span>]/b;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(-b*i,-a[<span class="number">2</span>]);</span><br><span class="line">        p.<span class="built_in">fd</span>(a[<span class="number">2</span>]).<span class="built_in">rt</span>(<span class="number">45</span>).<span class="built_in">fd</span>(a[<span class="number">1</span>]).<span class="built_in">lt</span>(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=a[<span class="number">1</span>]/b;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(a[<span class="number">0</span>]).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(a[<span class="number">2</span>]);</span><br><span class="line">        p.<span class="built_in">up</span>().<span class="built_in">bk</span>(a[<span class="number">2</span>]).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(a[<span class="number">0</span>]).<span class="built_in">lt</span>(<span class="number">45</span>).<span class="built_in">fd</span>(b).<span class="built_in">lt</span>(<span class="number">135</span>).<span class="built_in">down</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a[<span class="number">2</span>]/b;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(-a[<span class="number">0</span>],-b*i-b);</span><br><span class="line">        p.<span class="built_in">fd</span>(a[<span class="number">0</span>]).<span class="built_in">lt</span>(<span class="number">45</span>).<span class="built_in">fd</span>(a[<span class="number">1</span>]).<span class="built_in">rt</span>(<span class="number">45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2371矩形外框C">2371矩形外框C</h3><h2 id="历史训练题">历史训练题</h2><h3 id="32979勾股定理">32979勾股定理</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    c = a*a+b*b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(a).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b).<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断C是否为正整数</span></span><br><span class="line">    <span class="type">int</span> res =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">150</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c/i==i) res=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">1</span>)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b).<span class="built_in">lineTo</span>(<span class="number">0</span>,a).<span class="built_in">lineTo</span>(a,a+b).<span class="built_in">lineTo</span>(a+b,b).<span class="built_in">lineTo</span>(b,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5815最多边的多边形">5815最多边的多边形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> in[<span class="number">100</span>],n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; in[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> index =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index2 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> countTemp = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> temp=in[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (index&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ((in[index] != num &amp;&amp; ((in[index2] != temp &amp;&amp; in[index] != temp) || index==<span class="number">0</span>)) || index2==n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (in[index] == in[index2])&#123;</span><br><span class="line">                <span class="keyword">if</span>(index!=<span class="number">0</span>) in[index2] = temp;</span><br><span class="line">                countTemp++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index2==n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (count &lt; countTemp)&#123;</span><br><span class="line">                    count = countTemp;</span><br><span class="line">                    num=in[index];</span><br><span class="line">                &#125;</span><br><span class="line">                index++;</span><br><span class="line">                index2 = index +<span class="number">1</span>;</span><br><span class="line">                countTemp = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (in[index] == temp)&#123;</span><br><span class="line">                index++;</span><br><span class="line">                index2 = index + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(num).<span class="built_in">rt</span>(<span class="number">360.0</span>/count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21815正多边形">21815正多边形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">120</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">50</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="391螺旋线">391螺旋线</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">1</span>;j++)&#123;</span><br><span class="line">           p.<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">oo</span>(<span class="number">5</span>,<span class="number">1</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="114轮廓">114轮廓</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    p.<span class="built_in">speed</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125; </span><br><span class="line">    p.<span class="built_in">fd</span>(a[<span class="number">0</span>]).<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(<span class="number">20</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(a[i+<span class="number">1</span>]-a[i]).<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(a[<span class="number">9</span>]);</span><br><span class="line">    p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20860折线图">20860折线图</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">40</span>],n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,a[<span class="number">0</span>]).<span class="built_in">oo</span>(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>])&#123;</span><br><span class="line">            p.<span class="built_in">c</span>(<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">c</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">lineTo</span>(<span class="number">20</span>*i,a[i]).<span class="built_in">oo</span>(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,a[<span class="number">0</span>]).<span class="built_in">oo</span>(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">20</span>*i,a[i]).<span class="built_in">oo</span>(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="151巧克力甜度">151巧克力甜度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,s,a[<span class="number">100</span>];</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s-a[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        s-= a[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rr</span>(i*<span class="number">5</span>,i*<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="178靠近">178靠近</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myMin</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">up</span>().<span class="built_in">hide</span>();</span><br><span class="line">    <span class="type">int</span> a,b,c,d;</span><br><span class="line">    cin &gt;&gt; a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    p.<span class="built_in">fd</span>(b/<span class="number">2.0</span>).<span class="built_in">rr</span>(b,b,<span class="number">0</span>);<span class="comment">//黑</span></span><br><span class="line">    p.<span class="built_in">fd</span>(b/<span class="number">2.0</span>+a/<span class="number">2.0</span>).<span class="built_in">rr</span>(a,a,<span class="number">1</span>);<span class="comment">//红</span></span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,<span class="number">0</span>).<span class="built_in">rt</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="comment">//1.紫和绿相加小于黑</span></span><br><span class="line">    <span class="keyword">if</span>(c+d&lt;=b)&#123;</span><br><span class="line">        p.<span class="built_in">fd</span>(b/<span class="number">2.0</span>+<span class="built_in">myMax</span>(c,d)/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">        <span class="comment">//画绿</span></span><br><span class="line">        p.<span class="built_in">fd</span>(d/<span class="number">2.0</span>).<span class="built_in">rr</span>(d,d,<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//画紫</span></span><br><span class="line">        p.<span class="built_in">fd</span>(c/<span class="number">2.0</span>+d/<span class="number">2.0</span>).<span class="built_in">rr</span>(c,c,<span class="number">11</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//黑色小于绿色</span></span><br><span class="line">        <span class="keyword">if</span>(b&lt;=d &amp;&amp; c&lt;=d || b&lt;a &amp;&amp; d&lt;c)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="built_in">myMax</span>(c,d)/<span class="number">2.0</span>+<span class="built_in">myMax</span>(a,b)/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">            p.<span class="built_in">fd</span>(d/<span class="number">2.0</span>).<span class="built_in">rr</span>(d,d,<span class="number">10</span>);</span><br><span class="line">            p.<span class="built_in">fd</span>(c/<span class="number">2.0</span>+d/<span class="number">2.0</span>).<span class="built_in">rr</span>(c,c,<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&lt;=d &amp;&amp; c&gt;d)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(c/<span class="number">2.0</span>+<span class="built_in">myMin</span>(a,b)/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">            p.<span class="built_in">fd</span>(d/<span class="number">2.0</span>).<span class="built_in">rr</span>(d,d,<span class="number">10</span>);</span><br><span class="line">            p.<span class="built_in">fd</span>(c/<span class="number">2.0</span>+d/<span class="number">2.0</span>).<span class="built_in">rr</span>(c,c,<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="built_in">myMin</span>(c,d)/<span class="number">2.0</span>+<span class="built_in">myMax</span>(a,b)/<span class="number">2.0</span>).<span class="built_in">lt</span>(<span class="number">90</span>);</span><br><span class="line">            p.<span class="built_in">fd</span>(d/<span class="number">2.0</span>).<span class="built_in">rr</span>(d,d,<span class="number">10</span>);</span><br><span class="line">            p.<span class="built_in">fd</span>(c/<span class="number">2.0</span>+d/<span class="number">2.0</span>).<span class="built_in">rr</span>(c,c,<span class="number">11</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="631寻宝游戏">631寻宝游戏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,a[<span class="number">100</span>];</span><br><span class="line">    cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> cc=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[cc]=<span class="number">1</span>;</span><br><span class="line">        cc = cc+ m+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(cc&gt;n) cc=cc%n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        p.<span class="built_in">up</span>().<span class="built_in">fd</span>(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">30</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">o</span>(<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">bk</span>(<span class="number">200</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="527坐船">527坐船</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,w,s=<span class="number">0</span>,t=<span class="number">0</span>,a[<span class="number">50</span>];</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((s+a[i])&lt;=w)&#123;</span><br><span class="line">            s+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(s/<span class="number">2.0</span>,t*<span class="number">-40</span>).<span class="built_in">rr</span>(s,<span class="number">20</span>);</span><br><span class="line">            t++;</span><br><span class="line">            s=<span class="number">0</span>;</span><br><span class="line">            s+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(s/<span class="number">2.0</span>,t*<span class="number">-40</span>).<span class="built_in">rr</span>(s,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>565飞越太空山</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;<span class="comment">//满十为一趟</span></span><br><span class="line">    <span class="type">int</span> people=<span class="number">0</span>; <span class="comment">//满十清0</span></span><br><span class="line">    <span class="comment">//7 20 18 15 14 5 30 21 25 10 50 25 26 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="number">10</span>*count)&#123;</span><br><span class="line">            people++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(people==<span class="number">10</span>)&#123;</span><br><span class="line">            people=<span class="number">0</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; people;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">-50</span>*(i/<span class="number">2</span>),<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">-50</span>*((i<span class="number">-1</span>)/<span class="number">2</span>),<span class="number">-50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==people)&#123;</span><br><span class="line">            p.<span class="built_in">oo</span>(<span class="number">20</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p.<span class="built_in">o</span>(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p.<span class="built_in">r</span>(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="399水杯">399水杯</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin &gt;&gt; a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,a/<span class="number">2.0</span>).<span class="built_in">r</span>(<span class="number">50</span>,a,<span class="number">1</span>);</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">60</span>,b/<span class="number">2.0</span>).<span class="built_in">r</span>(<span class="number">50</span>,b,<span class="number">3</span>);</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">120</span>,c/<span class="number">2.0</span>).<span class="built_in">r</span>(<span class="number">50</span>,c,<span class="number">4</span>);</span><br><span class="line">    a -= b; <span class="comment">//红色水减绿色水</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">0</span>)&#123;<span class="comment">//红色水比绿色多 剩下的给蓝色</span></span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">60</span>,b/<span class="number">2.0</span>).<span class="built_in">rr</span>(<span class="number">50</span>,b,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//红色比绿色加蓝色都多</span></span><br><span class="line">        <span class="keyword">if</span>(a&gt;c)&#123;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">120</span>,c/<span class="number">2.0</span>).<span class="built_in">rr</span>(<span class="number">50</span>,c,<span class="number">4</span>);</span><br><span class="line">            a-=c;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">0</span>,a/<span class="number">2.0</span>).<span class="built_in">rr</span>(<span class="number">50</span>,a,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//剩下的给蓝色刚好够</span></span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">120</span>,a/<span class="number">2.0</span>).<span class="built_in">rr</span>(<span class="number">50</span>,a,<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//红色比绿色少，所有的都给绿色</span></span><br><span class="line">       p.<span class="built_in">moveTo</span>(<span class="number">60</span>,(a+b)/<span class="number">2.0</span>).<span class="built_in">rr</span>(<span class="number">50</span>,a+b,<span class="number">3</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="386山洞">386山洞</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">100</span>],t=<span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">51</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(t&gt;=n)&#123;</span><br><span class="line">            t%=n;</span><br><span class="line">        &#125;</span><br><span class="line">        t+=i;</span><br><span class="line">        a[t]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>) p.<span class="built_in">down</span>().<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">up</span>().<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">oo</span>(<span class="number">20</span>,i).<span class="built_in">bk</span>(<span class="number">120</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/n);</span><br><span class="line">        <span class="keyword">else</span> p.<span class="built_in">down</span>().<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">up</span>().<span class="built_in">fd</span>(<span class="number">20</span>).<span class="built_in">o</span>(<span class="number">20</span>,i).<span class="built_in">bk</span>(<span class="number">120</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="185砖头">185砖头</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">90</span>)&#123;</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);    </span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>-n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">180</span>-n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>-n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>-n).<span class="built_in">bk</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>-n).<span class="built_in">bk</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);    </span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>-n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">180</span>-n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">180</span>-n).<span class="built_in">bk</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>-n).<span class="built_in">bk</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">rt</span>(<span class="number">90</span>-n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">        p.<span class="built_in">lt</span>(<span class="number">90</span>-n).<span class="built_in">fd</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="115同心圆">115同心圆</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],max;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(max&lt;a[i]) max=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">oo</span>(max,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        p.<span class="built_in">o</span>(a[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="116手机号码">116手机号码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,S,T;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; S&gt;&gt;T;</span><br><span class="line">    string a=<span class="string">&quot;13300303003&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x = (T/<span class="number">11</span>-S/<span class="number">11</span><span class="number">-1</span>)*<span class="number">5</span>;</span><br><span class="line">    <span class="comment">//起始值不被十一整除</span></span><br><span class="line">    <span class="keyword">if</span>(S%<span class="number">11</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        x++;</span><br><span class="line">        x+=<span class="number">5</span>;<span class="comment">//中间重复号码会少1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//起始值最近的11倍数头到尾</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = S%<span class="number">11</span><span class="number">-1</span>; i &lt;<span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="string">&#x27;3&#x27;</span>) x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结尾值最近的11倍数头到尾</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;=T%<span class="number">11</span><span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="string">&#x27;3&#x27;</span>) x++;</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">20</span>+x%<span class="number">199</span>,x%<span class="number">15</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2745叠套的多边形">2745叠套的多边形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">3</span>;j++)&#123;</span><br><span class="line">            p.<span class="built_in">fd</span>(<span class="number">100</span>).<span class="built_in">rt</span>(<span class="number">360.0</span>/(i+<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="378找规律">378找规律</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//378</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">plus</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) sum=sum+i;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    p.<span class="built_in">oo</span>(<span class="number">50</span>,<span class="built_in">plus</span>(n)%<span class="number">16</span>);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="172拼图">172拼图</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,i,max=<span class="number">0</span>,min=<span class="number">114514</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[n],b[n];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;min)min=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;max)max=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="built_in">rr</span>(min,min,<span class="number">10</span>).<span class="built_in">moveTo</span>(<span class="number">0</span>,min/<span class="number">2</span>+max).<span class="built_in">oo</span>(max,<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2024年青科赛压轴题">2024年青科赛压轴题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算两数的差(正数)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cha</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a-b&gt;<span class="number">0</span>) <span class="keyword">return</span> a-b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b-a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//300 100 250 0</span></span><br><span class="line"><span class="comment">//-200 300 250 -100</span></span><br><span class="line"><span class="comment">//300 -100 -100 -200</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,y1,y2,jd;</span><br><span class="line">    cin &gt;&gt; a&gt;&gt;b&gt;&gt;y1&gt;&gt;y2;</span><br><span class="line">    p.<span class="built_in">moveTo</span>(<span class="number">0</span>,y1).<span class="built_in">lineTo</span>(<span class="number">0</span>,y2).<span class="built_in">c</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//两点连接，计算经过y轴时候的交点</span></span><br><span class="line">    <span class="comment">//交点在y1~y2的范围则需要绕着走，不然直接连接两点</span></span><br><span class="line">    jd=a-(a-b)/<span class="number">2.0</span>;<span class="comment">//A点和B点连接线经过y轴的交点的y轴点</span></span><br><span class="line">    <span class="keyword">if</span>(jd&gt;y2&amp;&amp;jd&lt;y1)&#123;<span class="comment">//有挡板</span></span><br><span class="line">        <span class="comment">//计算过上端点距离 勾股定理</span></span><br><span class="line">        <span class="type">double</span> julis = <span class="built_in">sqrt</span>(<span class="built_in">cha</span>(a,y1)*<span class="built_in">cha</span>(a,y1)+<span class="number">300</span>*<span class="number">300</span>)+<span class="built_in">sqrt</span>(<span class="built_in">cha</span>(b,y1)*<span class="built_in">cha</span>(b,y1)+<span class="number">300</span>*<span class="number">300</span>);</span><br><span class="line">        cout &lt;&lt; julis&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//计算过下端点距离</span></span><br><span class="line">        <span class="type">double</span> julix = <span class="built_in">sqrt</span>(<span class="built_in">cha</span>(a,y2)*<span class="built_in">cha</span>(a,y2)+<span class="number">300</span>*<span class="number">300</span>)+<span class="built_in">sqrt</span>(<span class="built_in">cha</span>(b,y2)*<span class="built_in">cha</span>(b,y2)+<span class="number">300</span>*<span class="number">300</span>);</span><br><span class="line">        cout &lt;&lt; julix;</span><br><span class="line">        <span class="comment">//走上端点</span></span><br><span class="line">        <span class="keyword">if</span>(julix&gt;julis)&#123;</span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">-300</span>,a).<span class="built_in">lineTo</span>(<span class="number">0</span>,y1).<span class="built_in">lineTo</span>(<span class="number">300</span>,b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//走下端点</span></span><br><span class="line">            p.<span class="built_in">moveTo</span>(<span class="number">-300</span>,a).<span class="built_in">lineTo</span>(<span class="number">0</span>,y2).<span class="built_in">lineTo</span>(<span class="number">300</span>,b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p.<span class="built_in">moveTo</span>(<span class="number">-300</span>,a).<span class="built_in">lineTo</span>(<span class="number">300</span>,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">GoC训练题</summary>
    
    
    
    <category term="杂项" scheme="https://u7u7.top/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="C++" scheme="https://u7u7.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>中软杯24年6月笔记</title>
    <link href="https://u7u7.top/posts/23biji06.html"/>
    <id>https://u7u7.top/posts/23biji06.html</id>
    <published>2024-06-01T08:30:25.000Z</published>
    <updated>2024-06-20T06:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模版">模版</h1><h2 id="学习日期">学习日期:</h2><h2 id="项目任务">项目任务</h2><h2 id="BUG">BUG</h2><h2 id="日总结">日总结</h2><blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 分栏%&#125;</span><br><span class="line">&lt;!-- tab BUG1@fas fa-bomb --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab BUG2@fas fa-bomb --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h1 id="Py综合推荐指标算法">Py综合推荐指标算法</h1><h2 id="学习日期-6-1">学习日期: 6.1</h2><h2 id="项目任务-2">项目任务</h2><h3 id="综合指标计算">综合指标计算</h3><p>​默认推荐指标数，因为还没想好需要推荐的字段，有哪些，所以就先把结合和景区有关的所有字段找出进行加权处理，算出一个比较合适的rating推荐指标系数，将该系数存放到spot表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StructType, StructField, StringType, IntegerType, DoubleType</span><br><span class="line"><span class="keyword">from</span> commentDmTest.DmConnect <span class="keyword">import</span> *</span><br><span class="line">os.environ[<span class="string">&quot;PYSPARK_PYTHON&quot;</span>] = <span class="string">&quot;E:\\software\\anaconda3\\envs\\pyspark\\python.exe&quot;</span></span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">conn = connDm()</span><br><span class="line">cur = conn.cursor()  <span class="comment"># 获取游标</span></span><br><span class="line"><span class="comment"># 得到景区的各指标信息，方便推荐加权处理</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">with t1 as</span></span><br><span class="line"><span class="string">         (select SPOT_ID, round(avg(FEEL_SCORE), 3) as avgScore</span></span><br><span class="line"><span class="string">          from COMMENT_INFO_NLP</span></span><br><span class="line"><span class="string">          group by SPOT_ID)</span></span><br><span class="line"><span class="string">select SPOT_NAME, GRADE, HOT, t2.SPOT_ID,</span></span><br><span class="line"><span class="string">       replace(SUM, substring(SUM, locate(&#x27;条&#x27;, SUM)), &#x27;&#x27;) as sum,</span></span><br><span class="line"><span class="string">       avgScore</span></span><br><span class="line"><span class="string">from SPOT_INFO t2</span></span><br><span class="line"><span class="string">join t1 on t1.SPOT_ID=t2.SPOT_ID</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line">spot_info_df = pd.DataFrame(cur.fetchall(), columns=[<span class="string">&#x27;SPOT_NAME&#x27;</span>, <span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;HOT&#x27;</span>, <span class="string">&#x27;SPOT_ID&#x27;</span>, <span class="string">&#x27;SUM&#x27;</span>, <span class="string">&#x27;AVG&#x27;</span>])</span><br><span class="line"><span class="comment"># 算出各个景区的总评论数的中位数 填充为sum为nal的行</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">select MEDIAN(convert(int,t1.sum)) avgCommentSum</span></span><br><span class="line"><span class="string">from (select replace(SUM, substring(SUM, locate(&#x27;条&#x27;, SUM)), &#x27;&#x27;) as sum</span></span><br><span class="line"><span class="string">      from SPOT_INFO) t1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 得到平均值decimal类型的</span></span><br><span class="line">avg_comment_sum = cur.fetchall()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 修改sum列的数据类型转为float才能使用max方法</span></span><br><span class="line">spot_info_df[<span class="string">&#x27;SUM&#x27;</span>] = spot_info_df[<span class="string">&#x27;SUM&#x27;</span>].apply(pd.to_numeric)</span><br><span class="line"><span class="comment"># 得到最大值decimal类型的</span></span><br><span class="line">max_comment_sum = spot_info_df[<span class="string">&#x27;SUM&#x27;</span>].<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对spark的dataframe加权处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_row</span>(<span class="params">r</span>):</span><br><span class="line">    <span class="comment"># 处理每一行数据：r表示row对象</span></span><br><span class="line">    <span class="comment"># 注意这里要全部设为浮点数，spark运算时对类型比较敏感，要保持数据类型都一致</span></span><br><span class="line">    grade_count = r.GRADE <span class="keyword">if</span> r.GRADE <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    hot_count = r.HOT <span class="keyword">if</span> r.HOT <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    sum_count = r.SUM <span class="keyword">if</span> r.SUM <span class="keyword">else</span> avg_comment_sum  <span class="comment"># 如果为空 使用平均值填充</span></span><br><span class="line">    avg_count = r.AVG <span class="keyword">if</span> r.AVG <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    grade_score = <span class="number">0.2</span> * grade_count / <span class="number">5</span> * <span class="number">100</span> <span class="keyword">if</span> grade_count &lt;= <span class="number">5</span> <span class="keyword">else</span> <span class="number">20.0</span></span><br><span class="line">    hit_score = <span class="number">0.4</span> * hot_count / <span class="number">10</span> * <span class="number">100</span> <span class="keyword">if</span> hot_count &lt;= <span class="number">10</span> <span class="keyword">else</span> <span class="number">40.0</span></span><br><span class="line">    sum_score = <span class="number">0.2</span> * sum_count / max_comment_sum * <span class="number">100</span> <span class="keyword">if</span> sum_count &lt;= max_comment_sum <span class="keyword">else</span> <span class="number">20</span></span><br><span class="line">    avg_score = <span class="number">0.2</span> * avg_count / <span class="number">5</span> * <span class="number">100</span> <span class="keyword">if</span> avg_count &lt;= <span class="number">5</span> <span class="keyword">else</span> <span class="number">20.0</span></span><br><span class="line"></span><br><span class="line">    rating = <span class="built_in">round</span>(grade_score, <span class="number">2</span>) + <span class="built_in">round</span>(hit_score, <span class="number">2</span>) + <span class="built_in">round</span>(sum_score, <span class="number">2</span>) + <span class="built_in">round</span>(avg_score, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 返回用户ID、分类ID、用户对分类的偏好打分</span></span><br><span class="line">    <span class="keyword">return</span> r.SPOT_ID, r.SPOT_NAME, <span class="built_in">round</span>(rating, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建spark类</span></span><br><span class="line">spark = connSpark()</span><br><span class="line"><span class="comment"># pandas转pyspark需要设置类型</span></span><br><span class="line">schema = StructType([</span><br><span class="line">    StructField(<span class="string">&quot;SPOT_NAME&quot;</span>, StringType(), <span class="literal">True</span>),</span><br><span class="line">    StructField(<span class="string">&quot;GRADE&quot;</span>, DoubleType(), <span class="literal">True</span>),</span><br><span class="line">    StructField(<span class="string">&quot;HOT&quot;</span>, DoubleType(), <span class="literal">True</span>),</span><br><span class="line">    StructField(<span class="string">&quot;SPOT_ID&quot;</span>, IntegerType(), <span class="literal">True</span>),</span><br><span class="line">    StructField(<span class="string">&quot;SUM&quot;</span>, DoubleType(), <span class="literal">True</span>),</span><br><span class="line">    StructField(<span class="string">&quot;AVG&quot;</span>, DoubleType(), <span class="literal">True</span>),</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 创建spark的dataframe类</span></span><br><span class="line">spot_info_df_spark = spark.createDataFrame(spot_info_df, schema=schema)</span><br><span class="line"><span class="comment"># 展示df的架构</span></span><br><span class="line">spot_info_df_spark.printSchema()</span><br><span class="line"><span class="comment"># 创建rdd对象执行 指标加权</span></span><br><span class="line">rating_rdd = spot_info_df_spark.rdd.<span class="built_in">map</span>(process_row)</span><br><span class="line"><span class="comment"># 对rdd的类型进行转换 防止toDF会报错</span></span><br><span class="line">rating_rdd = rating_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (<span class="built_in">int</span>(x[<span class="number">0</span>]), <span class="built_in">str</span>(x[<span class="number">1</span>]), <span class="built_in">float</span>(x[<span class="number">2</span>])))</span><br><span class="line"><span class="comment"># rdd转回dataframe</span></span><br><span class="line">rating_df = rating_rdd.toDF([<span class="string">&quot;spot_id_rat&quot;</span>, <span class="string">&quot;spot_name_rat&quot;</span>, <span class="string">&quot;RATING&quot;</span>])</span><br><span class="line"><span class="comment"># 读取景区表进行连接 给景区表添加RATING字段</span></span><br><span class="line">spot_into = dmRead(spark, <span class="string">&quot;SPOT_INFO&quot;</span>)</span><br><span class="line"><span class="comment"># 获取spot_info表的所有列名 方便连接以后取值</span></span><br><span class="line">need_col: <span class="built_in">list</span> = spot_into.toPandas().columns.values.tolist()</span><br><span class="line"><span class="comment"># 添加RATING列</span></span><br><span class="line">need_col.append(<span class="string">&quot;RATING&quot;</span>)</span><br><span class="line"><span class="comment"># join连接根据spot_id 只要原来景区表的字段+新的rating字段</span></span><br><span class="line">spot_final = rating_df.join(spot_into, rating_df.spot_id_rat == spot_into.SPOT_ID) \</span><br><span class="line">    .selectExpr(need_col)</span><br><span class="line"><span class="comment"># 写入SPOT_INFO表 (添加了rating字段)</span></span><br><span class="line">dmWrite(spot_final, <span class="string">&quot;SPOT_INFO&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="根据关键字找对应的评论">根据关键字找对应的评论</h3><h4 id="查询方法">查询方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个sql就能解决，效率和效果都能达到预期要求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyWordFindComment</span>(<span class="params">spot_id, comment_key_word</span>):</span><br><span class="line">    cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    select spot_id, evaluation, evaluation_grade, evaluation_time, feel_score, feel from COMMENT_INFO_NLP</span></span><br><span class="line"><span class="string">    where</span></span><br><span class="line"><span class="string">        SPOT_ID=&#123;&#125;</span></span><br><span class="line"><span class="string">    and</span></span><br><span class="line"><span class="string">        EVALUATION like &#x27;%&#123;&#125;%&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(spot_id, comment_key_word))</span><br><span class="line">    list_test = cur.fetchall()</span><br><span class="line">    df_test = pd.DataFrame(list_test, columns=[<span class="string">&quot;spot_id&quot;</span>, <span class="string">&quot;evaluation&quot;</span>, <span class="string">&quot;evaluation_grade&quot;</span>,</span><br><span class="line">                                               <span class="string">&quot;evaluation_time&quot;</span>, <span class="string">&quot;feel_score&quot;</span>, <span class="string">&quot;feel&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(df_test.to_json(orient=<span class="string">&#x27;records&#x27;</span>, force_ascii=<span class="literal">False</span>).replace(<span class="string">&quot;null&quot;</span>, <span class="string">&quot;&#x27;未填&#x27;&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="接口">接口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/spot/comment/&lt;spot_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spot_comments_high_word_find</span>(<span class="params">spot_id</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;查询失败,请使用POST传参&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;null&#x27;</span>&#125;, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 获取post中传递的值</span></span><br><span class="line">    keyWord = request.args.to_dict()</span><br><span class="line">    data = dmToDfpkuseg.keyWordFindComment(<span class="built_in">eval</span>(spot_id), keyWord.get(<span class="string">&#x27;keyWord&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;查询失败,没有该景区关键字对应的评论&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;null&#x27;</span>&#125;,</span><br><span class="line">                          ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;查询成功&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;data&#x27;</span>: data&#125;, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="BUG-2">BUG</h2><p>​这个是flask中一个serser.py中的方法不能过多，我之前是有两个方法名的存在，而且能正常使用的情况的，不知道为什么现在不行，后面经过我测试，发现方法最多存在两个，而且需要一个有参一个无参的，不能两个有参的，即使参数的数量和类型不一样也不被允许。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102540595.png" alt="image-20250820102540595"></p><p>​我使用pyspark连接dm数据库的时候报错，看样子是找不到driver，搜索了方法，发现其实跟之前MySQL连接spark差不多，需要把driver的jar包放入spark的环境下面，将dm的jar包放到pyspark的jars包下面问题解决。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102547110.png" alt="image-20250820102547110"></p><h2 id="日总结-2">日总结</h2><blockquote><p>​今天完成的任务还是挺多的，而且梳理好了后面几天的计划，后几天打算把预测学会，看能不能举一反三把智能推荐部分解决了，这几天还需要想下推荐部分需要什么样的筛选条件。今天的任务主要有两个，根据关键字找到相关的评论，然后套加权算法把rating，也就是景区的综合推荐度计算出来，并放入数据库中，本来是打算写成接口的，但是spark接口响应实在是太慢了，直接存入数据库中了，如果spark写入接口一直都很慢的话，可能后期要弃用spark写推荐算法，要用pandas和numpy。</p></blockquote><h1 id="数据清洗方法整合">数据清洗方法整合</h1><h2 id="学习日期-6-2">学习日期: 6.2</h2><h2 id="项目任务-3">项目任务</h2><h3 id="起因">起因</h3><p>​因为数据有些缺失值是没有补的，有些只能python进行填补，有部分是要spark补的，但是一般自己处理完一部分直接存入数据库，这样我要顺利清洗完，需要跑好几个jar包，打算利用spark临时表的特性，尽量把运行起来，只需要两三个jar包就能把数据搞好。</p><h3 id="导入">导入</h3><p>​步骤以及思路:现将提供的所有文件传送到一个表中，代码也进行了很大的优化，前期准备工作一个scala代码就能解决，本来是因为txt文件是有java跑的，但是其实可以用scala调java的main方法，这样就可以放一个文件中。</p><h4 id="finalClearOne">finalClearOne</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> clearDf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> clearDf.<span class="type">Utils</span>.&#123;dmWriterOverwrite, getSpark&#125;</span><br><span class="line"><span class="keyword">import</span> clearDf.fileClearTest.&#123;csvToDf, xlsxToDf&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.<span class="type">IntegerType</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">finalClearOne</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = getSpark</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line">    sql(<span class="string">&quot; set spark.executor.processTreeMetrics=true&quot;</span>) <span class="comment">//解决报错警告导致代码跑不出来</span></span><br><span class="line">    <span class="keyword">val</span> frame2: <span class="type">DataFrame</span> = csvToDf(spark, <span class="string">&quot;E:\\study\\中软杯\\样数据\\1679624200845105\\初始旅游数据\\2.csv&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> frame3: <span class="type">DataFrame</span> = xlsxToDf(spark, <span class="string">&quot;E:\\study\\中软杯\\样数据\\1679624200845105\\初始旅游数据\\3.xlsx&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> frame4: <span class="type">DataFrame</span> = csvToDf(spark, <span class="string">&quot;E:\\study\\中软杯\\样数据\\1679624200845105\\初始旅游数据\\4.csv&quot;</span>)</span><br><span class="line">    <span class="comment">//缺失字段  PHONE INTRO HOT COMMENT_TIME COMMENT_GRADE</span></span><br><span class="line">    <span class="keyword">val</span> frameSmallFill: <span class="type">DataFrame</span> = frame2.unionByName(frame3)</span><br><span class="line">      .withColumn(<span class="string">&quot;GRADE&quot;</span>,round(substring($<span class="string">&quot;GRADE&quot;</span>,<span class="number">1</span>,<span class="number">2</span>).cast(<span class="type">IntegerType</span>) / <span class="number">20</span>,<span class="number">1</span>))</span><br><span class="line">      <span class="comment">//补充缺失字段</span></span><br><span class="line">      .withColumn(<span class="string">&quot;PHONE&quot;</span>,lit(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;INTRO&quot;</span>,lit(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;HOT&quot;</span>,lit(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;COMMENT_GRADE&quot;</span>,lit(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;COMMENT_TIME&quot;</span>,lit(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> frameAllData:<span class="type">DataFrame</span> = frame4.unionByName(frameSmallFill)</span><br><span class="line"></span><br><span class="line">    dmWriterOverwrite(frameAllData,<span class="string">&quot;U7U7.All_TEMP&quot;</span>)</span><br><span class="line">    <span class="comment">//需要先java把txt保存入all_temp表</span></span><br><span class="line">    <span class="keyword">import</span> clearTxt.txtClearArrayList</span><br><span class="line">    txtClearArrayList.txtIntoDmData.main()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BUG-3">BUG</h2><p>很困难解决的bug没有出现</p><h2 id="日总结-3">日总结</h2><blockquote><p>​因为据说下周服务器平台就会发放了，为了处理平台可能提供的hdfs的新数据，打算将自己之前数据处理的代码整合一下，放到一个jar包中，方法都设置参数通用，这样在平台执行，也只需要两个spark提交即可。没什么困难的，后面整合表抽取部分数据以及挂join城市表挂id这类的方法，重新梳理好方法可能会麻烦一些，需要把代码都理清楚。</p></blockquote><h1 id="清洗方法整合all">清洗方法整合all</h1><h2 id="学习日期-6-5">学习日期: 6.5</h2><h2 id="项目任务-4">项目任务</h2><h3 id="任务">任务</h3><p>将csv和txt文件读取以后的all_temp分表处理，先是对自己电脑上对dm添加数据，然后移植到了服务器中。然后使用人工智能这块对缺失的数据预测掉。</p><h3 id="代码如下">代码如下</h3><p>全部整合了分表的代码，并利用sparkml将hot字段进行缺失值填充。机器学习这部分我使用了随机森林算法，依据hot的皮平均值，和对应的grade和sum字段，推算出可能的hot值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> clearDf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> clearDf.<span class="type">Utils</span>.&#123;dmRead, dmWriterOverwrite, getSpark&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.feature.<span class="type">VectorAssembler</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.regression.&#123;<span class="type">RandomForestRegressionModel</span>, <span class="type">RandomForestRegressor</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.&#123;<span class="type">Window</span>, <span class="type">WindowSpec</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.<span class="type">DoubleType</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">finalClearTwo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = getSpark</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 将所有文件都导入到all_temp表</span></span><br><span class="line">    finalClearOne.main(args)</span><br><span class="line">    <span class="comment">//对all_temp表进行处理</span></span><br><span class="line">    <span class="keyword">val</span> all_data: <span class="type">DataFrame</span> = dmRead(spark, <span class="string">&quot;ALL_TEMP&quot;</span>)</span><br><span class="line">      .withColumn(<span class="string">&quot;SPOT&quot;</span>, regexp_replace($<span class="string">&quot;SPOT&quot;</span>, <span class="string">&quot;\\?&quot;</span>, <span class="string">&quot;&quot;</span>)) <span class="comment">//将脏数据中景区名带？的去掉</span></span><br><span class="line">      .where(<span class="string">&quot;SPOT &lt;&gt; &#x27;null&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建景区dataframe导入景区表</span></span><br><span class="line">    <span class="keyword">val</span> spot_info: <span class="type">DataFrame</span> = spotInfoClear(all_data)</span><br><span class="line">    <span class="comment">//创建并导入评论表 (后python还需要处理)</span></span><br><span class="line">    <span class="keyword">val</span> comment_info: <span class="type">DataFrame</span> = commentWithSpot(all_data, spot_info)</span><br><span class="line">    println(comment_info.count())</span><br><span class="line"><span class="comment">//    dmWriterOverwrite(comment_info,&quot;comment_temp&quot;)</span></span><br><span class="line">    <span class="comment">//临时的城市表(不带省份)</span></span><br><span class="line">    <span class="keyword">val</span> city_temp:<span class="type">DataFrame</span> = cityInfoClear(spot_info)</span><br><span class="line">    <span class="comment">//先导入 方便java读取</span></span><br><span class="line">    dmWriterOverwrite(city_temp,<span class="string">&quot;city_info_temp&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spot_info_temp: <span class="type">DataFrame</span> = spotWithCityId(spot_info, city_temp) <span class="comment">//带城市id的景区表</span></span><br><span class="line">    <span class="comment">//创建城市空表  添加省份字段</span></span><br><span class="line">    <span class="keyword">val</span> create_temp_city: <span class="type">DataFrame</span> = city_temp</span><br><span class="line">      .withColumn(<span class="string">&quot;PROVINCE_NAME&quot;</span>, lit(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      .where(<span class="string">&quot;CITY_ID=0&quot;</span>)</span><br><span class="line">    dmWriterOverwrite(create_temp_city,<span class="string">&quot;CITY_TEMP&quot;</span>) <span class="comment">//空表结构到dm</span></span><br><span class="line">    <span class="comment">//执行java中根据城市名判断省份代码</span></span><br><span class="line">    <span class="keyword">import</span> clearTxt.jsTest.jsonToDataTest</span><br><span class="line">    jsonToDataTest.provinceNameIntoCity()</span><br><span class="line">    <span class="comment">//读取城市表(省份名)</span></span><br><span class="line">    <span class="keyword">val</span> city_temp_two:<span class="type">DataFrame</span> = dmRead(spark, <span class="string">&quot;CITY_TEMP&quot;</span>)</span><br><span class="line">    <span class="comment">//根据城市表(省份名) 创建省份表(完整版)</span></span><br><span class="line">    <span class="keyword">val</span> province_data: <span class="type">DataFrame</span> = createToProvince(city_temp_two)</span><br><span class="line">    dmWriterOverwrite(province_data,<span class="string">&quot;PROVINCE_INFO&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将城市表的省份名替换为id 并导入dm(完整版)</span></span><br><span class="line">    <span class="keyword">val</span> city_info_final:<span class="type">DataFrame</span> = cityJoinProvince(city_temp_two,province_data)</span><br><span class="line">    dmWriterOverwrite(city_info_final,<span class="string">&quot;CITY_INFO&quot;</span>)</span><br><span class="line">    <span class="comment">//hot字段填充 景区表导入 还需要python配rating字段</span></span><br><span class="line">    <span class="keyword">val</span> spot_Prediction: <span class="type">DataFrame</span> = spotPredictionFinalTable(spot_info_temp)</span><br><span class="line">    dmWriterOverwrite(spot_Prediction, <span class="string">&quot;spot_info_temp&quot;</span>) <span class="comment">//导入dm</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//随机森林 hot的null填充</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">spotPredictionFinalTable</span></span>(spot_info_temp: <span class="type">DataFrame</span>): <span class="type">DataFrame</span> =&#123;</span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">DataFrame</span> = spot_info_temp.selectExpr(<span class="string">&quot;SPOT_ID&quot;</span>,<span class="string">&quot;GRADE&quot;</span>,<span class="string">&quot;HOT&quot;</span>,<span class="string">&quot;SUM&quot;</span>)</span><br><span class="line">      .withColumn(<span class="string">&quot;GRADE&quot;</span>,$<span class="string">&quot;GRADE&quot;</span>.cast(<span class="type">DoubleType</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;HOT&quot;</span>,$<span class="string">&quot;HOT&quot;</span>.cast(<span class="type">DoubleType</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;SUM&quot;</span>,regexp_extract($<span class="string">&quot;SUM&quot;</span>,<span class="string">&quot;[^条]+()&quot;</span>,<span class="number">0</span>).cast(<span class="type">DoubleType</span>))</span><br><span class="line">    <span class="keyword">val</span> data2: <span class="type">DataFrame</span> = spot_info_temp</span><br><span class="line">      .withColumn(<span class="string">&quot;HOT&quot;</span>,$<span class="string">&quot;HOT&quot;</span>.cast(<span class="type">DoubleType</span>))</span><br><span class="line">    <span class="keyword">val</span> meanValues: <span class="type">Double</span> = data.agg(round(avg(col(<span class="string">&quot;HOT&quot;</span>)),<span class="number">1</span>)).head().getDouble(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> filledData: <span class="type">DataFrame</span> = data.na.fill(meanValues, <span class="type">Seq</span>(<span class="string">&quot;HOT&quot;</span>))</span><br><span class="line">    <span class="comment">// 将特征转化为向量</span></span><br><span class="line">    <span class="keyword">val</span> assembler: <span class="type">VectorAssembler</span> = <span class="keyword">new</span> <span class="type">VectorAssembler</span>()</span><br><span class="line">      .setInputCols(<span class="type">Array</span>(<span class="string">&quot;GRADE&quot;</span>, <span class="string">&quot;SUM&quot;</span>))</span><br><span class="line">      .setOutputCol(<span class="string">&quot;features&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> assembledData: <span class="type">DataFrame</span> = assembler.transform(filledData)</span><br><span class="line">    <span class="comment">// 创建随机森林回归模型</span></span><br><span class="line">    <span class="keyword">val</span> rf: <span class="type">RandomForestRegressor</span> = <span class="keyword">new</span> <span class="type">RandomForestRegressor</span>()</span><br><span class="line">      .setLabelCol(<span class="string">&quot;HOT&quot;</span>)</span><br><span class="line">      .setFeaturesCol(<span class="string">&quot;features&quot;</span>)</span><br><span class="line">    <span class="comment">// 拟合模型</span></span><br><span class="line">    <span class="keyword">val</span> model: <span class="type">RandomForestRegressionModel</span> = rf.fit(assembledData)</span><br><span class="line">    <span class="comment">// 使用模型填充缺失值</span></span><br><span class="line">    <span class="keyword">val</span> predictedData: <span class="type">DataFrame</span> = data.na.fill(meanValues, <span class="type">Seq</span>(<span class="string">&quot;HOT&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> assembledPredictedData: <span class="type">DataFrame</span> = assembler.transform(predictedData)</span><br><span class="line">    <span class="keyword">val</span> filledPredictedData: <span class="type">DataFrame</span> = model.transform(assembledPredictedData)</span><br><span class="line">      .withColumn(<span class="string">&quot;prediction&quot;</span>, round(col(<span class="string">&quot;prediction&quot;</span>), <span class="number">1</span>))</span><br><span class="line">    <span class="comment">//所有景区的hot预测</span></span><br><span class="line">    <span class="keyword">val</span> predict: <span class="type">DataFrame</span> = filledPredictedData.selectExpr(<span class="string">&quot;SPOT_ID&quot;</span>,<span class="string">&quot;prediction&quot;</span>).withColumnRenamed(<span class="string">&quot;SPOT_ID&quot;</span>,<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="comment">//将hot的预测值 填充null 并将hot和grade类型转换成double</span></span><br><span class="line">    data2.join(predict,predict(<span class="string">&quot;id&quot;</span>) === data2(<span class="string">&quot;SPOT_ID&quot;</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;HOT&quot;</span>,</span><br><span class="line">        when(col(<span class="string">&quot;HOT&quot;</span>).isNull, col(<span class="string">&quot;prediction&quot;</span>)).otherwise(col(<span class="string">&quot;hot&quot;</span>)))</span><br><span class="line">      .withColumn(<span class="string">&quot;HOT&quot;</span>,round($<span class="string">&quot;HOT&quot;</span>,<span class="number">1</span>))</span><br><span class="line">      .withColumn(<span class="string">&quot;GRADE&quot;</span>,round($<span class="string">&quot;GRADE&quot;</span>,<span class="number">1</span>))</span><br><span class="line">      .drop(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;prediction&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//TODO 将城市表的省份名换成省份id</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cityJoinProvince</span></span>(city_data:<span class="type">DataFrame</span>,province_data:<span class="type">DataFrame</span>): <span class="type">DataFrame</span> =&#123;</span><br><span class="line">    <span class="comment">//两表连接取出需要的字段</span></span><br><span class="line">    <span class="keyword">val</span> city_temp: <span class="type">DataFrame</span> = city_data.join(province_data, city_data(<span class="string">&quot;PROVINCE_NAME&quot;</span>) === province_data(<span class="string">&quot;NAME&quot;</span>))</span><br><span class="line">          .selectExpr(<span class="string">&quot;CITY_NAME&quot;</span>, <span class="string">&quot;CITY_ID&quot;</span>, <span class="string">&quot;PROVINCE_ID&quot;</span>)</span><br><span class="line">    <span class="comment">//把数据先放临时表</span></span><br><span class="line">    city_temp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//TODO 创建省份表</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createToProvince</span></span>(city_data:<span class="type">DataFrame</span>): <span class="type">DataFrame</span> =&#123;</span><br><span class="line">    <span class="comment">//读取省份表并去重  递增挂上省份id</span></span><br><span class="line">    <span class="keyword">val</span> province_data: <span class="type">DataFrame</span> = city_data</span><br><span class="line">      .selectExpr(<span class="string">&quot;PROVINCE_NAME&quot;</span>)</span><br><span class="line">      .distinct()</span><br><span class="line">      .withColumnRenamed(<span class="string">&quot;PROVINCE_NAME&quot;</span>, <span class="string">&quot;NAME&quot;</span>)</span><br><span class="line">      .withColumn(<span class="string">&quot;PROVINCE_ID&quot;</span>, row_number() over <span class="type">Window</span>.orderBy($<span class="string">&quot;NAME&quot;</span>))</span><br><span class="line">    <span class="comment">//传入省份表</span></span><br><span class="line">    province_data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//景区表</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">spotInfoClear</span></span>(all_data: <span class="type">DataFrame</span>): <span class="type">DataFrame</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="type">SPOT_ID_ORDER</span>: <span class="type">WindowSpec</span> = <span class="type">Window</span>.orderBy($<span class="string">&quot;SPOT_NAME&quot;</span>.desc)</span><br><span class="line">    <span class="keyword">val</span> spot_info_temp: <span class="type">DataFrame</span> = all_data <span class="comment">//景区名不为null</span></span><br><span class="line">      .withColumnRenamed(<span class="string">&quot;SPOT&quot;</span>, <span class="string">&quot;SPOT_NAME&quot;</span>) <span class="comment">//修改字段名 SPOT 为 SPOT_NAME</span></span><br><span class="line">      <span class="comment">//删除不需要的字段</span></span><br><span class="line">      .drop(<span class="string">&quot;COMMENT&quot;</span>)</span><br><span class="line">      .drop(<span class="string">&quot;COMMENT_GRADE&quot;</span>)</span><br><span class="line">      .drop(<span class="string">&quot;COMMENT_TIME&quot;</span>)</span><br><span class="line">      .distinct() <span class="comment">//去重</span></span><br><span class="line">      .withColumn(<span class="string">&quot;SPOT_ID&quot;</span>, row_number() over <span class="type">SPOT_ID_ORDER</span>)</span><br><span class="line">      .where(<span class="string">&quot;SPOT_ID&lt;&gt;9&quot;</span>) <span class="comment">//因为txt中和csv中都有武当山景区，但是介绍多了空格，所以也要去重</span></span><br><span class="line">      .withColumn(<span class="string">&quot;SPOT_ID&quot;</span>, row_number() over <span class="type">SPOT_ID_ORDER</span>) <span class="comment">//去重以后重新增加列</span></span><br><span class="line">    spot_info_temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//评论表</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">commentWithSpot</span></span>(all_data: <span class="type">DataFrame</span>, spot_data: <span class="type">DataFrame</span>): <span class="type">DataFrame</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> comment_info_temp: <span class="type">DataFrame</span> = all_data.join(spot_data, all_data(<span class="string">&quot;SPOT&quot;</span>) === spot_data(<span class="string">&quot;SPOT_NAME&quot;</span>))</span><br><span class="line">      .selectExpr(<span class="string">&quot;SPOT_ID&quot;</span>, <span class="string">&quot;COMMENT&quot;</span>, <span class="string">&quot;COMMENT_GRADE&quot;</span>, <span class="string">&quot;COMMENT_TIME&quot;</span>)</span><br><span class="line">      .withColumnRenamed(<span class="string">&quot;COMMENT&quot;</span>, <span class="string">&quot;EVALUATION&quot;</span>)</span><br><span class="line">      .withColumnRenamed(<span class="string">&quot;COMMENT_GRADE&quot;</span>, <span class="string">&quot;EVALUATION_GRADE&quot;</span>)</span><br><span class="line">      .withColumnRenamed(<span class="string">&quot;COMMENT_TIME&quot;</span>, <span class="string">&quot;EVALUATION_TIME&quot;</span>)</span><br><span class="line">      .where(<span class="string">&quot;EVALUATION&lt;&gt;&#x27;NULL&#x27;&quot;</span>).distinct()</span><br><span class="line">      .withColumn(<span class="string">&quot;EVALUATION_ID&quot;</span>, row_number() over <span class="type">Window</span>.orderBy($<span class="string">&quot;SPOT_ID&quot;</span>)) <span class="comment">//去重以后重新增加列</span></span><br><span class="line">    comment_info_temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cityInfoClear</span></span>(spot_info:<span class="type">DataFrame</span>): <span class="type">DataFrame</span> =&#123;</span><br><span class="line">    spot_info.createOrReplaceTempView(<span class="string">&quot;spot_info&quot;</span>)</span><br><span class="line">    <span class="comment">//[\u4e00-\u9fa5]&#123;2&#125;(?=市)+市</span></span><br><span class="line">    <span class="keyword">val</span> city_final_frame: <span class="type">DataFrame</span> = sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |if(locate(&#x27;市&#x27;,LOCATION)&lt;&gt;&#x27;0&#x27;,regexp_extract(LOCATION,&quot;([^市]&#123;2&#125;()+市)&quot;),regexp_extract(LOCATION,&quot;([^省]+省)?([^自治州]+自治州)&quot;, 2)) as CITY_NAME</span></span><br><span class="line"><span class="string">        |from</span></span><br><span class="line"><span class="string">        |spot_info</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">      .distinct()</span><br><span class="line">      <span class="comment">//填充CITY_Id</span></span><br><span class="line">      .withColumn(<span class="string">&quot;CITY_ID&quot;</span>, row_number() over <span class="type">Window</span>.orderBy($<span class="string">&quot;CITY_NAME&quot;</span>.desc))</span><br><span class="line">    city_final_frame</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//景区表挂城市id</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">spotWithCityId</span></span>(spot_info:<span class="type">DataFrame</span>,city_temp:<span class="type">DataFrame</span>): <span class="type">DataFrame</span> =&#123;</span><br><span class="line">    spot_info.createOrReplaceTempView(<span class="string">&quot;spot_info&quot;</span>)</span><br><span class="line">    city_temp.createOrReplaceTempView(<span class="string">&quot;city_info&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spot_test: <span class="type">DataFrame</span> = sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |with t1 as (</span></span><br><span class="line"><span class="string">         |select</span></span><br><span class="line"><span class="string">         |*,</span></span><br><span class="line"><span class="string">         |if(locate(&#x27;市&#x27;,LOCATION)&lt;&gt;&#x27;0&#x27;,regexp_extract(LOCATION,&quot;</span>([^市]&#123;<span class="number">2</span>&#125;()+市)<span class="string">&quot;),regexp_extract(LOCATION,&quot;</span>([^省]+省)?([^自治州]+自治州)<span class="string">&quot;, 2)) as NAME</span></span><br><span class="line"><span class="string">         |from</span></span><br><span class="line"><span class="string">         |spot_info)</span></span><br><span class="line"><span class="string">         |select</span></span><br><span class="line"><span class="string">         |t1.*,</span></span><br><span class="line"><span class="string">         |ci.CITY_ID</span></span><br><span class="line"><span class="string">         |from</span></span><br><span class="line"><span class="string">         |t1</span></span><br><span class="line"><span class="string">         |join city_info ci on ci.CITY_NAME = t1.NAME</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin).drop(<span class="string">&quot;NAME&quot;</span>)</span><br><span class="line">    spot_test</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机森林对hot填充">随机森林对hot填充</h3><p>这块自己研究了一下午+一晚上才搞定</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机森林 hot的null填充</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spotPredictionFinalTable</span></span>(spot_info_temp: <span class="type">DataFrame</span>): <span class="type">DataFrame</span> =&#123;</span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="keyword">val</span> data: <span class="type">DataFrame</span> = spot_info_temp.selectExpr(<span class="string">&quot;SPOT_ID&quot;</span>,<span class="string">&quot;GRADE&quot;</span>,<span class="string">&quot;HOT&quot;</span>,<span class="string">&quot;SUM&quot;</span>)</span><br><span class="line">    .withColumn(<span class="string">&quot;GRADE&quot;</span>,$<span class="string">&quot;GRADE&quot;</span>.cast(<span class="type">DoubleType</span>))</span><br><span class="line">    .withColumn(<span class="string">&quot;HOT&quot;</span>,$<span class="string">&quot;HOT&quot;</span>.cast(<span class="type">DoubleType</span>))</span><br><span class="line">    .withColumn(<span class="string">&quot;SUM&quot;</span>,regexp_extract($<span class="string">&quot;SUM&quot;</span>,<span class="string">&quot;[^条]+()&quot;</span>,<span class="number">0</span>).cast(<span class="type">DoubleType</span>))</span><br><span class="line">    <span class="keyword">val</span> data2: <span class="type">DataFrame</span> = spot_info_temp</span><br><span class="line">    .withColumn(<span class="string">&quot;HOT&quot;</span>,$<span class="string">&quot;HOT&quot;</span>.cast(<span class="type">DoubleType</span>))</span><br><span class="line">    <span class="keyword">val</span> meanValues: <span class="type">Double</span> = data.agg(round(avg(col(<span class="string">&quot;HOT&quot;</span>)),<span class="number">1</span>)).head().getDouble(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> filledData: <span class="type">DataFrame</span> = data.na.fill(meanValues, <span class="type">Seq</span>(<span class="string">&quot;HOT&quot;</span>))</span><br><span class="line">    <span class="comment">// 将特征转化为向量</span></span><br><span class="line">    <span class="keyword">val</span> assembler: <span class="type">VectorAssembler</span> = <span class="keyword">new</span> <span class="type">VectorAssembler</span>()</span><br><span class="line">    .setInputCols(<span class="type">Array</span>(<span class="string">&quot;GRADE&quot;</span>, <span class="string">&quot;SUM&quot;</span>))</span><br><span class="line">    .setOutputCol(<span class="string">&quot;features&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> assembledData: <span class="type">DataFrame</span> = assembler.transform(filledData)</span><br><span class="line">    <span class="comment">// 创建随机森林回归模型</span></span><br><span class="line">    <span class="keyword">val</span> rf: <span class="type">RandomForestRegressor</span> = <span class="keyword">new</span> <span class="type">RandomForestRegressor</span>()</span><br><span class="line">    .setLabelCol(<span class="string">&quot;HOT&quot;</span>)</span><br><span class="line">    .setFeaturesCol(<span class="string">&quot;features&quot;</span>)</span><br><span class="line">    <span class="comment">// 拟合模型</span></span><br><span class="line">    <span class="keyword">val</span> model: <span class="type">RandomForestRegressionModel</span> = rf.fit(assembledData)</span><br><span class="line">    <span class="comment">// 使用模型填充缺失值</span></span><br><span class="line">    <span class="keyword">val</span> predictedData: <span class="type">DataFrame</span> = data.na.fill(meanValues, <span class="type">Seq</span>(<span class="string">&quot;HOT&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> assembledPredictedData: <span class="type">DataFrame</span> = assembler.transform(predictedData)</span><br><span class="line">    <span class="keyword">val</span> filledPredictedData: <span class="type">DataFrame</span> = model.transform(assembledPredictedData)</span><br><span class="line">    .withColumn(<span class="string">&quot;prediction&quot;</span>, round(col(<span class="string">&quot;prediction&quot;</span>), <span class="number">1</span>))</span><br><span class="line">    <span class="comment">//所有景区的hot预测</span></span><br><span class="line">    <span class="keyword">val</span> predict: <span class="type">DataFrame</span> = filledPredictedData.selectExpr(<span class="string">&quot;SPOT_ID&quot;</span>,<span class="string">&quot;prediction&quot;</span>).withColumnRenamed(<span class="string">&quot;SPOT_ID&quot;</span>,<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="comment">//将hot的预测值 填充null 并将hot和grade类型转换成double</span></span><br><span class="line">    data2.join(predict,predict(<span class="string">&quot;id&quot;</span>) === data2(<span class="string">&quot;SPOT_ID&quot;</span>))</span><br><span class="line">    .withColumn(<span class="string">&quot;HOT&quot;</span>,</span><br><span class="line">                when(col(<span class="string">&quot;HOT&quot;</span>).isNull, col(<span class="string">&quot;prediction&quot;</span>)).otherwise(col(<span class="string">&quot;hot&quot;</span>)))</span><br><span class="line">    .withColumn(<span class="string">&quot;HOT&quot;</span>,round($<span class="string">&quot;HOT&quot;</span>,<span class="number">1</span>))</span><br><span class="line">    .withColumn(<span class="string">&quot;GRADE&quot;</span>,round($<span class="string">&quot;GRADE&quot;</span>,<span class="number">1</span>))</span><br><span class="line">    .drop(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;prediction&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BUG-4">BUG</h2><p>​预测这边的报错还是挺多的，但是主要报错都是自己设置模型的时候字段没看清楚，都是xxx字段不存在之类的，慢慢修改以后发现预测效果还可以。</p><h2 id="日总结-4">日总结</h2><blockquote><p>​今天的任务还是整合和预测填充，本来打算用中位数或者avg平均值填充的，但是数据展示的话，一行平的不太好看，所以使用了预测，预测那块还是挺难懂的，简单说就是利用已知的会影响缺失值的数据，做模型的支撑数据，算出缺失的hot。原理就是回归算法，简单说就是你对一个数据打分了，数据其实也会反映出你的习惯之类的，是一个相互的过程，随机森林就是利用这点，反向推测出数据。</p></blockquote><h1 id="python评论表优化">python评论表优化</h1><h2 id="学习日期-6-6">学习日期: 6.6</h2><h2 id="项目任务-5">项目任务</h2><h3 id="起因-2">起因</h3><p>​因为评论表中grade字段很多是缺失的，又因为之前自己是对语言进行过情绪分分析的所以，对于这部分缺失值可以填充，然后就是ip以及时间了，发现了一个很好用的类faker，他可以随机生成省份以及地址，又因为其他数据的省份好像都是两字而且不带省和自治州这些的，就稍加处理了一下用了递归。</p><h3 id="代码如下-2">代码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> radar</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">from</span> finalMain.DmConnect <span class="keyword">import</span> connDm</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> sentiment</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">provinceRandom</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    f = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line">    province = f.province()</span><br><span class="line">    <span class="keyword">if</span> province.find(<span class="string">&quot;省&quot;</span>) != -<span class="number">1</span> <span class="keyword">or</span> province.find(<span class="string">&quot;市&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> province[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> provinceRandom()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">provinceList</span>():</span><br><span class="line">    province_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(province_list) &lt;= <span class="number">26</span>:</span><br><span class="line">        province = provinceRandom()</span><br><span class="line">        <span class="keyword">if</span> province <span class="keyword">not</span> <span class="keyword">in</span> province_list:</span><br><span class="line">            province_list.append(province)</span><br><span class="line">    <span class="keyword">return</span> province_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断情绪评分 并返回相对应的值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoreSnow</span>(<span class="params">sentiments</span>):</span><br><span class="line">    <span class="comment"># sentiments = SnowNLP(comment).sentiments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0.9</span> &lt;= sentiments &lt;= <span class="number">1</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;超棒&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.8</span> &lt;= sentiments &lt;= <span class="number">0.9</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;满意&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.5</span> &lt;= sentiments &lt;= <span class="number">0.8</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不错&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.2</span> &lt;= sentiments &lt;= <span class="number">0.5</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;一般&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不佳&quot;</span></span><br><span class="line">    <span class="keyword">return</span> feelMood</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入dm数据库</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">intoDm</span>(<span class="params">data, tableName</span>):</span><br><span class="line">    <span class="comment"># 创建url</span></span><br><span class="line">    conn_url = <span class="string">&#x27;dm+dmPython://SYSDBA:SYSDBA@47.120.9.247:5236/&#x27;</span></span><br><span class="line">    <span class="comment"># 创建Engine对象</span></span><br><span class="line">    engine = create_engine(conn_url)</span><br><span class="line">    <span class="comment"># 到dm8中</span></span><br><span class="line">    data.to_sql(name=tableName, con=engine, if_exists=<span class="string">&#x27;append&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">commentDataFinalIntoDm</span>():</span><br><span class="line">    data_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">&#x27;snownlpDrill/sentiment.marshal&#x27;</span>)</span><br><span class="line">    sentiment.load(data_path)</span><br><span class="line"></span><br><span class="line">conn = connDm()</span><br><span class="line"><span class="comment"># 获取游标</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"><span class="comment"># 查询评论表全部数据</span></span><br><span class="line">cur.execute(<span class="string">&quot;select * from COMMENT_TEMP&quot;</span>)</span><br><span class="line">comment_list: <span class="built_in">list</span> = cur.fetchall()</span><br><span class="line">comment_df = pd.DataFrame(comment_list,</span><br><span class="line">                          columns=[<span class="string">&quot;SPOT_ID&quot;</span>, <span class="string">&quot;EVALUATION&quot;</span>, <span class="string">&quot;EVALUATION_GRADE&quot;</span>, <span class="string">&quot;EVALUATION_TIME&quot;</span>, <span class="string">&quot;EVALUATION_ID&quot;</span>])</span><br><span class="line"><span class="comment"># 将EVALUATION_ID作为行索引</span></span><br><span class="line"><span class="comment"># comment_df.set_index(&#x27;EVALUATION_ID&#x27;, inplace=True)</span></span><br><span class="line"><span class="comment"># 添加两列为空值 存放情绪分和对应的情绪</span></span><br><span class="line">comment_df[<span class="string">&#x27;FEEL_SCORE&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">comment_df[<span class="string">&#x27;FEEL&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 省份列表</span></span><br><span class="line">province_list = provinceList()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历评论id</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">list</span>(comment_df.index):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取对应的评论id的评论</span></span><br><span class="line">    comment_values = comment_df[<span class="string">&#x27;EVALUATION&#x27;</span>]</span><br><span class="line">    comment_value = comment_values.loc[index]</span><br><span class="line">    <span class="keyword">if</span> comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>].loc[index] == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        random_index = random.randrange(<span class="built_in">len</span>(province_list))</span><br><span class="line">        comment_df.iloc[index - <span class="number">1</span>, <span class="number">3</span>] = <span class="built_in">str</span>(radar.random_date(<span class="string">&quot;2020-09-13&quot;</span>, <span class="string">&quot;2023-02-02&quot;</span>).date()) + <span class="string">&quot;IP属地: &quot;</span> + \</span><br><span class="line">                                        province_list[random_index]</span><br><span class="line">    <span class="comment"># 计算出该评论的情绪分值</span></span><br><span class="line">    score = <span class="built_in">round</span>(SnowNLP(comment_value).sentiments, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 添加到feelScore列</span></span><br><span class="line">    feelScore = <span class="built_in">round</span>(score * <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">    comment_df.iloc[index - <span class="number">1</span>, <span class="number">5</span>] = feelScore</span><br><span class="line">    <span class="comment"># 评论情绪</span></span><br><span class="line">    feel = scoreSnow(score)</span><br><span class="line">    comment_df.iloc[index - <span class="number">1</span>, <span class="number">6</span>] = feel</span><br><span class="line">    <span class="keyword">if</span> comment_df[<span class="string">&#x27;EVALUATION_GRADE&#x27;</span>].loc[index] == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        comment_df.iloc[index - <span class="number">1</span>, <span class="number">2</span>] = <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(feelScore, <span class="number">0</span>))) + <span class="string">&quot;分 &quot;</span> + feel</span><br><span class="line">    intoDm(comment_df, <span class="string">&quot;COMMENT_INFO&quot;</span>)</span><br><span class="line">commentDataFinalIntoDm()</span><br></pre></td></tr></table></figure><h3 id="数据处理效果">数据处理效果</h3><p>​预测不准的情况还在解决，但不是现在的重点。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102614241.png" alt="image-20250820102614241"></p><h2 id="BUG-5">BUG</h2><p>​没找到原因，应该是自己的中位数是string类型的吧可能，因为这块本来是对sum字段用中位数填充的，但是后面发现数据都是有sum的，就直接注释了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102619588.png" alt="image-20250820102619588"></p><h2 id="日总结-5">日总结</h2><blockquote><p>​今日任务主要是优化，然后测试了多次，从空表直接执行一次spark代码一次py代码就将数据处理好并存入dm的数据库中了。今天主要是收获是发现了一个很好用的能填充随机参数了类，python faker库能随机生成很多需要的个人信息或者编码之类的挺多数据的，而且格式可以调，还是很不错的。</p></blockquote><h1 id="使用spark-submit提交">使用spark-submit提交</h1><h2 id="学习日期-6-7">学习日期: 6.7</h2><h2 id="项目任务-6">项目任务</h2><p>​将自己电脑内的hadoop启动，用spark提交尝试提高清洗运行速度。大概需要1分钟一次，问题出现在过程中使用了java的代码，java又不支持分布式计算平台，所以导致时间画得比较久，而且spark启动也会花费时间。</p><p>​电脑又装了一个伪分布式的hadoop，花了一上午的时间，下午就在测试了，大概洗完样数据，只要2分钟，一次jar包，一次python执行。安装hadoop步骤就不写了，挂个网址好了，<a href="http://t.csdn.cn/SuQmN%EF%BC%8C%E6%89%BEhadoop3.2.2%E8%8A%B1%E8%B4%B9%E4%BA%86%E7%82%B9%E6%97%B6%E9%97%B4%EF%BC%8C%E8%BF%98%E9%9C%80%E8%A6%81%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84window.exe">http://t.csdn.cn/SuQmN，找hadoop3.2.2花费了点时间，还需要对应版本的window.exe</a></p><h2 id="BUG-6">BUG</h2><p>​使用spark-submit提交jar包读取发现有部分乱码，仔细看了看都是在后面的数据，好像就是3000条，那就是java洗的，去找java那部分代码的格式问题，发现读txt文件的时候就已经乱码了，起初还以为是导入数据库才乱码，还修改了url结果是IO流的问题reader = new InputStreamReader(file, StandardCharsets.UTF_8);读文件的时候加编码格式就行了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102631492.png" alt="image-20250820102631492"></p><p>​java部分的报错，一直说找不到city.json，打完jar包也没搞懂他读取文件的路径相对路径到底怎么写，直接写绝对路径了，等放服务器中再改好了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102636725.png" alt="image-20250820102636725"></p><h2 id="日总结-6">日总结</h2><blockquote><p>​今天刚把平台发放，还咩有研究明白，现测试自己的清洗代码打jar包能不能顺利执行，上午配置了hadoop以及spark的环境，下午对打完jar包以后，一些路径和编码这样的小细节进行了处理，目前感觉最主要的是平台的使用，清洗这部分对样数据是没什么问题了，还得看hdfs的数据，如果相差很大就糟糕了。</p></blockquote><h1 id="清洗txt文件夹">清洗txt文件夹</h1><h2 id="学习日期-6-8">学习日期: 6.8</h2><h2 id="项目任务-7">项目任务</h2><h3 id="起因-3">起因</h3><p>​因为关系到清洗测试以及速度问题，之前自己1w条数据就花费了1分钟清洗，这一些增加到了百万条，自己那种代码肯定不行了尤其是java处理txt那边，估计是内存都要爆，得换成pandas了，之前spark代码就要推翻重新搞了，要纯python清洗了。</p><h3 id="清洗txt">清洗txt</h3><p>​因为txt是之前我觉得最难的，所以先使用一些python对txt能不能很好的处理以及效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> radar</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">from</span> hdfs3 <span class="keyword">import</span> HDFileSystem</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理评论 情绪化打分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoreSnow</span>(<span class="params">sentiments</span>):</span><br><span class="line">    <span class="comment"># sentiments = SnowNLP(comment).sentiments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0.9</span> &lt;= sentiments &lt;= <span class="number">1</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;超棒&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.8</span> &lt;= sentiments &lt;= <span class="number">0.9</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;满意&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.5</span> &lt;= sentiments &lt;= <span class="number">0.8</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不错&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.2</span> &lt;= sentiments &lt;= <span class="number">0.5</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;一般&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不佳&quot;</span></span><br><span class="line">    <span class="keyword">return</span> feelMood</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有的省份 去掉最后的省和市 递归找到只为省和直辖市的地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">provinceRandom</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    f = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line">    province = f.province()</span><br><span class="line">    <span class="keyword">if</span> province.find(<span class="string">&quot;省&quot;</span>) != -<span class="number">1</span> <span class="keyword">or</span> province.find(<span class="string">&quot;市&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> province[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> provinceRandom()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将地址都放入列表，这样填充会快很多，因为递归算法只用执行到26个都取到即可。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">provinceList</span>():</span><br><span class="line">    province_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(province_list) &lt;= <span class="number">26</span>:</span><br><span class="line">        province = provinceRandom()</span><br><span class="line">        <span class="keyword">if</span> province <span class="keyword">not</span> <span class="keyword">in</span> province_list:</span><br><span class="line">            province_list.append(province)</span><br><span class="line">    <span class="keyword">return</span> province_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取hdfs文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hdfsFileRead</span>():</span><br><span class="line">    <span class="comment"># 创建一个 HDFileSystem 对象</span></span><br><span class="line">    hdfs = HDFileSystem(host=<span class="string">&#x27;hadoopb-namenode.damengb-zone.svc&#x27;</span>, port=<span class="number">9000</span>)</span><br><span class="line">    <span class="comment"># 读取 HDFS 文件夹中的所有文件</span></span><br><span class="line">    file_list = hdfs.ls(<span class="string">&#x27;/data/txt&#x27;</span>)</span><br><span class="line">    hdfsConfig = hdfsFileRead()</span><br><span class="line">    hdfs = hdfsConfig[<span class="number">0</span>]</span><br><span class="line">    file_list = hdfsConfig[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 读取文本文件</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">with</span> hdfs.<span class="built_in">open</span>(f) <span class="keyword">as</span> file:</span><br><span class="line">            text = file.read()</span><br><span class="line">    <span class="keyword">return</span> hdfs, file_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地测试读取文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LoadFileRead</span>():</span><br><span class="line">    folder_path = <span class="string">r&#x27;/data/txt&#x27;</span></span><br><span class="line">    file_names = os.listdir(folder_path)</span><br><span class="line">    <span class="keyword">return</span> file_names</span><br><span class="line"><span class="comment"># 处理景区表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpot</span>():</span><br><span class="line">    spot_df = df[df.columns[<span class="number">0</span>:<span class="number">11</span>]].drop_duplicates()</span><br><span class="line">    spot_df[<span class="string">&#x27;rating&#x27;</span>] = <span class="number">4</span> * spot_df[<span class="string">&#x27;GRADE&#x27;</span>].astype(<span class="built_in">float</span>) + <span class="number">4</span> * spot_df[<span class="string">&#x27;HOT&#x27;</span>].astype(<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 用于存放每个文件数据</span></span><br><span class="line">    listDf = []</span><br><span class="line">    <span class="comment"># 文件夹位置</span></span><br><span class="line">    folder_path = <span class="string">r&#x27;../data/txt&#x27;</span></span><br><span class="line">    <span class="comment"># 打算将每个文件都按照切割成字典，最后放列表中再合并</span></span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> glob.glob(os.path.join(folder_path, <span class="string">&#x27;*.txt&#x27;</span>)):</span><br><span class="line">        <span class="comment"># 读取文件 字符集为utf-8 存入text</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            text = f.read()</span><br><span class="line">        <span class="comment"># 根据txt文件关键字处理成key:value</span></span><br><span class="line">        spot = text[text.find(<span class="string">&#x27;[SPOT]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[LOCATION]&#x27;</span>)].strip()</span><br><span class="line">        location = text[text.find(<span class="string">&#x27;[LOCATION]&#x27;</span>) + <span class="number">11</span>:text.find(<span class="string">&#x27;[OPENTIME]&#x27;</span>)].strip()</span><br><span class="line">        opentime = text[text.find(<span class="string">&#x27;[OPENTIME]&#x27;</span>) + <span class="number">10</span>:text.find(<span class="string">&#x27;[PHONE]&#x27;</span>)].strip()</span><br><span class="line">        phone = text[text.find(<span class="string">&#x27;[PHONE]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[INTRO]&#x27;</span>)].strip()</span><br><span class="line">        intro = text[text.find(<span class="string">&#x27;[INTRO]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[GRADE]&#x27;</span>)].strip()</span><br><span class="line">        grade = text[text.find(<span class="string">&#x27;[GRADE]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[HOT]&#x27;</span>)].strip()</span><br><span class="line">        hot = text[text.find(<span class="string">&#x27;[HOT]&#x27;</span>) + <span class="number">5</span>:text.find(<span class="string">&#x27;[SUM]&#x27;</span>)].strip()</span><br><span class="line">        sum_ = text[text.find(<span class="string">&#x27;[SUM]&#x27;</span>) + <span class="number">5</span>:text.find(<span class="string">&#x27;[COMMENT]&#x27;</span>)].strip()</span><br><span class="line">        comment = text[text.find(<span class="string">&#x27;[COMMENT]&#x27;</span>) + <span class="number">10</span>:text.find(<span class="string">&#x27;[COMMENT_GRADE]&#x27;</span>)].strip()</span><br><span class="line">        comment_grade = text[text.find(<span class="string">&#x27;[COMMENT_GRADE]&#x27;</span>) + <span class="number">15</span>:text.find(<span class="string">&#x27;[COMMENT_TIME]&#x27;</span>)].strip()</span><br><span class="line">        comment_time = text[text.find(<span class="string">&#x27;[COMMENT_TIME]&#x27;</span>) + <span class="number">14</span>:].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将数据转换成key:value格式</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;SPOT_NAME&#x27;</span>: spot,</span><br><span class="line">            <span class="string">&#x27;LEVEL&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;LOCATION&#x27;</span>: location,</span><br><span class="line">            <span class="string">&#x27;OPENTIME&#x27;</span>: opentime,</span><br><span class="line">            <span class="string">&#x27;PHONE&#x27;</span>: phone,</span><br><span class="line">            <span class="string">&#x27;INTRO&#x27;</span>: intro,</span><br><span class="line">            <span class="string">&#x27;NOTICE&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ST&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;GRADE&#x27;</span>: grade,</span><br><span class="line">            <span class="string">&#x27;HOT&#x27;</span>: hot,</span><br><span class="line">            <span class="string">&#x27;QTY&#x27;</span>: sum_,</span><br><span class="line">            <span class="string">&#x27;EVALUATION&#x27;</span>: comment,</span><br><span class="line">            <span class="string">&#x27;EVALUATION_GRADE&#x27;</span>: comment_grade,</span><br><span class="line">            <span class="string">&#x27;EVALUATION_TIME&#x27;</span>: comment_time,</span><br><span class="line">            <span class="string">&#x27;EVALUATION_NAME&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;FEEL_SCORE&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;FEEL&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 存入数组</span></span><br><span class="line">        listDf.append(data)</span><br><span class="line">    <span class="comment"># 转换成dataframe</span></span><br><span class="line">    df = pd.DataFrame(listDf)</span><br><span class="line">    <span class="comment"># 下面三行是将介绍那列的数据切割成三列 后面这部分考虑到景区表去重以后在执行</span></span><br><span class="line">    df[<span class="string">&#x27;ST&#x27;</span>] = df[<span class="string">&#x27;INTRO&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.search(<span class="string">r&#x27;服务设施([\s\S]*)&#x27;</span>, x, re.S).group(<span class="number">1</span>))</span><br><span class="line">    df[<span class="string">&#x27;NOTICE&#x27;</span>] = df[<span class="string">&#x27;INTRO&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.search(<span class="string">r&#x27;优待政策\s*(.+?)\s*服务设施&#x27;</span>, x, re.S).group(<span class="number">1</span>))</span><br><span class="line">    df[<span class="string">&#x27;INTRO&#x27;</span>] = df[<span class="string">&#x27;INTRO&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.search(<span class="string">r&#x27;介绍\s*(.+?)\s*全文&#x27;</span>, x, re.S).group(<span class="number">1</span>))</span><br><span class="line">    df[<span class="string">&#x27;SPOT_NAME&#x27;</span>] = df[<span class="string">&#x27;SPOT_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>​发现python使用pandas效果出奇的好，不仅速度快，而且可以直接使用一些预测的模型，不需要scala那边搞好python这里再把表读出来再填充了。读取txt加一些处理大概也就一秒的时间，后期导入dm的话，也就是不到一面。</p><h2 id="BUG-7">BUG</h2><p>​读取的时候直接报错， 一看信息就是编码的问题，去搜了一下python处理文件的编码问题只要在外层读取的open方法中设置encoding就好了，<em>with</em> open(file_path, ‘r’, encoding=“utf-8”) 。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102646736.png" alt="image-20250820102646736"></p><h2 id="日总结-7">日总结</h2><blockquote><p>​今天算是得到个坏消息，基本一下子将之前辛辛苦苦写的代码全部作废了，以为hdfs上面的数据蛮大的，主要是格式的问题，也不打算再头铁强行搞了，本来清洗就不应该是三个语言的使用，不仅拖慢了速度，执行起来也很奇怪，要跑好几次。速度方面测试都不敢测，1w就花费了那么长时间，这一下就是百万，直接打算换成python，先测试了一下最难的txt，发现处理起来还是很简单的，虽然方法有点笨，但是好在txt文件格式都是固定的，都拿到了存成dataframe了，后面慢慢处理好再导入dm就行了。</p></blockquote><h1 id="清洗csv文件夹">清洗csv文件夹</h1><h2 id="学习日期-6-9">学习日期: 6.9</h2><h2 id="项目任务-8">项目任务</h2><h3 id="梳理数据">梳理数据</h3><p>​新给的数据中csv和xlsx的字段都是有改变的，所有要分析好字段，因为后端接口都写很多了，不能大改，但是有些提供的字段还是要添加的。计划spot景区表14个，评论表7个前后没有改变多少，后面的dataframe就按照这个格式慢慢处理。看了一些HDFS的数据大致分为4种，csv有两种，字段是有些许不一样的，xlsx又一种，也是有些字段有，有些没有，没有的字段就预测得出，txt是最少的。打算就是能预测的就预测处理填充，一些没发预测又缺失了，要么丢弃，要么不显示。</p><h3 id="清洗csv代码">清洗csv代码</h3><p>​都先把数据处理成所有需要的字段了，都先添加上 ，然后首要任务，关联好景区id，不知道能不能group by分组，明天再研究一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">f = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readCsvToDf</span>(<span class="params">folder_path</span>):</span><br><span class="line">    <span class="comment"># 遍历文件夹中所有文件</span></span><br><span class="line">    all_files = os.listdir(folder_path)</span><br><span class="line">    csv_files = [file <span class="keyword">for</span> file <span class="keyword">in</span> all_files <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.csv&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并每个 CSV 文件为一个 DataFrame，并将它们存储在一个列表中</span></span><br><span class="line">    dfs = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> csv_files:</span><br><span class="line">        file_path = os.path.join(folder_path, file)</span><br><span class="line">        df = pd.read_csv(file_path)</span><br><span class="line">        dfs.append(df)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有 DataFrame 合并为一个 DataFrame</span></span><br><span class="line">    <span class="keyword">return</span> pd.concat(dfs, ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对换行符以及空格去除</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x</span>):</span><br><span class="line">    stringApply = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(x).split()).strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> stringApply</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearAllDf</span>(<span class="params">merged_df</span>):</span><br><span class="line">    <span class="comment"># 修改列名以及换行和空白字段处理</span></span><br><span class="line">    merged_df.rename(columns=&#123;<span class="string">&#x27;SPOT&#x27;</span>: <span class="string">&#x27;SPOT_NAME&#x27;</span>, <span class="string">&#x27;CO_TIME&#x27;</span>: <span class="string">&#x27;EVALUATION_TIME&#x27;</span>, <span class="string">&#x27;CO_NAME&#x27;</span>: <span class="string">&#x27;EVALUATION_NAME&#x27;</span>,</span><br><span class="line">                              <span class="string">&#x27;COMMENT&#x27;</span>: <span class="string">&#x27;EVALUATION&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">    merged_df_copy = merged_df.applymap(test).drop(columns=[<span class="string">&#x27;TGA&#x27;</span>])</span><br><span class="line">    <span class="comment"># 去除景区名带?</span></span><br><span class="line">    merged_df_copy[<span class="string">&#x27;SPOT_NAME&#x27;</span>] = merged_df_copy[<span class="string">&#x27;SPOT_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="comment"># 添加空列 后面景区表需要的字段</span></span><br><span class="line">    merged_df_copy.insert(<span class="number">9</span>,<span class="string">&#x27;RATING&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    merged_df_copy.insert(<span class="number">9</span>,<span class="string">&#x27;CITY_ID&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    merged_df_copy.insert(<span class="number">9</span>,<span class="string">&#x27;HOT&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> merged_df_copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotDf</span>(<span class="params">allDf</span>):</span><br><span class="line">    <span class="comment"># 添加需要列 随机填充电话</span></span><br><span class="line">    allDf.insert(<span class="number">3</span>, <span class="string">&#x27;PHONE&#x27;</span>, [f.phone_number() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(allDf.iloc[:, <span class="number">0</span>].size)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># csv文件其中一个文件夹</span></span><br><span class="line">    folder_qnecsv_path = <span class="string">&quot;../data/csv/qnecsv&quot;</span></span><br><span class="line">    merged_df = readCsvToDf(folder_qnecsv_path)</span><br><span class="line">    allDf = clearAllDf(merged_df)</span><br><span class="line">    <span class="comment"># 需要先把城市的df清洗出来</span></span><br></pre></td></tr></table></figure><h2 id="BUG-8">BUG</h2><p>在使用<a href="https://so.csdn.net/so/search?q=pandas&amp;spm=1001.2101.3001.7020">pandas</a>的时候，出现如下的警告。虽然不会影响程序的正常运行，但是看着就很烦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A value is trying to be <span class="built_in">set</span> on a copy of a slice from a DataFrame.</span><br><span class="line">Try using .loc[row_indexer,col_indexer] = value instead</span><br></pre></td></tr></table></figure><p>搜索以后发现是因为我的dataframe是其他dataframe赋值的，也就是a = b ,我对a进行了修改，这样不太好，最好直接对b进行修改，解决方案有三个<br>解决方案：</p><ol><li>新建一个dataframe，在新的上面进行操作。</li><li>在复制dataframe的时候，使用.copy()。</li><li>使用.loc来赋值</li></ol><h2 id="日总结-8">日总结</h2><blockquote><p>​今天打算先初步把每种文件都试着读成dataframe，先将一个文件夹能洗成自己需要的四个表，也就是四个dataframe，后面换文件也就大差不大，目前思路梳理清除了先将id挂好，后面还是很容易的，因为之前对缺失值的填充的代码都做好了，只要再重新对hot填充一下就行了。从spark的机器学习算法改成pandas预测即可。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_province</span>(<span class="params">city_name</span>):</span><br><span class="line">    ak = <span class="string">&#x27;你的百度地图API key&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://api.map.baidu.com/geocoder?address=&#123;&#125;&amp;output=json&amp;ak=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(city_name, ak)</span><br><span class="line">    res = requests.get(url).json()</span><br><span class="line">    <span class="keyword">if</span> res[<span class="string">&#x27;status&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">        province = res[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;addressComponent&#x27;</span>][<span class="string">&#x27;province&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        province = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> province</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">cities = [<span class="string">&#x27;金华市&#x27;</span>, <span class="string">&#x27;苏州市&#x27;</span>, <span class="string">&#x27;舟山市&#x27;</span>, <span class="string">&#x27;武汉市&#x27;</span>, <span class="string">&#x27;桐乡市&#x27;</span>, <span class="string">&#x27;杭州市&#x27;</span>, <span class="string">&#x27;无锡市&#x27;</span>, <span class="string">&#x27;扬州市&#x27;</span>, <span class="string">&#x27;恩施市&#x27;</span>]</span><br><span class="line">province = [get_province(city) <span class="keyword">for</span> city <span class="keyword">in</span> cities]</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;city&#x27;</span>: cities, <span class="string">&#x27;province&#x27;</span>: province&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h1 id="读取hdfs文件">读取hdfs文件</h1><h2 id="学习日期-6-12">学习日期: 6.12</h2><h2 id="项目任务-9">项目任务</h2><p>​因为考虑到hdfs3使用不了，所以使用了hdfs这个库，这个库是基于web访问hdfs的，又考虑到本地的数据读取应该比hdfs快上不少，所以第一步直接下载下来。后面只要写自己本地路径处理文件就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hdfs <span class="keyword">import</span> Client, InsecureClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建客户端连接hdfs</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;启动&quot;</span>)</span><br><span class="line">client = InsecureClient(<span class="string">&#x27;http://hadoopb-namenode.damengb-zone.svc:9870&#x27;</span>)</span><br><span class="line"><span class="comment"># # 列出HDFS上的目录</span></span><br><span class="line">hdfs_csv_path = <span class="string">&quot;/data/csv/qnecsv&quot;</span></span><br><span class="line">csv_data_list = client.<span class="built_in">list</span>(hdfs_path=hdfs_csv_path)</span><br><span class="line">local_path = <span class="string">&quot;/home/PyCode/data/hdfscsv/qnecsv&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(csv_data_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义递归下载函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_folder</span>(<span class="params">client, hdfs_path, local_path</span>):</span><br><span class="line">    <span class="comment"># 如果HDFS路径是文件，则下载到本地</span></span><br><span class="line">    <span class="keyword">if</span> client.status(hdfs_path)[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;FILE&#x27;</span>:</span><br><span class="line">        client.download(hdfs_path, local_path)</span><br><span class="line">    <span class="comment"># 如果HDFS路径是文件夹，则递归下载其中的子文件和文件夹</span></span><br><span class="line">    <span class="keyword">elif</span> client.status(hdfs_path)[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;DIRECTORY&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(local_path):</span><br><span class="line">            os.makedirs(local_path)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> client.<span class="built_in">list</span>(hdfs_path):</span><br><span class="line">            sub_hdfs_path = hdfs_path + <span class="string">&#x27;/&#x27;</span> + file</span><br><span class="line">            sub_local_path = local_path + <span class="string">&#x27;/&#x27;</span> + file</span><br><span class="line">            download_folder(client, sub_hdfs_path, sub_local_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件暂下载</span></span><br><span class="line">download_folder(client, <span class="string">&quot;/data/csv/qnecsv&quot;</span>, <span class="string">&quot;/home/PyCode/data/hdfscsv/qnecsv&quot;</span>)</span><br><span class="line">download_folder(client, <span class="string">&quot;/data/csv/xccsv&quot;</span>, <span class="string">&quot;/home/PyCode/data/hdfscsv/xccsv&quot;</span>)</span><br><span class="line">download_folder(client, <span class="string">&quot;/data/txt&quot;</span>, <span class="string">&quot;/home/PyCode/data/hdfstxt&quot;</span>)</span><br><span class="line">download_folder(client, <span class="string">&quot;/data/excel&quot;</span>, <span class="string">&quot;/home/PyCode/data/hdfsexcel&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="BUG-9">BUG</h2><p>​使用hdfs3的时候，一直说找不到libhdfs3.so依赖，但是自己的确是装了，而且使用sys指定了都，但是都没用，搞一上午没解决，换成hdfs了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102701307.png" alt="image-20250820102701307"></p><h2 id="日总结-9">日总结</h2><blockquote><p>​今天真的搞了半天，没敲什么代码，从平台发放账户以后，这个平台一直没整明白，今天想着去把hdfs数据拿一下，当我在平台上ping提供好的说hdfs存放的位置的时候发现是好的，能ping通应该，就能拿，结果发现他那个9000端口一直说web丢失之类的，我又去测试自己虚拟机上面的hdfs，发现能取到，搜索说是hadoop的配置文件需要查看，但是数据是比赛方提供的，我们又不能操作他们的机子，后面就试着换换其他端口，结果就试出来了。</p></blockquote><h1 id="优化pandas效率">优化pandas效率</h1><h2 id="学习日期-6-13">学习日期: 6.13</h2><h2 id="项目任务-10">项目任务</h2><p>​hdfs取到以后发现数据是非常的大，而且每当我处理数据的时候，内存会超出，而且会自动把自己杀死，就必须要优化效率了，毕竟处理评论那边的代码雀氏是不太好，是使用for循环的，效率会低百倍。</p><h3 id="优化以后的代码">优化以后的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotComment</span>(<span class="params">allInfoDf, province_list</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;评论表开始处理&quot;</span>)</span><br><span class="line">    comment_df = allInfoDf[allInfoDf.columns[<span class="number">12</span>:]].copy()</span><br><span class="line">    comment_df.insert(<span class="number">2</span>, <span class="string">&#x27;EVALUATION_GRADE&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    comment_df[<span class="string">&#x27;FEEL_SCORE&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    comment_df[<span class="string">&#x27;FEEL&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    order = [<span class="string">&#x27;SPOT_ID&#x27;</span>, <span class="string">&#x27;EVALUATION&#x27;</span>, <span class="string">&#x27;EVALUATION_GRADE&#x27;</span>, <span class="string">&#x27;EVALUATION_TIME&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;EVALUATION_NAME&#x27;</span>, <span class="string">&#x27;FEEL_SCORE&#x27;</span>, <span class="string">&#x27;FEEL&#x27;</span>]</span><br><span class="line">    comment_df = comment_df[order]</span><br><span class="line">    <span class="comment"># 时间处理 这组是对2018/9/16 这类没-而且ip没有的数据处理</span></span><br><span class="line">    comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>] = comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line"></span><br><span class="line">    comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>] = comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x + <span class="string">&quot; IP属地: &quot;</span> + np.random.choice(province_list) <span class="keyword">if</span> <span class="string">&quot;IP&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> x <span class="keyword">else</span> x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_scores</span>(<span class="params">row</span>):</span><br><span class="line">        <span class="keyword">if</span> row.EVALUATION == <span class="string">&quot;用户未点评。系统默认好评。&quot;</span>:</span><br><span class="line">            score = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            score = <span class="built_in">round</span>(SnowNLP(row.EVALUATION).sentiments, <span class="number">2</span>)</span><br><span class="line">        feelScore = <span class="built_in">round</span>(score * <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 评论情绪</span></span><br><span class="line">        feel = scoreSnow(score)</span><br><span class="line">        <span class="keyword">if</span> row.EVALUATION_GRADE == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            row.EVALUATION_GRADE = <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(feelScore, <span class="number">0</span>))) + <span class="string">&quot;分 &quot;</span> + feel</span><br><span class="line"></span><br><span class="line">        row.FEEL_SCORE = feelScore</span><br><span class="line">        row.FEEL = feel</span><br><span class="line">        <span class="keyword">return</span> row</span><br><span class="line"></span><br><span class="line">    comment_df = comment_df.apply(calculate_scores, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;评论表结束处理&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> comment_df</span><br></pre></td></tr></table></figure><h3 id="总结一下如何优化pandas效率。">总结一下如何优化pandas效率。</h3><h4 id="1-选择合适的数据类型">1. 选择合适的数据类型</h4><p>在数据处理中，选择正确的数据类型有可能利用内存空间并改善性能。</p><ul><li><p>对象类型对于所有类型的对象都是一种通用数据类型。在你不确定数据类型，或者数据类型混合的情况下，Pandas会默认采用这种数据类型。然而，对于大数据集，你可能更希望选择一个更加具体和紧凑的数据类型。</p><p>DataFrame[‘column_name’] = DataFrame[‘column_name’].astype(‘datatype’)</p></li></ul><p><strong>例如：</strong></p><p>DataFrame[‘column_name’] = DataFrame[‘column_name’].astype(‘category’)</p><ul><li>对于数值型数据，尽量使用’int’类型，根据数值大小的不同，还可以选择’int64’, ‘int32’, ‘int16’, ‘int8’。</li><li>对于类别型数据，使用’category’类型可以节省大量内存。</li><li>对于时间序列数据，你可以使用Pandas自带的’datetime64[ns]'类型。</li></ul><h4 id="2-利用向量化操作，尽可能避免循环">2. 利用向量化操作，尽可能避免循环</h4><p>Pandas的基础包Numpy，对向量运算做了大量的优化。因此，在编写代码时，我们建议你尽可能使用向量的操作，而不是使用Python的for循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python的for循环做法</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> df.index:</span><br><span class="line">    df.loc[idx, <span class="string">&#x27;column_name&#x27;</span>] = df.loc[idx, <span class="string">&#x27;column_name&#x27;</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pandas向量操作优化后</span></span><br><span class="line">df[<span class="string">&#x27;column_name&#x27;</span>] = df[<span class="string">&#x27;column_name&#x27;</span>] + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="3-使用inplace-参数可以避免复制">3. 使用inplace 参数可以避免复制</h4><p>对于一些可以改变原始DataFrame对象的操作，例如:drop, sort_values。 可以设置参数’inplace=True’，来保证操作在原数据上进行，避免创建新的复制品。</p><h4 id="4-避免链式操作">4. 避免链式操作</h4><p>尽量避免使用链式操作，如df[df[‘A’]&gt;0][‘B’] = 1，这样的操作会返回DataFrame的副本而非视图，对副本的操作不会反映到原始数据上。</p><h4 id="5-使用-isin">5. 使用.isin()</h4><p>当我们需要筛选出某列中属于某个list里的元素行时，使用.isin()是最有效率的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chosen_ones = df[df.column_name.isin(list_of_values)]</span><br></pre></td></tr></table></figure><h4 id="6-使用-loc-at-iat">6. 使用.loc(), .at(),.iat()</h4><p>对数据的访问和修改，loc和iloc函数速度相对于普通方法要快，at 和iat为访问单个元素提供了更快的方法。</p><h4 id="7-对于大数据集，优选fillna-和interpolate">7. 对于大数据集，优选fillna()和interpolate()</h4><p>对于大的数据集，使用fillna和interpolate来处理缺失值会比使用dropna快很多。</p><h2 id="BUG-10">BUG</h2><p>​无困难bug</p><h2 id="日总结-10">日总结</h2><blockquote><p>​对于Pandas的性能优化， 主要的方向是减少内存消耗和增加计算效率，通过选择合适的数据类型，避免不必要的循环，合理使用Pandas提供的函数和方法，都是实现优化的有效策略。在编写代码前，明确了解数据的类型，选择最佳的数据处理方式，都可以帮助优化Pandas的性能。今天优化了很久，才将时间缩减到能成功运行。后面测试导入dm了，又要重新配置环境。</p></blockquote><h1 id="平台测试导入dm">平台测试导入dm</h1><h2 id="学习日期-6-14">学习日期: 6.14</h2><h2 id="项目任务-11">项目任务</h2><p>总结了一套如何将数据导入dm，从平台安装开始。</p><ul><li><p>首先安装python,步骤如下</p><p><a href="http://t.csdn.cn/ls0Qx">http://t.csdn.cn/ls0Qx</a></p></li><li><p>安装dm数据库，好像不全安装也是可以的，怕后期需要用到就全安装了</p><p><a href="http://t.csdn.cn/3ptEe%E5%9F%BA%E6%9C%AC%E5%85%A8%E5%A4%8D%E5%88%B6%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86">http://t.csdn.cn/3ptEe基本全复制就可以了</a></p></li><li><p>然后需要去dm安装目录driver下面的两个目录，一个dmPython，一个sqlalchemy，执行python3 set.up install</p><p>然后就能使用了，导入的时候可能会有些问题，一般都是环境变量的问题，搜一下就完活了。</p></li></ul><h3 id="四表整合">四表整合</h3><p>将几个文件全部整成同意的样式，这样后面分表的时候，代码就全部都能用了，也只用执行一遍即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> radar</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"><span class="comment"># faker随机值</span></span><br><span class="line">fakerCn = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line"></span><br><span class="line">order = [<span class="string">&#x27;SPOT_NAME&#x27;</span>, <span class="string">&#x27;LEVEL&#x27;</span>, <span class="string">&#x27;LOCATION&#x27;</span>, <span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>, <span class="string">&#x27;INTRO&#x27;</span>, <span class="string">&#x27;OPENTIME&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;NOTICE&#x27;</span>, <span class="string">&#x27;ST&#x27;</span>, <span class="string">&#x27;HOT&#x27;</span>, <span class="string">&#x27;CITY_ID&#x27;</span>, <span class="string">&#x27;RATING&#x27;</span>, <span class="string">&#x27;SPOT_ID&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;EVALUATION_NAME&#x27;</span>, <span class="string">&#x27;EVALUATION_TIME&#x27;</span>, <span class="string">&#x27;EVALUATION&#x27;</span>]</span><br><span class="line">dataType = &#123;<span class="string">&#x27;SPOT_NAME&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;LEVEL&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;LOCATION&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;GRADE&#x27;</span>: <span class="built_in">float</span>, <span class="string">&#x27;QTY&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;INTRO&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;OPENTIME&#x27;</span>: <span class="built_in">str</span>,</span><br><span class="line">            <span class="string">&#x27;NOTICE&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;ST&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;HOT&#x27;</span>: <span class="built_in">float</span>, <span class="string">&#x27;CITY_ID&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;RATING&#x27;</span>: <span class="built_in">float</span>, <span class="string">&#x27;SPOT_ID&#x27;</span>: <span class="built_in">str</span>,</span><br><span class="line">            <span class="string">&#x27;EVALUATION_NAME&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;EVALUATION_TIME&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;EVALUATION&#x27;</span>: <span class="built_in">str</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearToAllDf</span>(<span class="params">merged_df</span>):</span><br><span class="line">    <span class="comment"># 修改列名以及换行和空白字段处理</span></span><br><span class="line">    merged_df_copy = merged_df.copy()</span><br><span class="line">    merged_df_copy = merged_df_copy</span><br><span class="line">    spot_names = merged_df_copy[<span class="string">&#x27;SPOT_NAME&#x27;</span>].unique()</span><br><span class="line">    spot_id_dict = &#123;name: i + <span class="number">1</span> <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(spot_names)&#125;</span><br><span class="line">    merged_df_copy[<span class="string">&#x27;SPOT_ID&#x27;</span>] = merged_df_copy[<span class="string">&#x27;SPOT_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: spot_id_dict[x])</span><br><span class="line">    <span class="keyword">return</span> merged_df_copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csvqne</span>(<span class="params">folder_path</span>):</span><br><span class="line">    <span class="comment"># 遍历文件夹中所有文件</span></span><br><span class="line">    all_files = os.listdir(folder_path)</span><br><span class="line">    <span class="comment"># csv_files = [file for file in all_files if file.endswith(&#x27;.csv&#x27;)]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并每个 CSV 文件为一个 DataFrame，并将它们存储在一个列表中</span></span><br><span class="line">    dfs = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> all_files:</span><br><span class="line">        file_path = os.path.join(folder_path, file)</span><br><span class="line">        df = pd.read_csv(file_path)</span><br><span class="line">        <span class="comment"># 删除包含空值的行</span></span><br><span class="line">        df.dropna(subset=[<span class="string">&#x27;COMMENT&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 添加到数组</span></span><br><span class="line">        df.rename(columns=&#123;<span class="string">&#x27;SPOT&#x27;</span>: <span class="string">&#x27;SPOT_NAME&#x27;</span>, <span class="string">&#x27;CO_TIME&#x27;</span>: <span class="string">&#x27;EVALUATION_TIME&#x27;</span>, <span class="string">&#x27;CO_NAME&#x27;</span>: <span class="string">&#x27;EVALUATION_NAME&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;COMMENT&#x27;</span>: <span class="string">&#x27;EVALUATION&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">        df = df.drop(columns=[<span class="string">&#x27;TGA&#x27;</span>]).reindex(columns=order)</span><br><span class="line">        df[<span class="string">&#x27;SPOT_NAME&#x27;</span>] = df[<span class="string">&#x27;SPOT_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        dfs.append(df)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有 DataFrame 合并为一个 DataFrame</span></span><br><span class="line">    <span class="comment"># return pd.concat(dfs, ignore_index=True)</span></span><br><span class="line">    <span class="keyword">return</span> dfs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csvxc</span>(<span class="params">folder_path</span>):</span><br><span class="line">    all_files = os.listdir(folder_path)</span><br><span class="line">    dfs = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> all_files:</span><br><span class="line">        file_path = os.path.join(folder_path, file)</span><br><span class="line">        df = pd.read_csv(file_path)</span><br><span class="line">        <span class="comment"># 删除包含空值的行</span></span><br><span class="line">        df.dropna(subset=[<span class="string">&#x27;COMMENT&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># df[&#x27;ST&#x27;] = df[&#x27;INTRO&#x27;].apply(lambda x: re.search(r&#x27;服务设施([\s\S]*)&#x27;, x, re.S).group(1))</span></span><br><span class="line">        <span class="comment"># df[&#x27;NOTICE&#x27;] = df[&#x27;INTRO&#x27;].apply(lambda x: re.search(r&#x27;优待政策\s*(.+?)\s*服务设施&#x27;, x, re.S).group(1))</span></span><br><span class="line">        <span class="comment"># df[&#x27;INTRO&#x27;] = df[&#x27;INTRO&#x27;].apply(lambda x: re.search(r&#x27;介绍\s*(.+?)\s*全文&#x27;, x, re.S).group(1))</span></span><br><span class="line">        df.rename(columns=&#123;<span class="string">&#x27;SPOT&#x27;</span>: <span class="string">&#x27;SPOT_NAME&#x27;</span>, <span class="string">&#x27;CO_TIME&#x27;</span>: <span class="string">&#x27;EVALUATION_TIME&#x27;</span>, <span class="string">&#x27;CO_NAME&#x27;</span>: <span class="string">&#x27;EVALUATION_NAME&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;COMMENT&#x27;</span>: <span class="string">&#x27;EVALUATION&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">        df = df.reindex(columns=order)</span><br><span class="line">        df[<span class="string">&#x27;SPOT_NAME&#x27;</span>] = df[<span class="string">&#x27;SPOT_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        <span class="comment"># 添加到数组</span></span><br><span class="line">        dfs.append(df)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有 DataFrame 合并为一个 DataFrame</span></span><br><span class="line">    <span class="keyword">return</span> dfs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xlsx</span>(<span class="params">folder_path</span>):</span><br><span class="line">    all_files = os.listdir(folder_path)</span><br><span class="line">    dfs = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> all_files:</span><br><span class="line">        file_path = os.path.join(folder_path, file)</span><br><span class="line">        df = pd.read_excel(file_path, engine=<span class="string">&#x27;openpyxl&#x27;</span>)</span><br><span class="line">        <span class="comment"># 删除包含空值的行</span></span><br><span class="line">        df.dropna(subset=[<span class="string">&#x27;COMMENT&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        df.rename(columns=&#123;<span class="string">&#x27;SPOT&#x27;</span>: <span class="string">&#x27;SPOT_NAME&#x27;</span>, <span class="string">&#x27;CO_TIME&#x27;</span>: <span class="string">&#x27;EVALUATION_TIME&#x27;</span>, <span class="string">&#x27;CO_NAME&#x27;</span>: <span class="string">&#x27;EVALUATION_NAME&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;COMMENT&#x27;</span>: <span class="string">&#x27;EVALUATION&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">        df = df.reindex(columns=order)</span><br><span class="line">        df[<span class="string">&#x27;SPOT_NAME&#x27;</span>] = df[<span class="string">&#x27;SPOT_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加到数组</span></span><br><span class="line">        dfs.append(df)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有 DataFrame 合并为一个 DataFrame</span></span><br><span class="line">    <span class="keyword">return</span> dfs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">txt</span>(<span class="params">folder_path</span>):</span><br><span class="line">    listDf = []</span><br><span class="line">    <span class="comment"># 文件夹位置</span></span><br><span class="line">    <span class="comment"># folder_path = r&#x27;../data/txt&#x27;</span></span><br><span class="line">    <span class="comment"># 打算将每个文件都按照切割成字典，最后放列表中再合并</span></span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> glob.glob(os.path.join(folder_path, <span class="string">&#x27;*.txt&#x27;</span>)):</span><br><span class="line">        <span class="comment"># 读取文件 字符集为utf-8 存入text</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            text = f.read()</span><br><span class="line">        <span class="comment"># 根据txt文件关键字处理成key:value</span></span><br><span class="line">        spot = text[text.find(<span class="string">&#x27;[SPOT]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[LOCATION]&#x27;</span>)].strip()</span><br><span class="line">        location = text[text.find(<span class="string">&#x27;[LOCATION]&#x27;</span>) + <span class="number">11</span>:text.find(<span class="string">&#x27;[OPENTIME]&#x27;</span>)].strip()</span><br><span class="line">        opentime = text[text.find(<span class="string">&#x27;[OPENTIME]&#x27;</span>) + <span class="number">10</span>:text.find(<span class="string">&#x27;[PHONE]&#x27;</span>)].strip()</span><br><span class="line">        phone = text[text.find(<span class="string">&#x27;[PHONE]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[INTRO]&#x27;</span>)].strip()</span><br><span class="line">        intro = text[text.find(<span class="string">&#x27;[INTRO]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[GRADE]&#x27;</span>)].strip()</span><br><span class="line">        grade = text[text.find(<span class="string">&#x27;[GRADE]&#x27;</span>) + <span class="number">7</span>:text.find(<span class="string">&#x27;[HOT]&#x27;</span>)].strip()</span><br><span class="line">        hot = text[text.find(<span class="string">&#x27;[HOT]&#x27;</span>) + <span class="number">5</span>:text.find(<span class="string">&#x27;[SUM]&#x27;</span>)].strip()</span><br><span class="line">        sum_ = text[text.find(<span class="string">&#x27;[SUM]&#x27;</span>) + <span class="number">5</span>:text.find(<span class="string">&#x27;[COMMENT]&#x27;</span>)].strip()</span><br><span class="line">        comment = text[text.find(<span class="string">&#x27;[COMMENT]&#x27;</span>) + <span class="number">10</span>:text.find(<span class="string">&#x27;[COMMENT_GRADE]&#x27;</span>)].strip()</span><br><span class="line">        comment_grade = text[text.find(<span class="string">&#x27;[COMMENT_GRADE]&#x27;</span>) + <span class="number">15</span>:text.find(<span class="string">&#x27;[COMMENT_TIME]&#x27;</span>)].strip()</span><br><span class="line">        comment_time = text[text.find(<span class="string">&#x27;[COMMENT_TIME]&#x27;</span>) + <span class="number">14</span>:].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将数据转换成key:value格式</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;SPOT_NAME&#x27;</span>: spot,</span><br><span class="line">            <span class="string">&#x27;LEVEL&#x27;</span>: np.nan,</span><br><span class="line">            <span class="string">&#x27;LOCATION&#x27;</span>: location,</span><br><span class="line">            <span class="string">&#x27;OPENTIME&#x27;</span>: opentime,</span><br><span class="line">            <span class="string">&#x27;PHONE&#x27;</span>: phone,</span><br><span class="line">            <span class="string">&#x27;INTRO&#x27;</span>: intro,</span><br><span class="line">            <span class="string">&#x27;NOTICE&#x27;</span>: np.nan,</span><br><span class="line">            <span class="string">&#x27;ST&#x27;</span>: np.nan,</span><br><span class="line">            <span class="string">&#x27;GRADE&#x27;</span>: grade,</span><br><span class="line">            <span class="string">&#x27;HOT&#x27;</span>: hot,</span><br><span class="line">            <span class="string">&#x27;QTY&#x27;</span>: sum_,</span><br><span class="line">            <span class="string">&#x27;EVALUATION&#x27;</span>: comment,</span><br><span class="line">            <span class="string">&#x27;EVALUATION_GRADE&#x27;</span>: comment_grade,</span><br><span class="line">            <span class="string">&#x27;EVALUATION_TIME&#x27;</span>: comment_time,</span><br><span class="line">            <span class="comment"># 用户名填充</span></span><br><span class="line">            <span class="string">&#x27;EVALUATION_NAME&#x27;</span>: fakerCn.user_name()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 存入数组</span></span><br><span class="line">        listDf.append(data)</span><br><span class="line">    df = pd.DataFrame(listDf).reindex(columns=order)</span><br><span class="line">    df[<span class="string">&#x27;SPOT_NAME&#x27;</span>] = df[<span class="string">&#x27;SPOT_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    df[<span class="string">&#x27;ST&#x27;</span>] = df[<span class="string">&#x27;INTRO&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.search(<span class="string">r&#x27;服务设施([\s\S]*)&#x27;</span>, x, re.S).group(<span class="number">1</span>))</span><br><span class="line">    df[<span class="string">&#x27;NOTICE&#x27;</span>] = df[<span class="string">&#x27;INTRO&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.search(<span class="string">r&#x27;优待政策\s*(.+?)\s*服务设施&#x27;</span>, x, re.S).group(<span class="number">1</span>))</span><br><span class="line">    df[<span class="string">&#x27;INTRO&#x27;</span>] = df[<span class="string">&#x27;INTRO&#x27;</span>].apply(<span class="keyword">lambda</span> x: re.search(<span class="string">r&#x27;介绍\s*(.+?)\s*全文&#x27;</span>, x, re.S).group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataTopkl</span>():</span><br><span class="line">    csvqne_list = csvqne(<span class="string">&quot;../data/hdfscsv/qnecsv&quot;</span>)</span><br><span class="line">    csvxc_list = csvxc(<span class="string">&quot;../data/hdfscsv/xccsv&quot;</span>)</span><br><span class="line">    excel_list = xlsx(<span class="string">&#x27;../data/hdfsexcel&#x27;</span>)</span><br><span class="line">    txt_list = [txt(<span class="string">r&#x27;../data/hdfstxt&#x27;</span>).astype(dataType)]</span><br><span class="line">    all_list = csvxc_list + csvqne_list + excel_list + txt_list</span><br><span class="line">    all_df = pd.concat(all_list, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    all_df.to_pickle(<span class="string">&#x27;allTemp.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = time.time()</span><br><span class="line">    dataTopkl()</span><br><span class="line">    a1 = time.time()</span><br><span class="line">    finalTime = arrow.get(a1 - a).<span class="built_in">format</span>(<span class="string">&#x27;mm分:ss秒:SSS毫秒&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行速度&quot;</span>, finalTime)</span><br></pre></td></tr></table></figure><h2 id="BUG-11">BUG</h2><p>​将数据导入dm的时候，因为大致四种文件，格式都不太一样，介绍那块有个表是分三列，三列确实是最优的选择，原本txt文件分成三列已经写好了，但是发现在xlsx文件是用不了的，因为很多都是没有这些字段，导致无法使用，也咩有很好的解决办法，暂定那些无法处理的，就将其他两列先为空了，后面再想办法。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102718211.png" alt="image-20250820102718211"></p><h2 id="日总结-11">日总结</h2><blockquote><p>​今天试将数据导入数据库，安装dm独有的依赖花费了很长一段时候，晚上总结了一下怎么linux系统重装，怕以后还用得到，今天大部分的时候都是在安装依赖，因为这平台对外限流，yum和pip都很慢，又将总表的数据绘制了一下，梳理了一下导入步骤，打算先将评论导入，然后是残缺的spot，因为如果spot有问题，读残缺版的就行了，这样效率会快很多，不用重新50w条重新导入。</p></blockquote><h1 id="服务器重装-评论表导入dm">服务器重装 评论表导入dm</h1><h2 id="学习日期-6-15">学习日期: 6.15</h2><h2 id="项目任务-12">项目任务</h2><h3 id="起因-4">起因</h3><p>​今天跑评论表的时候发现实在是太慢了，检查top运行进程的时候发现，CPU和内存都是在100%状态，后面检查机器发现，最大限制在了1核，那怎么玩，就先暂停了，修改成了8G 4核，但是重新启动的时候，发现平台镜像又清空了，真受不了一点，又花了一上午重装。</p><h3 id="服务器重装">服务器重装</h3><p>按照昨天的步骤基本没有问题，版本换成了3.8.8,安装依赖的时候主要pandas1.3.5 就行了。</p><h3 id="评论表导入dm">评论表导入dm</h3><p>测试dataframe导入dm没有问题了。 值得注意的是，因为数据量有点大，to_sql一次进不去，就分批导入了，大概需要1分钟，不如不分批会直接报错</p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> radar</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line"><span class="comment"># faker随机值</span></span><br><span class="line">fakerCn = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, message=<span class="string">&quot;Could not import the lzma module.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoreSnow</span>(<span class="params">sentiments</span>):</span><br><span class="line">    <span class="comment"># sentiments = SnowNLP(comment).sentiments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0.9</span> &lt;= sentiments &lt;= <span class="number">1</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;超棒&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.8</span> &lt;= sentiments &lt;= <span class="number">0.9</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;满意&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.5</span> &lt;= sentiments &lt;= <span class="number">0.8</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不错&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.2</span> &lt;= sentiments &lt;= <span class="number">0.5</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;一般&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不佳&quot;</span></span><br><span class="line">    <span class="keyword">return</span> feelMood</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotComment</span>(<span class="params">allInfoDf, province_list</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;评论表开始处理&quot;</span>)</span><br><span class="line">    comment_df = allInfoDf[allInfoDf.columns[<span class="number">12</span>:]].copy()</span><br><span class="line">    comment_df.insert(<span class="number">2</span>, <span class="string">&#x27;EVALUATION_GRADE&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    comment_df[<span class="string">&#x27;FEEL_SCORE&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    comment_df[<span class="string">&#x27;FEEL&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    order = [<span class="string">&#x27;SPOT_ID&#x27;</span>, <span class="string">&#x27;EVALUATION&#x27;</span>, <span class="string">&#x27;EVALUATION_GRADE&#x27;</span>, <span class="string">&#x27;EVALUATION_TIME&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;EVALUATION_NAME&#x27;</span>, <span class="string">&#x27;FEEL_SCORE&#x27;</span>, <span class="string">&#x27;FEEL&#x27;</span>]</span><br><span class="line">    comment_df = comment_df[order]</span><br><span class="line">    <span class="comment"># 时间处理 这组是对2018/9/16 这类没-而且ip没有的数据处理</span></span><br><span class="line">    comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>] = comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line">    comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>] = comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>].apply(</span><br><span class="line">        <span class="keyword">lambda</span> x: <span class="built_in">str</span>(radar.random_date(<span class="string">&quot;2020-09-13&quot;</span>, <span class="string">&quot;2023-02-02&quot;</span>).date()) <span class="keyword">if</span> x == <span class="string">&quot;&quot;</span> <span class="keyword">else</span> (</span><br><span class="line">            x + <span class="string">&quot;IP属地: &quot;</span> + np.random.choice(province_list) <span class="keyword">if</span> <span class="string">&quot;IP&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> x <span class="keyword">else</span> x))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_scores</span>(<span class="params">row</span>):</span><br><span class="line">        row.EVALUATION = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(row.EVALUATION).split())</span><br><span class="line">        <span class="keyword">if</span> (row.EVALUATION == <span class="string">&quot;用户未点评。系统默认好评。&quot;</span>) <span class="keyword">or</span> (<span class="built_in">type</span>(row.EVALUATION) != <span class="built_in">str</span>):</span><br><span class="line">            score = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            score = <span class="built_in">round</span>(SnowNLP(row.EVALUATION).sentiments, <span class="number">2</span>)</span><br><span class="line">        feelScore = <span class="built_in">round</span>(score * <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 评论情绪</span></span><br><span class="line">        feel = scoreSnow(score)</span><br><span class="line">        <span class="keyword">if</span> row.EVALUATION_GRADE == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            row.EVALUATION_GRADE = <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(feelScore, <span class="number">0</span>))) + <span class="string">&quot;分 &quot;</span> + feel</span><br><span class="line"></span><br><span class="line">        row.FEEL_SCORE = feelScore</span><br><span class="line">        row.FEEL = feel</span><br><span class="line">        <span class="keyword">return</span> row</span><br><span class="line"></span><br><span class="line">    comment_df = comment_df.apply(calculate_scores, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;评论表结束处理&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> comment_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">provinceRandom</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    province = fakerCn.province()</span><br><span class="line">    <span class="keyword">if</span> province.find(<span class="string">&quot;省&quot;</span>) != -<span class="number">1</span> <span class="keyword">or</span> province.find(<span class="string">&quot;市&quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> province[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> provinceRandom()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">provinceList</span>():</span><br><span class="line">    province_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(province_list) &lt;= <span class="number">33</span>:</span><br><span class="line">        province = fakerCn.province()[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> province <span class="keyword">not</span> <span class="keyword">in</span> province_list:</span><br><span class="line">            province_list.append(province)</span><br><span class="line">    <span class="keyword">return</span> province_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">intoDm</span>(<span class="params">data, tableName</span>):</span><br><span class="line">    <span class="comment"># 创建url</span></span><br><span class="line">    conn_url = <span class="string">&#x27;dm+dmPython://SYSDBA:SYSDBA001@47.120.9.247:5237&#x27;</span></span><br><span class="line">    <span class="comment"># 创建Engine对象</span></span><br><span class="line">    engine = create_engine(conn_url)</span><br><span class="line">    <span class="comment"># 到dm8中</span></span><br><span class="line">    data.to_sql(name=tableName, con=engine, if_exists=<span class="string">&#x27;append&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = time.time()</span><br><span class="line">    provinces = provinceList()</span><br><span class="line">    provinces.remove(<span class="string">&quot;黑龙&quot;</span>)</span><br><span class="line">    provinces.append(<span class="string">&quot;黑龙江&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;省份筛选完成&quot;</span>)</span><br><span class="line"></span><br><span class="line">    allDf = pd.read_pickle(<span class="string">&#x27;allClearData.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    comment_temp_df = clearSpotComment(allDf, provinces)</span><br><span class="line">    comment_temp_df.to_pickle(<span class="string">&#x27;commentFinalData.pkl&#x27;</span>)</span><br><span class="line">    path = <span class="string">&#x27;commentFinalData.pkl&#x27;</span></span><br><span class="line">    comment_temp = pd.read_pickle(path)</span><br><span class="line">    <span class="comment"># 修改object的类型</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> comment_temp.select_dtypes(include=[<span class="built_in">object</span>]):</span><br><span class="line">        comment_temp[col] = comment_temp[col].astype(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">    <span class="comment"># 分批导入1000一次</span></span><br><span class="line">    chunkSize = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(comment_temp), chunkSize):</span><br><span class="line">        data_chunk = comment_temp[i:i + chunkSize]</span><br><span class="line">        intoDm(data_chunk, <span class="string">&#x27;comment_info&#x27;</span>)</span><br><span class="line">    a1 = time.time()</span><br><span class="line">    finalTime = arrow.get(a1 - a).<span class="built_in">format</span>(<span class="string">&#x27;mm分:ss秒:SSS毫秒&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行速度&quot;</span>, finalTime)</span><br></pre></td></tr></table></figure><h2 id="BUG-12">BUG</h2><p>​之前python一直莫名其妙的自己停止，一直推测是内存溢出的问题，但是服务器中内存是有12G的，不应该啊，自己程序内存撑死也就占用4个G，后来top查看实时运行进程的时候，发现有很多python3的任务还在跑，但是没有停止，占用了大量的内存，导致今天内存都崩了，print都不行。杀死就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkill -9 python3 <span class="comment">#杀死进程</span></span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches <span class="comment">#清除缓存</span></span><br></pre></td></tr></table></figure><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102734570.png" alt="image-20250820102734570"></p><p>进程如下</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102740544.png" alt="image-20250820102740544"></p><h2 id="日总结-12">日总结</h2><blockquote><p>​今天花点时间处理掉了最麻烦的评论表，之所以麻烦是因为评论这边需要的技术点是最多的，一些数据的填充都需要用到ai，数据挖掘，语言处理，进行缺失值的填充。而且数据量是最多的，因为我是策略是45w条一起的，所以会导致挺慢的。效果不错的，评论我大致分了7个字段，所有的nan缺失值都填充了，而且对语言情绪进行了分析。不出意外明天就能把hdfs的新数据，清洗完毕了。</p></blockquote><h1 id="数据清洗工作完成">数据清洗工作完成</h1><h2 id="学习日期-6-16">学习日期: 6.16</h2><h2 id="项目任务-13">项目任务</h2><p>​目前我分了四个文件，改天会合并成一个py文件，利用to_pickle处理成，pandas处理最快的方式，这样就不会在内存中占用资源，而是将数据放入磁盘中，不仅解决了内存超出问题，而且优化了速度。代码比较多就不放这篇笔记中了，会传到博客中，等比赛结束再公开。</p><h3 id="level缺失值填充">level缺失值填充</h3><p>用了回归模型，但是不是很准确，如果作为4A这样的景区评定的话，还是绰绰有余的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">level_dict = &#123;<span class="string">&#x27;3A景区&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;4A景区&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;5A景区&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">df[<span class="string">&#x27;LEVEL&#x27;</span>] = df[<span class="string">&#x27;LEVEL&#x27;</span>].<span class="built_in">map</span>(level_dict)</span><br><span class="line"><span class="comment"># 将等级缺失的填充为-1</span></span><br><span class="line">df[<span class="string">&#x27;LEVEL&#x27;</span>].fillna(-<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建LEVEL有缺失值的表</span></span><br><span class="line">predict_data = df[df[<span class="string">&#x27;LEVEL&#x27;</span>] == -<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 数据增强</span></span><br><span class="line">listData = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    listData.append(df[df[<span class="string">&#x27;LEVEL&#x27;</span>] != -<span class="number">1</span>].sample(frac=<span class="number">0.8</span>))</span><br><span class="line">enhance = pd.concat(listData, ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建线性回归模型</span></span><br><span class="line">lr = LinearRegression()</span><br><span class="line"><span class="comment"># 建立训练数据集和测试数据集 (使用的是80/20划分)</span></span><br><span class="line">train_data = enhance.sample(frac=<span class="number">0.8</span>)</span><br><span class="line"><span class="comment"># 把大部分数据留给测试集，只使用一小部分作为训练集</span></span><br><span class="line">test_data = df[df[<span class="string">&#x27;LEVEL&#x27;</span>] != -<span class="number">1</span>]</span><br><span class="line"><span class="comment"># fit模型</span></span><br><span class="line">lr.fit(train_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>,<span class="string">&#x27;HOT&#x27;</span>,<span class="string">&#x27;RATING&#x27;</span>]].values, train_data[<span class="string">&#x27;LEVEL&#x27;</span>].values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试模型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;模型得分: &#x27;</span>, lr.score(test_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>,<span class="string">&#x27;HOT&#x27;</span>,<span class="string">&#x27;RATING&#x27;</span>]].values, test_data[<span class="string">&#x27;LEVEL&#x27;</span>].values))</span><br><span class="line">prediction= lr.predict(predict_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>,<span class="string">&#x27;HOT&#x27;</span>,<span class="string">&#x27;RATING&#x27;</span>]].values)</span><br><span class="line">prediction[prediction &gt; <span class="number">3</span>] = <span class="number">3</span></span><br><span class="line">prediction[prediction &lt; <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测缺失的景区等级</span></span><br><span class="line">predict_data[<span class="string">&#x27;LEVEL&#x27;</span>] = prediction.<span class="built_in">round</span>(<span class="number">0</span>)</span><br><span class="line">df.update(predict_data)</span><br><span class="line"><span class="comment"># 景区等级还原</span></span><br><span class="line">level_dict = &#123;<span class="number">1</span>:<span class="string">&#x27;3A景区&#x27;</span>, <span class="number">2</span>:<span class="string">&#x27;4A景区&#x27;</span>, <span class="number">3</span>:<span class="string">&#x27;5A景区&#x27;</span>&#125;</span><br><span class="line">df[<span class="string">&#x27;LEVEL&#x27;</span>] = df[<span class="string">&#x27;LEVEL&#x27;</span>].<span class="built_in">map</span>(level_dict)</span><br></pre></td></tr></table></figure><h2 id="BUG-13">BUG</h2><p>​修改表类型将text换成varchar的了以后，我再导入spot景区数据，发现报错了，一看就是string类型太短了，存不住景区介绍那几块，那几块换成了text，其他依旧varchar，就没问题了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102754432.png" alt="image-20250820102754432"></p><h2 id="日总结-13">日总结</h2><blockquote><p>​今天把spot和其他城市表和省份表都重新导入了，而且建立了备份文件，防止数据丢失，因为现在已经是在平台了，等后面清洗的时候大概只需要20秒。明天还是要整理一下自己的代码包，注释需要添加的添加一下，文档是需要写代码如何清洗和运行的，所以为了不繁琐，还是需要整理一下的，速度方面评论那部分实在是太大了，也没有很好的优化方案，就暂定如此了。如果有空再修改一下。</p></blockquote><h1 id="景区评论接口修改">景区评论接口修改</h1><h2 id="学习日期-6-19">学习日期: 6.19</h2><h2 id="项目任务-14">项目任务</h2><h3 id="添加所有景区的评论接口">添加所有景区的评论接口</h3><p>​这个其实挺简单的，根据spot_id查询对应景区的所有评论就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询对应景区的所有评论</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/spot/commentAll/&lt;spot_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spot_comments_from_id</span>(<span class="params">spot_id</span>):</span><br><span class="line">    data = dmToDfpkuseg.spotAllComment(<span class="built_in">eval</span>(spot_id))</span><br><span class="line">    <span class="keyword">return</span> json.dumps(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;查询成功&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;data&#x27;</span>: data&#125;, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dmToDfpkuseg代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spotAllComment</span>(<span class="params">spot_id</span>):</span><br><span class="line">    cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    select spot_id, evaluation_name,evaluation, evaluation_grade, evaluation_time, feel_score, feel from COMMENT_INFO</span></span><br><span class="line"><span class="string">    where</span></span><br><span class="line"><span class="string">        SPOT_ID=&#123;&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(spot_id))</span><br><span class="line">    list_test = cur.fetchall()</span><br><span class="line">    df_test = pd.DataFrame(list_test, columns=[<span class="string">&quot;spot_id&quot;</span>,<span class="string">&quot;evaluation_name&quot;</span>, <span class="string">&quot;evaluation&quot;</span>, <span class="string">&quot;evaluation_grade&quot;</span>,</span><br><span class="line">                                               <span class="string">&quot;evaluation_time&quot;</span>, <span class="string">&quot;feel_score&quot;</span>, <span class="string">&quot;feel&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(df_test.to_json(orient=<span class="string">&#x27;records&#x27;</span>, force_ascii=<span class="literal">False</span>).replace(<span class="string">&quot;null&quot;</span>, <span class="string">&quot;&#x27;未填&#x27;&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="修改景区接口">修改景区接口</h3><p>​因为增加了字段，加上一些不需要的词要加到停用词中，又进行处理了一下。添加了停用词，模型又训练了一遍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">keyWordFindComment</span>(<span class="params">spot_id, comment_key_word</span>):</span><br><span class="line">    cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    select spot_id, evaluation_name,evaluation, evaluation_grade, evaluation_time, feel_score, feel from COMMENT_INFO</span></span><br><span class="line"><span class="string">    where</span></span><br><span class="line"><span class="string">        SPOT_ID=&#123;&#125;</span></span><br><span class="line"><span class="string">    and</span></span><br><span class="line"><span class="string">        EVALUATION like &#x27;%&#123;&#125;%&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.<span class="built_in">format</span>(spot_id, comment_key_word))</span><br><span class="line">    list_test = cur.fetchall()</span><br><span class="line">    df_test = pd.DataFrame(list_test, columns=[<span class="string">&quot;spot_id&quot;</span>, <span class="string">&quot;evaluation_name&quot;</span>, <span class="string">&quot;evaluation&quot;</span>, <span class="string">&quot;evaluation_grade&quot;</span>,</span><br><span class="line">                                               <span class="string">&quot;evaluation_time&quot;</span>, <span class="string">&quot;feel_score&quot;</span>, <span class="string">&quot;feel&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(df_test.to_json(orient=<span class="string">&#x27;records&#x27;</span>, force_ascii=<span class="literal">False</span>).replace(<span class="string">&quot;null&quot;</span>, <span class="string">&quot;&#x27;未填&#x27;&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="BUG-14">BUG</h2><p>​跑py代码的时候，服务器报错，看起来是连接的问题，之前好像是遇到过，然后我用driver工具测试，发现连接不上数据库了，去数据库的服务器查看，发现是服务死了，前台启动以后报错解决。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102813870.png" alt="image-20250820102813870"></p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102819629.png" alt="image-20250820102819629"></p><h2 id="日总结-14">日总结</h2><blockquote><p>​今天主要是对评论部分接口的修改以及添加，python跑一遍flask接口的确有点慢，是先加载再调用的，所以启动python的接口我就需要七八分钟，也是因为数据量大的原因，没有做优化，调用的速度还是很快的，所以就没有做优化，分词的效果还需要慢慢调整。</p></blockquote><h1 id="代码整合注释添加">代码整合注释添加</h1><h2 id="学习日期-6-20">学习日期: 6.20</h2><h2 id="项目任务-15">项目任务</h2><h3 id="代码整合">代码整合</h3><p>​整合的目录如下，清洗的代码还是分两部来跑了，不然内存会崩。先执行alldataToPkl,将所有hdfs数据保存到本地然后再合成一个allClearData.pkl，然后allDataClearTableIntoDm就是将所有数据拆分成四个表。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102836379.png" alt="image-20250820102836379"></p><h3 id="代码如下-3">代码如下</h3><p>​因为代码很长，博客中会代码展开栏的，为了博客的显示，就直接将代码放入了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> radar</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP, sentiment</span><br><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># faker随机值</span></span><br><span class="line">fakerCn = Faker(<span class="string">&#x27;zh_CN&#x27;</span>)</span><br><span class="line"><span class="comment"># 将警告去除</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;mode.chained_assignment&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, message=<span class="string">&quot;Could not import the lzma module.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定使用模型</span></span><br><span class="line">sentiment.load(<span class="string">&quot;sentiment.marshal&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于不同的情绪评分 判断出所给评论</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scoreSnow</span>(<span class="params">sentiments</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0.9</span> &lt;= sentiments &lt;= <span class="number">1</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;超棒&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.8</span> &lt;= sentiments &lt;= <span class="number">0.9</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;满意&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.5</span> &lt;= sentiments &lt;= <span class="number">0.8</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不错&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0.2</span> &lt;= sentiments &lt;= <span class="number">0.5</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;一般&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        feelMood = <span class="string">&quot;不佳&quot;</span></span><br><span class="line">    <span class="comment"># 返回评论字符</span></span><br><span class="line">    <span class="keyword">return</span> feelMood</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotComment</span>(<span class="params">allInfoDf, province_list</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;评论表开始处理&quot;</span>)</span><br><span class="line">    <span class="comment"># 评论所需字段为全部中索引12以后的</span></span><br><span class="line">    comment_df = allInfoDf[allInfoDf.columns[<span class="number">12</span>:]].copy()</span><br><span class="line">    <span class="comment"># 添加新增字段</span></span><br><span class="line">    comment_df[<span class="string">&#x27;FEEL_SCORE&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    comment_df[<span class="string">&#x27;FEEL&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 排好序</span></span><br><span class="line">    order = [<span class="string">&#x27;SPOT_ID&#x27;</span>, <span class="string">&#x27;EVALUATION&#x27;</span>, <span class="string">&#x27;EVALUATION_GRADE&#x27;</span>, <span class="string">&#x27;EVALUATION_TIME&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;EVALUATION_NAME&#x27;</span>, <span class="string">&#x27;FEEL_SCORE&#x27;</span>, <span class="string">&#x27;FEEL&#x27;</span>]</span><br><span class="line">    comment_df = comment_df[order]</span><br><span class="line">    <span class="comment"># 时间处理 这组是对2018/9/16 这类没-而且ip没有的数据处理</span></span><br><span class="line">    comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>] = comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="comment"># 对time字段为空的进行随机值填充</span></span><br><span class="line">    comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>] = comment_df[<span class="string">&#x27;EVALUATION_TIME&#x27;</span>].apply(</span><br><span class="line">        <span class="keyword">lambda</span> x: <span class="built_in">str</span>(radar.random_date(<span class="string">&quot;2020-09-13&quot;</span>, <span class="string">&quot;2023-02-02&quot;</span>).date()) <span class="keyword">if</span> x == <span class="string">&quot;&quot;</span> <span class="keyword">else</span> (</span><br><span class="line">            x + <span class="string">&quot;IP属地: &quot;</span> + np.random.choice(province_list) <span class="keyword">if</span> <span class="string">&quot;IP&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> x <span class="keyword">else</span> x))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加feel以及feel_score两列并对grade为空的行填充</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_scores</span>(<span class="params">row</span>):</span><br><span class="line">        <span class="comment"># 对评论有换行空格的去除</span></span><br><span class="line">        row.EVALUATION = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(row.EVALUATION).split())</span><br><span class="line">        <span class="comment"># 未点评的默认好评</span></span><br><span class="line">        <span class="keyword">if</span> (row.EVALUATION == <span class="string">&quot;用户未点评。系统默认好评。&quot;</span>) <span class="keyword">or</span> (<span class="built_in">type</span>(row.EVALUATION) != <span class="built_in">str</span>):</span><br><span class="line">             score = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># nlp自然语言处理</span></span><br><span class="line">            score = <span class="built_in">round</span>(SnowNLP(row.EVALUATION).sentiments, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 赋值 权重平衡</span></span><br><span class="line">        feelScore = <span class="built_in">round</span>(score * <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 评论情绪</span></span><br><span class="line">        feel = scoreSnow(score)</span><br><span class="line">        <span class="comment"># 为空填充</span></span><br><span class="line">        <span class="keyword">if</span> pd.isna(row.EVALUATION_GRADE):</span><br><span class="line">            <span class="built_in">print</span>(row.EVALUATION_GRADE)</span><br><span class="line">            row.EVALUATION_GRADE = <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(feelScore, <span class="number">0</span>))) + <span class="string">&quot;分 &quot;</span> + feel</span><br><span class="line">        <span class="comment"># 填充字段</span></span><br><span class="line">        row.FEEL_SCORE = feelScore</span><br><span class="line">        row.FEEL = feel</span><br><span class="line">        <span class="keyword">return</span> row</span><br><span class="line">    <span class="comment"># 进行自然语言处理 以及缺失值预测填充</span></span><br><span class="line">    comment_df = comment_df.apply(calculate_scores, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;评论表结束处理&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> comment_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">provinceList</span>():</span><br><span class="line">    <span class="comment"># 存放34个省的集合 集合是唯一性</span></span><br><span class="line">    province_set = <span class="built_in">set</span>()</span><br><span class="line">    <span class="comment"># 去重导入</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(province_set) &lt;= <span class="number">33</span>:</span><br><span class="line">        province = fakerCn.province()[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">        <span class="comment"># 因为两字，所以黑龙需要修改成黑龙江</span></span><br><span class="line">        <span class="keyword">if</span> province == <span class="string">&quot;黑龙&quot;</span>:</span><br><span class="line">            province = <span class="string">&quot;黑龙江&quot;</span></span><br><span class="line">        province_set.add(province)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(province_set)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">intoDm</span>(<span class="params">data, tableName</span>):</span><br><span class="line">    <span class="comment"># 创建url</span></span><br><span class="line">    conn_url = <span class="string">&#x27;dm+dmPython://SYSDBA:SYSDBA001@47.120.9.36:5236&#x27;</span></span><br><span class="line">    <span class="comment"># 创建Engine对象</span></span><br><span class="line">    engine = create_engine(conn_url)</span><br><span class="line">    <span class="comment"># 到dm8中</span></span><br><span class="line">    data.to_sql(name=tableName, con=engine, if_exists=<span class="string">&#x27;append&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cityFindProvince</span>(<span class="params">cityName</span>):</span><br><span class="line">    <span class="comment"># 处理io 并使用utf-8字符</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/city.json&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content: <span class="built_in">dict</span> = json.load(f)</span><br><span class="line">    <span class="comment"># province_name省份名 city_data是省内城市是list(dict)</span></span><br><span class="line">    <span class="keyword">for</span> province_name, city_name_datas <span class="keyword">in</span> content.items():</span><br><span class="line">        <span class="comment"># 遍历list内部数据dict</span></span><br><span class="line">        <span class="keyword">for</span> city_name_data <span class="keyword">in</span> city_name_datas:</span><br><span class="line">            <span class="comment"># 取字典的键值对</span></span><br><span class="line">            <span class="keyword">for</span> city_name, county_name_list <span class="keyword">in</span> city_name_data.items():</span><br><span class="line">                <span class="comment"># 找到对应城市则返回</span></span><br><span class="line">                <span class="keyword">if</span> city_name == cityName:</span><br><span class="line">                    <span class="keyword">return</span> province_name</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 否则在县里找</span></span><br><span class="line">                    <span class="keyword">for</span> county_name <span class="keyword">in</span> county_name_list:</span><br><span class="line">                        <span class="keyword">if</span> county_name == cityName:</span><br><span class="line">                            <span class="keyword">return</span> province_name</span><br><span class="line">    <span class="comment"># 没找到返回未知省</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;未知省&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotProvince</span>(<span class="params">cityWithProvinceDf</span>):</span><br><span class="line">    <span class="comment"># 省份名为城市名在cityFindProvince方法中找</span></span><br><span class="line">    cityWithProvinceDf[<span class="string">&#x27;PROVINCE_NAME&#x27;</span>] = cityWithProvinceDf[<span class="string">&#x27;CITY_NAME&#x27;</span>].apply(cityFindProvince)</span><br><span class="line">    <span class="comment"># 省份名去重 排出省份id</span></span><br><span class="line">    province_dict = &#123;name: rank + <span class="number">1</span> <span class="keyword">for</span> rank, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(cityWithProvinceDf[<span class="string">&#x27;PROVINCE_NAME&#x27;</span>].unique())&#125;</span><br><span class="line">    <span class="comment"># 省份id填充</span></span><br><span class="line">    cityWithProvinceDf[<span class="string">&#x27;PROVINCE_ID&#x27;</span>] = cityWithProvinceDf[<span class="string">&#x27;PROVINCE_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: province_dict[x])</span><br><span class="line">    <span class="comment"># 创建省份df 字段为name和id</span></span><br><span class="line">    province_temp_df = cityWithProvinceDf.copy()[[<span class="string">&#x27;PROVINCE_NAME&#x27;</span>, <span class="string">&#x27;PROVINCE_ID&#x27;</span>]].drop_duplicates()</span><br><span class="line">    <span class="comment"># 删除城市表中省份名字段</span></span><br><span class="line">    cityWithProvinceDf.drop(columns=[<span class="string">&#x27;PROVINCE_NAME&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> province_temp_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotDf</span>(<span class="params">allInfoDf</span>):</span><br><span class="line">    <span class="comment"># 所有信息从取景区相关信息并去重</span></span><br><span class="line">    spot_df = allInfoDf[[<span class="string">&#x27;SPOT_NAME&#x27;</span>, <span class="string">&#x27;LEVEL&#x27;</span>, <span class="string">&#x27;LOCATION&#x27;</span>, <span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>, <span class="string">&#x27;INTRO&#x27;</span>, <span class="string">&#x27;OPENTIME&#x27;</span>,</span><br><span class="line">                         <span class="string">&#x27;NOTICE&#x27;</span>, <span class="string">&#x27;ST&#x27;</span>, <span class="string">&#x27;HOT&#x27;</span>, <span class="string">&#x27;CITY_ID&#x27;</span>, <span class="string">&#x27;RATING&#x27;</span>, <span class="string">&#x27;SPOT_ID&#x27;</span>]].drop_duplicates().copy()</span><br><span class="line">    <span class="comment"># 添加需要列 随机填充电话</span></span><br><span class="line">    spot_df.insert(<span class="number">3</span>, <span class="string">&#x27;PHONE&#x27;</span>, [fakerCn.phone_number() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(spot_df.iloc[:, <span class="number">0</span>].size)])</span><br><span class="line">    <span class="keyword">return</span> spot_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotCity</span>(<span class="params">spotWithCityDf</span>):</span><br><span class="line">    <span class="comment"># 城市表先将城市名添加景区表</span></span><br><span class="line">    spotWithCityDf[<span class="string">&#x27;CITY_NAME&#x27;</span>] = \</span><br><span class="line">        spotWithCityDf[<span class="string">&#x27;LOCATION&#x27;</span>].<span class="built_in">str</span>.extract(<span class="string">&#x27;([^市]&#123;2&#125;()+市)&#x27;</span>)[</span><br><span class="line">            <span class="number">0</span>].fillna(<span class="string">&#x27;未知市&#x27;</span>)</span><br><span class="line">    <span class="comment"># 挂上城市id</span></span><br><span class="line">    city_id_dict = &#123;city_name: rank + <span class="number">1</span> <span class="keyword">for</span> rank, city_name <span class="keyword">in</span> <span class="built_in">enumerate</span>(spotWithCityDf[<span class="string">&#x27;CITY_NAME&#x27;</span>].unique())&#125;</span><br><span class="line">    <span class="comment"># 设置唯一的id</span></span><br><span class="line">    spotWithCityDf[<span class="string">&#x27;CITY_ID&#x27;</span>] = spotWithCityDf[<span class="string">&#x27;CITY_NAME&#x27;</span>].apply(<span class="keyword">lambda</span> x: city_id_dict[x])</span><br><span class="line">    <span class="comment"># 复制字段到城市df 并去重</span></span><br><span class="line">    city_temp_df = spotWithCityDf.copy()[[<span class="string">&#x27;CITY_NAME&#x27;</span>, <span class="string">&#x27;CITY_ID&#x27;</span>]].drop_duplicates()</span><br><span class="line">    <span class="comment"># 删除城市名</span></span><br><span class="line">    spotWithCityDf.drop(columns=[<span class="string">&#x27;CITY_NAME&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> city_temp_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该方法是处理一些景区名相同的景区，保留nan值少的，如果nan值一样取QTY大的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keep_row_with_less_missing_values_and_less_qty</span>(<span class="params">group</span>):</span><br><span class="line">    <span class="comment"># 计算每行的缺失值数量和QTY的数量</span></span><br><span class="line">    missing_values = group.isnull().<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">    qty_sum = group[<span class="string">&#x27;QTY&#x27;</span>]</span><br><span class="line">    <span class="comment"># 合并两个Series</span></span><br><span class="line">    combined = pd.DataFrame(&#123;<span class="string">&#x27;Missing&#x27;</span>: missing_values, <span class="string">&#x27;QTY&#x27;</span>: qty_sum&#125;)</span><br><span class="line">    <span class="comment"># 先对缺失值数量排序，有平局的话就按照QTY的排序</span></span><br><span class="line">    combined_sorted = combined.sort_values(by=[<span class="string">&#x27;Missing&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>])</span><br><span class="line">    <span class="comment"># 返回最佳行的index</span></span><br><span class="line">    <span class="keyword">return</span> group.loc[combined_sorted.index[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clearSpotFinal</span>(<span class="params">df</span>):</span><br><span class="line">    <span class="comment"># 尝试将评论数字段转换为整数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        df[<span class="string">&#x27;QTY&#x27;</span>] = df[<span class="string">&#x27;QTY&#x27;</span>].<span class="built_in">str</span>[:-<span class="number">3</span>].astype(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;评论数字段包含一些无法转换为数字的值！&quot;</span>)</span><br><span class="line">    <span class="comment"># 将缺失的热度（nan值）赋予一个负数，以便于后面处理</span></span><br><span class="line">    df[<span class="string">&#x27;HOT&#x27;</span>].fillna(-<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 取出缺失数据</span></span><br><span class="line">    predict_data = df[df[<span class="string">&#x27;HOT&#x27;</span>] == -<span class="number">1</span>]</span><br><span class="line">    listData = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        listData.append(df[df[<span class="string">&#x27;HOT&#x27;</span>] != -<span class="number">1</span>].sample(frac=<span class="number">0.8</span>))</span><br><span class="line">    enhance = pd.concat(listData, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 创建线性回归模型</span></span><br><span class="line">    lr = LinearRegression()</span><br><span class="line">    <span class="comment"># 建立训练数据集和测试数据集 (使用的是80/20划分)</span></span><br><span class="line">    train_data = enhance.sample(frac=<span class="number">0.8</span>)</span><br><span class="line">    <span class="comment"># 把大部分数据留给测试集，只使用一小部分作为训练集</span></span><br><span class="line">    test_data = df[df[<span class="string">&#x27;HOT&#x27;</span>] != -<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># # fit模型</span></span><br><span class="line">    lr.fit(train_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>]].values, train_data[<span class="string">&#x27;HOT&#x27;</span>].values)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;模型得分: &#x27;</span>, lr.score(test_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>]].values, test_data[<span class="string">&#x27;HOT&#x27;</span>].values))</span><br><span class="line">    <span class="comment"># 测试模型</span></span><br><span class="line">    prediction = lr.predict(predict_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>]].values)</span><br><span class="line">    prediction[prediction &gt; <span class="number">10</span>] = <span class="number">10</span></span><br><span class="line">    prediction[prediction &lt; <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 预测缺失的热度</span></span><br><span class="line">    predict_data[<span class="string">&#x27;HOT&#x27;</span>] = prediction.<span class="built_in">round</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 把预测结果填充回原数据集</span></span><br><span class="line">    df.update(predict_data)</span><br><span class="line">    <span class="comment"># 找出所有重复的spot_name，我们只保留第一个（默认情况）</span></span><br><span class="line">    duplicated_mask = df.duplicated(subset=<span class="string">&#x27;SPOT_NAME&#x27;</span>, keep=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 获取所有重复的行</span></span><br><span class="line">    duplicated_rows = df[duplicated_mask]</span><br><span class="line">    <span class="comment"># 景区名分组</span></span><br><span class="line">    new_rows = duplicated_rows.groupby(<span class="string">&#x27;SPOT_NAME&#x27;</span>).apply(keep_row_with_less_missing_values_and_less_qty)</span><br><span class="line">    <span class="comment"># 找出不重复的行</span></span><br><span class="line">    non_duplicated_rows = df[~duplicated_mask]</span><br><span class="line">    <span class="comment"># 将两部分的数据合并</span></span><br><span class="line">    result = pd.concat([non_duplicated_rows, new_rows])</span><br><span class="line">    <span class="comment"># 算出评论数的最大值</span></span><br><span class="line">    max_comment_sum = result[<span class="string">&#x27;QTY&#x27;</span>].<span class="built_in">max</span>()</span><br><span class="line">    <span class="comment"># 加权做默认推荐指标</span></span><br><span class="line">    result[<span class="string">&#x27;RATING&#x27;</span>] = <span class="built_in">round</span>((result[<span class="string">&#x27;GRADE&#x27;</span>] * <span class="number">6</span>) + (result[<span class="string">&#x27;HOT&#x27;</span>] * <span class="number">4</span>) + (result[<span class="string">&#x27;QTY&#x27;</span>] / max_comment_sum * <span class="number">30</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 缺少景区等级的表 XA景区</span></span><br><span class="line">    result.to_pickle(<span class="string">&#x27;allClearDataSpot.pkl&#x27;</span>)</span><br><span class="line">    <span class="comment"># 读取数据</span></span><br><span class="line">    df = pd.read_pickle(<span class="string">&#x27;allClearDataSpot.pkl&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将LEVEL转换为数字标签</span></span><br><span class="line">    level_dict = &#123;<span class="string">&#x27;3A景区&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;4A景区&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;5A景区&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">    df[<span class="string">&#x27;LEVEL&#x27;</span>] = df[<span class="string">&#x27;LEVEL&#x27;</span>].<span class="built_in">map</span>(level_dict)</span><br><span class="line">    <span class="comment"># 将等级缺失的填充为-1</span></span><br><span class="line">    df[<span class="string">&#x27;LEVEL&#x27;</span>].fillna(-<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 创建LEVEL有缺失值的表</span></span><br><span class="line">    predict_data = df[df[<span class="string">&#x27;LEVEL&#x27;</span>] == -<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 数据增强</span></span><br><span class="line">    listData = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        listData.append(df[df[<span class="string">&#x27;LEVEL&#x27;</span>] != -<span class="number">1</span>].sample(frac=<span class="number">0.8</span>))</span><br><span class="line">    enhance = pd.concat(listData, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 创建线性回归模型</span></span><br><span class="line">    lr = LinearRegression()</span><br><span class="line">    <span class="comment"># 建立训练数据集和测试数据集 (使用的是80/20划分)</span></span><br><span class="line">    train_data = enhance.sample(frac=<span class="number">0.8</span>)</span><br><span class="line">    <span class="comment"># 把大部分数据留给测试集，只使用一小部分作为训练集</span></span><br><span class="line">    test_data = df[df[<span class="string">&#x27;LEVEL&#x27;</span>] != -<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># fit模型</span></span><br><span class="line">    lr.fit(train_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>, <span class="string">&#x27;HOT&#x27;</span>, <span class="string">&#x27;RATING&#x27;</span>]].values, train_data[<span class="string">&#x27;LEVEL&#x27;</span>].values)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;模型得分: &#x27;</span>, lr.score(test_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>, <span class="string">&#x27;HOT&#x27;</span>, <span class="string">&#x27;RATING&#x27;</span>]].values, test_data[<span class="string">&#x27;LEVEL&#x27;</span>].values))</span><br><span class="line">    <span class="comment"># 测试模型 缺失值导入</span></span><br><span class="line">    prediction = lr.predict(predict_data[[<span class="string">&#x27;GRADE&#x27;</span>, <span class="string">&#x27;QTY&#x27;</span>, <span class="string">&#x27;HOT&#x27;</span>, <span class="string">&#x27;RATING&#x27;</span>]].values)</span><br><span class="line">    prediction[prediction &gt; <span class="number">3</span>] = <span class="number">3</span></span><br><span class="line">    prediction[prediction &lt; <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测缺失的景区等级</span></span><br><span class="line">    predict_data[<span class="string">&#x27;LEVEL&#x27;</span>] = prediction.<span class="built_in">round</span>(<span class="number">0</span>)</span><br><span class="line">    df.update(predict_data)</span><br><span class="line">    <span class="comment"># 景区等级还原</span></span><br><span class="line">    level_dict = &#123;<span class="number">1</span>: <span class="string">&#x27;3A景区&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;4A景区&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;5A景区&#x27;</span>&#125;</span><br><span class="line">    df[<span class="string">&#x27;LEVEL&#x27;</span>] = df[<span class="string">&#x27;LEVEL&#x27;</span>].<span class="built_in">map</span>(level_dict)</span><br><span class="line">    <span class="comment"># 最终成品景区表</span></span><br><span class="line">    df.to_pickle(<span class="string">&#x27;spotFinalData.pkl&#x27;</span>)</span><br><span class="line">    df[df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns] = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).astype(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = time.time()</span><br><span class="line">    <span class="comment"># 省份经纬度表</span></span><br><span class="line">    province_city = pd.read_csv(<span class="string">&quot;../data/GT_CITYS.csv&quot;</span>,encoding = <span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    intoDm(province_city,<span class="string">&quot;GT_CITYS&quot;</span>)</span><br><span class="line">    <span class="comment"># 构建出所有省份表 方便给IP添加省份信息</span></span><br><span class="line">    provinces = provinceList()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;省份筛选完成&quot;</span>)</span><br><span class="line">    <span class="comment"># 读取处理好的所有评论信息</span></span><br><span class="line">    allDf = pd.read_pickle(<span class="string">&#x27;allClearData.pkl&#x27;</span>)</span><br><span class="line">    <span class="comment"># 处理评论表 字段添加以及缺失值填充</span></span><br><span class="line">    comment_temp_df = clearSpotComment(allDf, provinces)</span><br><span class="line">    <span class="comment"># 保存磁盘</span></span><br><span class="line">    path = <span class="string">&#x27;commentFinalData.pkl&#x27;</span></span><br><span class="line">    comment_temp_df.to_pickle(path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始导入&quot;</span>)</span><br><span class="line">    <span class="comment"># 读取评论表</span></span><br><span class="line">    comment_temp = pd.read_pickle(path)</span><br><span class="line">    comment_temp[comment_temp.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns] = comment_temp.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).astype(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改object的类型 转换为string</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> comment_temp.select_dtypes(include=[<span class="built_in">object</span>]):</span><br><span class="line">        comment_temp[col] = comment_temp[col].astype(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">    <span class="comment"># 分批导入5000一次</span></span><br><span class="line">    chunkSize = <span class="number">5200</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(comment_temp), chunkSize):</span><br><span class="line">        data_chunk = comment_temp[i:i + chunkSize]</span><br><span class="line">        intoDm(data_chunk, <span class="string">&#x27;comment_info&#x27;</span>)</span><br><span class="line">    <span class="comment"># 清洗景区表 并保存磁盘</span></span><br><span class="line">    spot_info = clearSpotDf(allDf)</span><br><span class="line">    spot_info.to_pickle(<span class="string">&#x27;allClearSpot.pkl&#x27;</span>)</span><br><span class="line">    <span class="comment"># 清洗城市表 并导入dm数据库</span></span><br><span class="line">    city_df = clearSpotCity(spot_info)</span><br><span class="line">    intoDm(city_df, <span class="string">&#x27;city_info&#x27;</span>)</span><br><span class="line">    <span class="comment"># 清洗省份表 并导入dm数据库</span></span><br><span class="line">    province_df = clearSpotProvince(city_df)</span><br><span class="line">    intoDm(province_df, <span class="string">&#x27;province_info&#x27;</span>)</span><br><span class="line">    <span class="comment"># 最后对景区表的处理+填充+预测</span></span><br><span class="line">    spot_final_info = pd.read_pickle(<span class="string">&#x27;allClearSpot.pkl&#x27;</span>).reset_index().drop(columns=[<span class="string">&#x27;index&#x27;</span>])</span><br><span class="line">    clearSpotFinal(spot_final_info)</span><br><span class="line">    intoDm(spot_final_info, <span class="string">&quot;spot_info&quot;</span>)</span><br><span class="line">    a1 = time.time()</span><br><span class="line">    finalTime = arrow.get(a1 - a).<span class="built_in">format</span>(<span class="string">&#x27;mm分:ss秒:SSS毫秒&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行速度&quot;</span>, finalTime)</span><br></pre></td></tr></table></figure><h2 id="BUG-15">BUG</h2><p>​报出编码错误，已解决，问题点在pycharm编译器的问题，我刚开始是用windows中的python跑的，不管怎样都会报这个错误，然后就想到是不是之前编译器设置的时候utf-8的问题，导致没法处理gbk的一些数据，就换了平台中的python编译器，最后运行成功了。</p><p><img src="https://u7imgblog.oss-cn-hangzhou.aliyuncs.com/blognoteImg/image-20250820102855241.png" alt="image-20250820102855241"></p><h2 id="日总结-15">日总结</h2><blockquote><p>​今日的任务就是梳理清晰部分以及接口部分的代码，因为要求注释需要25%，之前其实已经达到了，因为代码有些部分比较冗余，修改封装一下，接口nohup 挂载一下，清洗需要两次，看后面性能，可以放到一个里面，处理评论表实在是太慢了，单单评论表需要20分钟，其他加起来不超过一分钟。后期写文档的时候看看能不能优化。</p></blockquote>]]></content>
    
    
    <summary type="html">旅牛网项目</summary>
    
    
    
    <category term="项目" scheme="https://u7u7.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="Vue" scheme="https://u7u7.top/tags/Vue/"/>
    
    <category term="Scala" scheme="https://u7u7.top/tags/Scala/"/>
    
    <category term="Spark" scheme="https://u7u7.top/tags/Spark/"/>
    
    <category term="SQL" scheme="https://u7u7.top/tags/SQL/"/>
    
    <category term="大数据" scheme="https://u7u7.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="月笔记" scheme="https://u7u7.top/tags/%E6%9C%88%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="https://u7u7.top/tags/Python/"/>
    
    <category term="AI" scheme="https://u7u7.top/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>5月总结</title>
    <link href="https://u7u7.top/posts/23conclusion05.html"/>
    <id>https://u7u7.top/posts/23conclusion05.html</id>
    <published>2024-05-29T06:00:25.000Z</published>
    <updated>2024-05-30T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="23年总结5月总结">23年总结5月总结</h1><h2 id="一、知识点汇总">一、知识点汇总</h2><h3 id="5-4-5-13">5.4-5.13</h3><ul><li><p><strong>这周的内容</strong> ：云服务器维修，使用scala spark将提供的数据清洗入dm8数据库</p><p>业务分析 地址判断省份 添加省份地址 表之间关联</p></li><li><p><strong>难点</strong>： txt导入dm8   城市表二次更新(添加省份)</p></li></ul><p>​<strong>个人理解</strong>:</p><ul><li>txt导入dm8，算上周末也是花费了我两天的时间，起初是打算使用spark的文件读取，textFile,一行一行读的，问题出现在转dataFrame不太好做到，只能单独的取出key和value，花费了我一天的时间，思路理清楚了打算用map,按照[和]，切割成一个二维集合，然后 内层集合中0是key，1是value，思路清晰以后，发现rdd代码map操作的时候，如果要map进去，外层的rdd会变成一个集合，自动将换行成集合的一个索引值，RDD[String]处理的话，正则就用不了了，因为是一行的，那只能用split按照左右括号切割两次，但是这样拿出来的key和value不是同时的，那也就要将key和value存集合，然后再试着直接value加入数据库，始终无法转成df，spark直接将字符串传数据库也不太好。突然想到能不能用java的io流，后面也是实现了，如果考虑效率的话需要正则和反射加上多线程和并发处理，但其实数据不是很多，我本来打算测试的时候看速度，如果很慢导都导不进去的话就用多线程和并发，最后其实1分钟不到就能就加入数据库，也就没有使用thread。</li><li>Java使用io流，将txt导入dm8，首先最重要的肯定是用java能连接上dm8，熟悉的DriverManager+Connection+Statement能轻而易举的做到，然后是对txt文件的处理了，正则匹配首先io流是一行一行读取的，所以只要写个正则将[]中的值作为key，后面所有的都为该key对应的value，知道 下一个[]的出现，利用反射，通过key 调用实体类对应的set方法，将key和value作为属性和值，一个文件就是一个对象，将对象存入数组，最后循环数组取值，使用sql语句insert语句+字符串填充导入就行了。</li><li>城市表二次更新这里其实主要的难点就是根据城市名找到省份，本来有百度地图的api可以用，但是考虑到服务器是没有网络的，所以就得保存到本地了，将中国省市县的数据收集好，数据是我直接看到一个js数据改成了json，然后就是对json文件的读取，其实搞清楚json的结构，花点时间梳理一下，还是能写出来的，因为数据的问题，所以需要空间复杂度为O3，三次循环嵌套，加一些循环中及时break，减少运行时间。实际测试大概0.2秒能反映出来。</li></ul><h3 id="5-15-5-19">5.15-5.19</h3><ul><li><p><strong>这周的学习内容</strong> ：城市表修改(省份表独立)  python轻web框架flask   推荐算法  TF相似度 TF-IDF模型</p><p>相似度算法 电影标签关键字案例</p></li><li><p><strong>难点</strong>：电影标签关键字案例</p></li></ul><p>​<strong>个人理解</strong>:</p><ul><li>相似度推荐算法案例中的预测部分，是通过每个用户对每个电影的评分，然后推测出用户对没评分的电影会评多少分，也就是预测，这种预测主要是用了皮尔逊相关系数。这块基本回一回代码就能举一反三。</li><li>电影关键字案例，这个自己敲的时候感到了吃力，主要麻烦的点在类型要转来转去，转的过程中还需要对数据处理，又因为python不是强类型的，会搞不清现在的数据是啥类的。案例思路:根据标签表取电影id和对应的标签关联电影表，得出某电影的标签以及类型，然后把标签统计成词袋，训练TF-IDF模型，也就是计算TF-IDF相似值，得出每个标签所能对应的最相关的前类型。再建立物品的倒排索引，根据tf值和用户表，整个案例就是三表相关数据连接，然后就能通过用户观看过的电影推荐出其他相关电影，看代码和实现过程有点难懂，打算在中软杯根据用户收藏功能也实现一个景区相关推荐。</li></ul><h3 id="5-22-5-31">5.22-5.31</h3><ul><li><p><strong>这周的学习内容</strong> ：python操作数据库 景区评论高频词统计 评论情绪分析 训练snownlp模型  pyspark运用 flask使用</p></li><li><p><strong>难点</strong>：高频词统计，nlp自然语言处理</p></li></ul><p>​<strong>个人理解</strong>:</p><ul><li>高频词统计这里，将每个评论分割成单独的词语或单词，并将它们存储在一个列表中。使用了Python 中的自然语言处理库 pkuseg进行分词处理，分词的时候需要加入除去停用词这个环节，一个txt文件，将一些啊哦这类的词存入，把那些在文本中出现频率很高但没有实际意义的词语过滤掉，按照每个词语的出现频率进行排序，从高到低输出出现频率最高的前 N 个词语。 Pandas 库中的 Dataframe 来实现。总结来说，对评论进行高频词筛选主要包括分词、统计词频、去除停用词和按词频排序等步骤。难点出现在分词的时候，因为没有办法训练数据集，也不知道怎么训练，可能要用第三方的分词模型，所以分出来的词也有很多名词，比如天气，黄鹤楼，没有对应的形容词，现在的水平只能做到这样的处理，研究过别人的分词，像携程旅游评论区也有用分词，看过了基本也不怎么分清，上面写的评论类是景区文化好，下面有很多评论跟文化都不沾边，等基本功能都实现了再回来找找有什么比较好的第三方库使用。</li><li>自然语言这块的话在我项目里面其实不算是难点，更像是一个创新点，代码没多少，但是自然语言处理难就难在想要提高识别率太难了，市面上出现的自然语言处理的最高准确度也就一般，发展前景还是可以的，但是不是我这个学历能参与的，我这里是对一句话的情绪分析，找到对景区好评和差评的数据集，进行了训练，训练以后对景区的评论的情绪分析，是有很大的提高，但是还是有很多不是很准确的地方，预估识别率可能70%，携程网的用户点评估计也是用的自然语言处理，但是不知道用的什么库，识别率也不是很高，评论都说很差了，上面还是5星。这一块达到70左右的识别率感觉已经可以了，只要会被看到的评论区不要出现太大的偏差就行了。</li></ul><h2 id="二、自我总结">二、自我总结</h2><ul><li>本月是结束大数据的第一个月，也是开始大数据的第一个月，中软杯的这个项目满打满算也一个月了，从选题到现在，但是做的话，大概是十几号才开始，前半个月都是把数据洗到数据库，因为有着大数据的良好基础，所以洗数据除了txt文件以外基本没什么问题，只要转成了dataframe就能直接导入dm8，dm8和mysql中的sql语句大差不大，就是类型有点不太一样，也好解决。后面使用py的时候才是难点，因为基本都要用AI，跟大数据国赛后面挖掘部分是差不多的，这段时间学完以后，发现大数据国赛那块的挖掘其实不是很难，因为spark底层算法都封装好了，只要数据处理成能套用模型算法的格式就行了。后面py还是有很多任务没有做完的，根据用户收藏推荐景区，景区相关度，以及词频优化，还任重而道远。但是时间不是很多了，要抓紧了。现在项目最大的问题是推荐部分想创新难度有点大，以及前端网页的绘制会不会来不及，其次就是功能还没分析全面，有些页面还没有一个很好的构思，表图实现的可行性(推荐部分)，所以打算尽快将自己这边的数据以及接口处理好，去帮前端渲染，等平台发布以后，还要解决flask在服务器上运行的问题。</li></ul>]]></content>
    
    
    <summary type="html">旅牛网5月总结</summary>
    
    
    
    <category term="工作月总结" scheme="https://u7u7.top/categories/%E5%B7%A5%E4%BD%9C%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://u7u7.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
