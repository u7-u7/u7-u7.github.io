<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>U7&#39;s Blog🍋</title>
  
  
  <link href="https://u7u7.top/atom.xml" rel="self"/>
  
  <link href="https://u7u7.top/"/>
  <updated>2023-03-10T14:21:25.000Z</updated>
  <id>https://u7u7.top/</id>
  
  <author>
    <name>U7&#39;s Blog🍋</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>7月笔记</title>
    <link href="https://u7u7.top/posts/33ff80d0.html"/>
    <id>https://u7u7.top/posts/33ff80d0.html</id>
    <published>2023-03-10T14:21:25.000Z</published>
    <updated>2023-03-10T14:21:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1>7.7 linux入门 基础</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题">2.标题</h2><p>P1001_课程介绍<br>P2002_入门篇_Linux概述（一）_Linux的诞生<br>P3003_入门篇_Linux概述（二）_Unix<br>P4004_入门篇_Linux概述（三）_Linux和Unix的渊源<br>P5005_入门篇_Linux概述（四）_GNU-Linux<br>P6006_入门篇_Linux概述（五）_Linux发行版<br>P7007_入门篇_Linux概述（六）_Linux vs Windows<br>P8008_入门篇_Linux安装（一）_CentOS的版本选择和下载<br>P9009_入门篇_Linux安装（二）_VMware下载安装<br>P10010_入门篇_Linux安装（三）_创建虚拟机<br>P11011_入门篇_Linux安装（四）_安装CentOS<br>P12012_基础篇_桌面和终端基本操作<br>P13013_基础篇_Linux文件系统（一）_文件系统和挂载点<br>P14014_基础篇_Linux文件系统（二）_目录结构<br>P15015_基础篇_VIM编辑器（一）_整体介绍和模式转换<br>P16016_基础篇_VIM编辑器（二）_普通模式<br>P17017_基础篇_VIM编辑器（三）_编辑模式<br>P18018_基础篇_VIM编辑器（四）_命令模式<br>P19019_基础篇_网络配置（一）_网络连接测试<br>P20020_基础篇_网络配置（二）_网络连接模式<br>P21021_基础篇_网络配置（三）_修改静态IP<br>P22022_基础篇_网络配置（四）_配置主机名<br>P23023_基础篇_远程登录<br>P24024_基础篇_系统管理（一）_Linux服务管理<br>P25025_基础篇_系统管理（二）_系统运行级别<br>P26026_基础篇_系统管理（三）_配置服务开机启动和关闭防火墙<br>P27027_基础篇_系统管理（四）_关机重启<br>P28028_实操篇_Shell命令整体介绍及帮助命令</p><h2 id="3-所学内容概述">3.所学内容概述</h2><h3 id="Linux-文件与目录结构"><strong>Linux</strong> <strong>文件与目录结构</strong></h3><h3 id="VI-VIM-编辑器（重要）"><strong>VI/VIM</strong> <strong>编辑器（重要）</strong></h3><h3 id="网络配置"><strong>网络配置</strong></h3><h3 id="系统管理">系统管理</h3><h2 id="4、根据概述分章节描述">4、根据概述分章节描述</h2><h3 id="Linux-文件与目录结构-2"><strong>Linux</strong> <strong>文件与目录结构</strong></h3><p>比较总结的一句话，Linux系统中一切皆文件。一些代码</p><p>Linux内计算机文件目录如图所示</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707191931958.png" alt="image-20220707191931958"></p><p>注意：<code>带箭头是链接，查看属性可以找到其所指向目录</code></p><p>目录结构(树形图)</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707192104440.png" alt="image-20220707192104440"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">常见目录说明</span><br><span class="line">     ①. /bin ：存放常用命令（即二进制可执行程序）</span><br><span class="line"></span><br><span class="line">     ②. /etc ：存放系统配置文件</span><br><span class="line"></span><br><span class="line">     ③. /home ：所有普通用户的家目录</span><br><span class="line"></span><br><span class="line">     ④. /root ：管理员用户的家目录</span><br><span class="line"></span><br><span class="line">     ⑤. /usr ：存放系统应用程序及文档</span><br><span class="line"></span><br><span class="line">     ⑥. /proc ：虚拟文件系统目录，以进程为单位存储内存的映射</span><br><span class="line"></span><br><span class="line">     ⑦. /dev ：存放设备文件</span><br><span class="line"></span><br><span class="line">     ⑧. /mnt ：临时挂载点</span><br><span class="line"></span><br><span class="line">     ⑨. /lib ：存放库文件</span><br><span class="line"></span><br><span class="line">     ⑩. /boot ：系统内核及启动有关的文件</span><br><span class="line"></span><br><span class="line">     ⑪. /tmp ：存放各种临时文件，是所有用户均可访问的地点</span><br><span class="line"></span><br><span class="line">     ⑫. /<span class="keyword">var</span> ：存放系统运行中常改变的文件，如系统日志</span><br></pre></td></tr></table></figure><h3 id="VI-VIM-编辑器（重要）-2"><strong>VI/VIM</strong> <strong>编辑器（重要）</strong></h3><h4 id="简介">简介</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VI 是 Unix 操作系统和类 Unix 操作系统中最通用的文本编辑器。 </span><br><span class="line">VIM 编辑器是从 VI 发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜 色辨别语法的正确性，方便程序设计。VIM 与 VI 编辑器完全兼容</span><br></pre></td></tr></table></figure><p>VI/VIM编辑器分为三个模式，一般模式，编辑模式和命令模式可以互相转换（默认进入是一般模式）</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707193310385.png" alt="image-20220707193310385"></p><h4 id="一般模式">一般模式</h4><p>语法，使用指南</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707193349361.png" alt="image-20220707193349361"></p><h4 id="编辑模式">编辑模式</h4><p>和windows中的记事本差不多，弥补一般模式中无法编辑文件内容的缺点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一般模式中可以进行删除、复制、粘贴等的动作，但是却无法编辑文件内容的！要 等到你按下『<span class="selector-tag">i</span>, <span class="selector-tag">I</span>, o, O, <span class="selector-tag">a</span>, <span class="selector-tag">A</span>』等任何一个字母之后才会进入编辑模式</span><br></pre></td></tr></table></figure><p>[ESC]退出编辑模式到一般模式</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707193840898.png" alt="image-20220707193840898"></p><h4 id="指令模式"><strong>指令模式</strong></h4><p>在一般模式当中，输入『 : / ?』3个中的任何一个按钮，就可以将光标移动到最底下那 一行</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707194023022.png" alt="image-20220707194023022"></p><h3 id="网络配置-2"><strong>网络配置</strong></h3><h4 id="查看网络-IP-和-网关"><strong>查看网络</strong> <strong>IP</strong> <strong>和 网关</strong></h4><p>VMware自带虚拟网络编辑器，可以修改和查看IP地址和网关,<code>在虚拟机便签里</code></p><h4 id="配置网络ip地址">配置网络ip地址</h4><p>查看ip地址(Linux)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span></span><br></pre></td></tr></table></figure><h4 id="修改-IP-地址"><strong>修改</strong> <strong>IP</strong> <strong>地址</strong></h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 桌面]#vim <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707200446620.png" alt="image-20220707200446620"></p><p>先把自动改成静态的，然后添加ip和网关和DNS，终端输入<strong>执行</strong> <strong>service network restart</strong></p><p>然后ping下主机，主机ping下linux，正常即可</p><h4 id="修改主机名称">修改主机名称</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop100</span> 桌面]<span class="meta"># vi /etc/hostname</span></span><br></pre></td></tr></table></figure><p>修改完<code>reboot</code>重启</p><h4 id="下载了xshell和xfip">下载了xshell和xfip</h4><p>远程登录工具</p><h3 id="系统管理-2"><strong>系统管理</strong></h3><p>系统管理一些基本命令CSDN上面都有</p><h4 id="Linux-中的进程和服务"><strong>Linux</strong> <strong>中的进程和服务</strong></h4><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）。</p><p>启动之后一直存在、常驻内存的进程，一般被称作“服务”（service）</p><h4 id="systemctl">systemctl</h4><p>在centos7中systemctl是很重要的查看命令</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707202700316.png" alt="image-20220707202700316"></p><h4 id="常用关机重启命令如下">常用关机重启命令如下</h4><p>这个在后面还是少用，老是说在linux中大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707201601515.png" alt="image-20220707201601515"></p><h2 id="5-总结">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>开始学习linux，因为之前学python用过一段时间的ubuntu，都是基于linux系统的，一些基本命令都是互通的，查看ls之类的，上手很快，今天学习内容比较简单，入门篇和基础篇，了解到linux一切皆文件，比较有意思，重点中的难点没有，VI和VIM命令记住的话，重点就搞定了，网络配置花了会时间，最后下午把系统管理中重要的命令自己多敲了几遍，今天学习状态还可以，也没有什么地方卡住很久，没出BUG，把ubuntu换到了18.04。</p><h1>7.8 实操篇 文件和用户管理</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-2">2.标题</h2><p>P28028_实操篇_Shell命令整体介绍及帮助命令<br>P29029_实操篇_文件目录类（一）_目录操作命令（一）_查看和切换工作目录<br>P30030_实操篇_文件目录类（一）_目录操作命令（二）_列出目录内容<br>P31031_实操篇_文件目录类（一）_目录操作命令（三）_创建和删除目录<br>P32032_实操篇_文件目录类（二）_文件操作命令（一）_创建文件<br>P33033_实操篇_文件目录类（二）_文件操作命令（二）_复制文件或文件夹<br>P34034_实操篇_文件目录类（二）_文件操作命令（三）_删除和移动文件<br>P35035_实操篇_文件目录类（二）_文件操作命令（四）_查看文件<br>P36036_实操篇_文件目录类（三）_其它命令（一）_控制台显示和输出重定向<br>P37037_实操篇_文件目录类（三）_其它命令（二）_监控文件变化<br>P38038_实操篇_文件目录类（三）_其它命令（三）_软链接<br>P39039_实操篇_文件目录类（三）_其它命令（四）_查看历史命令<br>P40040_实操篇_时间日期类<br>P41041_实操篇_用户权限类（一）_用户管理（一）_添加和查看用户<br>P42042_实操篇_用户权限类（一）_用户管理（二）_获取root权限和删除用户<br>P43043_实操篇_用户权限类（二）_用户组管理<br>P44044_实操篇_用户权限类（三）_文件属性和权限<br>P45045_实操篇_用户权限类（四）_更改文件权限<br>P46046_实操篇_用户权限类（五）_综合应用案例<br>P47047_实操篇_搜索查找类（一）_查找定位文件<br>P48048_实操篇_搜索查找类（二）_内容过滤查找和管道操作<br>P49049_实操篇_压缩解压类<br>P50050_实操篇_磁盘管理类（一）_查看目录占用空间大小<br>P51051_实操篇_磁盘管理类（二）_查看磁盘使用情况<br>P52052_实操篇_磁盘管理类（三）_查看设备挂载情况<br>P53053_实操篇_磁盘管理类（四）_挂载和卸载<br>P54054_实操篇_磁盘管理类（五）_磁盘分区</p><h2 id="3-所学内容概述-2">3.所学内容概述</h2><h3 id="帮助命令">帮助命令</h3><h3 id="文件目录类">文件目录类</h3><h3 id="时间日期类">时间日期类</h3><h3 id="用户管理命令">用户管理命令</h3><h3 id="用户组管理命令">用户组管理命令</h3><h3 id="文件权限类">文件权限类</h3><h3 id="搜索查找类">搜索查找类</h3><h3 id="压缩和解压类">压缩和解压类</h3><h3 id="磁盘查看和分区类">磁盘查看和分区类</h3><h3 id="进程管理类">进程管理类</h3><h2 id="4、根据概述分章节描述-2">4、根据概述分章节描述</h2><h3 id="帮助命令-2">帮助命令</h3><p><code>man  help</code></p><p>后面跟命令或配置文件 help只能显示内置的而且是全英文</p><p>下载了man中文包，推荐自己使用man，相当于自带的一个tools查看</p><h3 id="文件目录类-2">文件目录类</h3><h4 id="pwd">pwd</h4><p>显示当前目录的绝对路径<code>pwd</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708092158199.png" alt="image-20220708092158199"></p><h4 id="ls">ls</h4><p><strong>查看目录文件</strong></p><p><strong>显示说明</strong></p><p><code>每行列出的信息依次是:文件类型与权限 链接数 文件属主 文件属组 文件大小用byte </code></p><p><code>来表示 建立或最近修改的时间 名字</code></p><p>-a  <strong>全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</strong></p><p>-l  <strong>长数据串列出，包含文件的属性与权限等等数据；(常用)等价于“ll”</strong></p><p>语法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">al</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708093550842.png" alt="image-20220708093550842"></p><h4 id="cd">cd</h4><p>切换目录</p><h5 id="基本用法">基本用法</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708093638995.png" alt="image-20220708093638995"></p><h4 id="创建-删除-查找文件以及目录">创建 删除 查找文件以及目录</h4><h5 id="创建">创建</h5><p><code>mkdir 文件夹名</code></p><p>特殊用法 -p多级创建目录</p><p><code>mkdir -p hello/world/java</code></p><h5 id="删除">删除</h5><p>只能删除空的目录</p><p><code>rmdir 文件夹名</code></p><h5 id="创建文件">创建文件</h5><p><code>touch 文件名</code>只带文件名默认是文本文件</p><p>可加路径 touch 注意:<code>命令后面 直接有/就是绝对路径 否则是相对路径</code></p><h5 id="删除文件">删除文件</h5><p><code>rm 文件名</code></p><p>会提示是否删除 输入yes或者y   或者加入 -f 强制删除就没有提示了 <code>rm -rf</code>强制删除文件内所有目录</p><p><strong>删库跑路 <code>rm -rf /*</code>不要尝试！</strong></p><h5 id="复制文件">复制文件</h5><p>cp</p><p>递归复制 <code>-r</code></p><p>取消提示 <code>/cp</code></p><h5 id="移动文件">移动文件</h5><p><code>mv</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708100810241.png" alt="image-20220708100810241"></p><h5 id="查看文件">查看文件</h5><p><code>cat more less</code></p><p>推荐使用less</p><p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加 强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后 才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;less -e&quot;</span> 当文件显示结束后，自动离开，无需输入<span class="string">&quot;q&quot;</span></span><br><span class="line"><span class="string">&quot;less -f&quot;</span> 强迫打开特殊文件，例如外围设备代号、目录和二进制文件</span><br><span class="line"><span class="string">&quot;less -m&quot;</span> 显示类似<span class="keyword">more</span>命令的百分比</span><br><span class="line"><span class="string">&quot;less -N&quot;</span> 显示每行的行号</span><br><span class="line"><span class="string">&quot;less -s&quot;</span> 将连续的空行合并成一行显示</span><br><span class="line"><span class="string">&quot;less -S&quot;</span> 行信息过长时，将超出部分舍弃</span><br></pre></td></tr></table></figure><p><strong>操作说明</strong></p><p>=可以查看信息</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708101628404.png" alt="image-20220708101628404"></p><p>g回到开头 G到最后一行</p><h4 id="输出重定向">输出重定向</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708102658336.png" alt="image-20220708102658336"></p><h5 id="echo">echo</h5><p>后面跟什么控制台输出什么</p><p>-e 转义可用</p><p><code>echo -e &quot;hello   \nworld&quot;</code></p><h5 id="tail">tail</h5><p>输出文件尾部内容</p><p>重要点是<code>tail -f </code>文件实时追踪该文档的所有更新内容</p><p>在开发环境调试程序，看实时日志很有用的。</p><h4 id="软链接">软链接</h4><p>软链接也称为符号链接，类似于 windows 里的快捷方式，有自己的数据块，主要存放 了链接其他文件的路径</p><p><strong>基本语法</strong></p><p><code>ln -s </code>[原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</p><p><strong>删除和查询</strong></p><p>删除软链接： rm -rf 软链接名，而不是 rm -rf 软链接名/</p><p>如果使用 rm -rf 软链接名/ 删除，会把软链接对应的真实目录下内容删掉</p><p>查询：通过 ll 就可以查看，列表属性第 1 位是 l，尾部会有位置指向。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708104911398.png" alt="image-20220708104911398"></p><h4 id="查看历史命令">查看历史命令</h4><p><code>history</code>在终端敲过的所有命令</p><h3 id="时间日期类-2">时间日期类</h3><p>主要就是date命令很简单</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">date</span> （功能描述：显示当前时间） </span><br><span class="line">（<span class="number">2</span>）<span class="keyword">date</span> +%Y （功能描述：显示当前年份） </span><br><span class="line">（<span class="number">3</span>）<span class="keyword">date</span> +%m （功能描述：显示当前月份） </span><br><span class="line">（<span class="number">4</span>）<span class="keyword">date</span> +%d （功能描述：显示当前是哪一天） </span><br><span class="line">（<span class="number">5</span>）<span class="keyword">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span> （功能描述：显示年月日时分秒）</span><br><span class="line">（<span class="number">1</span>）<span class="keyword">date</span> -d <span class="string">&#x27;1 days ago&#x27;</span> （功能描述：显示前一天时间） </span><br><span class="line">（<span class="number">2</span>）<span class="keyword">date</span> -d <span class="string">&#x27;-1 days ago&#x27;</span> （功能描述：显示明天时间）</span><br></pre></td></tr></table></figure><p><code>cal </code>查看本月日期  <code>cal 2003</code>查看2003年日历</p><h3 id="用户管理命令-2">用户管理命令</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名<span class="comment">(添加新用户)</span></span><br><span class="line">passwd 用户名<span class="comment">(设置该用户密码)</span></span><br><span class="line">id 用户名<span class="comment">(该用户是否存在)</span></span><br><span class="line">cat /etc/passwd<span class="comment">(查看创建了什么用户)</span></span><br><span class="line">su 用户名称 （功能描述：切换用户，只能获得用户的执行权限，不能获得环境变量） </span><br><span class="line">su - 用户名称 （功能描述：切换到用户并获得该用户的环境变量及执行权限）</span><br><span class="line">userdel 用户名<span class="comment">(删除用户)</span></span><br><span class="line">userdel -r 用户名<span class="comment">(删除用户，以及相关文件)</span></span><br><span class="line">who查看登录用户信息</span><br><span class="line">whoami （功能描述：显示自身用户名称）</span><br><span class="line">who am i （功能描述：显示登录用户的用户名以及登陆时间）</span><br><span class="line">usermod -g 用户组 用户名<span class="comment">(修改用户的初始登录组)</span></span><br></pre></td></tr></table></figure><h4 id="利用sudo命令给用户root权限">利用sudo命令给用户root权限</h4><p>需要修改配置文件</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708152311189.png" alt="image-20220708152311189"></p><h3 id="文件权限类-2">文件权限类</h3><p>认识文件权限</p><p>（1）0 首位表示类型</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p><p>- 代表文件   d 代表目录   l 链接文档(link file)；</p><p>2）第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User</p><p>3）第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group</p><p>4）第7-9位确定其他用户拥有该文件的权限 —Other</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708145803901.png" alt="image-20220708145803901"></p><h4 id="rew在文件和目录的解释">rew在文件和目录的解释</h4><p>（1）作用到文件：</p><p>[ r ]代表可读(read): 可以读取，查看</p><p>[ w ]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前 提条件是对该文件所在的目录有写权限，才能删除该文件</p><p>[ x ]代表可执行(execute):可以被系统执行</p><p>2）作用到目录：</p><p>[ r ]代表可读(read): 可以读取，ls查看目录内容</p><p>[ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录</p><p>[ x ]代表可执行(execute):可以进入该目录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod改变权限</span><br><span class="line">第一种方式变更权限 chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] 文件或目录 </span><br><span class="line">第二种方式变更权限 chmod [<span class="attribute">mode</span>=421 ] [文件或目录]</span><br><span class="line">第二种经验</span><br><span class="line"><span class="attribute">r</span>=4 <span class="attribute">w</span>=2 <span class="attribute">x</span>=1 <span class="attribute">rwx</span>=4+2+1=7 <span class="attribute">rw</span>=4+2=6</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708151136770.png" alt="image-20220708151136770"></p><p>修改所属组和用户(注意权限)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">所属用户 递归-R</span><br><span class="line"><span class="keyword">chown</span></span><br><span class="line">[root@hadoop82 hello]<span class="comment"># chown sjh2 123.txt </span></span><br><span class="line">[root@hadoop82 hello]<span class="comment"># ll</span></span><br><span class="line">总用量 <span class="number">208</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> sjh2 root     <span class="number">41</span> <span class="number">7</span>月   <span class="number">7</span> <span class="number">10</span>:<span class="number">00</span> <span class="number">123</span>.txt</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">所属组</span><br><span class="line">chgrp</span><br><span class="line">[root@hadoop82 hello]<span class="comment"># chgrp sjh2 123.txt </span></span><br><span class="line">[root@hadoop82 hello]<span class="comment"># ll</span></span><br><span class="line">总用量 208</span><br><span class="line">-rw-r--r--.<span class="number"> 1 </span>sjh2 sjh2    <span class="number"> 41 </span>7月  <span class="number"> 7 </span>10:00 123.txt</span><br></pre></td></tr></table></figure><h3 id="搜索查找类-2">搜索查找类</h3><p>find查找文件或者目录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> -name <span class="built_in">info</span></span><br><span class="line"><span class="built_in">find</span> /root -name <span class="string">&quot;*.cfg&quot;</span> (在root目录下结尾是cfg的文件)</span><br><span class="line"><span class="built_in">find</span> /home -size +204800/home目录下查找大于200m的文件)</span><br></pre></td></tr></table></figure><p><strong>locate</strong> <strong>快速定位文件路径</strong></p><p>locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给 定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确 度，管理员必须定期更新 locate 时刻。<code>updatedb</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">locate</span> <span class="number">123</span>.txt</span><br></pre></td></tr></table></figure><p><strong>grep</strong>过滤查找及 **“|” **管道符</p><p><code>-n</code>显示匹配行以及行号</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -<span class="built_in">n</span> <span class="built_in">info</span> MyU7.txt</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708155140955.png" alt="image-20220708155140955"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> | grep .txt(当前目录中以有.txt的文件)</span><br><span class="line"><span class="built_in">wc</span>查找显示行数 单词 字节 </span><br></pre></td></tr></table></figure><h3 id="压缩和解压类-2">压缩和解压类</h3><h4 id="最常用的打包tar">最常用的打包tar</h4><p>tar [选项] XXX.tar.gz 将要打包进去的内容 （打包目录，压缩后的文件式.tar.gz）</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708161541045.png" alt="image-20220708161541045"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf hello<span class="selector-class">.tar</span><span class="selector-class">.gz</span> hello/ <span class="number">1</span><span class="selector-class">.jpg</span></span><br><span class="line">将hello目录和<span class="number">1</span>.jpg图片打包压缩</span><br><span class="line">tar -zxvf hello<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /tmp</span><br><span class="line">将hello<span class="selector-class">.tar</span>.gz压缩包，解压到tmp目录下</span><br></pre></td></tr></table></figure><h3 id="磁盘查看和分区类-2">磁盘查看和分区类</h3><p><code>du</code>命令</p><p>du 目录/文件 （功能描述：显示目录下每个子目录的磁盘使用情况）</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708163438401.png" alt="image-20220708163438401"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop82</span> ~]<span class="meta"># du --max-depth=1 -ah</span></span><br><span class="line">查看目录下一级的文件的大小和总计磁盘空间大小</span><br></pre></td></tr></table></figure><p>df<strong>查看磁盘空间使用情况</strong></p><p><code>df</code>  <code>-h</code>转换为数据内存格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h /目录</span><br><span class="line"><span class="built_in">df</span> -h /(根目录)</span><br><span class="line"><span class="built_in">df</span> -h(当前目录)</span><br></pre></td></tr></table></figure><p><code>free -h</code>当前内存使用情况</p><p><strong>lsblk</strong> <strong>查看设备挂载情况</strong>(了解)</p><p><code>-f</code>查看详细的设备挂载情况，显示文件系统信息</p><h4 id="磁盘分区">磁盘分区</h4><p><strong>fdisk分区</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fdisk</span> -l （功能描述：查看磁盘分区详情） </span><br><span class="line">fdisk 硬盘设备名 （功能描述：对新增硬盘进行分区操作）</span><br></pre></td></tr></table></figure><p><strong>要在root用户下进行</strong></p><h3 id="进程管理类-2">进程管理类</h3><h4 id="ps-查看当前系统进程状态"><strong>ps</strong> <strong>查看当前系统进程状态</strong></h4><p><code>ps aux</code>功能描述：查看系统中所有进程</p><p><code>ps -ef</code>功能描述：可以查看子父进程之间的关系</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708201715785.png" alt="image-20220708201715785"></p><p>使用时机</p><p>如果想查看进程的 CPU 占用率和内存占用率，可以使用 aux;</p><p>如果想查看进程的父进程 ID 可以使用 -ef;</p><h4 id="终止进程">终止进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [选项] 进程号 （功能描述：通过进程号杀死进程） </span><br><span class="line">killall 进程名称 （功能描述：通过进程名称杀死进程，也支持通配符，这 在系统因负载过大而变得很慢时很有用） </span><br></pre></td></tr></table></figure><p><code>kill -9</code>强制停止 谨慎使用</p><p>（1）杀死浏览器进程</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> 桌面]<span class="meta"># kill -9 5102 </span></span><br></pre></td></tr></table></figure><p>（2）通过进程名称杀死进程</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> 桌面]<span class="meta"># killall firefox</span></span><br></pre></td></tr></table></figure><h4 id="pstree查看进程树">pstree查看进程树</h4><p>显示进程pid</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> datas]<span class="meta"># pstree -p</span></span><br></pre></td></tr></table></figure><p>显示进程所属用户</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> datas]<span class="meta"># pstree -u</span></span><br></pre></td></tr></table></figure><h2 id="5-BUG点">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>在分盘操作的时候，报错刚开始不知道什么原因，去CSDN找也没有什么先例，看尚硅谷的笔记，发现分盘只能在root用户下，自己不是root用户，因此会报错，换回root用户就正常了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708193913260.png" alt="image-20220708193913260"></p><h2 id="6-扩展学习部分">6.扩展学习部分</h2><h3 id="硬链接">硬链接</h3><p><a href="http://t.csdn.cn/g8hbC%E6%9D%A5%E8%87%AA">http://t.csdn.cn/g8hbC来自</a> CSDN 解释清晰</p><p>硬链接的本质就是一条文件名和i结点的关联记录</p><p>结点就是inode</p><p>和软链接的区别：<code>硬链接的文件指向的结点和源文件的结点是一样的，而软链接则是重新建立了一个独立的文件</code></p><p><code>当我们删除了源文件之后，发现硬链接还能正常显示原本的内容，而软链接则提示文件不存在</code></p><p>硬链接关联着我们的源文件，所以源文件的大小是多大，它们就是多大</p><p>但是软链接指向的是文件名，它的大小就是文件名的字节数</p><h2 id="7-总结">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习的Linux命令量比较多，一下子记不住这么多，比较常用的倒是都掌握了，在实操篇的内容，敲的也比较多。难度其实一般，需要掌握的都掌握了，难点都是老师说不需要死钻明白的，最后的磁盘分区，其实实现原理并不太清除，但是实现方法是知道了，就过了。没什么很大的bug，是自己疏忽大意了，忘记自己在什么用户下，权限不够导致无法分区。文件目录类这部分是重点，也是花了一上午，这部分花费的时间和精力比较多，次数敲多了，掌握起来蛮熟练的，忘记的命令可以再看下笔记。</p><h1>7.9 扩展篇 Shell编程</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-3">2.标题</h2><h2 id="3-所学内容概述-3">3.所学内容概述</h2><h2 id="4-根据概述分章节描述">4.根据概述分章节描述</h2><h3 id="软件包管理">软件包管理</h3><p><strong>YUM！</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YUM（全称为 Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 CentOS 中的 <span class="keyword">Shell</span><span class="language-bash"> 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包 并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次 次下载、安装</span></span><br></pre></td></tr></table></figure><p>相当于是Linux中命令行版本的应用商店。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220710231632302.png" alt="image-20220710231632302"></p><p>比如安装火狐浏览器</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> firefox</span><br></pre></td></tr></table></figure><p>卸载火狐浏览器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="built_in">remove</span> firefox</span><br></pre></td></tr></table></figure><h3 id="Shell">Shell</h3><h4 id="概述">概述</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220710232213761.png" alt="image-20220710232213761"></p><p><code>shell默认的解释器是bash</code></p><p>查看命令是<code>  echo $SHELL</code></p><h4 id="Shell脚本">Shell脚本</h4><p>创建一个hello.sh文件，加入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;helloworld&quot;</span></span><br></pre></td></tr></table></figure><p><strong>执行</strong></p><p>第一种：采用 bash 或 sh+脚本的相对路径或绝对路径（不用赋予脚本+x 权限）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash </span>+路径 或者su +路径</span><br></pre></td></tr></table></figure><p>第二种：采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop82</span> ~]<span class="meta"># chmod +x scripts/hello.sh </span></span><br></pre></td></tr></table></figure><p>再执行脚本</p><p>直接输入路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.sh   <span class="regexp">/root/</span>script/hello.sh</span><br></pre></td></tr></table></figure><h4 id="变量">变量</h4><p>基本语法</p><p>（1）定义变量：变量名=变量值，注意，=号前后不能有空格</p><p>（2）撤销变量：unset 变量名</p><p>变量定义规则</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220711004712936.png" alt="image-20220711004712936"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop82</span> scripts]<span class="meta"># my_var=<span class="string">&quot;hello,  world&quot;</span></span></span><br><span class="line">[root<span class="symbol">@hadoop82</span> scripts]<span class="meta"># echo $my_var</span></span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><p>升级成全局变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> my_var</span><br></pre></td></tr></table></figure><p>只读(静态变量)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">readonly</span> my_var</span><br></pre></td></tr></table></figure><p>特殊变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$n 功能描述：n 为数字，$<span class="number">0</span> 代表该脚本名称，$<span class="number">1</span>-$<span class="number">9</span> 代表第一到第九个参数，十以 上的参数，十以上的参数需要用大括号包含，<span class="comment">#如$&#123;10&#125;</span></span><br><span class="line">$<span class="comment"># （功能描述：获取所有输入参数个数，常用于循环,判断参数的个数是否正确以及 加强脚本的健壮性</span></span><br><span class="line">$* 功能描述：这个变量代表命令行中所有的参数，<span class="comment">#$*把所有的参数看成一个整体</span></span><br><span class="line">$@ 功能描述：这个变量代表命令行中所有的参数，<span class="comment">#$*把所有的参数看成一个整体</span></span><br><span class="line">$? 功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 <span class="number">0</span>，证明上一 个命令正确执行；如果这个变量的值为非 <span class="number">0</span>（具体是哪个数，由命令自己来决定），则证明 上一个命令执行不正确了。</span><br></pre></td></tr></table></figure><h4 id="条件判断">条件判断</h4><p>语法</p><p>（1）test condition</p><p>（2）[ condition ]<strong>（注意 condition 前后要有空格）</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220711110339052.png" alt="image-20220711110339052"></p><p><code>多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一 条命令执行失败后，才执行下一条命令）</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 ~]$ [ atguigu ] &amp;&amp; <span class="built_in">echo</span> OK || <span class="built_in">echo</span> notOK </span><br><span class="line">OK</span><br><span class="line">[atguigu@hadoop101 shells]$ [ ] &amp;&amp; <span class="built_in">echo</span> OK || <span class="built_in">echo</span> notOK </span><br><span class="line">notOK</span><br></pre></td></tr></table></figure><h4 id="流程控制">流程控制</h4><h5 id="if语句">if<strong>语句</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ] </span><br><span class="line">then</span><br><span class="line">程序 </span><br><span class="line">elif [ 条件判断式 ] </span><br><span class="line">then</span><br><span class="line">程序 </span><br><span class="line">else</span><br><span class="line">程序 </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="case"><strong>case</strong></h5><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in </span><br><span class="line"><span class="string">&quot;值 1&quot;</span>）</span><br><span class="line">如果变量的值等于值 <span class="number">1</span>，则执行程序 <span class="number">1</span> </span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="string">&quot;值 2&quot;</span>）</span><br><span class="line">如果变量的值等于值 <span class="number">2</span>，则执行程序 <span class="number">2</span> </span><br><span class="line"><span class="comment">;; </span></span><br><span class="line">…省略其他分支… </span><br><span class="line">*） </span><br><span class="line">如果变量的值都不是以上的值，则执行此程序 </span><br><span class="line"><span class="comment">;;</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h5 id="for循环">for<strong>循环</strong></h5><p>从1加到100</p><p>第一种</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum=0 </span><br><span class="line">for((i=0;i&lt;=100;i++)) </span><br><span class="line">do </span><br><span class="line">sum=$[$sum+$i] </span><br><span class="line">done </span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">for i in &#123;1..100&#125;</span><br><span class="line">do </span><br><span class="line">sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><h5 id="while循环">while循环</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum=0 </span><br><span class="line">i=1 </span><br><span class="line">while [ $i -le 100 ] </span><br><span class="line">do </span><br><span class="line">    sum=$[$sum+$i] </span><br><span class="line">    i=$[$i+1] </span><br><span class="line">done </span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><h4 id="read读取控制台输入">read读取控制台输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-p：指定读取值时的提示符； </span><br><span class="line">-t：指定读取值时等待的时间（秒）如果-t 不加表示一直等待</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -t 7 -p &quot;Enter your name in 7 seconds :&quot; NN</span><br></pre></td></tr></table></figure><h4 id="函数">函数</h4><p>系统函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basename (显示文件的名称)原理就是取/的最后一位</span><br><span class="line">dirname (显示文件的路径) 原理是取最后一位/的前面</span><br></pre></td></tr></table></figure><p>自定义函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line">function sum() </span><br><span class="line">&#123;</span><br><span class="line">s=0</span><br><span class="line">s=$[$1+$2]</span><br><span class="line">echo &quot;$s&quot; </span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;请输入第一个数字: &quot; n1; </span><br><span class="line">read -p &quot;请输入第二个数字: &quot; n2; </span><br><span class="line">sum $n1 $n2;</span><br></pre></td></tr></table></figure><p><code>函数返回值，只能通过$?系统变量获得，可以显示加：return 返回，如果不加，将 以最后一条命令运行结果，作为返回值。return 后跟数值 n(0-255)</code></p><h2 id="5-总结-2">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习内容比较多，昨天的扩展篇收尾，软件包管理yum和一些进程管理类的再次了解。然后今天就是shell部分的学习完毕，shell在我理解有点像python，脚本语言。但是和python比，语言的简洁性,可读性都很差。毕竟是脚本语言，一些比较复杂的代码和程序，写出来就很麻烦用shell。因此现在shell是有一个let 可以用c和java的语言，还是方便的，shell今天学习就和之前的编程语言一样，变量，语法，流程和函数这些基本的。比较简单也就过掉了，在寝室学习雀氏是没有工作室学习的效率高，氛围也有差异，但是在寝室的学习今天算是满意了。</p><h1>7.11 Scala基础入门</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-4">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">P1001_尚硅谷<span class="variable">_Scala_</span>课程简介</span><br><span class="line">P2002_尚硅谷<span class="variable">_Scala_Scala</span>概述（一）<span class="variable">_Scala</span>发展历史</span><br><span class="line">P3003_尚硅谷<span class="variable">_Scala_Scala</span>概述（二）<span class="variable">_Scala</span>和Java的关系</span><br><span class="line">P4004_尚硅谷<span class="variable">_Scala_Scala</span>概述（三）<span class="variable">_Scala</span>特点总结</span><br><span class="line">P5005_尚硅谷<span class="variable">_Scala_Scala</span>环境搭建（一）<span class="variable">_Scala</span>安装和交互式命令行测试</span><br><span class="line">P6006_尚硅谷<span class="variable">_Scala_Scala</span>环境搭建（二）<span class="variable">_Scala</span>源文件编写和运行</span><br><span class="line">P7007_尚硅谷<span class="variable">_Scala_Scala</span>环境搭建（三）<span class="variable">_Scala</span>编译结果的反编译深入分析</span><br><span class="line">P8008_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（一）_项目创建和环境配置</span><br><span class="line">P9009_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（二）_编写代码</span><br><span class="line">P10010_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（三）_代码中语法的简单说明</span><br><span class="line">P11011_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（四）_伴生对象的扩展说明</span><br><span class="line">P12012_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（五）_关联源码和查看官方指南</span><br><span class="line">P13013_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（一）_注释和基本编程习惯</span><br><span class="line">P14014_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（二）_变量和常量</span><br><span class="line">P15015_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（三）_标识符</span><br><span class="line">P16016_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（四）_字符串</span><br><span class="line">P17017_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（五）_控制台标准输入</span><br><span class="line">P18018_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（六）_读写文件</span><br><span class="line">P19019_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（七）_数据类型系统</span><br><span class="line">P20020_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（八）_整型和浮点类型</span><br><span class="line">P21021_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（九）_字符和布尔类型</span><br><span class="line">P22022_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十）_空类型</span><br><span class="line">P23023_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十一）<span class="variable">_Unit</span>类型的源码实现</span><br><span class="line">P24024_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（一）<span class="variable">_Java</span>类型转换复习</span><br><span class="line">P25025_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（三）<span class="variable">_Scala</span>自动类型转换</span><br><span class="line">P26026_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（四）<span class="variable">_Scala</span>强制类型转换</span><br><span class="line">P27027_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（五）_强转溢出面试题</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-4">3.所学内容概述</h2><p>案发舒服案发分开</p><h2 id="4-根据概述分章节描述-2">4.根据概述分章节描述</h2><p>fff</p><h3 id="Scala概述">Scala概述</h3><p>因为Spark 所以要学Scala<code>Spark的兴起，带动Scala语言的发展！</code></p><p>Scala基于Java，Scala和Java有密不可分的关系 关系图如下</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220713181600104.png" alt="image-20220713181600104"></p><h4 id="Scala特点">Scala特点</h4><p>Scala是一门以Java虚拟机为运行环境面向对象和函数式编程结合的静态类型的<code>编程语言</code>，scala跟java差不多，源代码编译成字节码文件。</p><p>我使用Scala下来，感觉Scala像是python和java的结合，很简洁，很多地方看到了python的影子。</p><h4 id="Scala环境搭建">Scala环境搭建</h4><p>搭建过这么多的环境，Scala也不复杂，两三分钟就完成了。</p><p>IDEA中导入Scala稍微耗费了点时间，要引入框架。</p><h3 id="Scala入门">Scala入门</h3><p>Scala注解和java完全一样 /* /** 和//</p><h4 id="变量和常量">变量和常量</h4><p>大体和其他编程语言一样，但是要提前声明是变量还是常量</p><p>基本语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var 变量名 [: 变量类型] = 初始值 </span></span><br><span class="line"><span class="keyword">var</span> i:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">//val 常量名 [: 常量类型] = 初始值 </span></span><br><span class="line"><span class="keyword">val</span> j:<span class="type">Int</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>注意点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）声明变量时，类型可以省略，编译器自动推导，即类型推导</span><br><span class="line">（<span class="number">2</span>）类型确定后，就不能修改，说明 Scala 是强数据类型语言。</span><br><span class="line">（<span class="number">3</span>）变量声明时，必须要有初始值</span><br><span class="line">（<span class="number">4</span>）在声明/定义一个变量时，可以使用 <span class="keyword">var</span> 或者 <span class="keyword">val</span> 来修饰，<span class="keyword">var</span> 修饰的变量可改变，</span><br><span class="line"><span class="keyword">val</span> 修饰的变量不可改。</span><br></pre></td></tr></table></figure><h4 id="标识符的命名规范">标识符的命名规范</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Scala </span>对各种变量、方法、函数等命名时使用的字符序列称为标识符。即：凡是自己可以起名字的地方都叫标识符。</span><br></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">和java基本差不多，</span><br><span class="line">（<span class="number">1</span>）以字母或者下划线开头，后接字母、数字、下划线</span><br><span class="line">（<span class="number">2</span>）以操作符开头，且只包含操作符（+ - * / # !等）</span><br><span class="line">（<span class="number">3</span>）用反引号`....`包括的任意字符串，即使是 Scala 关键字（<span class="number">39</span> 个）也可以</span><br></pre></td></tr></table></figure><h4 id="字符串输出">字符串输出</h4><p>关键字<code>println</code></p><h3 id="数据类型-重点"><strong>数据类型(重点)</strong></h3><p>Scala一切是数据都是对象，是Any的子类 如下图</p><p>Scala两大数据类型，引用类AnyRef和数值类型的AnyVal</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220713191734135.png" alt="image-20220713191734135"></p><p>数值类型和其他语言大差不差，语法不一样而已</p><p>如果变量或者常量后面没有声明类型，直接等于号，不报错，是Scala自动给你匹配了对应的类型，就和python一样，还是人性化的，但是最好加上吧，可读性强一些。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"> <span class="keyword">var</span> n1:<span class="type">Byte</span> = <span class="number">127</span></span><br><span class="line"> <span class="keyword">var</span> n2:<span class="type">Byte</span> = <span class="number">-128</span></span><br><span class="line"> <span class="comment">// 错误</span></span><br><span class="line"> <span class="comment">// var n3:Byte = 128</span></span><br><span class="line"> <span class="comment">// var n4:Byte = -129</span></span><br><span class="line"> <span class="comment">// 不带数据类型整型数据默认是int</span></span><br><span class="line"> <span class="keyword">var</span> n5 = <span class="number">10</span></span><br><span class="line"> println(n5)</span><br><span class="line"> <span class="keyword">var</span> n6 = <span class="number">9223372036854775807</span>L</span><br><span class="line"> println(n6)</span><br><span class="line"><span class="comment">//不带数据类型 浮点型默认是Double</span></span><br><span class="line"><span class="comment">// 建议，在开发中需要高精度小数时，请选择 Double</span></span><br><span class="line"> <span class="keyword">var</span> n7 = <span class="number">2.2345678912</span>f</span><br><span class="line"> <span class="keyword">var</span> n8 = <span class="number">2.2345678912</span></span><br><span class="line"> println(<span class="string">&quot;n7=&quot;</span> + n7)</span><br><span class="line"> println(<span class="string">&quot;n8=&quot;</span> + n8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）字符常量是用单引号 &#x27; &#x27; 括起来的单个字符。</span></span><br><span class="line"> <span class="keyword">var</span> c1: <span class="type">Char</span> = &#x27;a&#x27;</span><br><span class="line"> println(<span class="string">&quot;c1=&quot;</span> + c1)</span><br><span class="line"><span class="comment">//注意：这里涉及自动类型提升，其实编译器可以自定判断是否超出范围，</span></span><br><span class="line"> <span class="comment">//不过 idea 提示报错</span></span><br><span class="line"><span class="keyword">var</span> c2:<span class="type">Char</span> = &#x27;a&#x27; + <span class="number">1</span></span><br><span class="line">println(c2)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//（2）\t ：一个制表位，实现对齐的功能</span></span><br><span class="line"> println(<span class="string">&quot;姓名\t 年龄&quot;</span>)</span><br><span class="line"> <span class="comment">//（3）\n ：换行符</span></span><br><span class="line"> println(<span class="string">&quot;西门庆\n 潘金莲&quot;</span>)</span><br><span class="line"> <span class="comment">//（4）\\ ：表示\</span></span><br><span class="line"> println(<span class="string">&quot;c:\\岛国\\avi&quot;</span>)</span><br><span class="line"> <span class="comment">//（5）\&quot; ：表示&quot;</span></span><br><span class="line"> println(<span class="string">&quot;同学们都说：\&quot;大海哥最帅\&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔类 只能false和true占用一个字节</span></span><br><span class="line"><span class="keyword">var</span> isResult : <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line"> <span class="keyword">var</span> isResult2 : <span class="type">Boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="5-总结-3">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天是进入Scala的学习，Scala算是一个半新的语言，基于java的。也算是java++，一些语法和规则不太一样，基本运行原理还是差不多的，学习步骤主要是看文档，因为是语言，自己学了很多种了，前面基本的部分，大多语言都大差不差，看看文档还是比较快的，代码敲了四五个吧，关于变量的部分不是很多，今天学习的任务也不是很重，顺便把前几天的centOS中的命令，在ubuntu中，又使用了一些，ubuntu安装是用apt的,不是用Centos的yum，ubuntu下了一个java。</p><h1>7.13 hadoop基础入门</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-5">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span>_尚硅谷_课程简介_大数据课程</span><br><span class="line"><span class="number">02</span>_尚硅谷_课程简介<span class="variable">_Hadoop</span>课程</span><br><span class="line"><span class="number">03</span>_尚硅谷_入门_大数据概念</span><br><span class="line"><span class="number">04</span>_尚硅谷_入门_大数据特点（<span class="number">4</span>V）</span><br><span class="line"><span class="number">05</span>_尚硅谷_入门_大数据应用场景</span><br><span class="line"><span class="number">06</span>_尚硅谷_入门_大数据发展前景</span><br><span class="line"><span class="number">07</span>_尚硅谷_入门_大数据部门业务流程分析</span><br><span class="line"><span class="number">08</span>_尚硅谷_入门_大数据部门组织结构（重点）</span><br><span class="line"><span class="number">09</span>_尚硅谷<span class="variable">_Hadoop_</span>是什么</span><br><span class="line"><span class="number">10</span>_尚硅谷<span class="variable">_Hadoop_</span>发展历史</span><br><span class="line"><span class="number">11</span>_尚硅谷<span class="variable">_Hadoop_</span>三大发行版本</span><br><span class="line"><span class="number">12</span>_尚硅谷<span class="variable">_Hadoop_</span>优势（<span class="number">4</span>高）</span><br><span class="line"><span class="number">13</span>_尚硅谷<span class="variable">_Hadoop_1</span>.x和<span class="number">2</span>.x区别</span><br><span class="line"><span class="number">14</span>_尚硅谷<span class="variable">_Hadoop_</span>组成</span><br><span class="line"><span class="number">15</span>_尚硅谷<span class="variable">_Hadoop_</span>大数据技术生态体系</span><br><span class="line"><span class="number">16</span>_尚硅谷<span class="variable">_Hadoop_</span>推荐系统框架图</span><br><span class="line"><span class="number">17</span>_尚硅谷_环境搭建_虚拟机准备</span><br><span class="line"><span class="number">18</span>_尚硅谷_环境搭建<span class="variable">_JDK</span>安装</span><br><span class="line"><span class="number">19</span>_尚硅谷_环境搭建<span class="variable">_Hadoop</span>安装</span><br><span class="line"><span class="number">20</span>_尚硅谷_环境搭建<span class="variable">_Hadoop</span>目录结构</span><br><span class="line"><span class="number">21</span>_尚硅谷_环境搭建<span class="variable">_Hadoop</span>官网手册</span><br><span class="line"><span class="number">22</span>_尚硅谷_本地模式<span class="variable">_Grep</span>官方案例</span><br><span class="line"><span class="number">23</span>_尚硅谷_本地模式<span class="variable">_WordCount</span>官方案例</span><br><span class="line"><span class="number">24</span>_尚硅谷_伪分布式_启动HDFS并运行MR程序</span><br><span class="line"><span class="number">25</span>_尚硅谷_伪分布式<span class="variable">_Log</span>日志查看和NN格式化前强调</span><br><span class="line"><span class="number">26</span>_尚硅谷_伪分布式<span class="variable">_NameNode</span>格式化注意事项</span><br><span class="line"><span class="number">27</span>_尚硅谷_伪分布式_启动YARN并运行MR程序</span><br><span class="line"><span class="number">28</span>_尚硅谷_伪分布式_配置历史服务器</span><br><span class="line"><span class="number">29</span>_尚硅谷_伪分布式_配置日志聚集</span><br><span class="line"><span class="number">30</span>_尚硅谷_伪分布式_配置文件说明</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-5">3.所学内容概述</h2><p>大数据入门</p><p>hadoop概述入门</p><p>环境搭建</p><p>本地模式</p><p>伪分布式</p><h2 id="4-根据概述分章节描述-3">4.根据概述分章节描述</h2><h3 id="hadoop概述">hadoop概述</h3><p><code>hadoop是一个分布式的基础架构，用于存储和分析计算数据，解决数据问题。</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps1.png" alt="img"></p><p><strong>hadoop的组成</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps2.png" alt="img"></p><p><code>MapReduce和HDFS是重点</code></p><h3 id="虚拟机环境搭建准备"><strong>虚拟机环境搭建准备</strong></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span>克隆虚拟机</span><br><span class="line"><span class="bullet">2.</span>修改克隆虚拟机的静态IP</span><br><span class="line"><span class="bullet">3.</span>修改主机名</span><br><span class="line"><span class="bullet">4.</span>关闭防火墙</span><br><span class="line"><span class="bullet">5.</span>创建atguigu用户</span><br><span class="line"><span class="bullet">6.</span>配置atguigu用户具有root权限</span><br><span class="line">安装JDK 和 hadoop</span><br></pre></td></tr></table></figure><p>安装Jdk和Hadoop时候注意路径，配好环境变量，需要检查。</p><p><code>java -version</code>和<code>hadoop</code>可以检查环境变量有没有配置好</p><h3 id="hadoop目录结构">hadoop目录结构</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）<span class="keyword">bin目录：存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本</span></span><br><span class="line"><span class="keyword"></span>（<span class="number">2</span>）etc目录：Hadoop的配置文件目录，存放Hadoop的配置文件</span><br><span class="line">（<span class="number">3</span>）lib目录：存放Hadoop的本地库（对数据进行压缩解压缩功能）</span><br><span class="line">（<span class="number">4</span>）<span class="keyword">sbin目录：存放启动或停止Hadoop相关服务的脚本</span></span><br><span class="line"><span class="keyword"></span>（<span class="number">5</span>）<span class="keyword">share目录：存放Hadoop的依赖jar包、文档、和官方案例</span></span><br></pre></td></tr></table></figure><h3 id="Hadoop运行模式">Hadoop运行模式</h3><h4 id="本地运行">本地运行</h4><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount wcinput wcoutput</span><br></pre></td></tr></table></figure><h4 id="伪分布式运行模式">伪分布式运行模式</h4><p>具体配置以及测试命令见 文档</p><p>配置集群文档一定要注意命令以及主机名</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）配置集群</span><br><span class="line">（<span class="number">2</span>）启动、测试集群增、删、查</span><br><span class="line">（<span class="number">3</span>）执行<span class="built_in">WordCount</span>案例</span><br></pre></td></tr></table></figure><p>查看集群启动成功用<code>jps</code></p><p>MapReduce和YARN大同小异</p><h4 id="配置历史服务器-日志聚集">配置历史服务器 日志聚集</h4><p>步骤都是配置yarn-site.xml文件然后添加配置</p><p>启动集群 执行即可</p><p><strong>运行情况</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714002441191.png" alt="image-20220714002441191"></p><h2 id="6-扩展学习部分-2">6.扩展学习部分</h2><p>说下这一星期操作linux系统出现的一些常见问题吧，最常见的就是路径问题，经常cd或者解压包的时候，vim和cat找不到文件，大多数就是自己路径的问题。自己出现了的一次问题：我在hadoop-2.7.1中有个文件名叫etc，但是在Linux中根目录也有一个文件名叫etc，所以有好几次，cd和调用命令的时候，报错，说找不到路径，闲下来的时候去CSDN搜了一下，路径的问题，<code>单独一个/代表跟根目录</code>，像<code>/etc/hadoop</code>就是进入根目录的etc中的hadoop目录，如果<code>etc/hadoop</code>就是当前目录有个文件叫etc，是相对的路径，而etc中的hadoop前面带/就是绝对路径，算是两种路径结合在一起，导致自己好几次不成功，几次的经验就是换一个新的路径的时候，ll看一下路径的文件，防止解压等操作的时候，造成不必要的麻烦。</p><h3 id="大数据的技术生态系统体系">大数据的技术生态系统体系</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714002628742.png" alt="image-20220714002628742"></p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）Sqoop：Sqoop是一款开源的工具，主要用于在Hadoop、Hive与传统的数据库(MySql)间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</span><br><span class="line"><span class="number">2</span>）Flume：Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</span><br><span class="line"><span class="number">3</span>）Kafka：Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</span><br><span class="line">（<span class="number">1</span>）通过O(<span class="number">1</span>)的磁盘数据结构提供消息的持久化，这种结构对于即使数以<span class="keyword">TB</span>的消息存储也能够保持长时间的稳定性能。</span><br><span class="line">（<span class="number">2</span>）高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</span><br><span class="line">（<span class="number">3</span>）支持通过Kafka服务器和消费机集群来分区消息。</span><br><span class="line">（<span class="number">4</span>）支持Hadoop并行数据加载。</span><br><span class="line"><span class="number">4</span>）Storm：Storm用于“连续计算”，对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</span><br><span class="line"><span class="number">5</span>）Spark：Spark是当前最流行的开源大数据内存计算框架。可以基于Hadoop上存储的大数据进行计算。</span><br><span class="line"><span class="number">6</span>）Oozie：Oozie是一个管理Hdoop作业（job）的工作流程调度管理系统。</span><br><span class="line"><span class="number">7</span>）Hbase：HBase是一个分布式的、面向列的开源数据库。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</span><br><span class="line"><span class="number">8</span>）Hive：Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</span><br><span class="line"><span class="number">10</span>）<span class="keyword">R</span>语言：<span class="keyword">R</span>是用于统计分析、绘图的语言和操作环境。<span class="keyword">R</span>是属于GNU系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。</span><br><span class="line"><span class="number">11</span>）Mahout：Apache Mahout是个可扩展的机器学习和数据挖掘库。</span><br><span class="line"><span class="number">12</span>）ZooKeeper：Zookeeper是Google的Chubby一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</span><br></pre></td></tr></table></figure><h2 id="7-总结-2">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天从Scala又来看hadoop了，hadoop的概念性不是很好理解，在我看来hadoop是一个框架，而且是开源的。相当于一个思想，它有提供模块和软件做支撑，是大数据必学的东西。今天的内容有点难度，代码会敲，但是内容和代码实现的原因，不是很理解透彻，今天配置java和hadoop的时候，路径出现了一些问题，学习内容也是偏概念性的，hadoop的目录结构作用等，一些命令已经熟悉了，伪分布式运行这里问题有点大，不理解这样做的原理和原因。</p><h1>7.14 hadoop完全分布式</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-6">2.标题</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">31</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>虚拟机环境准备</span><br><span class="line"><span class="number">32</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_scp案例</span><br><span class="line"><span class="number">33</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_rsync案例</span><br><span class="line"><span class="number">34</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群分发脚本xsync</span><br><span class="line"><span class="number">35</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群配置</span><br><span class="line"><span class="number">36</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群单节点启动</span><br><span class="line"><span class="number">37</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群ssh配置</span><br><span class="line"><span class="number">38</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群群起</span><br><span class="line"><span class="number">39</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群文件存储路径说明</span><br><span class="line"><span class="number">40</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群启动停止方式总结</span><br><span class="line"><span class="number">41</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>每日回顾</span><br><span class="line"><span class="number">42</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_RM启动注意事项</span><br><span class="line"><span class="number">43</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_Crondtab定时任务调度</span><br><span class="line"><span class="number">44</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群时间同步</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-6">3.所学内容概述</h2><h3 id="准备虚拟机克隆">准备虚拟机克隆</h3><h4 id="编写集群分发脚本">编写集群分发脚本</h4><h4 id="集群配置">集群配置</h4><h2 id="4-根据概述分章节描述-4">4.根据概述分章节描述.</h2><h3 id="准备虚拟机克隆-2">准备虚拟机克隆</h3><p>虚拟机克隆回来需要进行ip配置，看那个老师克隆步骤和自己的对不上，文件都不一样，自己是对着实验指导书配的。查了资料，总结了自己的步骤,后面也是全部对的上的都成功的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置ip</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span></span><br><span class="line"><span class="comment">#将IPADDR这里修改成自己需要的ip最好一个集群在一个网段 然后把 BOOTPROTO=static改成静态的，原本是none</span></span><br><span class="line">systemctl restart network</span><br><span class="line">systemctl restart NetworkManager</span><br><span class="line"><span class="comment">#这两条是重启网络配置 如果这种不行，就把network关了，再只重启NetworkManager，成功的话，reboot重启一次就好</span></span><br><span class="line">虚拟机的网络配置就如上</span><br></pre></td></tr></table></figure><h3 id="编写集群分发配置">编写集群分发配置</h3><p>克隆机的配置和原来是一样的，明显是不妥当的，一个一个改又很麻烦，就需要集群分发。用xsync</p><h4 id="xsync集群分发脚本">xsync集群分发脚本</h4><p>在/usr/sjh/bin这个目录下存放的脚本，sjh用户可以在系统任何地方直接执行。</p><p>（a）在/home/atguigu目录下创建bin目录，并在bin目录下xsync创建文件，文件内容如下：</p><p><code>原来的教程是在/home/sjh目录 试了不行 改到了/usr/sjh 就好了</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop83</span> ~]<span class="variable">$ </span>mkdir bin</span><br><span class="line">[root<span class="variable">@hadoop83</span> ~]<span class="variable">$ </span>cd bin/</span><br><span class="line">[root<span class="variable">@hadoop83</span> bin]<span class="variable">$ </span>touch xsync</span><br><span class="line">[root<span class="variable">@hadoop83</span> bin]<span class="variable">$ </span>vi xsync</span><br></pre></td></tr></table></figure><p>写入xsync</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1 获取输入参数个数，如果没有参数，直接退出</span></span><br><span class="line">pcount=$<span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span>((pcount==<span class="number">0</span>)); then</span><br><span class="line">echo no args;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"><span class="comment">#2 获取文件名称</span></span><br><span class="line">p1=$<span class="number">1</span></span><br><span class="line">fname=`basename $p1`</span><br><span class="line">echo fname=$fname</span><br><span class="line"><span class="comment">#3 获取上级目录到绝对路径</span></span><br><span class="line">pdir=`cd -P $(dirname $p1); pwd`</span><br><span class="line">echo pdir=$pdir</span><br><span class="line"><span class="comment">#4 获取当前用户名称</span></span><br><span class="line">user=`whoami`</span><br><span class="line"><span class="comment">#5 循环</span></span><br><span class="line"><span class="keyword">for</span>((host=<span class="number">103</span>; host&lt;<span class="number">105</span>; host++)); do</span><br><span class="line">echo ------------------- hadoop$host --------------</span><br><span class="line">rsync -rvl $pdir/$fname $user@hadoop$host:$pdir</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>修改脚本的权限 主要是添加执行权限 以及各用户能调用</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sjh<span class="symbol">@hadoop83</span> bin]<span class="meta"># chmod 777 xsync</span></span><br></pre></td></tr></table></figure><p>修改脚本形式</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sjh<span class="symbol">@hadoop83</span> bin]<span class="meta"># xsync /usr/sjh/bin</span></span><br></pre></td></tr></table></figure><h3 id="集群配置-2">集群配置</h3><p>部署规划</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714194338973.png" alt="image-20220714194338973"></p><p>以下配置文件直接copy尚硅谷的 自己的集群搭建 注意自己路径和文件名</p><h4 id="核心配置文件">核心配置文件</h4><p>配置core-site.xml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>vi core-site.xml</span><br></pre></td></tr></table></figure><p>在该文件中编写如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop102:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.7.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HDFS配置文件">HDFS配置文件</h4><p><a href="http://xn--hadoop-env-o150at28m.sh">配置hadoop-env.sh</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ vi hadoop-env.sh</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_HOME</span>=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><p>配置hdfs-site.xml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>vi hdfs-site.xml</span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop104:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="YARN配置">YARN配置</h4><p><a href="http://xn--yarn-env-vz2ve12k.sh">配置yarn-env.sh</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ vi yarn-env.sh</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_HOME</span>=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><p>配置yarn-site.xml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>vi yarn-site.xml</span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="MapReduce配置文件">MapReduce配置文件</h4><p><a href="http://xn--mapred-env-o150at28m.sh">配置mapred-env.sh</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ vi mapred-env.sh</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_HOME</span>=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><p>配置mapred-site.xml</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[atguigu@hadoop102 hadoop]</span>$ cp mapred-site<span class="selector-class">.xml</span><span class="selector-class">.template</span> mapred-site<span class="selector-class">.xml</span></span><br><span class="line"><span class="selector-attr">[atguigu@hadoop102 hadoop]</span>$ vi mapred-site.xml</span><br></pre></td></tr></table></figure><p>在该文件中增加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在集群上分发配置好的Hadoop配置文件">在集群上分发配置好的Hadoop配置文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ xsync <span class="regexp">/opt/m</span>odule<span class="regexp">/hadoop-2.7.2/</span></span><br></pre></td></tr></table></figure><p>分发完毕 去克隆机查看分发配置情况</p><h3 id="集群单点启动">集群单点启动</h3><p>这个很常规，之前的笔记有</p><p>每次都一个一个节点启动，如果节点数增加到1000个怎么办。所以要学一起启动利用集群 群起</p><p>首先要解决SSH无密登陆配置 不然每次群起要输入很多次密码</p><h4 id="SSh无密登录配置">SSh无密登录配置</h4><p>进入另外一台电脑 ssh语法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ssh</span> <span class="built_in">IP</span>地址 或者 软连接</span><br></pre></td></tr></table></figure><p>无密钥登录原理</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps1-16578004146091.png" alt="img"></p><p>第一步生成公钥和私钥：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> .ssh]<span class="variable">$ </span>ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>在/root/.ssh会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</p><p>拷贝到免密的机器上 自身也需要</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 .ssh]$ ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> hadoop102</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> hadoop103</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> hadoop104</span><br></pre></td></tr></table></figure><p>.ssh文件夹文件功能解释</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">known_hosts记录ssh访问过计算机的公钥(<span class="keyword">public</span> <span class="built_in">key</span>)</span><br><span class="line">id_rsa生成的私钥</span><br><span class="line">id_rsa.<span class="property">pub</span>生成的公钥</span><br><span class="line">authorized_keys存放授权过得无密登录服务器公钥</span><br></pre></td></tr></table></figure><h3 id="群起集群">群起集群</h3><p>配置Slaves</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/opt/m</span>odule<span class="regexp">/hadoop-2.7.2/</span>etc<span class="regexp">/hadoop/</span>slaves</span><br><span class="line">[atguigu@hadoop102 hadoop]$ vi slaves</span><br></pre></td></tr></table></figure><p>该文件增加内容</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop83</span><br><span class="line">hadoop84</span><br><span class="line">hadoop85</span><br></pre></td></tr></table></figure><p>同步所有节点配置文件</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>xsync slaves</span><br></pre></td></tr></table></figure><p>启动集群</p><p>在hadoop83中 放集群的克隆机</p><p>格式化</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>bin/hdfs namenode -format</span><br></pre></td></tr></table></figure><p>启动HDFS</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>启动YARN</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop103</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><h4 id="集群基本测试">集群基本测试</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hdfs dfs -mkdir -p <span class="regexp">/user/</span>atguigu/input</span><br><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hdfs dfs -put wcinput<span class="regexp">/wc.input /u</span>ser<span class="regexp">/atguigu/i</span>nput</span><br></pre></td></tr></table></figure><p>上传大文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ bin/hadoop fs -put</span><br><span class="line"><span class="regexp">/opt/</span>software<span class="regexp">/hadoop-2.7.2.tar.gz  /u</span>ser<span class="regexp">/atguigu/i</span>nput</span><br></pre></td></tr></table></figure><p>查看磁盘存储文件内容</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> subdir0]<span class="variable">$ </span>cat blk_1073741825</span><br><span class="line">hadoop yarn</span><br><span class="line">hadoop mapreduce </span><br><span class="line">atguigu</span><br><span class="line">atguigu</span><br></pre></td></tr></table></figure><h3 id="集群启动-停止方式总结">集群启动/停止方式总结</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）分别启动/停止HDFS组件</span><br><span class="line">hadoop-daemon.sh  start <span class="regexp">/ stop  namenode /</span> datanode / secondarynamenode</span><br><span class="line">（<span class="number">2</span>）启动/停止YARN</span><br><span class="line">yarn-daemon.sh  start <span class="regexp">/ stop  resourcemanager /</span> nodemanager</span><br></pre></td></tr></table></figure><h4 id="集群时间同步">集群时间同步</h4><p>检查ntp是否安装</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop102</span> 桌面]<span class="meta"># rpm -qa|grep ntp</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714212915085.png" alt="image-20220714212915085"></p><h4 id="其他机器配置（必须root）">其他机器配置（必须root）</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop103</span>桌面]<span class="meta"># crontab -e</span></span><br></pre></td></tr></table></figure><p>修改文件时间 Linux中有，指每十分钟切换一次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*/10 *</span> * * <span class="emphasis">*</span></span><br></pre></td></tr></table></figure><h2 id="5-BUG点-2">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>克隆机的时候，因为路径和老师不一样，代码打出来，老师有的文件打开是有的，但是我打开是没的，但是最终目标都是连接配置静态ip地址，和能正常上网，自己找linux尚硅谷的资料，看着配置的，方法很不一样，目的是正常达成了，详情在笔记 虚拟机环境准备有。</p><p>还有个报错的问题。就是在执行ssh命令的时候，提示lias cman='man -M /usr//share/man/zh_CN’报错，看提示信息是在etc/profile.d/cman.sh这个文件下的问题，ssh我使用的时候是正常的，但是会报出这个错误，百度找了，然后进该文件比对，发现最前面少个a然后路径//中间少了local。加上以后ssh就没报错信息了，好像是自己最开始安装中文语言包的时候复制进去的时候光标的原因吧，不太清楚。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714235620184.png" alt="image-20220714235620184"></p><h2 id="6-总结">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容不是很多，但是有一定的难度，和小问题比较多，但都解决了。问题不大，集群的配置比较麻烦，但是单机开启和昨天的命令是一样的。无非是配置多集群的时候，稍微麻烦了点，而且配置文件和老师差异比较大，源被克隆的机子和老师配置很多不一样，克隆出来的机子很多都是要自己去搜命令。好在顺利启动RM了。也能正常使。还是偏向概念性多点，理解集群运行的原理，代码就那么来回几条，多敲几遍就OK了，文件也是配置一次以后，用集群配置就方便了很多。</p><h1>7.16 HDFS</h1><h2 id="1-头：日期、所学内容出处-7">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-7">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">70</span>_尚硅谷<span class="variable">_HDFS_</span>机架感知-副本存储节点选择</span><br><span class="line">P71 <span class="number">71</span>_尚硅谷<span class="variable">_HDFS_</span>读数据流程（面试重点）</span><br><span class="line"><span class="number">72</span>_尚硅谷<span class="variable">_HDFS_NN</span>和<span class="number">2</span>NN工作机制（面试重点）</span><br><span class="line"><span class="number">73</span>_尚硅谷<span class="variable">_HDFS_Fsimage</span>和Edits解析</span><br><span class="line"><span class="number">74</span>_尚硅谷<span class="variable">_HDFS_CheckPoint</span>时间设置</span><br><span class="line"><span class="number">75</span>_尚硅谷<span class="variable">_HDFS_NN</span>故障处理_案例</span><br><span class="line"><span class="number">76</span>_尚硅谷<span class="variable">_HDFS_</span>安全模式</span><br><span class="line"><span class="number">77</span>_尚硅谷<span class="variable">_HDFS_</span>集群安全模式_案例</span><br><span class="line"><span class="number">78</span>_尚硅谷<span class="variable">_HDFS_NN</span>多目录配置_案例</span><br><span class="line"><span class="number">79</span>_尚硅谷_每日回顾</span><br><span class="line"><span class="number">80</span>_尚硅谷<span class="variable">_HDFS_DN</span>工作机制（面试重点）</span><br><span class="line"><span class="number">81</span>_尚硅谷<span class="variable">_HDFS_</span>数据完整性</span><br><span class="line"><span class="number">82</span>_尚硅谷<span class="variable">_HDFS_</span>掉线时限参数设置</span><br><span class="line"><span class="number">83</span>_尚硅谷<span class="variable">_HDFS_</span>服役新节点_案例</span><br><span class="line"><span class="number">84</span>_尚硅谷<span class="variable">_HDFS_</span>添加白名单_案例</span><br><span class="line"><span class="number">85</span>_尚硅谷<span class="variable">_HDFS_</span>黑名单退役_案例</span><br><span class="line"><span class="number">86</span>_尚硅谷<span class="variable">_HDFS_DN</span>多目录配置_案例</span><br><span class="line"><span class="number">87</span>_尚硅谷<span class="variable">_HDFS</span>新特性_集群间数据拷贝</span><br><span class="line"><span class="number">88</span>_尚硅谷<span class="variable">_HDFS</span>新特性_小文件归档案例</span><br><span class="line"><span class="number">89</span>_尚硅谷<span class="variable">_HDFS</span>新特性_回收站案例</span><br><span class="line"><span class="number">90</span>_尚硅谷<span class="variable">_HDFS</span>新特性_快照管理</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-7">3.所学内容概述</h2><h3 id="HDFS概述">HDFS概述</h3><h4 id="HDFS的shell操作">HDFS的shell操作</h4><h4 id="HDFS客户端环境准备">HDFS客户端环境准备</h4><h4 id="HDFS的API操作">HDFS的API操作</h4><h4 id="HDFS的I-O流操作">HDFS的I/O流操作</h4><h2 id="4-根据概述分章节描述-5">4.根据概述分章节描述</h2><h3 id="HDFS概述-2">HDFS概述</h3><p>HDFS是分布式文件管理系统的一种。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220715084956748.png" alt="image-20220715084956748"></p><h4 id="优点">优点</h4><p>高容错 <code>数据自动保存多个副本 副本丢失以后可以自动恢复</code></p><p>适合处理大数据</p><p><code>数据规模 能处理数据规模达到GB TB 甚至PB的数据</code></p><p><code>文件规模：能处理百万规模以上的文件数量，数量相当之大</code></p><p>可以构建在廉价机器上</p><p><code>通过多副本机制，提高可靠性</code></p><h4 id="缺点">缺点</h4><p>不适合低延迟数据访问，毫秒这种数据存储，做不到</p><p>对小文件存储，不够高效</p><p>仅仅支持数据追加append 不支持修改</p><h4 id="HDFS组成架构">HDFS组成架构</h4><p>分为4个方面 NameNode DataNode Client客户端 和 Secondary NameNode</p><p><code>Secondary NameNode</code>辅助NameNode，可以定期合并Edits和Fsming，必要的时候可以辅助恢复NameNode，提高安全性。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps2-16578472731763.png" alt="img"></p><h3 id="HDFS的Shell操作（开发重点）">HDFS的Shell操作（开发重点）</h3><p>基本语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>/hadoop fs - 具体命令</span><br><span class="line"><span class="built_in">bin</span>/hdfs dfs 具体命令</span><br><span class="line"><span class="comment">#dfs是fs的实现类</span></span><br></pre></td></tr></table></figure><p>查看命令大全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop fs</span><br></pre></td></tr></table></figure><p>基本常用命令合集</p><p>（0）启动Hadoop集群（方便后续的测试）</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-dfs.sh</span><br><span class="line">[atguigu<span class="variable">@hadoop103</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><p>（1）-help：输出这个命令参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -<span class="built_in">help</span> <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><p>（2）-ls: 显示目录信息</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs -ls /</span><br></pre></td></tr></table></figure><p>( 3 )-mkdir:在HDFS上创建目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -mkdir -p <span class="regexp">/sanguo/</span>shuguo</span><br></pre></td></tr></table></figure><p>（4）-moveFromLocal：从本地剪切粘贴到HDFS</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>touch kongming.txt</span><br><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs  -moveFromLocal  ./kongming.txt  /sanguo/shuguo</span><br></pre></td></tr></table></figure><p>（5）-appendToFile：追加一个文件到已经存在的文件末尾</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>touch liubei.txt</span><br><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>vi liubei.txt</span><br><span class="line">输入</span><br><span class="line">san gu mao lu</span><br><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs -appendToFile liubei.txt /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（6）-cat：显示文件内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -cat <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（7）-chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs  -chmod  <span class="number">666</span>  <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs  -chown  atguigu:atguigu   <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（8）-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs -copyFromLocal README.txt /</span><br></pre></td></tr></table></figure><p>（9）-copyToLocal：从HDFS拷贝到本地</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -copyToLocal <span class="regexp">/sanguo/</span>shuguo<span class="regexp">/kongming.txt ./</span></span><br></pre></td></tr></table></figure><p>（10）-cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -cp <span class="regexp">/sanguo/</span>shuguo<span class="regexp">/kongming.txt /</span>zhuge.txt</span><br></pre></td></tr></table></figure><p>（11）-mv：在HDFS目录中移动文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -mv <span class="regexp">/zhuge.txt /</span>sanguo<span class="regexp">/shuguo/</span></span><br></pre></td></tr></table></figure><p>（12）-get：等同于copyToLocal，就是从HDFS下载文件到本地</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -get <span class="regexp">/sanguo/</span>shuguo<span class="regexp">/kongming.txt ./</span></span><br></pre></td></tr></table></figure><p>（13）-getmerge：合并下载多个文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -getmerge <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>* ./zaiyiqi.txt</span><br></pre></td></tr></table></figure><p>（14）-put：等同于copyFromLocal</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -put .<span class="regexp">/zaiyiqi.txt /u</span>ser<span class="regexp">/atguigu/</span>test/</span><br></pre></td></tr></table></figure><p>（15）-tail：显示一个文件的末尾</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -tail <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（16）-rm：删除文件或文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -rm <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>jinlian2.txt</span><br></pre></td></tr></table></figure><p>（17）-rmdir：删除空目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -<span class="built_in">rmdir</span> /test</span><br></pre></td></tr></table></figure><p>（18）-du统计文件夹的大小信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -du -s -h <span class="regexp">/user/</span>atguigu/test</span><br><span class="line"><span class="number">2.7</span> K  <span class="regexp">/user/</span>atguigu/test</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -du  -h <span class="regexp">/user/</span>atguigu/test</span><br><span class="line"><span class="number">1.3</span> K  <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>README.txt</span><br><span class="line"><span class="number">15</span>     <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>jinlian.txt</span><br><span class="line"><span class="number">1.4</span> K  <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>zaiyiqi.txt</span><br></pre></td></tr></table></figure><p>（19）-setrep：设置HDFS中文件的副本数量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -setrep <span class="number">10</span> <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220715191439091.png" alt="image-20220715191439091"></p><h3 id="HDFS客户端环境准备-2">HDFS客户端环境准备</h3><p>因为教学老师版本那不一样，也没有下载资料，所以环境什么都是自己搜的。</p><p>解压hadoop2.7.1的linux安装包在，windows系统中，然后在CSDN搜到了两个文件，覆盖在hadoop中的bin目录中。两个文件有链接的。然后配置环境变量</p><p>%HADOOP_HOME%指定bin目录</p><p>path中 %HADOOP_HOME%\bin</p><p><a href="http://t.csdn.cn/W0kBg">http://t.csdn.cn/W0kBg</a> 来自CSDN中</p><h3 id="HDFS的API操作-2">HDFS的API操作</h3><p><code>参数优先级</code></p><p>参数优先级排序：（1）客户端代码中设置的值 &gt;（2）ClassPath下的用户自定义配置文件 &gt;（3）然后是服务器的默认配置</p><h4 id="文件下载">文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyToLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 执行下载操作</span></span><br><span class="line"><span class="comment">// boolean delSrc 指是否将原文件删除</span></span><br><span class="line"><span class="comment">// Path src 指要下载的文件路径</span></span><br><span class="line"><span class="comment">// Path dst 指将文件下载到的路径</span></span><br><span class="line"><span class="comment">// boolean useRawLocalFileSystem 是否开启文件校验</span></span><br><span class="line">fs.copyToLocalFile(<span class="literal">false</span>, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banzhang.txt&quot;</span>), <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;e:/banhua.txt&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS文件删除">HDFS文件删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 执行删除</span></span><br><span class="line">fs.delete(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/0508/&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS文件名更改">HDFS文件名更改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRename</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 修改文件名称</span></span><br><span class="line">fs.rename(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banzhang.txt&quot;</span>), <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banhua.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS文件详情查看">HDFS文件详情查看</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListFiles</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 获取文件详情</span></span><br><span class="line">RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fs.listFiles(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(listFiles.hasNext())&#123;</span><br><span class="line"><span class="type">LocatedFileStatus</span> <span class="variable">status</span> <span class="operator">=</span> listFiles.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出详情</span></span><br><span class="line"><span class="comment">// 文件名称</span></span><br><span class="line">System.out.println(status.getPath().getName());</span><br><span class="line"><span class="comment">// 长度</span></span><br><span class="line">System.out.println(status.getLen());</span><br><span class="line"><span class="comment">// 权限</span></span><br><span class="line">System.out.println(status.getPermission());</span><br><span class="line"><span class="comment">// 分组</span></span><br><span class="line">System.out.println(status.getGroup());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取存储的块信息</span></span><br><span class="line">BlockLocation[] blockLocations = status.getBlockLocations();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (BlockLocation blockLocation : blockLocations) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取块存储的主机节点</span></span><br><span class="line">String[] hosts = blockLocation.getHosts();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String host : hosts) &#123;</span><br><span class="line">System.out.println(host);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------班长的分割线----------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件和文件夹判断">文件和文件夹判断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStatus</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件配置信息</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 判断是文件还是文件夹</span></span><br><span class="line">    FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (FileStatus fileStatus : listStatus) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是文件</span></span><br><span class="line">        <span class="keyword">if</span> (fileStatus.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件:&quot;</span>+fileStatus.getPath().getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名:&quot;</span>+fileStatus.getPath().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 关闭资源</span></span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS的I-O流操作-2">HDFS的I/O流操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把本地e盘上的banhua.txt文件上传到到HDFS根目录</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putFileToHDFS</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.获取对象</span></span><br><span class="line">       <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">       <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.获取输入法</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:/banhua.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.获取输出流</span></span><br><span class="line">       <span class="type">FSDataOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> fs.create(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banzhang.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.流的对拷</span></span><br><span class="line">       IOUtils.copyBytes(fis,fos,configuration);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.关闭资源</span></span><br><span class="line">       IOUtils.closeStream(fis);</span><br><span class="line">       IOUtils.closeStream(fos);</span><br><span class="line">       fs.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="文件下载-2">文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从HDFS上下载banhua.txt 到本地e盘中</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFileFromHDFS</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">//1.获取对象</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获取输入流</span></span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banhua.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/HDFS-banhua.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fis,fos,configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定位文件读取">定位文件读取</h4><p>分两步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载第一块</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFileSeek1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 获取输入流</span></span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hadoop-2.7.1.tar.gz&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 创建输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/hadoop-2.7.1.tar.gz.part1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 流的拷贝</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ; i &lt; <span class="number">1024</span> * <span class="number">128</span>; i++)&#123;</span><br><span class="line">        fis.read(buf);</span><br><span class="line">        fos.write(buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFileSeek2</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 打开输入流</span></span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hadoop-2.7.1.tar.gz&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 定位输入数据位置</span></span><br><span class="line">    fis.seek(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 创建输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/hadoop-2.7.1.tar.gz.part2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fis, fos, configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6 关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-3">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>是这样报错的，也看不太懂，大致意思就是找不到，文件的权限，之类的话，去CSDN看别人写的，突然发现有人在get最后面是写的root，想到自己一直都是以root用户登陆，就把用户sjh改成了root，就好了。</p><p><img src="https://docimg8.docs.qq.com/image/cMLQ9ZBtZy5gqj1iXty_7A.png?w=2560&amp;h=1440" alt="img"></p><h2 id="7-总结-3">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容的重点在于掌握Java来充当客户端，利用HDFS来做上传数据或者从hadoop下载数据。这次的内容就偏向代码的敲写了，每次操作自己都去敲了一遍，看完视频自己去敲过来的，难度一般，因为对代码的处理比较多，自己对代码比较敏感，学习起来上手也快。比较麻烦的地方是windows配置环境，和IDEA配置客户端的环境准备。配置了一个小时左右，找压缩包，和pox文件花费了很多时间，中间也出现了一些小问题，但是都解决了。学习状态还不错，优于大量的概念问题的章节。</p><h1>7.18 Scala函数式编程 面向对象</h1><h2 id="1-头：日期、所学内容出处-8">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-8">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">057</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（二）_高阶函数（三）_函数作为返回值</span><br><span class="line"><span class="number">058</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（二）_高阶函数（四）_应用案例</span><br><span class="line"><span class="number">059</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（三）_扩展练习（一）_匿名函数</span><br><span class="line"><span class="number">060</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（三）_扩展练习（二）_函数作为返回值</span><br><span class="line"><span class="number">061</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（四）_闭包（一）_概念和原理</span><br><span class="line"><span class="number">062</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（四）_闭包（二）_具体应用</span><br><span class="line"><span class="number">063</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（四）_柯里化</span><br><span class="line"><span class="number">064</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（五）_递归（一）_概念和实现</span><br><span class="line"><span class="number">065</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（五）_递归（二）_尾递归优</span><br><span class="line"><span class="number">066</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（六）_控制抽象（一）参数</span><br><span class="line"><span class="number">067</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（六）_控制抽象（二）_传名参数</span><br><span class="line"><span class="number">068</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（六）_控制抽象（三）_自定义<span class="keyword">While</span>循环</span><br><span class="line"><span class="number">069</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（七）_惰性加载</span><br><span class="line"><span class="number">070</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（一）_声明和访问</span><br><span class="line"><span class="number">071</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（二）_包对象</span><br><span class="line"><span class="number">072</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（三）_导包说明</span><br><span class="line"><span class="number">073</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（二）_类和对象</span><br><span class="line"><span class="number">074</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（一）_访问权限</span><br><span class="line"><span class="number">075</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（二）_构造器</span><br><span class="line"><span class="number">076</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（三）_构造器参数</span><br><span class="line"><span class="number">077</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（四）_继承</span><br><span class="line"><span class="number">078</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（五）_多态</span><br><span class="line"><span class="number">080</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（六）_抽象类（二）_匿名子类</span><br><span class="line"><span class="number">082</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（七）_伴生对象（二）_单例设计模式</span><br><span class="line"><span class="number">084</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（二）_特质的混入</span><br><span class="line"><span class="number">085</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（三）_特质的叠加</span><br><span class="line"><span class="number">087</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（五）_特质和抽象类的区别</span><br><span class="line"><span class="number">088</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（六）_自身类型</span><br><span class="line"><span class="number">089</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（九）_扩展内容（一）_类型检测和转换</span><br><span class="line"><span class="number">090</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（九）_扩展内容（二）_枚举类和应用类</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-8">3.所学内容概述</h2><p>函数基础</p><p>函数高级</p><h2 id="4-根据概述分章节描述-6">4.根据概述分章节描述</h2><h3 id="函数基础">函数基础</h3><h4 id="面向对象编程和函数式编程的区别">面向对象编程和函数式编程的区别</h4><p><code>面向对象编程：解决问题，分解对象，属性，行为，然后通过对象的关系以及行为的调用来解决问题。</code></p><p>Scala语言是一个完全面向对象编程语言。万物皆对象，比Java还有过之。对象的本质就是对数据和行为的封装</p><p><code>函数式编程:将问题分解成步骤，将步骤封装，调用封装好的步骤解决问题 </code></p><p>Scala 语言是一个完全函数式编程语言。万物皆函数。函数的本质：函数可以当做一个值进行传递</p><p><strong>自己的使用体验来讲，Scala运行速度和python差不多，比Java慢了很多，Scala编译很慢，效率不高，可能函数式编程运行速度都很慢吧</strong></p><h4 id="函数基本语法">函数基本语法</h4><p>在main里面的是函数，在main外面的是方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printTest</span></span>(x:<span class="type">String</span>) : <span class="type">String</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;hi&quot;</span>+x)</span><br><span class="line">    x</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印里面的值 并返回</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220718090955061.png" alt="image-20220718090955061"></p><p>Scala函数参数和返回值的几种情况</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 函数 1：无参，无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(<span class="string">&quot;无参，无返回值&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(test1())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 2：无参，有返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test2</span></span>():<span class="type">String</span>=&#123;</span><br><span class="line">      <span class="string">&quot;无参，有返回值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(test2())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 3：有参，无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test3</span></span>(s:<span class="type">String</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">      println(s)</span><br><span class="line">    &#125;</span><br><span class="line">    test3(<span class="string">&quot;jingling&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 4：有参，有返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test4</span></span>(s:<span class="type">String</span>):<span class="type">String</span>=&#123;</span><br><span class="line">      s+<span class="string">&quot;有参，有返回值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(test4(<span class="string">&quot;hello &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 5：多参，无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test5</span></span>(name:<span class="type">String</span>, age:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">      println(<span class="string">s&quot;我叫<span class="subst">$&#123;name&#125;</span>, 我的年龄是<span class="subst">$&#123;age&#125;</span>岁&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(test5(<span class="string">&quot;dealing&quot;</span>,<span class="number">40</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>函数的特殊情况</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// （1）可变参数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>( s : <span class="type">String</span>* ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(s)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 有输入参数：输出 Array</span></span><br><span class="line">  test(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Scala&quot;</span>)</span><br><span class="line">  <span class="comment">// 无输入参数：输出 List()</span></span><br><span class="line">  test()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// (2)如果参数列表中存在多个参数，那么可变参数一般放置在最后</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test2</span></span>( name : <span class="type">String</span>, s: <span class="type">String</span>* ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(name + <span class="string">&quot;,&quot;</span> + s)</span><br><span class="line">  &#125;</span><br><span class="line">  test2(<span class="string">&quot;jinlian&quot;</span>, <span class="string">&quot;dalang&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// (3)参数默认值</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test3</span></span>( name : <span class="type">String</span>, age : <span class="type">Int</span> = <span class="number">30</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$name</span>, <span class="subst">$age</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果参数传递了值，那么会覆盖默认值</span></span><br><span class="line">  test3(<span class="string">&quot;jinlian&quot;</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="comment">// 如果参数有默认值，在调用的时候，可以省略这个参数</span></span><br><span class="line">  test3(<span class="string">&quot;dalang&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一般情况下，将有默认值的参数放置在参数列表的后面</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test4</span></span>( sex : <span class="type">String</span> = <span class="string">&quot;男&quot;</span>, name : <span class="type">String</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$name</span>, <span class="subst">$sex</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Scala 函数中参数传递是，从左到右</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//（4）带名参数</span></span><br><span class="line">  test4(name=<span class="string">&quot;ximenqing&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala代码的简化</p><p>能简则简，可读性会差很多！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// （0）函数标准写法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>( s : <span class="type">String</span> ): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f(<span class="string">&quot;Hello&quot;</span>))</span><br><span class="line">  <span class="comment">// 至简原则:能省则省</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//（1） return 可以省略,Scala 会使用函数体的最后一行代码作为返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>( s : <span class="type">String</span> ): <span class="type">String</span> = &#123;</span><br><span class="line">    s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f1(<span class="string">&quot;Hello&quot;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（2）如果函数体只有一行代码，可以省略花括号</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>(s:<span class="type">String</span>):<span class="type">String</span> = s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//（3）返回值类型如果能够推断出来，那么可以省略（:和返回值类型一起 省略）</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f3</span></span>( s : <span class="type">String</span> ) = s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line">  println(f3(<span class="string">&quot;Hello3&quot;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（4）如果有 return，则不能省略返回值类型，必须指定。</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f4</span></span>() :<span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ximenqing4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f4())</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（5）如果函数明确声明 unit，那么即使函数体中使用 return 关键字也 不起作用</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f5</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dalang5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f5())</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（6）Scala 如果期望是无返回值类型,可以省略等号</span></span><br><span class="line">  <span class="comment">// 将无返回值的函数称之为过程</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f6</span></span>() &#123;</span><br><span class="line">    <span class="string">&quot;dalang6&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  println(f6())</span><br><span class="line">  <span class="comment">//（7）如果函数无参，但是声明了参数列表，那么调用时，小括号，可加可 不加</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f7</span></span>() = <span class="string">&quot;dalang7&quot;</span></span><br><span class="line">  println(f7())</span><br><span class="line">  println(f7)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（8）如果函数没有参数列表，那么小括号可以省略,调用时小括号必须省 略</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f8</span> </span>= <span class="string">&quot;dalang&quot;</span></span><br><span class="line">  <span class="comment">//println(f8())</span></span><br><span class="line">  println(f8)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（9）如果不关心名称，只关心逻辑处理，那么函数名（def）可以省略 和Java的lambda相似</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f9</span> </span>= (x:<span class="type">String</span>)=&gt;&#123;println(<span class="string">&quot;wusong&quot;</span>)&#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f10</span></span>(f:<span class="type">String</span>=&gt;<span class="type">Unit</span>) = &#123;</span><br><span class="line">    f(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  f10(f9)</span><br><span class="line">  println(f10((x:<span class="type">String</span>)=&gt;&#123;println(<span class="string">&quot;wusong&quot;</span>)&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数高级">函数高级</h3><p>函数的高阶用法 我认为可读性极差极差！</p><h4 id="函数作为值传递">函数作为值传递</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//（1）调用 foo 函数，把返回值给变量 f</span></span><br><span class="line">  <span class="comment">//val f = foo()</span></span><br><span class="line">  <span class="keyword">val</span> f = foo</span><br><span class="line">  println(f)</span><br><span class="line">  <span class="comment">//（2）在被调用函数 foo 后面加上 _，相当于把函数 foo 当成一个整体， 传递给变量 f1</span></span><br><span class="line">  <span class="keyword">val</span> f1 = foo _</span><br><span class="line">  foo()</span><br><span class="line">  f1()</span><br><span class="line">  <span class="comment">//（3）如果明确变量类型，那么不使用下划线也可以将函数作为整体传递给 变量</span></span><br><span class="line">  <span class="keyword">var</span> f2:()=&gt;<span class="type">Int</span> = foo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span></span>():<span class="type">Int</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;foo...&quot;</span>)</span><br><span class="line">  <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数也可以作为函数传递</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// （1）定义一个函数，函数参数还是一个函数签名；f 表示函数名称;(Int,Int)表示输入两个 Int 参数；Int 表示函数返回值</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(f: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line"> f(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// （2）定义一个函数，参数和返回值类型和 f1 的输入参数一致</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = a + b</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// （3）将 add 函数作为参数传递给 f1 函数，如果能够推断出来不是调用，_可以省略</span></span><br><span class="line"> println(f1(add))</span><br><span class="line">println(f1(add _))</span><br><span class="line"><span class="comment">//可以传递匿名函数</span></span><br></pre></td></tr></table></figure><p>函数可以作为函数的返回值返回</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>() = &#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>() = &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">f2 _</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> f = f1()</span><br><span class="line"><span class="comment">// 因为 f1 函数的返回值依然为函数，所以可以变量 f 可以作为函数继续调用</span></span><br><span class="line">f()</span><br><span class="line"><span class="comment">// 上面的代码可以简化为</span></span><br><span class="line">f1()()</span><br></pre></td></tr></table></figure><h4 id="匿名函数">匿名函数</h4><p>语法说明</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(x:<span class="type">Int</span>) =&gt; &#123;println&#123;<span class="string">&quot;....&quot;</span>&#125;&#125;</span><br><span class="line">x：表示输入参数类型；<span class="type">Int</span>：表示输入参数类型；函数体：表示具体代码逻辑</span><br></pre></td></tr></table></figure><p>匿名函数也可以至简</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）参数的类型可以省略，会根据形参进行自动的推导</span><br><span class="line">（<span class="number">2</span>）类型省略之后，发现只有一个参数，则圆括号可以省略；其他情况：没有参数和参数超过 <span class="number">1</span> 的永远不能省略圆括号。 （<span class="number">3</span>）匿名函数如果只有一行，则大括号也可以省略</span><br><span class="line">（<span class="number">4</span>）如果参数只出现一次，则参数省略且后面参数可以用<span class="literal">_</span>代替</span><br></pre></td></tr></table></figure><p>代码实现 简化一个形参匿名函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// （1）定义一个函数：参数包含数据和逻辑函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operation</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>], op: <span class="type">Int</span> =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">      <span class="keyword">for</span> (elem &lt;- arr) <span class="keyword">yield</span> op(elem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （2）定义逻辑函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">op</span></span>(ele: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （3）标准函数调用</span></span><br><span class="line">    <span class="keyword">val</span> arr = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), op)</span><br><span class="line">    println(arr.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">// （4）采用匿名函数</span></span><br><span class="line">    <span class="keyword">val</span> arr1 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (ele: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    println(arr1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">// （4.1）参数的类型可以省略，会根据形参进行自动的推导;</span></span><br><span class="line">    <span class="keyword">val</span> arr2 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (ele) =&gt; &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// （4.2）类型省略之后，发现只有一个参数，则圆括号可以省略；其他情 况：没有参数和参数超过 1 的永远不能省略圆括号。</span></span><br><span class="line">    <span class="keyword">val</span> arr3 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), ele =&gt; &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    println(arr3.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">// (4.3) 匿名函数如果只有一行，则大括号也可以省略</span></span><br><span class="line">    <span class="keyword">val</span> arr4 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), ele =&gt; ele + <span class="number">1</span>)</span><br><span class="line">    println(arr4.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">//（4.4）如果参数只出现一次，则参数省略且后面参数可以用_代替</span></span><br><span class="line">    <span class="keyword">val</span> arr5 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), _ + <span class="number">1</span>)</span><br><span class="line">    println(arr5.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果有多个参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">calculator</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>, op: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">     op(a, b)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// （1）标准版</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;x + y&#125;))</span><br><span class="line"> <span class="comment">// （2）如果只有一行，则大括号也可以省略</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y))</span><br><span class="line"> <span class="comment">// （3）参数的类型可以省略，会根据形参进行自动的推导;</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, (x , y) =&gt; x + y))</span><br><span class="line"> <span class="comment">// （4）如果参数只出现一次，则参数省略且后面参数可以用_代替</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, _ + _))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="函数柯里化和闭包">函数柯里化和闭包</h4><p>闭包：如果一个函数，访问到了它的外部（局部）变量的值，那么这个函数和他所处的环境，称为闭包</p><p>柯里化的写法和 闭包的调用很像，建议：闭包都用柯里化写</p><p><strong>闭包就是本质就是一个函数，只不过使用了外部变量作为返回值的函数，只是语法如果使用柯里化，可读性不一样</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>)  = a+ b <span class="comment">//实用性差 每次调用都需要输入a</span></span><br><span class="line">    <span class="comment">//可以先将A定义成一个其他变量 然后调用内部的B</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addByA</span></span>(a:<span class="type">Int</span>) : <span class="type">Int</span> =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">addByB</span></span>(b:<span class="type">Int</span>) = a + b</span><br><span class="line">      addByB</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(add(<span class="number">5</span>,<span class="number">8</span>))</span><br><span class="line">    println(addByA(<span class="number">5</span>)(<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">val</span> addByFive = addByA(<span class="number">5</span>) <span class="comment">//封装成addByFive常量</span></span><br><span class="line">    println(addByFive(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//    lambda简写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addByA1</span></span>(a:<span class="type">Int</span>) : <span class="type">Int</span> =&gt; <span class="type">Int</span> =  a + _</span><br><span class="line">    println(addByA1(<span class="number">3</span>)(<span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//5.柯里化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addCurrying</span></span>(a:<span class="type">Int</span>)(b:<span class="type">Int</span>) = a + b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> addByFour = addCurrying(<span class="number">5</span>)(<span class="number">53</span>)</span><br><span class="line">    println(addByFour)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="递归-阶乘">递归 阶乘</h4><p>就和Java递归是差不多的，无非是方法的格式不一样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(test(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(i : <span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  test(i - <span class="number">1</span>) * i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制抽象">控制抽象</h4><p>分两种 值传递和名传递</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 传值参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f0</span></span>(a:<span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">&#125;</span><br><span class="line">f0(<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>():<span class="type">Int</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;f1调用&quot;</span>)</span><br><span class="line">  <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line">f0(f1())</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.传名参数 传递不再是具体的值，而是代码块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>(a: =&gt; <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">&#125;</span><br><span class="line">f2(<span class="number">23</span>)</span><br><span class="line">f2(f1())</span><br></pre></td></tr></table></figure><h4 id="惰性加载">惰性加载</h4><p>当<strong>函数返回值被声明为</strong> <strong>lazy</strong> <strong>时</strong>，函数的<strong>执行将被推迟</strong>，直到我们第一次对此取值，该函数才会执行。这种函数我们称之为惰性函数。</p><p>应用点我觉得像线程的时候，会用得到，使用该方法(函数)，线程执行。和线程的堵塞和锁有点类似。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> res = sum(<span class="number">10</span>,<span class="number">30</span>)</span><br><span class="line">  println(<span class="string">&quot;1，函数调用&quot;</span>)</span><br><span class="line">  println(<span class="string">&quot;2.res = &quot;</span> + res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(i: <span class="type">Int</span>, i1: <span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;3.sum 被执行。。。&quot;</span>)</span><br><span class="line">  i + i1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1，函数调用</span></span><br><span class="line"><span class="comment">3.sum 被执行。。。</span></span><br><span class="line"><span class="comment">2.res = 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-3">6.扩展学习部分</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定义一个函数 <span class="keyword">func</span>，它接收一个 <span class="title function_">Int</span> 类型的参数，返回一个函数（记作 <span class="title function_">f1</span>）。它返回的函数 <span class="title function_">f1</span>，接收一个 <span class="title function_">String</span> 类型的参数，同样返回一个函数（记作 <span class="title function_">f2</span>）。函数 <span class="title function_">f2</span> 接收一个 <span class="title function_">Char</span> 类型的参数，返回一个 <span class="title function_">Boolean</span> 的值。</span><br><span class="line">要求调用函数 <span class="keyword">func</span><span class="params">(<span class="number">0</span>)</span> <span class="params">(“”)</span> <span class="params">(‘<span class="number">0</span>’)</span>得到返回值为 <span class="title function_">false</span>，其它情况均返回 <span class="title function_">true</span>。</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(int: <span class="type">Int</span>)= &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(string: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>(char: <span class="type">Char</span>)  = &#123;</span><br><span class="line">      <span class="keyword">if</span> (int == <span class="number">0</span> &amp;&amp; string == <span class="string">&quot;&quot;</span> &amp;&amp; char == &#x27;<span class="number">0</span>&#x27;) <span class="literal">false</span> <span class="keyword">else</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    f2 _</span><br><span class="line">  &#125;</span><br><span class="line">  f1 _</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全匿名函数实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span></span>(x: <span class="type">Int</span>):<span class="type">String</span> =&gt; <span class="type">Char</span> =&gt; <span class="type">Boolean</span>= &#123;</span><br><span class="line">  y =&gt; z :  =&gt; &#123;<span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="string">&quot;&quot;</span> &amp;&amp; z == &#x27;<span class="number">0</span>&#x27;) <span class="literal">false</span> <span class="keyword">else</span> <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-4">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天是学习任务是Scala的函数式和部分面向对象，以及对未来大数据比赛的规划。Scala的函数式编程是它的特点，他和Java最大的区别，Scala不仅是函数式编程也是面向对象编程，而且比Java更面向对象，Java8更新的lambda就是借鉴Scala的函数式的。函数式会非常非常简洁，像六七行很长的代码，能缩的很短，而且比java的lambda更短，比python也要短，但是自己简化完，自己都不知道写的什么，可读性就很一言难尽。学习难度是一般，就是代码解读和后面的闭包不是很好掌握，重点还是函数式的简化吧，大部分都是在讲这个，今天状态很佳。</p><h1>7.19 Scala面向对象</h1><h2 id="1-头：日期、所学内容出处-9">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Xh411S7bP?p=79&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Xh411S7bP?p=79&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-标题-9">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">070</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（一）_声明和访问</span><br><span class="line"><span class="number">071</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（二）_包对象</span><br><span class="line"><span class="number">072</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（三）_导包说明</span><br><span class="line"><span class="number">073</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（二）_类和对象</span><br><span class="line"><span class="number">074</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（一）_访问权限</span><br><span class="line"><span class="number">075</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（二）_构造器</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line"><span class="number">106</span>_尚硅谷<span class="variable">_Scala_</span>集合（三）_列表（二）_可变列表</span><br><span class="line"><span class="number">107</span>_尚硅谷<span class="variable">_Scala_</span>集合（四）<span class="variable">_Set</span>集合（一）_不可变<span class="built_in">Set</span></span><br><span class="line"><span class="number">108</span>_尚硅谷<span class="variable">_Scala_</span>集合（四）<span class="variable">_Set</span>集合（二）_可变<span class="built_in">Set</span></span><br><span class="line"><span class="number">109</span>_尚硅谷<span class="variable">_Scala_</span>集合（五）<span class="variable">_Map</span>集合（一）_不可变Map</span><br><span class="line"><span class="number">110</span>_尚硅谷<span class="variable">_Scala_</span>集合（五）<span class="variable">_Map</span>集合（二）_可变Map</span><br><span class="line"><span class="number">111</span>_尚硅谷<span class="variable">_Scala_</span>集合（六）_元组</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-9">3.所学内容概述</h2><h3 id="类和对象">类和对象</h3><h3 id="封装">封装</h3><h4 id="继承和多态">继承和多态</h4><h2 id="4-根据概述分章节描述-7">4.根据概述分章节描述</h2><h3 id="类和对象-2">类和对象</h3><p>定义属性语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">&quot;alice&quot;</span></span><br><span class="line"><span class="keyword">var</span> age : <span class="type">Int</span> = <span class="number">18</span></span><br><span class="line"><span class="meta">@BeanProperty</span>   <span class="comment">//自动生成get和set的属性方法 是标签</span></span><br><span class="line"><span class="keyword">var</span> sex : <span class="type">String</span> = _</span><br></pre></td></tr></table></figure><h4 id="封装-2">封装</h4><p>Scala默认权限是public 但是Scala没有public关键字</p><p>protected 为受保护权限，Scala 中受保护权限比 Java 中更严格，同类、子类可以访问，同包无法访问。</p><p>private[包名]增加包访问权限，包名下的其他类也可以使用 <code>不加包名就是私有的只能在类的内部和伴生对象中使用</code></p><h5 id="构造器">构造器</h5><p>和Java区别有点大，主构造器是不用声明的。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">类名</span>(<span class="params">形参列表</span>) </span>&#123; <span class="comment">// 主构造器</span></span><br><span class="line"> <span class="comment">// 类体</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(形参列表) &#123; <span class="comment">// 辅助构造器</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(形参列表) &#123; <span class="comment">//辅助构造器可以有多个...</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承和多态-2">继承和多态</h4><p>语法和Java一样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类会继承父类的属性和方法 同样都是单继承(一个子类只能有一个父类)</p><p>继承的调用顺序：父类构造器-&gt;子类构造器</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">nameParam: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> name = nameParam</span><br><span class="line"> <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(nameParam: <span class="type">String</span>, ageParam: <span class="type">Int</span>) &#123;</span><br><span class="line"> <span class="keyword">this</span>(nameParam)</span><br><span class="line"> <span class="keyword">this</span>.age = ageParam</span><br><span class="line"> println(<span class="string">&quot;父类辅助构造器&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> println(<span class="string">&quot;父类主构造器&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">nameParam: <span class="type">String</span>, ageParam: <span class="type">Int</span></span>) <span class="keyword">extends</span> </span></span><br><span class="line"><span class="type">Person</span>(nameParam, ageParam) &#123;</span><br><span class="line"> <span class="keyword">var</span> empNo: <span class="type">Int</span> = _</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(nameParam: <span class="type">String</span>, ageParam: <span class="type">Int</span>, empNoParam: <span class="type">Int</span>) &#123;</span><br><span class="line"> <span class="keyword">this</span>(nameParam, ageParam)</span><br><span class="line"> <span class="keyword">this</span>.empNo = empNoParam</span><br><span class="line"> println(<span class="string">&quot;子类的辅助构造器&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">   println(<span class="string">&quot;子类主构造器&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"> <span class="keyword">new</span> <span class="type">Emp</span>(<span class="string">&quot;z3&quot;</span>, <span class="number">11</span>,<span class="number">1001</span>)</span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>上面案例的运行结果是</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719105724978.png" alt="image-20220719105724978"></p><p>验证了继承，创建对象先调用父类的构造器</p><h5 id="多态">多态</h5><p>动态绑定</p><p><code>Scala 中属性和方法都是动态绑定，而 Java 中只有方法为动态绑定。</code></p><p>自己写了一个Java一个Scala的代码验证</p><p>Java多态代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBind</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PersonByJava</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonByJava</span>();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        person.hello();</span><br><span class="line"></span><br><span class="line">        <span class="type">PersonByJava</span> <span class="variable">studentByJava</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentByJava</span>();</span><br><span class="line">        System.out.println(studentByJava.name);</span><br><span class="line">        studentByJava.hello();</span><br><span class="line"></span><br><span class="line">        <span class="type">StudentByJava</span> <span class="variable">studentByJava1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentByJava</span>();</span><br><span class="line">        System.out.println(studentByJava1.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonByJava</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentByJava</span> <span class="keyword">extends</span> <span class="title class_">PersonByJava</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;student&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala多态代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test08_DynamicBind</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> student: <span class="type">Person8</span> = <span class="keyword">new</span> <span class="type">Student8</span></span><br><span class="line">    println(student.name)</span><br><span class="line">    student.hello()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person8</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;person&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello person&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student8</span> <span class="keyword">extends</span> <span class="title">Person8</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;student&quot;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello student&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719110732747.png" alt="image-20220719110732747"></p><p>可见Scala的动态绑定更为的完善，Java是没有属性绑定的，Scala有。</p><h4 id="重写">重写</h4><p>Scala重写父类的属性和方法的时候，除了类型和名称一样(和java一样)，还要在属性和方法前面加上oberride修饰</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student8</span> <span class="keyword">extends</span> <span class="title">Person8</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;student&quot;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello student&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的好处显而易见，更为清楚明了的 告知该方法或者属性是父类重写的。</p><h4 id="抽象类">抽象类</h4><p>Scala和Java一模一样，声明方法也差不多</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test09_abstract</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> teacher = <span class="keyword">new</span> <span class="type">Teacher9</span>()</span><br><span class="line">    teacher.hello9()</span><br><span class="line">    println(teacher.name)</span><br><span class="line">    <span class="comment">// 匿名子类  和 Java 一样，可以通过包含带有定义或重写的代码块的方式创建一个匿名的子类。</span></span><br><span class="line">    <span class="keyword">val</span> workers = <span class="keyword">new</span> <span class="type">Person9</span> &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;workers&quot;</span></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello9</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;hello worker&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    workers.hello9()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abstract 声明</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person9</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name: <span class="type">String</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello9</span></span>() : <span class="type">Unit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher9</span> <span class="keyword">extends</span> <span class="title">Person9</span></span>&#123; <span class="comment">//继承抽象类 要重写方法 如果不重写就可以不加override</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;teacher&quot;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello9</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;hello 9 abstract and teacher&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="伴生对象">伴生对象</h4><p>伴生对象是Scala所独有的，可以通过伴生对象设计单例设计模式 懒汉式和饿汉式</p><p>基础伴生对象使用，将主构造器设计为私有，通过伴生类去调用 推荐使用apply 可以省略方法名 直接创建(和python创建对象一样了就)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test10_Object</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（3）伴生对象中的属性和方法都可以通过伴生对象名（类名）直接调用访问。</span></span><br><span class="line"><span class="comment">//    val student = new Person10(&quot;alice&quot;,18)</span></span><br><span class="line"><span class="comment">//    student.printInfo()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> person2 = <span class="type">Person10</span>.newPerson10(<span class="string">&quot;alice&quot;</span>,<span class="number">18</span>)</span><br><span class="line">    person2.printInfo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> person3 = <span class="type">Person10</span>.apply(<span class="string">&quot;bob&quot;</span>,<span class="number">29</span>) <span class="comment">//使用apply方法</span></span><br><span class="line">    person3.printInfo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> person4 = <span class="type">Person10</span>(<span class="string">&quot;akko&quot;</span>,<span class="number">35</span>) <span class="comment">// apply可以省略</span></span><br><span class="line">    person4.printInfo()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）伴生对象采用 object 关键字声明</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person10</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">newPerson10</span></span>(name:<span class="type">String</span>,age:<span class="type">Int</span>): <span class="type">Person10</span> = <span class="keyword">new</span> <span class="type">Person10</span>(name,age)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name:<span class="type">String</span>,age:<span class="type">Int</span>): <span class="type">Person10</span> = <span class="keyword">new</span> <span class="type">Person10</span>(name,age)  <span class="comment">//apply写方法去调用构造器</span></span><br><span class="line">  <span class="comment">//相当于静态存在</span></span><br><span class="line">  <span class="keyword">var</span> school: <span class="type">String</span> = <span class="string">&quot;ZhongCe&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（2）伴生对象对应的类称之为伴生类，伴生对象的名称应该和伴生类名一致。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person10</span> <span class="title">private</span>(<span class="params">val name : <span class="type">String</span>,val age : <span class="type">Int</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">s&quot;student: name = <span class="subst">$name</span> ,age = <span class="subst">$age</span> , school = <span class="subst">$&#123;Person10.school&#125;</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特质">特质</h4><p>Scala 语言中，采用特质 trait（特征）来代替接口的概念，也就是说，多个类具有相同的特质时，就可以将这个特质（独立出来，采用关键字 trait 声明。可写可不写 。<code>与接口不同的是，它还可以定义属性和方法的实现。</code></p><p>我认为和java里一样，是因为都是单继承语言，然后通过这样的方式，对单继承机制的补充 <code>单继承多实现</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test12_Trait</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> student12: <span class="type">Student12</span>= <span class="keyword">new</span> <span class="type">Student12</span></span><br><span class="line">    student12.sysHello()</span><br><span class="line">    student12.study()</span><br><span class="line">    student12.dating()</span><br><span class="line">    student12.play()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person12</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;person&quot;</span></span><br><span class="line">  <span class="keyword">val</span> age: <span class="type">Int</span> = <span class="number">18</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sysHello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello from: &quot;</span> + name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//特质</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Young</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义抽象或者非抽象的属性和方法都可以</span></span><br><span class="line">  <span class="keyword">val</span> age: <span class="type">Int</span> <span class="comment">//抽象</span></span><br><span class="line">  <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;young&quot;</span> <span class="comment">//非抽象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//抽象和非抽象方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">play</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;young people is playing&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dating</span></span>():<span class="type">Unit</span> <span class="comment">//抽象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student12</span> <span class="keyword">extends</span> <span class="title">Person12</span> <span class="keyword">with</span> <span class="title">Young</span> </span>&#123;</span><br><span class="line">  <span class="comment">//重写冲突的属性</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;student&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> age: <span class="type">Int</span> = <span class="number">19</span></span><br><span class="line">  <span class="comment">//实现抽象方法</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dating</span></span>(): <span class="type">Unit</span> = println(<span class="string">s&quot;student <span class="subst">$name</span> is dating&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">study</span></span>(): <span class="type">Unit</span> = println(<span class="string">s&quot;student <span class="subst">$name</span> is study&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重写父类方法</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sysHello</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">super</span>.sysHello()</span><br><span class="line">    println(<span class="string">s&quot;hello from: student <span class="subst">$name</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特质混用</p><p>其实就是类似于Java中一个类实现多个接口一样的概念，Java中已有的接口都可以当作Scala的特质直接使用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">PersonTrait</span> <span class="keyword">with</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line"> println(<span class="string">&quot;say&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">override</span> <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Teacher</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//所谓动态混用就是一个类用两个特质</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">with</span> <span class="title">Teacher</span> <span class="keyword">with</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特质和抽象类的使用场景</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.优先使用特质。一个类扩展多个特质是很方便的，但却只能扩展一个抽象类。</span><br><span class="line">2.如果你需要构造函数参数，使用抽象类。因为抽象类可以定义带参数的构造函数，而特质不行（有无参构造）。</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-4">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>类和对象代码打完，发现运行的时候，IDEA运行的界面都没了，后面检查，发现编译没错，那就是运行错误，看提示是类的原因，结果发现自己没写main类，无法运行，Scala的这点和Java是一样的。</p><p><img src="https://docimg3.docs.qq.com/image/o6Ax0mlG8JjME539efv5-Q.png?w=1822&amp;h=1013" alt="img"></p><p>看报错信息，是name的问题，检查了一遍代码发现了问题，特质中声明了name，父类person也声明了name。student子类又继承又实现，应该是运行的时候，不知道调用哪个，解决办法：子类自己重写方法，让name属性使用自己的。修改完又报错，翻译是age接口的问题，var要重写set和get方法，想想算了，就把var改成了val常量，正常运行了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719170042441.png" alt="image-20220719170042441"></p><h2 id="6-扩展学习部分-4">6.扩展学习部分</h2><p>上面的第二个错误，我看弹幕也有很多人这样，就去搜了一次Scala特质这种冲突问题，发现是有解释和方法解决的。</p><p>由于一个类可以混入多个 trait，且 trait 中可以有具体的属性和方法，若混入的特质中具有相同的方法（方法名，参数列表，返回值均相同），必然会出现继承冲突问题。冲突分为以下两种：<code>继承的父类也算</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719234527002.png" alt="image-20220719234527002"></p><p>我就是上图的第一种，并没有什么关联的，重写冲突方法或者属性就好了。</p><h3 id="特质叠加">特质叠加</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719235950669.png" alt="image-20220719235950669"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;ball&quot;</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Color</span> <span class="keyword">extends</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;blue-&quot;</span> + <span class="keyword">super</span>.describe()</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;foot-&quot;</span> + <span class="keyword">super</span>.describe()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBall</span> <span class="keyword">extends</span> <span class="title">Category</span> <span class="keyword">with</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;my ball is a &quot;</span> + <span class="keyword">super</span>.describe()</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestTrait</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"> println(<span class="keyword">new</span> <span class="type">MyBall</span>().describe())</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图就是钻石问题了。运行结果：my ball is a blue-foot-ball</p><p><strong>MyClass</strong> <strong>中的</strong> <strong>super</strong> 指代Color,Color <strong>中的</strong> <strong>super</strong> <strong>指代</strong> **Category，**Category <strong>中的</strong> <strong>super</strong>指代 <strong>Ball</strong>。</p><p>那么叠加顺序就是</p><p>MyClass ----Color ----Category—Ball</p><h2 id="7-总结-5">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天Scala的学习内容是面向对象这块，也是学完了，前面的封装以及继承等和Java基本没有改动，只是优化了权限。抽象类也没变化，Scala面向对象的特别之处就是升级版的接口了，特质，这点也是比较重要的点，存在一定的难度。看文档没有很会，就又去看了一遍视频，结合文档，特质的基本使用已经掌握了，还有一些混用等，代码敲多了，掌握清除没什么问题，今天的学习状态和过程都不错， 明天进入集合和元组的学习，希望能保持今天的劲头。</p><h1>7.20 数组和集合</h1><h2 id="1-头：日期、所学内容出处-10">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-10">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">P91</span><br><span class="line"><span class="number">091</span>_尚硅谷<span class="variable">_Scala_</span>集合（一）_集合类型系统</span><br><span class="line">P92</span><br><span class="line"><span class="number">092</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（一）_创建数组</span><br><span class="line">P93</span><br><span class="line"><span class="number">093</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（二）_访问和修改元素</span><br><span class="line">P94</span><br><span class="line"><span class="number">094</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（三）_遍历数组</span><br><span class="line">P95</span><br><span class="line"><span class="number">095</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（四）_添加元素</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line"><span class="number">141</span>_尚硅谷<span class="variable">_Scala_</span>泛型（一）_概念和意义</span><br><span class="line">P142</span><br><span class="line"><span class="number">142</span>_尚硅谷<span class="variable">_Scala_</span>泛型（二）_逆变和协变</span><br><span class="line">P143</span><br><span class="line"><span class="number">143</span>_尚硅谷<span class="variable">_Scala_</span>泛型（三）_上下限</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-10">3.所学内容概述</h2><h3 id="Scasla集合简介">Scasla集合简介</h3><h4 id="数组">数组</h4><h5 id="列表">列表</h5><h5 id="set集合">set集合</h5><h5 id="Map集合">Map集合</h5><h5 id="元组">元组</h5><h5 id="常用函数-方法">常用函数 方法</h5><h5 id="队列">队列</h5><h5 id="并行集合">并行集合</h5><h5 id="模式匹配">模式匹配</h5><h5 id="异常处理">异常处理</h5><h2 id="4-根据概述分章节描述-8">4.根据概述分章节描述</h2><h3 id="Scala集合简介">Scala集合简介</h3><p>将Java三大集合照搬了，修改了List为Seq，但是List在Scala还存在</p><p>Scala 的集合有三大类：序列 Seq、集 Set、映射 Map，所有的集合都扩展自 Iterable特质。</p><p>对于几乎所有的集合类，Scala 都同时提供了<strong>可变</strong>和<strong>不可变</strong>的版本</p><p><code>Scala 不可变集合，就是指该集合对象不可修改，每次修改就会返回一个新对象</code></p><p><code>可变集合，就是这个集合可以直接对原对象进行修改，而不会返回新的对象。</code></p><h3 id="数组-2">数组</h3><p>可变和不可变都放下面的案例练习了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter03</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_Array</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//不可变数组</span></span><br><span class="line">    <span class="keyword">val</span> arr01 = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">9</span>)</span><br><span class="line">    arr01.update(<span class="number">1</span>,<span class="number">4</span>) <span class="comment">//指定位置 添加元素 也可以修改</span></span><br><span class="line">    println(arr01.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看数组 ,隔开</span></span><br><span class="line"><span class="comment">//    arr01.foreach(println)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> arr1 = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="string">&quot;jack&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;arr1长度:&quot;</span> + arr1.length)</span><br><span class="line">    arr1.foreach(print)</span><br><span class="line">    println()</span><br><span class="line">    println(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">    <span class="comment">//（4）增加元素（由于创建的是不可变数组，增加元素，其实是产生新的数组）</span></span><br><span class="line">    println(arr01)</span><br><span class="line">    <span class="keyword">val</span> ints: <span class="type">Array</span>[<span class="type">Int</span>] = arr01 :+ <span class="number">5</span></span><br><span class="line">    println(ints)</span><br><span class="line">    println(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    可变数组</span></span><br><span class="line">    <span class="keyword">val</span> arr2 = <span class="type">ArrayBuffer</span>[<span class="type">Any</span>](<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;helen&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;arr2长度:&quot;</span> +arr2.length)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"><span class="comment">//    arr2.foreach(println)</span></span><br><span class="line">    println(<span class="string">&quot;arr2.hash= &quot;</span> + arr2.hashCode())</span><br><span class="line">    <span class="comment">//（3）增加元素</span></span><br><span class="line">    <span class="comment">//（3.1）追加数据</span></span><br><span class="line">    arr2.+=(<span class="number">4</span>)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（3.2）向数组最后追加数据</span></span><br><span class="line">    arr2.append(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（3.3）向指定的位置插入数据 第一位指定下标位置 后面加多少数据都行</span></span><br><span class="line">    arr2.insert(<span class="number">1</span>,<span class="number">7</span>,<span class="number">0.8</span>)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;arr2.hash= &quot;</span> + arr2.hashCode())</span><br><span class="line"><span class="comment">//    修改</span></span><br><span class="line">    arr2(<span class="number">5</span>) = <span class="string">&quot;kiss&quot;</span> <span class="comment">//修改指定下标的值</span></span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">arr1长度:<span class="number">7</span></span><br><span class="line"><span class="number">145669</span>jack</span><br><span class="line">-----------------------</span><br><span class="line">[<span class="type">I</span>@<span class="number">22</span>f71333</span><br><span class="line">[<span class="type">I</span>@<span class="number">13969</span>fbe</span><br><span class="line">-----------------------</span><br><span class="line">arr2长度:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,helen</span><br><span class="line">arr2.hash= <span class="number">100581814</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,helen,<span class="number">4</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,helen,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"><span class="number">1</span>,<span class="number">7</span>,<span class="number">0.8</span>,<span class="number">2</span>,<span class="number">3</span>,helen,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">arr2.hash= <span class="number">-18482605</span></span><br><span class="line"><span class="number">1</span>,<span class="number">7</span>,<span class="number">0.8</span>,<span class="number">2</span>,<span class="number">3</span>,kiss,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="type">Process</span> finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="可变数组和不可变数组的转换">可变数组和不可变数组的转换</h4><p>对原本的数组没有改变，方法返回一个新数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换说明</span></span><br><span class="line">arr1.toBuffer <span class="comment">//不可变数组转可变数组</span></span><br><span class="line">arr2.toArray <span class="comment">//可变数组转不可变数组</span></span><br><span class="line">（<span class="number">1</span>）arr2.toArray 返回结果才是一个不可变数组，arr2 本身没有变化</span><br><span class="line">（<span class="number">2</span>）arr1.toBuffer 返回结果才是一个可变数组，arr1 本身没有变化</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_ArrayChange</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> arr2 = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]() <span class="comment">//创建可变数组</span></span><br><span class="line">    arr2.append(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)<span class="comment">//添加值</span></span><br><span class="line">    println(arr2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（3）ArrayBuffer ==&gt; Array</span></span><br><span class="line">    <span class="comment">//（3.1）arr2.toArray 返回的结果是一个新的定长数组集合</span></span><br><span class="line">    <span class="comment">//（3.2）arr2 它没有变化</span></span><br><span class="line">    <span class="keyword">val</span> newArr:<span class="type">Array</span>[<span class="type">Int</span>] = arr2.toArray</span><br><span class="line">    println(newArr.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（4）Array ===&gt; ArrayBuffer</span></span><br><span class="line">    <span class="comment">//（4.1）newArr.toBuffer 返回一个变长数组 newArr2</span></span><br><span class="line">    <span class="comment">//（4.2）newArr 没有任何变化，依然是定长数组</span></span><br><span class="line">    <span class="keyword">val</span> newArr2 = newArr.toBuffer</span><br><span class="line">    newArr2.append(<span class="number">123</span>)</span><br><span class="line">    println(newArr2)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多维数组</p><p>这个和Java一样，用处也不是很大感觉，过了一遍，很容易理解</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test03_DimArray</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建了一个二维数组, 有三个元素，每个元素是，含有 4 个元素一维数组()</span></span><br><span class="line">    <span class="keyword">val</span> arr = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    arr(<span class="number">1</span>)(<span class="number">2</span>) = <span class="number">88</span></span><br><span class="line">    <span class="comment">//遍历二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- arr)&#123; <span class="comment">//此时i是三个一维数组</span></span><br><span class="line">      <span class="keyword">for</span> (j &lt;- i)&#123;</span><br><span class="line">        print(j + <span class="string">&quot; &quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      println()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表List">列表List</h3><h4 id="不可变List">不可变List</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test04_List</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）List 默认为不可变集合</span></span><br><span class="line">    <span class="comment">//（2）创建一个 List（数据有顺序，可重复）</span></span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">//(3)遍历查看列表 打印</span></span><br><span class="line">    list.foreach(println)</span><br><span class="line">    println(list.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line">    <span class="comment">//（4）List 增加数据</span></span><br><span class="line">    <span class="comment">//（4.1）::的运算规则从右向左</span></span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="number">7</span> :: <span class="number">9</span> :: <span class="number">8</span> :: list</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> list2 = list1 .+:(<span class="number">10</span>) <span class="comment">//将10添加到数组的第一位创造新数组</span></span><br><span class="line">    println(list2.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> list3 = <span class="type">List</span>(<span class="number">8</span>,<span class="number">9</span>,<span class="number">53</span>)</span><br><span class="line">    <span class="keyword">val</span> list4 = list3 ::: list2 <span class="comment">//list3元素在左 list2在右 成一个新数组list4</span></span><br><span class="line">    println(list4.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1--2--3--4--3</span></span><br><span class="line"><span class="comment">7--9--8--1--2--3--4--3</span></span><br><span class="line"><span class="comment">10--7--9--8--1--2--3--4--3</span></span><br><span class="line"><span class="comment">8,9,53,10,7,9,8,1,2,3,4,3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="可变ListBuffer">可变ListBuffer</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test05_ListChange</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建一个可变集合</span></span><br><span class="line">    <span class="keyword">val</span> buffer = <span class="type">ListBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="comment">//（2）向集合中添加数据</span></span><br><span class="line">    buffer.+=(<span class="number">5</span>)</span><br><span class="line">    buffer.append(<span class="number">6</span>)</span><br><span class="line">    buffer.insert(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment">//（3）打印集合数据</span></span><br><span class="line">    buffer.foreach(print)</span><br><span class="line">    println()</span><br><span class="line">    println(buffer.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="comment">//（4）修改数据</span></span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">6</span></span><br><span class="line">    buffer.update(<span class="number">1</span>,<span class="number">7</span>)</span><br><span class="line">    <span class="comment">//（5）删除数据</span></span><br><span class="line">    buffer.-(<span class="number">5</span>)</span><br><span class="line">    buffer.-=(<span class="number">5</span>)</span><br><span class="line">    buffer.remove(<span class="number">5</span>)</span><br><span class="line">    println(buffer.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set集合">Set集合</h3><p>Set 默认是不可变集合，数据无序 数据不能重复</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test06_Set</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）Set 默认是不可变集合，数据无序</span></span><br><span class="line">    <span class="keyword">val</span> set = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">    println(set.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//5,1,2,7,3,4</span></span><br><span class="line">    <span class="comment">//（2）数据不可重复</span></span><br><span class="line">    <span class="keyword">val</span> set1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">//（3）遍历集合</span></span><br><span class="line">    <span class="keyword">for</span>(x&lt;-set1)&#123; <span class="comment">//5 1 6 2 3 4 3取消一个因为不能重复</span></span><br><span class="line">      println(x)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mutable-Set可变集合">mutable.Set可变集合</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test07_MutableSet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建可变集合</span></span><br><span class="line">    <span class="keyword">val</span> set = mutable.<span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">    println(set.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    set += <span class="number">8</span> <span class="comment">//集合添加元素</span></span><br><span class="line">    println(set.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="comment">//（4）向集合中添加元素，返回一个新的 Set</span></span><br><span class="line">    <span class="keyword">val</span> ints = set.+(<span class="number">9</span>)</span><br><span class="line">    println(ints)</span><br><span class="line">    println(<span class="string">&quot;set2=&quot;</span> + set)</span><br><span class="line">    <span class="comment">//（5）删除数据</span></span><br><span class="line">    set-=(<span class="number">5</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map集合-2">Map集合</h3><p>Scala 中的 Map 和 Java 类似，<strong>也是一个散列表</strong>，它存储的内容也是键值对（<strong>key-value</strong>）映射</p><p><code>不变的Map是有序的 可变的Map是无序的</code></p><h4 id="不可变Map">不可变Map</h4><p>如果 key 不存在，返回 0</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test08_Map</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="comment">//Map</span></span><br><span class="line">   <span class="comment">//（1）创建不可变集合 Map</span></span><br><span class="line">    <span class="keyword">val</span> map = <span class="type">Map</span>( <span class="string">&quot;a&quot;</span>-&gt;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;b&quot;</span>-&gt;<span class="number">2</span>, <span class="string">&quot;c&quot;</span>-&gt;<span class="number">3</span> )</span><br><span class="line">    map.foreach(println)<span class="comment">//打印键值对 带括号的</span></span><br><span class="line">    <span class="comment">//3.访问数据 格式为 keys = Value</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- map.keys)&#123;</span><br><span class="line">      <span class="comment">//使用get访问map集合的数据，会返回特殊Option选项：有值 无值</span></span><br><span class="line">      println(elem + <span class="string">&quot;=&quot;</span> + map(elem))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（4）如果 key 不存在，返回 ,后面的值</span></span><br><span class="line">    println(map.getOrElse(<span class="string">&quot;s&quot;</span>,<span class="number">5</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">(a,A)</span></span><br><span class="line"><span class="comment">(b,2)</span></span><br><span class="line"><span class="comment">(c,3)</span></span><br><span class="line"><span class="comment">a=A</span></span><br><span class="line"><span class="comment">b=2</span></span><br><span class="line"><span class="comment">c=3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h4 id="可变Map">可变Map</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test09_MapChange</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建可变集合</span></span><br><span class="line">    <span class="keyword">val</span> map = mutable.<span class="type">Map</span>( <span class="string">&quot;a&quot;</span>-&gt;<span class="number">1</span>, <span class="string">&quot;b&quot;</span>-&gt;<span class="number">2</span>, <span class="string">&quot;c&quot;</span>-&gt;<span class="number">3</span> )</span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line">    <span class="comment">//（3）向集合增加数据</span></span><br><span class="line">    map.+=(<span class="string">&quot;d&quot;</span>-&gt;<span class="number">4</span>)</span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数值 4 添加到集合，并把集合中a原值 1 返回</span></span><br><span class="line">    <span class="keyword">val</span> maybeInt = map.put(<span class="string">&quot;a&quot;</span>, <span class="number">4</span>) <span class="comment">// 相当于修改 有返回值</span></span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line">    println(maybeInt)</span><br><span class="line">    println(maybeInt.getOrElse(<span class="number">0</span>)) <span class="comment">//获取返回值</span></span><br><span class="line">    <span class="comment">//删除键 对应的值也会删除</span></span><br><span class="line">    println(map.-=(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>))</span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（5）修改数据 键对应的值</span></span><br><span class="line">    map.update(<span class="string">&quot;d&quot;</span>,<span class="number">5</span>)</span><br><span class="line">    map(<span class="string">&quot;a&quot;</span>) = <span class="number">1</span></span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">b -&gt; 2 , a -&gt; 1 , c -&gt; 3</span></span><br><span class="line"><span class="comment">b -&gt; 2 , d -&gt; 4 , a -&gt; 1 , c -&gt; 3</span></span><br><span class="line"><span class="comment">b -&gt; 2 , d -&gt; 4 , a -&gt; 4 , c -&gt; 3</span></span><br><span class="line"><span class="comment">Some(1)</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">Map(d -&gt; 4, a -&gt; 4)</span></span><br><span class="line"><span class="comment">d -&gt; 4 , a -&gt; 4</span></span><br><span class="line"><span class="comment">d -&gt; 5 , a -&gt; 1</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h3 id="元组-2">元组</h3><p>元组算是一个容器，可以这么理解，就是可加将很多无关的数据封装为一个整体 元组最大只能有22个元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test10_Tuple</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）声明元组的方式：(元素 1，元素 2，元素 3)</span></span><br><span class="line">    <span class="keyword">val</span> tuple = (<span class="number">40</span>,<span class="string">&quot;bobo&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">//（2）访问元组</span></span><br><span class="line">    <span class="comment">//（2.1）通过元素的顺序进行访问，调用方式：_顺序号</span></span><br><span class="line">    println(tuple._1)</span><br><span class="line">    println(tuple._2)</span><br><span class="line">    println(tuple._3)</span><br><span class="line">    <span class="comment">//（2.2）通过索引访问数据</span></span><br><span class="line">    println(tuple.productElement(<span class="number">1</span>))</span><br><span class="line">    <span class="comment">//（2.3）通过迭代器访问数据</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- tuple.productIterator) &#123;</span><br><span class="line">      println(elem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//（3）Map 中的键值对其实就是元组,只不过元组的元素个数为 2，称之为 对偶</span></span><br><span class="line">    <span class="keyword">val</span> map = <span class="type">Map</span>(<span class="string">&quot;a&quot;</span>-&gt;<span class="number">1</span>, <span class="string">&quot;b&quot;</span>-&gt;<span class="number">2</span>, <span class="string">&quot;c&quot;</span>-&gt;<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> map1 = <span class="type">Map</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>), (<span class="string">&quot;b&quot;</span>,<span class="number">2</span>), (<span class="string">&quot;c&quot;</span>,<span class="number">3</span>))</span><br><span class="line">    map.foreach(tuple1=&gt;&#123;println(tuple1._1 + <span class="string">&quot;=&quot;</span> + tuple1._2)&#125;)</span><br><span class="line">    map1.foreach(tuple1=&gt;&#123;println(tuple1._1 + <span class="string">&quot;=&quot;</span> + tuple1._2)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment">bobo</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">bobo</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment">bobo</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">a=1</span></span><br><span class="line"><span class="comment">b=2</span></span><br><span class="line"><span class="comment">c=3</span></span><br><span class="line"><span class="comment">a=1</span></span><br><span class="line"><span class="comment">b=2</span></span><br><span class="line"><span class="comment">c=3</span></span><br></pre></td></tr></table></figure><h3 id="集合常用函数">集合常用函数</h3><p><strong>基本属性和常用操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_TestList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="comment">//（1）获取集合长度</span></span><br><span class="line">    println(list.length)</span><br><span class="line">    <span class="comment">//（2）获取集合大小,等同于 length</span></span><br><span class="line">    println(list.size)</span><br><span class="line">    <span class="comment">//（3）循环遍历</span></span><br><span class="line">    list.foreach(println)</span><br><span class="line">    <span class="comment">//（4）迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- list.iterator) &#123;</span><br><span class="line">      println(elem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//（5）生成字符串</span></span><br><span class="line">    println(list.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">//（6）是否包含</span></span><br><span class="line">    println(list.contains(<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7</span></span><br><span class="line"><span class="comment">true</span></span><br></pre></td></tr></table></figure><h4 id="衍生集合">衍生集合</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_TestListPlus</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">val</span> list2: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">//（1）获取集合的头</span></span><br><span class="line">    println(list1.head)</span><br><span class="line">    <span class="comment">//（2）获取集合的尾（不是头的就是尾 除去第一个）</span></span><br><span class="line">    println(list1.tail)</span><br><span class="line">    <span class="comment">//（3）集合最后一个数据</span></span><br><span class="line">    println(list1.last)</span><br><span class="line">    <span class="comment">//（4）集合初始数据 除去最后一个</span></span><br><span class="line">    println(list1.init)</span><br><span class="line">    <span class="comment">//（5）反转</span></span><br><span class="line">    println(list1.reverse)</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看当前数据顺序</span></span><br><span class="line">    <span class="comment">//（6）取前（后）n 个元素</span></span><br><span class="line">    println(list1.take(<span class="number">4</span>)) <span class="comment">//获取前四个</span></span><br><span class="line">    println(list1.takeRight(<span class="number">3</span>)) <span class="comment">//获取后四个</span></span><br><span class="line">    <span class="comment">//（7）去掉前（后）n 个元素</span></span><br><span class="line">    println(list1.drop(<span class="number">3</span>))</span><br><span class="line">    println(list1.dropRight(<span class="number">3</span>))</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看当前数据顺序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//（8）并集</span></span><br><span class="line">    println(list1.union(list2)) <span class="comment">//重复的也会存在</span></span><br><span class="line">    <span class="comment">//（9）交集</span></span><br><span class="line">    println(list1.intersect(list2))</span><br><span class="line">    <span class="comment">//（10）差集</span></span><br><span class="line">    println(list1.diff(list2))</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看当前数据顺序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//（11）滑窗</span></span><br><span class="line">    list1.sliding(<span class="number">2</span>, <span class="number">5</span>).foreach(println) <span class="comment">// 长度为2输出 从头开始 一次5位步长 1 2 3 4 5 6 7 11</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//（11）拉链 注:如果两个集合的元素个数不相等，那么会将同等数量的数据进行拉链，多余的数据省略不用 取小的</span></span><br><span class="line">    println(<span class="string">&quot;拉链&quot;</span>)</span><br><span class="line">    println(list1.zip(list2)) <span class="comment">//说白了就是上下对应生成一个新二维列表，二维列表里的列表是两个元素</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">List(2, 3, 4, 5, 6, 7, 11)</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5, 6, 7)</span></span><br><span class="line"><span class="comment">List(11, 7, 6, 5, 4, 3, 2, 1)</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7,11</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">List(6, 7, 11)</span></span><br><span class="line"><span class="comment">List(4, 5, 6, 7, 11)</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7,11</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5, 6, 7, 11, 4, 5, 6, 7, 8, 9, 10)</span></span><br><span class="line"><span class="comment">List(4, 5, 6, 7)</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 11)</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7,11</span></span><br><span class="line"><span class="comment">List(1, 2)</span></span><br><span class="line"><span class="comment">List(6, 7)</span></span><br><span class="line"><span class="comment">拉链</span></span><br><span class="line"><span class="comment">List((1,4), (2,5), (3,6), (4,7), (5,8), (6,9), (7,10))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h4 id="集合计算简单函数">集合计算简单函数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test03_ListMath</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">-7</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">//（1）求和</span></span><br><span class="line">    println(list.sum)</span><br><span class="line">    <span class="comment">//（2）求乘积</span></span><br><span class="line">    println(list.product)</span><br><span class="line">    <span class="comment">//（3）最大值</span></span><br><span class="line">    println(list.max)</span><br><span class="line">    <span class="comment">//（4）最小值</span></span><br><span class="line">    println(list.min)</span><br><span class="line">    <span class="comment">//（5）排序</span></span><br><span class="line">    println(list.sorted) <span class="comment">// 自然排序</span></span><br><span class="line">    <span class="comment">// （5.1）按照元素大小排序</span></span><br><span class="line">    println(list.sortBy(x =&gt; x))</span><br><span class="line">    <span class="comment">// （5.2）按照元素的绝对值大小排序</span></span><br><span class="line">    println(list.sortBy(x =&gt; x.abs))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （5.3）按元素大小升序排序</span></span><br><span class="line">    println(list.sortWith((x, y) =&gt; x &lt; y))</span><br><span class="line">    <span class="comment">// （5.4）按元素大小降序排序</span></span><br><span class="line">    println(list.sortWith((x, y) =&gt; x &gt; y))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">5040</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">-7</span></span><br><span class="line"><span class="comment">List(-7, -3, 1, 2, 4, 5, 6)</span></span><br><span class="line"><span class="comment">List(-7, -3, 1, 2, 4, 5, 6)</span></span><br><span class="line"><span class="comment">List(1, 2, -3, 4, 5, 6, -7)</span></span><br><span class="line"><span class="comment">List(-7, -3, 1, 2, 4, 5, 6)</span></span><br><span class="line"><span class="comment">List(6, 5, 4, 2, 1, -3, -7)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br></pre></td></tr></table></figure><h3 id="集合计算高级函数">集合计算高级函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test04_HighLevelFunction_Map</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line">    <span class="comment">//1.过滤</span></span><br><span class="line">    <span class="comment">//选取偶数</span></span><br><span class="line">    println(list.filter(_ % <span class="number">2</span> == <span class="number">0</span> ))</span><br><span class="line">    <span class="comment">//选取奇数</span></span><br><span class="line">    println(list.filter(_ % <span class="number">2</span> == <span class="number">1</span> ))</span><br><span class="line">    println(<span class="string">&quot;=========================&quot;</span>)</span><br><span class="line">    <span class="comment">//2.map</span></span><br><span class="line">    <span class="comment">//集合元素映射</span></span><br><span class="line">    println(list.map(_ * <span class="number">2</span>)) <span class="comment">//集合每个数乘2</span></span><br><span class="line">    println(list.map(x =&gt; x * x)) <span class="comment">//集合每个数平方</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;=========================&quot;</span>)</span><br><span class="line">    <span class="comment">//3.扁平化</span></span><br><span class="line">    <span class="keyword">val</span> nestedList: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>),<span class="type">List</span>(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>))</span><br><span class="line">    println(nestedList.flatten)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.扁平化加映射 flatMap 相当于先进行 map 操作，在进行 flatten操作</span></span><br><span class="line">    <span class="keyword">val</span> wordList: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello atguigu&quot;</span>, <span class="string">&quot;hello scala&quot;</span>)</span><br><span class="line">    println(wordList.flatMap(_.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（5）分组</span></span><br><span class="line">    println(list.groupBy(_ % <span class="number">2</span> == <span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">List(2, 4, 6, 8)</span></span><br><span class="line"><span class="comment">List(1, 3, 5, 7, 9)</span></span><br><span class="line"><span class="comment">=========================</span></span><br><span class="line"><span class="comment">List(2, 4, 6, 8, 10, 12, 14, 16, 18)</span></span><br><span class="line"><span class="comment">List(1, 4, 9, 16, 25, 36, 49, 64, 81)</span></span><br><span class="line"><span class="comment">=========================</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line"><span class="comment">List(hello, world, hello, atguigu, hello, scala)</span></span><br><span class="line"><span class="comment">Map(false -&gt; List(1, 3, 5, 7, 9), true -&gt; List(2, 4, 6, 8))</span></span><br></pre></td></tr></table></figure><h3 id="队列-2">队列</h3><p>Scala 也提供了队列（Queue）的数据结构，队列的特点就是先进先出。进队和出队的方法分别为 enqueue 和 dequeue。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test11_Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> que = <span class="keyword">new</span> mutable.<span class="type">Queue</span>[<span class="type">String</span>]()</span><br><span class="line">    que.enqueue(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">    que.enqueue(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*看运行结果得知 队列是取的时候一个一个来，后面添加也不能插队取</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">T</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="并行集合-2">并行集合</h3><p>是一种利用多核CPU的集合，进行多核的并行运算</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test12_Par</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> result1 = (<span class="number">0</span> to <span class="number">100</span>).map(_ =&gt;  <span class="type">Thread</span>.currentThread.getName)</span><br><span class="line">    <span class="keyword">val</span> result2 = (<span class="number">0</span> to <span class="number">100</span>).par.map(_ =&gt; <span class="type">Thread</span>.currentThread.getName)</span><br><span class="line">    println(result1)</span><br><span class="line">    println(result2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220720144457598.png" alt="image-20220720144457598"></p><p>可见原本的集合是一直都是main线程，而par的则是利用了不同的核心，这样使得 集合创建和运行的效率大大提高。</p><h3 id="异常处理-2">异常处理</h3><p>和java一模一样，只有catch部分有区别，Catch在java中多异常的时候，多写几个Catch就好了，在Scala则是多写几个Case。具体实现代码如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_Exception</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> n= <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">      println(n)</span><br><span class="line"><span class="comment">//      println(&quot;abc&quot;.toInt)</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">ArithmeticException</span>=&gt;</span><br><span class="line">        <span class="comment">// 发生算术异常</span></span><br><span class="line">        println(<span class="string">&quot;发生算术异常&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Exception</span>=&gt;</span><br><span class="line">        <span class="comment">// 对异常处理</span></span><br><span class="line">        println(<span class="string">&quot;发生了异常 1&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;发生了异常 2&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      println(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>抛出异常 关键字和java一样都是throw</p><p>下面是自己写了一个异常处理嵌套的简单代码，我理解Scala和Java异常处理是没有大变化的</p><p>区别点在异常捕获机制等，看文档，不重要没有深究</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_ExceptionThrow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      test1()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Exception</span>=&gt; println(<span class="string">&quot;报错咯&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        f11()</span><br><span class="line">        <span class="comment">//      println(&quot;abc&quot;.toInt)</span></span><br><span class="line">      &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">ArithmeticException</span>=&gt;</span><br><span class="line">          <span class="comment">// 发生算术异常</span></span><br><span class="line">          println(<span class="string">&quot;发生算术异常0&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">Exception</span>=&gt;</span><br><span class="line">          <span class="comment">// 对异常处理</span></span><br><span class="line">          println(<span class="string">&quot;发生了异常 1&quot;</span>)</span><br><span class="line">          println(<span class="string">&quot;发生了异常 2&quot;</span>)</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@throws</span>(classOf[<span class="type">NumberFormatException</span>])</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f11</span></span>()=&#123;</span><br><span class="line">    <span class="string">&quot;abc&quot;</span>.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>(): <span class="type">Nothing</span> = &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">&quot;不可以哦&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式匹配-2">模式匹配</h3><p>我感觉像是switch的超级升级版，基础使用的话是差不多的，但是Scala用上闭包和柯里化，能让模式匹配变得很强大，可以代替If函数。</p><p>如下是基础使用，了解语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_MatchCase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;请输入第一个数字:&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> a: <span class="type">Int</span> = <span class="type">StdIn</span>.readInt()</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;请输入你要进行的操作 (+ - * /)&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> c = <span class="type">StdIn</span>.readChar()</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;请输入第二个数字:&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> b: <span class="type">Int</span> = <span class="type">StdIn</span>.readInt()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span></span>(x:<span class="type">Char</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &#x27;+&#x27; =&gt; a + b</span><br><span class="line">      <span class="keyword">case</span> &#x27;-&#x27; =&gt; a - b</span><br><span class="line">      <span class="keyword">case</span> &#x27;*&#x27; =&gt; a * b</span><br><span class="line">      <span class="keyword">case</span> &#x27;/&#x27; =&gt; a / b</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="string">&quot;illegal&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;请输入你要进行的操作 (+ - * /)&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> value = result(c)</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$a</span> <span class="subst">$c</span> <span class="subst">$b</span> = <span class="subst">$value</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过_来进行输入类型判断</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_MatchVal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(describe(<span class="number">6</span>))</span><br><span class="line">    <span class="comment">//泛型擦除</span></span><br><span class="line">    println(describe(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line">    <span class="comment">//数组例外，可保留泛型</span></span><br><span class="line">    println(describe(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)))</span><br><span class="line">    println(describe(<span class="type">Array</span>(<span class="string">&quot;abc&quot;</span>))) <span class="comment">//是java中lang包的泛型</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(x: <span class="type">Any</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; <span class="string">&quot;Int&quot;</span></span><br><span class="line">    <span class="keyword">case</span> s: <span class="type">String</span> =&gt; <span class="string">&quot;String hello&quot;</span></span><br><span class="line">    <span class="keyword">case</span> m: <span class="type">List</span>[_] =&gt; <span class="string">&quot;List&quot;</span></span><br><span class="line">    <span class="keyword">case</span> c: <span class="type">Array</span>[<span class="type">Int</span>] =&gt; <span class="string">&quot;Array[Int]&quot;</span></span><br><span class="line">    <span class="keyword">case</span> someThing =&gt; <span class="string">&quot;something else &quot;</span> + someThing</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Int</span></span><br><span class="line"><span class="comment">List</span></span><br><span class="line"><span class="comment">Array[Int]</span></span><br><span class="line"><span class="comment">something else [Ljava.lang.String;@6debcae2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p>模式匹配的用法很多，但大致使用都一样，就不一一列举了。</p><h2 id="5-BUG点-5">5.BUG点</h2><p>自己写扩展练习的时候，报错了，因为自己对Scala中元组的._这用法不是很熟悉，都是边看笔记边敲出来，看提示信息，是16行类型出现的问题，我先把前面声明类型删除了，让系统自己去匹配类型，结果后面又会有一条报错，来回检查发现x._2是Map变成的list，而我要做的的是统计次数，因此后面应该是x._2的size或者length方法，统计出list的长度。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220723111125032.png" alt="image-20220723111125032"></p><h2 id="6-扩展学习部分-5">6.扩展学习部分</h2><h3 id="记数排序">记数排序</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test07_subject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 单词计数：将集合中出现的相同的单词，进行计数，取计数排名前三的结果</span></span><br><span class="line">    <span class="keyword">val</span> stringList = <span class="type">List</span>(<span class="string">&quot;Hello Scala Hbase kafka&quot;</span>, <span class="string">&quot;Hello Scala Hbase&quot;</span>, <span class="string">&quot;Hello Scala&quot;</span>, <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1) 将每一个字符串转换成一个一个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordList: <span class="type">List</span>[<span class="type">String</span>] = stringList.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">        println(wordList)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2) 将相同的单词放置在一起</span></span><br><span class="line">    <span class="keyword">val</span> wordToMap: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">List</span>[<span class="type">String</span>]] = wordList.groupBy(a =&gt; a)</span><br><span class="line">        println(wordToMap)</span><br><span class="line">    <span class="comment">// 3) 对相同的单词进行计数</span></span><br><span class="line">    <span class="keyword">val</span> wordToMapCount: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = wordToMap.map(x =&gt; (x._1, x._2.size))</span><br><span class="line">    println(wordToMapCount)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4) 对计数完成后的结果进行排序（降序）</span></span><br><span class="line">    <span class="keyword">val</span> wordListToCount : <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)]= wordToMapCount.toList</span><br><span class="line">    <span class="keyword">val</span> sortList =wordListToCount.sortWith &#123;</span><br><span class="line">      (x, y) =&gt; &#123;</span><br><span class="line">        x._2 &gt; y._2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    println(sortList)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5) 对排序后的结果取前 3 名</span></span><br><span class="line">    println(sortList.take(<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-6">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习状态非常不错，已经熟练掌握了看文档的技能了，一天看了将近视频的70集。Scala后面的面向对象和集合方面都是以代码为主，逻辑性的问题，在Java早就牢记于心了，看文档的案例，复制到IDEA，自己基本就能分析出来方法的作用，以及使用场景。难点和Scala独特的点是同一点，就是元组的._使用，<code>._</code>能很大程度上优化Scala的代码长度，让代码更简洁，而且<code>._</code>匿名调用集合中的元素，以及列表中嵌元组，Map集合中嵌列表，二维列表中是偶元组，这种场景下，就显得非常好用，在for循环遍历也是如此。元组还是Scala比较重要，实用的点。今日算超额完成任务了，进入了Spark的学习，配置好了基本环境，将快速上手小案例做了出来，有前面Hadoop的铺垫，Spark理解应该会稍微容易点的，希望明天正式进入Spark的学习状态能和今天一样吧。</p><h1>7.21 Spark入门</h1><h2 id="1-头：日期、所学内容出处-11">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-11">2.标题</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">P1001</span>.尚硅谷_Spark框架 - 简介<span class="number">4</span>:<span class="number">54</span></span><br><span class="line"><span class="attribute">P2002</span>.尚硅谷_Spark框架 - Vs Hadoop<span class="number">7</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P3003</span>.尚硅谷_Spark框架 - 核心模块 - 介绍<span class="number">2</span>:<span class="number">24</span></span><br><span class="line"><span class="attribute">P4004</span>.尚硅谷_Spark框架 - 快速上手 - 开发环境准备<span class="number">5</span>:<span class="number">46</span></span><br><span class="line"><span class="attribute">P5005</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 案例分析<span class="number">7</span>:<span class="number">57</span></span><br><span class="line"><span class="attribute">P6006</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - Spark环境<span class="number">7</span>:<span class="number">07</span></span><br><span class="line"><span class="attribute">P7007</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 功能实现<span class="number">11</span>:<span class="number">56</span></span><br><span class="line"><span class="attribute">P8008</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 不同的实现<span class="number">8</span>:<span class="number">31</span></span><br><span class="line"><span class="attribute">P9009</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - Spark的实现<span class="number">4</span>:<span class="number">24</span></span><br><span class="line"><span class="attribute">P10010</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 日志和错误<span class="number">3</span>:<span class="number">50</span></span><br><span class="line"><span class="attribute">P11011</span>.尚硅谷_Spark框架 - 运行环境 - 本地环境 - 基本配置和操作<span class="number">8</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">P12012</span>.尚硅谷_Spark框架 - 运行环境 - 本地环境 - 提交应用程序<span class="number">3</span>:<span class="number">10</span></span><br><span class="line"><span class="attribute">P13013</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 基本配置和操作<span class="number">6</span>:<span class="number">13</span></span><br><span class="line"><span class="attribute">P14014</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 提交参数解析<span class="number">3</span>:<span class="number">08</span></span><br><span class="line"><span class="attribute">P15015</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 配置历史服务<span class="number">4</span>:<span class="number">08</span></span><br><span class="line"><span class="attribute">P16016</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 配置高可用<span class="number">5</span>:<span class="number">51</span></span><br><span class="line"><span class="attribute">P17017</span>.尚硅谷_Spark框架 - 运行环境 - Yarn环境 - 基本配置 &amp; 历史服务<span class="number">6</span>:<span class="number">42</span></span><br><span class="line"><span class="attribute">P18018</span>.尚硅谷_Spark框架 - 运行环境 - Windows环境 &amp; 总结<span class="number">11</span>:<span class="number">06</span></span><br><span class="line"><span class="attribute">P19019</span>.尚硅谷_Spark框架 - 核心组件 - 介绍<span class="number">3</span>:<span class="number">33</span></span><br><span class="line"><span class="attribute">P20020</span>.尚硅谷_Spark框架 - 核心概念 - Executor &amp; Core &amp; 并行度<span class="number">3</span>:<span class="number">31</span></span><br><span class="line"><span class="attribute">P21021</span>.尚硅谷_Spark框架 - 核心概念 - DAG &amp; 提交流程 &amp; Yarn两种部署模式<span class="number">7</span>:<span class="number">00</span></span><br><span class="line"><span class="attribute">P22022</span>.尚硅谷_SparkCore - 分布式计算模拟 - 搭建基础的架子<span class="number">12</span>:<span class="number">48</span></span><br><span class="line"><span class="attribute">P23023</span>.尚硅谷_SparkCore - 分布式计算模拟 - 客户端向服务器发送计算任务<span class="number">10</span>:<span class="number">50</span></span><br><span class="line"><span class="attribute">P24024</span>.尚硅谷_SparkCore - 分布式计算模拟 - 数据结构和分布式计算<span class="number">11</span>:<span class="number">39</span></span><br><span class="line"><span class="attribute">P25025</span>.尚硅谷_SparkCore - 核心编程 - RDD - 概念介绍<span class="number">5</span>:<span class="number">31</span></span><br><span class="line"><span class="attribute">P26026</span>.尚硅谷_SparkCore - 核心编程 - RDD - IO基本实现原理 - <span class="number">1</span><span class="number">10</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">P27027</span>.尚硅谷_SparkCore - 核心编程 - RDD - IO基本实现原理 - <span class="number">2</span><span class="number">8</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P28028</span>.尚硅谷_SparkCore - 核心编程 - RDD - RDD和IO之间的关系<span class="number">12</span>:<span class="number">24</span></span><br><span class="line"><span class="attribute">P29029</span>.尚硅谷_SparkCore - 核心编程 - RDD - 特点<span class="number">13</span>:<span class="number">34</span></span><br><span class="line"><span class="attribute">P30030</span>.尚硅谷_SparkCore - 核心编程 - RDD - 五大主要配置<span class="number">11</span>:<span class="number">19</span></span><br><span class="line"><span class="attribute">P31031</span>.尚硅谷_SparkCore - 核心编程 - RDD - 执行原理<span class="number">3</span>:<span class="number">05</span></span><br><span class="line"><span class="attribute">P32032</span>.尚硅谷_SparkCore - 核心编程 - RDD - 创建 - 内存<span class="number">11</span>:<span class="number">02</span></span><br><span class="line"><span class="attribute">P33033</span>.尚硅谷_SparkCore - 核心编程 - RDD - 创建 - 文件<span class="number">6</span>:<span class="number">28</span></span><br><span class="line"><span class="attribute">P34034</span>.尚硅谷_SparkCore - 核心编程 - RDD - 创建 - 文件<span class="number">1</span><span class="number">4</span>:<span class="number">42</span></span><br><span class="line"><span class="attribute">P35035</span>.尚硅谷_SparkCore - 核心编程 - RDD - 集合数据源 - 分区的设定<span class="number">11</span>:<span class="number">41</span></span><br><span class="line"><span class="attribute">P36036</span>.尚硅谷_SparkCore - 核心编程 - RDD - 集合数据源 - 分区数据的分配<span class="number">13</span>:<span class="number">54</span></span><br><span class="line"><span class="attribute">P37037</span>.尚硅谷_SparkCore - 核心编程 - RDD - 文件数据源 - 分区的设定<span class="number">11</span>:<span class="number">33</span></span><br><span class="line"><span class="attribute">P38038</span>.尚硅谷_SparkCore - 核心编程 - RDD - 文件数据源 - 分区数据的分配<span class="number">8</span>:<span class="number">21</span></span><br><span class="line"><span class="attribute">P39039</span>.尚硅谷_SparkCore - 核心编程 - RDD - 文件数据源 - 分区数据的分配 - 案例分析<span class="number">6</span>:<span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-11">3.所学内容概述</h2><h3 id="Spark的快速上手">Spark的快速上手</h3><h4 id="Spark在Linux的部署配置">Spark在Linux的部署配置</h4><h4 id="RDD简介-和-逻辑以及执行过程-原理">RDD简介 和 逻辑以及执行过程 原理</h4><h2 id="4-根据概述分章节描述-9">4.根据概述分章节描述</h2><h3 id="Spark的快速上手-2">Spark的快速上手</h3><p>Spark 由 Scala 语言开发的，所以本课件接下来的开发所使用的语言也为 Scala</p><p>在IDEA中创建Maven项目</p><p>增加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="WorldCount案例">WorldCount案例</h4><p>这个案例昨天拿scala刚做过  基本逻辑是一样的，但是在Spark框架有更简单的方法，作者已经提供，不同的是要先建立和框架的连接 再去执行操作，看得出来，底层源码都是Scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_wordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Application</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spark框架</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 建立和Spark框架的连接</span></span><br><span class="line">    <span class="comment">//JDBC:Connection</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line">    <span class="comment">// 创建 Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"><span class="comment">//    sc.textFile(&quot;data/word.txt&quot;).flatMap(_.split(&quot; &quot;)).map((_,1)).reduceByKey(_+_).collect()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行业务操作</span></span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">&quot;../bigdata/datas&quot;</span>)</span><br><span class="line">    <span class="comment">// 将文件中的数据进行分词</span></span><br><span class="line">    <span class="keyword">val</span> wordRDD: <span class="type">RDD</span>[<span class="type">String</span>] = fileRDD.flatMap( _.split(<span class="string">&quot; &quot;</span>) )</span><br><span class="line">    <span class="comment">// 转换数据结构 word =&gt; (word, 1)</span></span><br><span class="line">    <span class="keyword">val</span> <span class="type">WorldToOne</span>:<span class="type">RDD</span>[(<span class="type">String</span>,<span class="type">Int</span>)] = wordRDD.map((_, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">// 将转换结构后的数据按照相同的单词进行分组聚合</span></span><br><span class="line"><span class="comment">//    val WordGroup:RDD[(String,Iterable[(String,Int)])] = WorldToOne.groupBy(</span></span><br><span class="line"><span class="comment">//      t =&gt; t._1</span></span><br><span class="line"><span class="comment">//    )</span></span><br><span class="line"><span class="comment">//    val wordCount = WordGroup.map &#123;</span></span><br><span class="line"><span class="comment">//      case (_, y) =&gt;</span></span><br><span class="line"><span class="comment">//        y.reduce(</span></span><br><span class="line"><span class="comment">//          (y1, y2) =&gt; (y1._1, y1._2 + y2._2)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        )</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">val</span> wordCount = <span class="type">WorldToOne</span>.reduceByKey(_ + _)</span><br><span class="line">    <span class="comment">// 将数据聚合结果采集到内存中</span></span><br><span class="line">    <span class="keyword">val</span> word2Count = wordCount.collect()</span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    word2Count.foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD简介">RDD简介</h3><p>弹性分布式数据集，是 Spark 中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的<strong>集合</strong></p><p>自己理解：RDD的弹性安全性比较好，高容错，适合开发。它是一个集合，但并不保存数据，而且封装了计算逻辑，同时也是一个抽象类，需要其他的子类来具体实现。</p><h4 id="执行原理">执行原理</h4><p>RDD先申请资源，然后将应用程序的数据处理逻辑分解成一个一个的计算任务。然后将任务发到已经分配资源的计算节点上, 按照指定的计算模型进行数据计算。最后得到计算结果。</p><p>在Yarn中的执行原理</p><h5 id="1-启动环境">1.启动环境</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141756608.png" alt="image-20220722141756608"></p><h5 id="2-Spark通过申请资源创建节点">2.Spark通过申请资源创建节点</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141829718.png" alt="image-20220722141829718"></p><h5 id="3-根据需求根据分区划分任务">3.根据需求根据分区划分任务</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141903056.png" alt="image-20220722141903056"></p><h5 id="4-调度节点将任务根据计算节点状态发送到对应的计算节点进行计算">4.调度节点将任务根据计算节点状态发送到对应的计算节点进行计算</h5><p>如下图</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141944559.png" alt="image-20220722141944559"></p><p>根据这四幅图，便能看出来RDD的 流程中的作用主要就是将逻辑封装，生成Task也就是任务点，发送给Executor节点</p><h3 id="RDD创建">RDD创建</h3><p>在 Spark 中创建 RDD 的创建方式可以分为四种：</p><p>在文件中创建RDD 用<code>makeRDD</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SPark02_RDD_Memory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//准备环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;RDD&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建RDD</span></span><br><span class="line">    <span class="comment">//从内存中创建RDD，将内存中集合的数据作为处理的数据源</span></span><br><span class="line">    <span class="keyword">val</span> seq = <span class="type">Seq</span>[<span class="type">Int</span>](<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//parallelize 并行</span></span><br><span class="line"><span class="comment">//    val rdd : RDD[Int]= sc.parallelize(seq)</span></span><br><span class="line">    <span class="comment">//makeRDD方法在底层实现时其实就是调用了rdd对象的parallelize方法 以后都用sc.makeRDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(seq)</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    rdd.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下三种暂时说是用不到</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722142947372.png" alt="image-20220722142947372"></p><h4 id="RDD读取文件-路径问题">RDD读取文件 路径问题</h4><p>代码注解中已经解释</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SPark03_RDD_File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备文件环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;RDD&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建RDD</span></span><br><span class="line">    <span class="comment">//从文件中创建RDD，将内存中集合的数据作为处理的数据源</span></span><br><span class="line">    <span class="comment">//path路径默认以当前环境的根路径为基准 可以写绝对路径也可以写相对路径</span></span><br><span class="line"><span class="comment">//    val rdd = sc.textFile(&quot;datas/1.txt&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    val rdd:RDD[String] = sc.textFile(&quot;datas&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//也可以在HDFS在外部 读取</span></span><br><span class="line">    <span class="comment">//    sc.textFile(&quot;hdfs://hadoop86/test.txt&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//textFile:以行为单位来读取数据 读取是字符串</span></span><br><span class="line">    <span class="comment">//wholeTextFiles:以文件为单位来读取数据 读取的数据是元组 第一个数据是路径</span></span><br><span class="line">    <span class="keyword">val</span> rdd:<span class="type">RDD</span>[(<span class="type">String</span>,<span class="type">String</span>)] = sc.wholeTextFiles(<span class="string">&quot;datas&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    rdd.collect().foreach(println)</span><br><span class="line">    <span class="comment">//关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>RDD的使用在IDEA中，大致分为三步 准备环境 创建RDD 关闭环境</p><p>准备环境的代码基本很固定  而创建RDD 就要看是读取文件 还是直接在IDEA中配置</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SPark02_RDD_Memory2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;RDD&quot;</span>)</span><br><span class="line">    sparkConf.set(<span class="string">&quot;spark.default.parallelism&quot;</span>,<span class="string">&quot;5&quot;</span>)  <span class="comment">//修改默认并行核数 为5 ‘0-4’</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 创建RDD</span></span><br><span class="line">    <span class="comment">//RDD的并行度 &amp; 分区</span></span><br><span class="line">    <span class="comment">//makeRDD方法可以传递第二个参数,这个参数表示分区的数量</span></span><br><span class="line">    <span class="comment">// 第二个参数 numSlices可以不传递 有默认并行度 带了*所以是电脑CPU的并行核数 我是16个</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(</span><br><span class="line">      <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将处理的数据保存成分区文件</span></span><br><span class="line">    rdd.saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-6">5.BUG点</h2><p>跟老师一模一样的代码报错，刚进入也不知道什么原因就按报错信息去CSDN搜，发现有人有一样的问题，在resources中配置一个log4j文件就好了，<strong>也不是刚开始怀疑的版本问题</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220723111109882.png" alt="image-20220723111109882"></p><h2 id="6-扩展学习部分-6">6.扩展学习部分</h2><h3 id="Linux中Spark部署">Linux中Spark部署</h3><p>步骤  克隆三台虚拟机</p><p>修改IP地址 主机名 和 映射</p><p>配置无密  创建xsync文件并配置信息 给其增加执行权限</p><p>下载rsync yum</p><p>分发命令<code>sbin/start -all.sh</code></p><h2 id="7-总结-7">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>昨天配置了spark在IDEA中的环境，并没有入门，今天对Spark进行一个上手入门，发现Spark框架，都是使用scala代码进行功能实现的，然后就是Linux系统中，Spark的环境部署，和框架搭建，因为不是自己负责的板块，听听作用就过去了，后面弄懂了什么是Spark以及执行原理和流程。今天难度还是有的，都是概念性的东西，要一个一个去记住和理解，明天就是转子算法的学习，就会有代码量了。</p><h1>7.22 Spark-RDD转换算子</h1><h2 id="1-头：日期、所学内容出处-12">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-12">2.标题</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">P40040</span>.尚硅谷_SparkCore - 核心编程 - RDD - 算子介绍<span class="number">7</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P41041</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - map<span class="number">7</span>:<span class="number">46</span></span><br><span class="line"><span class="attribute">P42042</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - map - 小功能<span class="number">5</span>:<span class="number">12</span></span><br><span class="line"><span class="attribute">P43043</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - map - 并行计算效果演示<span class="number">8</span>:<span class="number">54</span></span><br><span class="line"><span class="attribute">P44044</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitions<span class="number">6</span>:<span class="number">12</span></span><br><span class="line"><span class="attribute">P45045</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitions - 小练习<span class="number">3</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P46046</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitions &amp; map的区别 - 完成比完美更重要</span><br><span class="line"><span class="attribute">P47047</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitionsWithIndex<span class="number">6</span>:<span class="number">30</span></span><br><span class="line"><span class="attribute">P48048</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - flatMap<span class="number">5</span>:<span class="number">07</span></span><br><span class="line"><span class="attribute">P49049</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - flatMap - 小练习<span class="number">2</span>:<span class="number">41</span></span><br><span class="line"><span class="attribute">P50050</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - glom<span class="number">6</span>:<span class="number">33</span></span><br><span class="line"><span class="attribute">P51051</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - 理解分区不变的含义<span class="number">6</span>:<span class="number">48</span></span><br><span class="line"><span class="attribute">P52052</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - groupBy<span class="number">5</span>:<span class="number">25</span></span><br><span class="line"><span class="attribute">P53053</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - groupBy - shuffle来袭<span class="number">6</span>:<span class="number">01</span></span><br><span class="line"><span class="attribute">P54054</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - groupBy - 小练习<span class="number">7</span>:<span class="number">51</span></span><br><span class="line"><span class="attribute">P55055</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - filter - 数据倾斜<span class="number">7</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">P56056</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - sample - 抽奖喽<span class="number">16</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">057Core</span> - 核心编程 - RDD - 转换算子 - distinct</span><br><span class="line"><span class="attribute">058Core</span> - 核心编程 - RDD - 转换算子 - coalesce</span><br><span class="line"><span class="attribute">059Core</span> - 核心编程 - RDD - 转换算子 - repartition</span><br><span class="line"><span class="attribute">060Core</span> - 核心编程 - RDD - 转换算子 - sortBy</span><br><span class="line"><span class="attribute">061Core</span> - 核心编程 - RDD - 转换算子 - 交集&amp;并集&amp;差集&amp;拉链</span><br><span class="line"><span class="attribute">062Core</span> - 核心编程 - RDD - 转换算子 - 交集&amp;并集&amp;差集&amp;拉链 - 注意事项</span><br><span class="line"><span class="attribute">063Core</span> - 核心编程 - RDD - 转换算子 - partitionBy（前面有吸气，中间有等待）</span><br><span class="line"><span class="attribute">064Core</span> - 核心编程 - RDD - 转换算子 - partitionBy - 思考的问题</span><br><span class="line"><span class="attribute">065Core</span> - 核心编程 - RDD - 转换算子 - reduceByKey</span><br><span class="line"><span class="attribute">066Core</span> - 核心编程 - RDD - 转换算子 - groupByKey</span><br><span class="line"><span class="attribute">067Core</span> - 核心编程 - RDD - 转换算子 - groupByKey &amp; reduceByKey的区别</span><br><span class="line"><span class="attribute">068Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey</span><br><span class="line"><span class="attribute">069Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey - 图解</span><br><span class="line"><span class="attribute">070Core</span> - 核心编程 - RDD - 转换算子 - foldByKey</span><br><span class="line"><span class="attribute">071Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey - 小练习</span><br><span class="line"><span class="attribute">072Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey - 小练习 - 图解</span><br><span class="line"><span class="attribute">073Core</span> - 核心编程 - RDD - 转换算子 - combineByKey</span><br><span class="line"><span class="attribute">074Core</span> - 核心编程 - RDD - 转换算子 - 聚合算子的区别</span><br><span class="line"><span class="attribute">075Core</span> - 核心编程 - RDD - 转换算子 - join</span><br><span class="line"><span class="attribute">076Core</span> - 核心编程 - RDD - 转换算子 - leftOuterJoin &amp; rightOuterJoin</span><br><span class="line"><span class="attribute">077Core</span> - 核心编程 - RDD - 转换算子 - cogroup</span><br><span class="line"><span class="attribute">078Core</span> - 核心编程 - RDD - 案例实操 - 需求介绍 &amp; 分析</span><br><span class="line"><span class="attribute">079Core</span> - 核心编程 - RDD - 案例实操 - 需求设计</span><br><span class="line"><span class="attribute">080Core</span> - 核心编程 - RDD - 案例实操 - 功能实现</span><br><span class="line"><span class="attribute">081Core</span> - 核心编程 - RDD - 行动算子 - 介绍</span><br><span class="line"><span class="attribute">082Core</span> - 核心编程 - RDD - 行动算子 - 算子演示</span><br><span class="line"><span class="attribute">083Core</span> - 核心编程 - RDD - 行动算子 - aggregate</span><br><span class="line"><span class="attribute">084Core</span> - 核心编程 - RDD - 行动算子 - countByKey &amp; countByValue</span><br><span class="line"><span class="attribute">085Core</span> - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">1</span>-<span class="number">8</span>)</span><br><span class="line"><span class="attribute">086Core</span> - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">9</span>-<span class="number">11</span>)</span><br><span class="line"><span class="attribute">087Core</span> - 核心编程 - RDD - 行动算子 - save的方法</span><br><span class="line"><span class="attribute">088Core</span> - 核心编程 - RDD - 行动算子 - foreach</span><br><span class="line"><span class="attribute">089Core</span> - 核心编程 - RDD - 序列化 - 闭包检测</span><br><span class="line"><span class="attribute">090Core</span> - 核心编程 - RDD - 序列化 - 实际执行时的问题</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-12">3.所学内容概述</h2><h2 id="4-根据概述分章节描述-10">4.根据概述分章节描述</h2><h3 id="RDD单Value转换算子">RDD单Value转换算子</h3><p>RDD根据处理方式的不同分为了Value类型 双Value 和Key-Value类型</p><p>代码都是在昨天三大步骤的基础上进行，改变点在创建RDD中，</p><p>看得出 如下代码是将List集合中每个值都*2  然后打印出来 用map方法转换 映射转换 在Scala的高级算法中有说明</p><h4 id="map">map</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="comment">//2 4 6 8</span></span><br><span class="line">    <span class="comment">//转换函数</span></span><br><span class="line"><span class="comment">//    def mapFunction(num:Int)=&#123;num * 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    val mapRDD = rdd.map(mapFunction)</span></span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd.map((_: <span class="type">Int</span>) * <span class="number">2</span>) <span class="comment">//匿名函数至简原则</span></span><br><span class="line"></span><br><span class="line">    mapRDD.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上map方法的执行效率会很低，因为是读一个执行一次，这样需要执行多次，就像IO中对文件的处理一样，IO流解决办法是使用缓冲流Buffer，在Spark也有一种方法类似，</p><h4 id="mapPartitions">mapPartitions</h4><p>将待处理的数据以分区为单位发送到计算节点进行处理</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_partitions</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*mapPartitions:</span></span><br><span class="line"><span class="comment">                   算子是以分区为单位进行批处理操作</span></span><br><span class="line"><span class="comment">                   算子会长时间占用内存，那么这样会导致内存可能</span></span><br><span class="line"><span class="comment">                   不够用，出现内存溢出的错误。所以在内存有限的情况下，不推荐使用。使用 map 操作。 */</span></span><br><span class="line">    <span class="keyword">val</span> rddMapPartitions = rdd.mapPartitions(</span><br><span class="line">      iter =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        iter.map(_ * <span class="number">2</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    rddMapPartitions.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">8</span></span><br></pre></td></tr></table></figure><p>看案例的执行结果，能分析出来mapPartitions是分区操作的，比如案例两个分区，就先执行一个分区，再是另外一个，性能是比map高的，<strong>缺点</strong>写在代码里面了</p><h4 id="mapPartitionsWithIndex">mapPartitionsWithIndex</h4><p>将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据，在处理时同时可以<strong>获取当前分区索引</strong>。</p><p>小案例 获取数据分区的数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_partitionsWithIndex_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="comment">//显示分区号</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> rddMap:<span class="type">RDD</span>[(<span class="type">Int</span>,<span class="type">Int</span>)] = rdd.mapPartitionsWithIndex(</span><br><span class="line">      (index: <span class="type">Int</span>, iter: <span class="type">Iterator</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        iter.map(</span><br><span class="line">          (num: <span class="type">Int</span>) =&gt; &#123; <span class="comment">//将原本返回一个数据map 改成返回元组</span></span><br><span class="line">            (index, num) <span class="comment">//index是分区号 num是分区内的数据</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    rddMap.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flatMap">flatMap</h4><p>将处理的数据进行扁平化后再进行映射处理，所以算子也称之为扁平映射</p><p>将 List(List(1,2),3,List(4,5))进行扁平化操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Operator_Transform_TestFlat2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --flatMap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Any</span>] = sc.makeRDD(<span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="number">3</span>,<span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>))) <span class="comment">//创建RDD集合</span></span><br><span class="line">    <span class="keyword">val</span> rddMap: <span class="type">RDD</span>[<span class="type">Any</span>] = rdd.flatMap &#123; <span class="comment">//读取</span></span><br><span class="line">      <span class="keyword">case</span> list1: <span class="type">List</span>[_] =&gt; list1 <span class="comment">//模式匹配 如果是List集合 直接返回</span></span><br><span class="line">      <span class="keyword">case</span> dat =&gt; <span class="type">List</span>(dat) <span class="comment">// 如果是其他值 转换成List集合后返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rddMap.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="glom">glom</h4><p>将同一个分区的数据直接转换为相同类型的内存数组进行处理  <strong>看代码执行过后是返回一个数组类型的</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Operator_Transform_Glom</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --flatMap</span></span><br><span class="line">    <span class="comment">//返回两个分区的数据的最大值相加</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> glom: <span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = rdd.glom()</span><br><span class="line">    <span class="comment">//取出两个分区的数据 用map进行数据执行</span></span><br><span class="line">    <span class="keyword">val</span> glomRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = glom.map(</span><br><span class="line">      (array: <span class="type">Array</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        array.max <span class="comment">//2 4</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    println(glomRDD.collect().foreach((data: <span class="type">Int</span>) =&gt; print(data + <span class="string">&quot;,&quot;</span>)))</span><br><span class="line">    println(glomRDD.sum())</span><br><span class="line">    </span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="groupBy">groupBy</h4><p>将数据源中的每个数据进行分组判断  根据返回的分组key 进行分组 相同的key值会放在一个组中</p><p><strong>注意分组和分区没有必然的关系</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_RDD_Operator_Transform_GlomBy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --flatMap</span></span><br><span class="line"><span class="comment">//  首字母一样的放一个组中</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(<span class="type">List</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;Spark&quot;</span>,<span class="string">&quot;Scala&quot;</span>,<span class="string">&quot;Hadoop&quot;</span>),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> groupRDD: <span class="type">RDD</span>[(<span class="type">Char</span>, <span class="type">Iterable</span>[<span class="type">String</span>])] = rdd.groupBy((_: <span class="type">String</span>)(<span class="number">0</span>))</span><br><span class="line">    groupRDD.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(H,CompactBuffer(Hello, Hadoop))</span></span><br><span class="line"><span class="comment">(S,CompactBuffer(Spark, Scala))</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>groupBy会把不同区的数据打乱，重新组合，这个操作我们称为shuffle</p><h4 id="filter">filter</h4><p>当数据进行筛选过滤后，分区不变，但是分区内的数据可能不均衡，生产环境下，可能会出现数据倾斜 <strong>了解</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_RDD_Operator_Transform_filter_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --filter</span></span><br><span class="line">    <span class="comment">//将数据根据指定的规则进行筛选过滤，符合规则的数据保留，不符合规则的数据丢弃。</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.textFile(<span class="string">&quot;datas/apache.log&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> rddFilter: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.filter(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> time = line.split(<span class="string">&quot; &quot;</span>)(<span class="number">3</span>)</span><br><span class="line">        time.startsWith(<span class="string">&quot;17/05/2015&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    rddFilter.collect().foreach(println)</span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sample">sample</h4><p>根据指定的规则从数据集中抽取数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark06_RDD_Operator_Transform_sample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --filter</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>))</span><br><span class="line">    <span class="comment">// 抽取数据不放回（伯努利算法）</span></span><br><span class="line">    <span class="comment">// 伯努利算法：又叫 0、1 分布。例如扔硬币，要么正面，要么反面。</span></span><br><span class="line">    <span class="comment">// 具体实现：根据种子和随机算法算出一个数和第二个参数设置几率比较，小于第二个参数要，大于不 要</span></span><br><span class="line">    <span class="comment">// 第一个参数：抽取的数据是否放回，false：不放回</span></span><br><span class="line">    <span class="comment">// 第二个参数：抽取的几率，范围在[0,1]之间,0：全不取；1：全取；</span></span><br><span class="line">    <span class="comment">// 第三个参数：随机数种子</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.sample(withReplacement = <span class="literal">false</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">// 抽取数据放回（泊松算法）</span></span><br><span class="line">    <span class="comment">// 第一个参数：抽取的数据是否放回，true：放回；false：不放回</span></span><br><span class="line">    <span class="comment">// 第二个参数：重复数据的几率，范围大于等于 0.表示每一个元素被期望抽取到的次数</span></span><br><span class="line">    <span class="comment">// 第三个参数：随机数种子</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.sample(withReplacement = <span class="literal">true</span>, <span class="number">2</span>)</span><br><span class="line">    println(<span class="string">&quot;不放回&quot;</span>)</span><br><span class="line">    println(dataRDD1.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    println(<span class="string">&quot;放回&quot;</span>)</span><br><span class="line">    println(dataRDD2.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="distinct">distinct</h4><p>将数据集中重复的数据去重</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark07_RDD_Operator_Transform_distinct</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --distinct</span></span><br><span class="line">    <span class="comment">//将数据集中重复的数据去重</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.distinct() <span class="comment">//去重</span></span><br><span class="line">    <span class="keyword">val</span> value1: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.distinct(<span class="number">2</span>) <span class="comment">//先将2的倍数放前面去重</span></span><br><span class="line">    println(value.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    println(value1.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="coaleses-可增大-可减小">coaleses(可增大 可减小)</h4><p>对增减分区的操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark08_RDD_Operator_Transform_coalesce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --coalesce</span></span><br><span class="line">    <span class="comment">//根据数据量缩减分区，用于大数据集过滤后，提高小数据集的执行效率</span></span><br><span class="line">    <span class="comment">//当 spark 程序中，存在过多的小任务的时候，可以通过 coalesce 方法，收缩合并分区，减少</span></span><br><span class="line">    <span class="comment">//分区的个数，减小任务调度成本</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>),<span class="number">6</span>) <span class="comment">//6个分区</span></span><br><span class="line">    <span class="comment">//变两个分区 第二个参数默认是false改成true就会随机打乱 就是groupBy那里提到的shuffle</span></span><br><span class="line">    <span class="comment">//如果设置shuffle为true coalesce就可以扩大分区</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.coalesce(<span class="number">2</span>,<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">val</span> dataRDD1Index = dataRDD1.mapPartitionsWithIndex(</span><br><span class="line">      (index: <span class="type">Int</span>, group: <span class="type">Iterator</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        group.map(</span><br><span class="line">          (num:<span class="type">Int</span>) =&gt; (index,num)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    dataRDD1Index.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="repartition">repartition</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark09_RDD_Operator_Transform_repartition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --repartition</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>),<span class="number">2</span>) <span class="comment">//2个分区</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.repartition(<span class="number">4</span>) <span class="comment">//变4个分区 默认shuffle是false</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD2Index: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = dataRDD2.mapPartitionsWithIndex(</span><br><span class="line">      (index: <span class="type">Int</span>, group: <span class="type">Iterator</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        group.map(</span><br><span class="line">          (num:<span class="type">Int</span>) =&gt; (index,num)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    dataRDD2Index.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="coalesce-和-repartition-区别">coalesce 和 repartition 区别</h4><p>repartition 一定会发生 shuffle，coalesce 根据传进来的参数来判断是否发生 shuffle。<br>一般情况下<strong>增大rdd的partition数量</strong>使用<strong>repartition</strong>，<strong>减少partition数量时</strong>使用<strong>coalesce</strong></p><h4 id="sortBy">sortBy</h4><p>该操作用于排序数据。在排序之前，可以将数据通过 f 函数进行处理，之后按照 f 函数处理的结果进行排序</p><p>排序是不管多少分区的，所以sortBy执行过程一定存在shuffle打乱的过程</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark10_RDD_Operator_Transform_sortBy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --repartition</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;1&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;11&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;2&quot;</span>,<span class="number">3</span>))) <span class="comment">//2个分区</span></span><br><span class="line">    <span class="comment">//默认是true是升序 false是降序</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = dataRDD.sortBy((t: (<span class="type">String</span>, <span class="type">Int</span>)) =&gt; t._1.toInt,ascending = <span class="literal">false</span>)</span><br><span class="line">    println(dataRDD1.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD双Value转换算子">RDD双Value转换算子</h3><p>两个数据源之间的关联操作</p><h4 id="集合基本操作">集合基本操作</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark11_RDD_Operator_Transform_DoubleValue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- 双Value基本集合操作</span></span><br><span class="line">    <span class="comment">//注意 交集 差集 并集 类型都要一致</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1 = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">val</span> dataRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">    <span class="keyword">val</span> dataRDDIn = dataRDD1.intersection(dataRDD2) <span class="comment">//3,4 交集</span></span><br><span class="line">    <span class="keyword">val</span> dataRDDUn = dataRDD1.union(dataRDD2) <span class="comment">//1,2,3,4,3,4,5,6 并集</span></span><br><span class="line">    <span class="keyword">val</span> dataRDDSu: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD1.subtract(dataRDD2) <span class="comment">// 1,2 差集 .前面集合为主 和后面不交的</span></span><br><span class="line">    <span class="keyword">val</span> dataRDDZip = dataRDD1.zip(dataRDD2) <span class="comment">// 拉链 将两个 RDD 中的元素，以键值对的形式进行合并 对应的 .zip前面的是key</span></span><br><span class="line">    println(dataRDDZip.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="partitionBy">partitionBy</h4><p>Spark的分区器</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark12_RDD_Operator_Transform_partitionBy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- keys-value</span></span><br><span class="line">    <span class="comment">//将数据按照指定 Partitioner 重新进行分区。Spark 默认的分区器是 HashPartitioner</span></span><br><span class="line">    <span class="comment">//就是通过partitionBy方法改变数据的分区</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = sc.makeRDD(<span class="type">Array</span>((<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>),(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>),(<span class="number">3</span>,<span class="string">&quot;ccc&quot;</span>),(<span class="number">4</span>,<span class="string">&quot;DDD&quot;</span>)),<span class="number">2</span>) <span class="comment">//hash是默认取余</span></span><br><span class="line"><span class="comment">//    可以模仿HashPartitioner自己写自己的分区器</span></span><br><span class="line">    rdd.partitionBy(<span class="keyword">new</span> <span class="type">HashPartitioner</span>(<span class="number">2</span>)).saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>reduceByKey</strong></p><p>最开始在WordCount就有用到，元组聚合 相同key聚合</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark13_RDD_Operator_Transform_reduceByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- keys-value</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rddKey: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = rdd.reduceByKey((_: <span class="type">Int</span>) + (_: <span class="type">Int</span>))</span><br><span class="line">    println(rddKey.collect().mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//(a,6)(b,3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>groupByKey</strong></p><p>分组将数据源的数据根据 key 对 value 进行分组</p><p>返回值第一个是key 第二个是元组,元组内是相同key的值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark14_RDD_Operator_Transform_groupByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- keys-value</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">val</span> rddKey1 = rdd.groupBy(_._1)</span><br><span class="line">    <span class="keyword">val</span> rddKey = rdd.groupByKey()</span><br><span class="line">    println(rddKey.collect().mkString(<span class="string">&quot; ,&quot;</span>)) <span class="comment">//(a,CompactBuffer(1, 2, 3)),(b,CompactBuffer(3))</span></span><br><span class="line">    println(rddKey1.collect().mkString(<span class="string">&quot; ,&quot;</span>)) <span class="comment">// (a,CompactBuffer((a,1), (a,2), (a,3))),(b,CompactBuffer((b,3)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduceByKey 和 groupByKey 的区别</p><p>reduceByKey 其实包含分组和聚合的功能。GroupByKey 只能分组，不能聚合，所以在分组聚合的场合下，推荐使用 reduceByKey，如果仅仅是分组而不需要聚合。那么还是只能使用 groupByKey</p><h4 id="aggregateByKey">aggregateByKey</h4><p>将数据根据不同的规则进行分区内计算和分区间计算</p><p>两个分区先取最大值 (a,2)(c,3) + (a,5)(c,6)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark15_RDD_Operator_Transform_aggregateByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  取出每个分区内相同 key 的最大值然后分区间相加</span></span><br><span class="line">    <span class="comment">// aggregateByKey 算子是函数柯里化，存在两个参数列表</span></span><br><span class="line">    <span class="comment">// 1. 第一个参数列表中的参数表示初始值</span></span><br><span class="line">    <span class="comment">//主要用于当碰见第一个key 的时候 和value进行分区计算</span></span><br><span class="line">    <span class="comment">// 2. 第二个参数列表中含有两个参数</span></span><br><span class="line">    <span class="comment">// 2.1 第一个参数表示分区内的计算规则</span></span><br><span class="line">    <span class="comment">// 2.2 第二个参数表示分区间的计算规则</span></span><br><span class="line">    <span class="keyword">val</span> rdd = &#123;</span><br><span class="line">      sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">        (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&quot;c&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">6</span>)</span><br><span class="line">      ),<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    rdd.aggregateByKey(<span class="number">0</span>)(</span><br><span class="line">      (x, y) =&gt; math.max(x, y),</span><br><span class="line">      (x, y) =&gt; x + y</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line">      <span class="comment">//(a,7)</span></span><br><span class="line">      <span class="comment">//(c,9)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>foldByKey</strong></p><p>当分区内计算规则和分区间计算规则相同时，aggregateByKey 就可以简化为 foldByKey</p><p>两边分区相同key先加 加完分区间key加</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> dataRDD1 = sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="keyword">val</span> dataRDD2 = dataRDD1.foldByKey(<span class="number">0</span>)(_+_)</span><br></pre></td></tr></table></figure><p><strong>combineByKey</strong></p><p>最通用的对 key-value 型 rdd 进行聚集操作的聚集函数</p><p>允许用户返回值的类型与输入不一致。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark16_RDD_Operator_Transform_combineByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  combineByKey</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd = &#123;</span><br><span class="line">      sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">        (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">6</span>)</span><br><span class="line">      ),<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法需要三个参数</span></span><br><span class="line">    <span class="comment">//第一个 将相同key的第一个数据进行结构的转换 实现操作</span></span><br><span class="line">    <span class="comment">//第二个 分区内运算</span></span><br><span class="line">    <span class="comment">//第三个 分区间运算</span></span><br><span class="line">    <span class="keyword">val</span> newRDD: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd.combineByKey(</span><br><span class="line">      (v: <span class="type">Int</span>) =&gt; (v, <span class="number">1</span>),</span><br><span class="line">      (x: (<span class="type">Int</span>, <span class="type">Int</span>), y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">        (x._1 + y, x._2 + <span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      (t1: (<span class="type">Int</span>, <span class="type">Int</span>), t2: (<span class="type">Int</span>, <span class="type">Int</span>)) =&gt; &#123;</span><br><span class="line">        (t1._1 + t2._1, t1._2 + t2._2)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> resultRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = newRDD.mapValues &#123; <span class="comment">//元组内int /</span></span><br><span class="line">      <span class="keyword">case</span> (num, count) =&gt; num / count</span><br><span class="line">    &#125;</span><br><span class="line">    println(newRDD.collect().mkString(<span class="string">&quot; ,&quot;</span>))  <span class="comment">//(b,(12,3)),(a,(9,3))</span></span><br><span class="line">    println(resultRDD.collect().mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">// (b,4),(a,3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sortByKey</strong></p><p>在一个(K,V)的 RDD 上调用，K 必须实现 Ordered 接口(特质)，返回一个按照 key 进行排序</p><p>上限比较高 可以自定义类 当作key</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> dataRDD1 = sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="keyword">val</span> sortRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = dataRDD1.sortByKey(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> sortRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = dataRDD1.sortByKey(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><strong>join</strong></p><p>在类型为(K,V)和(K,W)的 RDD 上调用，返回一个相同 key 对应的所有元素连接在一起的(K,(V,W))的 RDD</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark17_RDD_Operator_Transform_join</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  join</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> joinRDD: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd.join(rdd1)</span><br><span class="line">    <span class="comment">/*join两个相同的key的value会连接在一起形成元组 不同的key 不会返回</span></span><br><span class="line"><span class="comment">            (a,(1,5))</span></span><br><span class="line"><span class="comment">            (b,(2,4))</span></span><br><span class="line"><span class="comment">            (c,(3,3))</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    joinRDD.mapValues&#123; <span class="keyword">case</span> (x,y) =&gt; x+y &#125;.collect().foreach(println)</span><br><span class="line">    joinRDD.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cogroup</strong></p><p>在类型为(K,V)和(K,W)的 RDD 上调用，返回一个(K,(Iterable<V>,Iterable<W>))类型的 RDD</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark18_RDD_Operator_Transform_cogroup</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  join</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">6</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;c&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;e&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">6</span>)))</span><br><span class="line">    <span class="comment">//cogroup = connect + group  分区完了 分组</span></span><br><span class="line">    rdd.cogroup(rdd1,rdd2).collect().foreach(println)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    (a,(CompactBuffer(1),CompactBuffer(5),CompactBuffer(3, 6)))</span></span><br><span class="line"><span class="comment">    (b,(CompactBuffer(2),CompactBuffer(4),CompactBuffer()))</span></span><br><span class="line"><span class="comment">    (c,(CompactBuffer(),CompactBuffer(3, 6),CompactBuffer(4)))</span></span><br><span class="line"><span class="comment">    (e,(CompactBuffer(),CompactBuffer(),CompactBuffer(5)))</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>leftOuterJoin</strong></p><p>类似于 SQL 语句的左外连接</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark19_RDD_Operator_Transform_leftOuterJoin</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  join</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">6</span>)))</span><br><span class="line">    rdd1.leftOuterJoin(rdd2).collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-7">5.BUG点</h2><p>在RDD操作中有一项拉链操作，就是将两组集合变成key-Vlaue类型的，在Scala中，如果两组数据不一样长，Vlaue会变成默认值，但是在RDD中我就出现了报错，报错信息说两组RDD值长度要一样。</p><p><img src="https://docimg4.docs.qq.com/image/5NktxWQQgO1OFMYZkNdtfg.png?w=1820&amp;h=479" alt="img"></p><h2 id="6-扩展学习部分-7">6.扩展学习部分</h2><p>用Spark读取文件 一行一行 并用map读取路径</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="keyword">val</span> text = sc.textFile(<span class="string">&quot;datas/apache.log&quot;</span>) <span class="comment">//读取文件</span></span><br><span class="line">    <span class="keyword">val</span> value = text.map(</span><br><span class="line">      (line: <span class="type">String</span>) =&gt;&#123;<span class="comment">//获取行</span></span><br><span class="line">        <span class="keyword">val</span> strings: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        strings(<span class="number">6</span>)<span class="comment">//以空格切割成数组并取第6个数据</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    value.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722145042216.png" alt="image-20220722145042216"></p><h2 id="7-总结-8">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容是算法方面的，Spark独有的，转换算子，将scala中的优秀特质结合，把RDD中的数据做各种各样的处理，有25个左右的方法，单Value和双Value的都有，难度是很大的，偏向算法，比之前的scala集合的高阶还难不少，想搞定这个还得在去看一下scala集合的高阶方法，元组方面用的比较多，这样能让代码很简洁，自己去CSDN搜了scala的自动类型补全，这样理解起来比之前好了很多。掌握程度70%，因为在赶进度，有些小案例没去敲，更多是自己的理解，结合文档的讲解。方法太多了，也不是很能记住，还是得等案例的时候，能上场使用一下，这样对自己理解有很大的帮助。</p><h1>7.23 Spark-RDD完结</h1><h2 id="1-头：日期、所学内容出处-13">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-13">2.标题</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">081</span>Core - 核心编程 - RDD - 行动算子 - 介绍</span><br><span class="line"><span class="number">082</span>Core - 核心编程 - RDD - 行动算子 - 算子演示</span><br><span class="line"><span class="number">083</span>Core - 核心编程 - RDD - 行动算子 - aggregate</span><br><span class="line"><span class="number">084</span>Core - 核心编程 - RDD - 行动算子 - countByKey <span class="meta">&amp; countByValue</span></span><br><span class="line"><span class="number">085</span>Core - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">1</span>-<span class="number">8</span>)</span><br><span class="line"><span class="number">086</span>Core - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">9</span>-<span class="number">11</span>)</span><br><span class="line"><span class="number">087</span>Core - 核心编程 - RDD - 行动算子 - save的方法</span><br><span class="line"><span class="number">088</span>Core - 核心编程 - RDD - 行动算子 - foreach</span><br><span class="line"><span class="number">089</span>Core - 核心编程 - RDD - 序列化 - 闭包检测</span><br><span class="line"><span class="number">090</span>Core - 核心编程 - RDD - 序列化 - 实际执行时的问题</span><br><span class="line"><span class="number">091</span>Core - 核心编程 - RDD - 序列化 - Kryo序列化Core介绍</span><br><span class="line"><span class="number">092</span>Core - 核心编程 - RDD - 依赖关系 - 依赖 <span class="meta">&amp; 血缘关系介绍</span></span><br><span class="line"><span class="number">093</span>Core - 核心编程 - RDD - 依赖关系 - 血缘关系 - 演示</span><br><span class="line"><span class="number">094</span>Core - 核心编程 - RDD - 依赖关系 - 宽窄依赖</span><br><span class="line"><span class="number">095</span>Core - 核心编程 - RDD - 依赖关系 - 阶段<span class="meta">&amp;分区&amp;任务 - 概念解析 - 秋游了</span></span><br><span class="line"><span class="number">096</span>Core - 核心编程 - RDD - 依赖关系 - 阶段划分源码解读</span><br><span class="line"><span class="number">097</span>Core - 核心编程 - RDD - 依赖关系 - 任务划分源码解读</span><br><span class="line"><span class="number">098</span>Core - 核心编程 - RDD - 依赖关系 - 任务分类</span><br><span class="line"><span class="number">099</span>Core - 核心编程 - RDD - 持久化 - cache <span class="meta">&amp; persist基本原理和演示</span></span><br><span class="line"><span class="number">100</span>Core - 核心编程 - RDD - 持久化 - 作用</span><br><span class="line"><span class="number">101</span>Core - 核心编程 - RDD - 持久化 - 检查点</span><br><span class="line"><span class="number">102</span>Core - 核心编程 - RDD - 持久化 - 区别</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-13">3.所学内容概述</h2><h3 id="行动算子">行动算子</h3><h4 id="序列化">序列化</h4><h4 id="依赖关系">依赖关系</h4><h4 id="持久化">持久化</h4><h2 id="4-根据概述分章节描述-11">4.根据概述分章节描述</h2><h3 id="RDD行动算子">RDD行动算子</h3><p>行动算子就是触发作业(job)执行的方法<br>底层代码调用的是环境对象的runJob</p><h4 id="reduce">reduce</h4><p>以及基本简单方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Operator_reduce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//reduce</span></span><br><span class="line">    <span class="keyword">val</span> i: <span class="type">Int</span> = rdd.reduce((_: <span class="type">Int</span>) + (_: <span class="type">Int</span>))</span><br><span class="line">    println(i) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//collect 采集 方法会将不同分区的数据按照分区顺序采集到Driver端内存中，形成数组</span></span><br><span class="line">    <span class="keyword">val</span> ints: <span class="type">Array</span>[<span class="type">Int</span>] = rdd.collect()</span><br><span class="line">    println(ints.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">// 1,4,3,2</span></span><br><span class="line">    <span class="comment">// count返回 RDD 中元素的个数</span></span><br><span class="line">    <span class="keyword">val</span> countResult: <span class="type">Long</span> = rdd.count()</span><br><span class="line">    println(countResult) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// first 返回RDD第一个元素</span></span><br><span class="line">    println(rdd.first())</span><br><span class="line">    <span class="comment">//take 返回一个由 RDD 的前 n 个元素组成的数组</span></span><br><span class="line">    <span class="keyword">val</span> ints1: <span class="type">Array</span>[<span class="type">Int</span>] = rdd.take(<span class="number">3</span>)</span><br><span class="line">    println(ints1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//1,4,3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//takeOrdered 返回该 RDD 排序后的前 n 个元素组成的数组</span></span><br><span class="line">    <span class="keyword">val</span> ints2: <span class="type">Array</span>[<span class="type">Int</span>] = rdd.takeOrdered(<span class="number">3</span>) <span class="comment">//1,2,3</span></span><br><span class="line">    println(ints2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="collect">collect</h4><p>在驱动程序中，以数组 Array 的形式返回数据集的所有元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Action</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//行动算子就是触发作业(job)执行的方法</span></span><br><span class="line">    <span class="comment">//底层代码调用的是环境对象的runJob</span></span><br><span class="line">    rdd.collect() <span class="comment">//collect就是行动算子</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="aggregate-fold">aggregate &amp; fold</h4><p>分区的数据通过初始值和分区内的数据进行聚合，然后再和初始值进行分区间的数据聚合</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_RDD_Operator_aggregate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">// 将该 RDD 所有元素相加得到结果</span></span><br><span class="line">    <span class="comment">//初始值参与分区内的计算 分区间计算也有</span></span><br><span class="line">    <span class="keyword">val</span> result1: <span class="type">Int</span> = rdd.aggregate(<span class="number">0</span>)(_ + _, _ + _)</span><br><span class="line">    <span class="keyword">val</span> result2: <span class="type">Int</span> = rdd.aggregate(<span class="number">10</span>)(_ + _, _ + _) <span class="comment">//初始值看分区间</span></span><br><span class="line">    println(result1)<span class="comment">//10</span></span><br><span class="line">    println(result2)<span class="comment">//40 1+4+10 + 3+2+10 + 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//fold aggregate的简化操作</span></span><br><span class="line">    <span class="keyword">val</span> foldResult1: <span class="type">Int</span> = rdd.fold(<span class="number">0</span>)(_+_) <span class="comment">//分区内和分区间一样的操作</span></span><br><span class="line">    <span class="keyword">val</span> foldResult2: <span class="type">Int</span> = rdd.fold(<span class="number">10</span>)(_+_) <span class="comment">//分区内和分区间一样的操作</span></span><br><span class="line">    println(foldResult1) <span class="comment">//10</span></span><br><span class="line">    println(foldResult2) <span class="comment">//40 15 + 15 +10</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="countByKey-countByValue">countByKey &amp; countByValue</h4><p>统计每种 key 的个数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_RDD_Operator_countByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计每种key的个数</span></span><br><span class="line">    <span class="keyword">val</span> resultKey: collection.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Long</span>] = rdd.countByKey()</span><br><span class="line">    <span class="keyword">val</span> resultValue: collection.<span class="type">Map</span>[(<span class="type">Int</span>, <span class="type">String</span>), <span class="type">Long</span>] = rdd.countByValue()</span><br><span class="line">    println(resultKey) <span class="comment">//key出现了几次</span></span><br><span class="line">    println(resultValue) <span class="comment">// RDD内的元素出现了几次</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="save相关算子">save相关算子</h4><p>保存文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_RDD_Operator_Save</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//save 将RDD数据保存到不同格式的文件中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>)))</span><br><span class="line">    <span class="comment">// 保存成 Text 文件</span></span><br><span class="line">    rdd.saveAsTextFile(<span class="string">&quot;output&quot;</span>) <span class="comment">//比较常用</span></span><br><span class="line">    <span class="comment">// 序列化成对象保存到文件</span></span><br><span class="line">    rdd.saveAsObjectFile(<span class="string">&quot;output1&quot;</span>)</span><br><span class="line">    <span class="comment">// 保存成 Sequencefile 文件 要求数据格式必须是key-Value类型</span></span><br><span class="line">    rdd.saveAsSequenceFile(<span class="string">&quot;output2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="foreach">foreach</h4><p>分布式遍历 RDD 中的每一个元素，调用指定函数  下文有行动算子的执行原理解释</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark06_RDD_Operator_Foreach</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//算子： Operator（操作）</span></span><br><span class="line">    <span class="comment">//  RDD的方法和Scala集合对象的方法不一样</span></span><br><span class="line"><span class="comment">//    集合对象的方法都是在同一个节点的内存中完成的</span></span><br><span class="line"><span class="comment">//    RDD的方法可以将计算逻辑发送到Executor端执行</span></span><br><span class="line"><span class="comment">//    为了区分不同的处理效果，所以将RDD的方法称之为算子</span></span><br><span class="line"><span class="comment">//    RDD的方法的操作都是在Driver端执行的，而方法内部的逻辑代码是在Executor端执行。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="comment">//foreach 其实是Driver端内存集合的循环遍历方法</span></span><br><span class="line">    <span class="comment">// 收集后打印</span></span><br><span class="line">    rdd.collect().foreach(println) <span class="comment">// 有顺序</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;****************&quot;</span>)</span><br><span class="line">    <span class="comment">// 分布式打印</span></span><br><span class="line">    <span class="comment">// Executor端内存数据打印</span></span><br><span class="line">    rdd.foreach(println) <span class="comment">// 无序</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD序列化">RDD序列化</h3><p><code>算子以外的代码都是在 Driver 端执行, 算子里面的代码都是在 Executor端执行</code></p><p>要清晰上面这句话，Scala是函数式编程，，就会导致算子内经常会用到算子外的数据，这样就形成了闭包的效果，如果使用的算子外的数据无法序列化，就意味着无法传值给 Executor端执行，就会发生错误。所以要解决算子使用算子外数据的问题，就需要数据序列化。</p><p><code>java中序列化是继承Serializable，在scala中称之为混入</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.serial</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Serial</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 建立和Spark框架的连接</span></span><br><span class="line">    <span class="comment">//JDBC:Connection</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line">    <span class="comment">// 创建 Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行业务操作</span></span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(<span class="type">Array</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello spark&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;atguigu&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> search = <span class="keyword">new</span> <span class="type">Search</span>(<span class="string">&quot;h&quot;</span>) <span class="comment">//算子使用算子外的数据</span></span><br><span class="line"><span class="comment">//    search.getMatch1(rdd).collect().foreach(println)</span></span><br><span class="line">    search.getMatch2(rdd).collect().foreach(println)</span><br><span class="line">    <span class="comment">//TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Search</span>(<span class="params">query:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">//混入Serializable</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">      s.contains(query)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span> </span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter(isMatch)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter((x: <span class="type">String</span>) =&gt; x.contains(query))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD依赖关系">RDD依赖关系</h3><p>依赖关系，其实就是两个相邻 RDD 之间的关系 和java中的子类父类差不多吧</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220723165704674.png" alt="image-20220723165704674"></p><h3 id="RDD的持久化">RDD的持久化</h3><p>RDD代码，很长一些是重复的，如果使用不同是行动算子，会重新调用一遍之前的代码，这样效率太低了。</p><p>持久化可以将之前的依赖和代码保存在临时文件或者磁盘中。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.persist</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SPARK_BRANCH</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Persist</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// TODO  Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;Persist&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="string">&quot;Hello Scala&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd:<span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatRDD: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap((_:<span class="type">String</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatRDD.map(</span><br><span class="line">      (word: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;@@@@@@@@@@@@@@@@@&quot;</span>)</span><br><span class="line">        (word,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cache默认保存咋在内存中</span></span><br><span class="line"><span class="comment">//    mapRDD.cache() //放内存中持久化了 数据这样只会一遍</span></span><br><span class="line">    <span class="comment">//可以放磁盘</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//持久化操作必须在行动算子执行时完成</span></span><br><span class="line">    mapRDD.persist(<span class="type">StorageLevel</span>.<span class="type">DISK_ONLY</span>) <span class="comment">//保存的是临时文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> reduceRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = mapRDD.reduceByKey((_:<span class="type">Int</span>) + (_:<span class="type">Int</span>))</span><br><span class="line">    <span class="keyword">val</span> reduceRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = mapRDD.groupByKey()</span><br><span class="line"></span><br><span class="line">    reduceRDD.collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;————————————————————————————————————&quot;</span>)</span><br><span class="line">    reduceRDD1.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="checkpoint的使用">checkpoint的使用</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.persist</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Persist</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// TODO  Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;Persist&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    sc.setCheckpointDir(<span class="string">&quot;cp&quot;</span>) <span class="comment">//设置保存路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="string">&quot;Hello Scala&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd:<span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatRDD: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap((_:<span class="type">String</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatRDD.map(</span><br><span class="line">      (word: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;@@@@@@@@@@@@@@@@@&quot;</span>)</span><br><span class="line">        (word,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//需要落盘 需要指定检查点的保存路径</span></span><br><span class="line">    <span class="comment">//检查点路径保存的文件 当作业执行完毕后 不会被删除</span></span><br><span class="line">    <span class="comment">//一般保存路径都是在分布式存储系统 HDFS 在13行</span></span><br><span class="line">    mapRDD.cache()</span><br><span class="line">    mapRDD.checkpoint()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> reduceRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = mapRDD.reduceByKey((_:<span class="type">Int</span>) + (_:<span class="type">Int</span>))</span><br><span class="line">    <span class="keyword">val</span> reduceRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = mapRDD.groupByKey()</span><br><span class="line"></span><br><span class="line">    reduceRDD.collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;————————————————————————————————————&quot;</span>)</span><br><span class="line">    reduceRDD1.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久化几种方式的区别</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cache : 将数据临时存储在内存中进行数据重用</span></span><br><span class="line"><span class="comment">//persist : 将数据临时存储在磁盘文件中进行数据重用</span></span><br><span class="line">            <span class="comment">//涉及到磁盘IO，性能较低，但是数据安全</span></span><br><span class="line">            <span class="comment">//如果作业执行完毕，临时保存的数据文件就会丢失</span></span><br><span class="line"><span class="comment">//checkpoint：将数据长久地保存在磁盘文件中进行数据的重用</span></span><br><span class="line">            <span class="comment">//为了保证数据安全，所以一般情况下，会独立执行作业</span></span><br><span class="line">            <span class="comment">//为了能够提高效率，一般情况下，是需要和cache联合使用</span></span><br></pre></td></tr></table></figure><h3 id="分区器">分区器</h3><p>➢ 只有 Key-Value 类型的 RDD 才有分区器，非 Key-Value 类型的 RDD 分区的值是 None</p><p>之前使用过repartition 是hash分区 现在可以自定义分区</p><p>分区类 要继承 Partitioner</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">WordCount</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">Partitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_RDD_repartition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// TODO  Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;Persist&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">&quot;NBA&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;CBA&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;WNBA&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;CUBA&quot;</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(list, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = rdd.partitionBy(<span class="keyword">new</span> <span class="type">MyPartitioner</span>)</span><br><span class="line"></span><br><span class="line">    value.saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span></span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      key <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;NBA&quot;</span> =&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;CBA&quot;</span> =&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="累加器">累加器</h3><p>累加器用来把 Executor 端变量信息聚合到 Driver 端。在 Driver 程序中定义的变量，在Executor 端的每个 Task 都会得到这个变量的一份新的副本，每个 task 更新这些副本的值后，传回 Driver 端进行 merge。</p><p>像Range使用的时候就不会传回到Driver端 Driver传到Executor端以后，在Executor端做任务，不会传回Driver端</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.add</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.util.<span class="type">LongAccumulator</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_add</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;add&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="comment">// 声明累加器</span></span><br><span class="line">    <span class="keyword">val</span> sum: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;sum2&quot;</span>)</span><br><span class="line">    rdd.foreach(</span><br><span class="line">      (num: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 使用累加器</span></span><br><span class="line">        sum.add(num)</span><br><span class="line">      &#125; )</span><br><span class="line">    <span class="comment">// 获取累加器的值</span></span><br><span class="line">    println(<span class="string">&quot;sum = &quot;</span> + sum.value)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-8">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>执行自定义分区器的时候，报了一大串的错误，一个一个翻译过来，有一个错误是指向了自己自定义类的case表达式，检查过后发现，自己有四个Key-value,3个分区，按照索引下标 0 1 2 ，所以后面自己自定义match类应该返回三个值，而且key值得都有返回值。所以按自己的写法，会有一个键值对没有返回值，也就没有分区导致报错。把最后一个改成        <code>case _ =&gt; 2</code>表示除了前两个之外，返回值都是分区2</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220724143959415.png" alt="image-20220724143959415"></p><h2 id="6-扩展学习部分-8">6.扩展学习部分</h2><h3 id="Kryo-序列化框架">Kryo 序列化框架</h3><p>scala所独有的，java中序列化的升级版，性能大大提高。</p><p>Kryo 速度是 Serializable 的 10 倍。当 RDD 在 Shuffle 数据的时候，简单数据类型、数组和字符串类型已经在 Spark 内部使用 Kryo 来序列化。</p><p><code>注意：即使使用 Kryo 序列化，也要继承 Serializable 接口。</code>代码量会增加一点，但是效率大大提高</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.serial</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_SerialKryo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Application</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spark框架</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 建立和Spark框架的连接</span></span><br><span class="line">    <span class="comment">//JDBC:Connection</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)<span class="comment">// 替换默认的序列化机制</span></span><br><span class="line">      .set(<span class="string">&quot;spark.serializer&quot;</span>, <span class="string">&quot;org.apache.spark.serializer.KryoSerializer&quot;</span>)</span><br><span class="line">      <span class="comment">// 注册需要使用 kryo 序列化的自定义类</span></span><br><span class="line">      .registerKryoClasses(<span class="type">Array</span>(classOf[<span class="type">Search</span>]))</span><br><span class="line">    <span class="comment">// 创建 Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行业务操作</span></span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(<span class="type">Array</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello spark&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;atguigu&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> search = <span class="keyword">new</span> <span class="type">Search</span>(<span class="string">&quot;h&quot;</span>) <span class="comment">//使用算子外的数据</span></span><br><span class="line"><span class="comment">//    search.getMatch1(rdd).collect().foreach(println)</span></span><br><span class="line">    search.getMatch2(rdd).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span>  <span class="class"><span class="keyword">class</span> <span class="title">Search</span>(<span class="params">query:<span class="type">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">      s.contains(query)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span> </span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter(isMatch)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter((x: <span class="type">String</span>) =&gt; x.contains(query))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD-任务划分"><strong>RDD</strong> <strong>任务划分</strong></h3><p>RDD 任务切分中间分为：Application、Job、Stage 和 Task</p><p>Application：初始化一个 SparkContext 即生成一个 Application；</p><p>Job：一个 Action 算子就会生成一个 Job；</p><p>Stage：Stage 等于宽依赖(ShuffleDependency)的个数加 1；</p><p>Task：一个 Stage 阶段中，最后一个 RDD 的分区个数就是 Task 的个数。</p><p><strong>注意：Application-&gt;Job-&gt;Stage-&gt;Task 每一层都是 1 对 n 的关系。</strong></p><h2 id="7-总结-9">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容和难度都是有点大的，前面先学的行动算子，比较简单，和昨天的转换算子差不多，比转换算子的算法还简单不少，但是代码比较多的，也是今天学习的重点，敲了一上午才结束行动算子，做了小案例。后面下午，精神状态还不错，看到序列化  依赖 持久之类的，在Java中都有点类似的东西，加上老师的画图理解，自己结合案例，也是弄得明白个八九十了。学习步骤，因为文档没有讲解，就看了视频，案例自己敲，没什么问题就跳着看老师的运行，看和自己有什么不一样，明天就是SQL的学习了。代码应该也比较多，还要记SQL语句的。</p><h1>7.24 Spark SQL</h1><h2 id="1-头：日期、所学内容出处-14">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-14">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span>SQL - 介绍</span><br><span class="line"><span class="number">154</span>SQL - 特点</span><br><span class="line"><span class="number">155</span>SQL - 数据模型 - DataFrame &amp; DataSet</span><br><span class="line"><span class="number">156</span>SQL - 核心编程 - DataFrame - 简单演示</span><br><span class="line"><span class="number">157</span>SQL - 核心编程 - DataFrame - SQL的基本使用</span><br><span class="line"><span class="number">158</span>SQL - 核心编程 - DataFrame - DSL语法的基本使用</span><br><span class="line"><span class="number">159</span>SQL - 核心编程 - DataFrame - RDD之间的转换</span><br><span class="line"><span class="number">160</span>SQL - 核心编程 - DataSet - 介绍</span><br><span class="line"><span class="number">161</span>SQL - 核心编程 - DataSet - DataFrame的转换</span><br><span class="line"><span class="number">162</span>SQL - 核心编程 - DataSet - RDD的转换</span><br><span class="line"><span class="number">163</span>SQL - 核心编程 - DataSet &amp; DataFrame &amp; RDD之间的关系</span><br><span class="line"><span class="number">164</span>SQL - 核心编程 - IDEA创建SparkSQL环境对象</span><br><span class="line"><span class="number">165</span>SQL - 核心编程 - IDEA - DataFrame基本操作</span><br><span class="line"><span class="number">166</span>SQL - 核心编程 - IDEA - DataSet基本操作</span><br><span class="line"><span class="number">167</span>SQL - 核心编程 - IDEA - RDD &amp; DataFrame &amp; DataSet互相转换</span><br><span class="line"><span class="number">168</span>SQL - 核心编程 - IDEA - UDF函数</span><br><span class="line"><span class="number">169</span>SQL - 核心编程 - IDEA - UDAF函数 - 实现原理</span><br><span class="line"><span class="number">170</span>SQL - 核心编程 - IDEA - UDAF函数 - 弱类型函数实现</span><br><span class="line"><span class="number">171</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - IDEA - UDAF函数 - 强类型函数实现</span><br><span class="line"><span class="number">172</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - IDEA - UDAF函数 - 早期强类型函数实现</span><br><span class="line"><span class="number">173</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - IDEA - UDAF函数 - 课件梳理</span><br><span class="line"><span class="number">174</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 通用方法</span><br><span class="line"><span class="number">175</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作JSON &amp; CSV</span><br><span class="line"><span class="number">176</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作MySQL</span><br><span class="line"><span class="number">177</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作内置Hive</span><br><span class="line"><span class="number">178</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作外置Hive</span><br><span class="line"><span class="number">179</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 代码操作外置Hive</span><br><span class="line"><span class="number">180</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - beeline操作Hive</span><br><span class="line"><span class="number">181</span>.尚硅谷<span class="variable">_SparkSQL</span> - 案例实操 - 数据准备</span><br><span class="line"><span class="number">182</span>.尚硅谷<span class="variable">_SparkSQL</span> - 案例实操 - 需求部分实现</span><br><span class="line"><span class="number">183</span>.尚硅谷<span class="variable">_SparkSQL</span> - 案例实操 - 需求完整实现</span><br><span class="line"><span class="number">184</span>.尚硅谷<span class="variable">_SparkSQL</span> - 总结 - 课件梳理 </span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-14">3.所学内容概述</h2><h2 id="4-根据概述分章节描述-12">4.根据概述分章节描述</h2><h3 id="SparkSQL概述">SparkSQL概述</h3><p><code>Spark SQL 是 Spark 用于结构化数据(structured data)处理的 Spark 模块。</code></p><p>对于开发人员来讲，SparkSQL 可以简化 RDD 的开发，提高开发效率，且执行效率非常快，所以实际工作中，基本上采的就是 SparkSQL。Spark SQL 为了简化 RDD 的开发，提高开发效率，提供了 2 个编程抽象，类似 Spark Core 中的 RDD</p><p>➢ DataFrame</p><p>➢ DataSet</p><h4 id="SparkSQL-特点"><strong>SparkSQL</strong> 特点</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">易整合：无缝的整合了 <span class="keyword">SQL</span> 查询和 Spark 编程</span><br><span class="line">统一的数据访问：使用相同的方式。连接不同的数据源</span><br><span class="line">兼容Hive：在已有的仓库上直接运行<span class="keyword">SQL</span> 或者 HIveQL.</span><br><span class="line">标准数据连接：通过JDBC或者ODBC来连接</span><br></pre></td></tr></table></figure><h4 id="DataFrame是什么">DataFrame是什么</h4><p>在 Spark 中，DataFrame 是一种以 RDD 为基础的分布式数据集，类似于传统数据库中的二维表格。</p><p>下图直观地体现了 DataFrame 和 RDD 的区别。 DataFrame<strong>每一列都带有名称和类型</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220725095120995.png" alt="image-20220725095120995"></p><p><strong>DataSet</strong> <strong>是什么</strong></p><p>DataSet 是分布式数据集合。DataSet 是 Spark 1.6 中添加的一个新抽象，是 DataFrame的一个扩展。</p><p>用编程的话说就是DataSet是DataFrame的子类，升级版。DataFrame拥有的功能DataSet都有。</p><h3 id="SparkSQL的核心编程">SparkSQL的核心编程</h3><h4 id="DataFrame">DataFrame</h4><p><code>Spark SQL 的 DataFrame API 允许我们使用 DataFrame 而不用必须去注册临时表或者生成 SQL 表达式。DataFrame API 既有 transformation 操作也有 action 操作。</code></p><h5 id="创建DataFrame">创建DataFrame</h5><h5 id="1-从Spark数据源进行创建">1.从Spark数据源进行创建</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scala &gt; spark.read.</span><br><span class="line"><span class="comment">//下面都是支持创建文件的数据源格式</span></span><br><span class="line">csv format jdbc json load option options orc parquet schema table text textFile</span><br></pre></td></tr></table></figure><p>读取json创建DataFrame</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint， username: string] <span class="comment">//bigint是数据类型 因为不知道什么类型 所以用bigint接收 bigint可以和Long类型转换，但是和Int不能进行转换</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure><h5 id="2-用SQL语法">2.用SQL语法</h5><p>对 DataFrame 创建一个临时表</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">&quot;people&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过 SQL 语句实现查询全表</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val sqlDF = spark.sql(&quot;SELECT * FROM people&quot;)</span><br><span class="line"><span class="function">sqlDF: <span class="title">org.apache.spark.sql.DataFrame</span> = [<span class="title">age</span>: <span class="title">bigint</span>， <span class="title">name</span>: <span class="title">string</span>]</span></span><br></pre></td></tr></table></figure><p><code>show</code>进行一个输出</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; sqlDF.show</span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">30</span>| lisi|</span><br><span class="line">| <span class="number">40</span>| wangwu|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure><h4 id="DSL语法">DSL语法</h4><p>DataFrame 提供一个特定领域语言去管理结构化的数据。可以在 Scala, Java, Python 和 R 中使用 DSL，使用 DSL 语法风格不必去创建临时视图了。</p><p>只查看&quot;username&quot;列数据</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select(&quot;username&quot;).show()</span><br><span class="line">+--------+</span><br><span class="line">|username|</span><br><span class="line">+--------+</span><br><span class="line">|zhangsan|</span><br><span class="line">| lisi|</span><br><span class="line">| wangwu|</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><p>查看&quot;username&quot;列数据以及&quot;age+1&quot;数据</p><p><code>注意:涉及到运算的时候, 每列都必须使用$, 或者采用引号表达式：单引号+字段名</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select($<span class="string">&quot;username&quot;</span>,$<span class="string">&quot;age&quot;</span> + <span class="number">1</span>).show</span><br><span class="line">scala&gt; df.select(&#x27;username, &#x27;age + <span class="number">1</span>).show() <span class="comment">//推荐这种 比较简单而且可读性好</span></span><br></pre></td></tr></table></figure><p>DataFrame可以用很多RDD的方法 filter  group等</p><h3 id="IDEA开发SparkSQL">IDEA开发SparkSQL</h3><p>实际开发中，都是使用 IDEA 进行开发的。</p><p>要添加XML依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-yarn_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前CMD敲的代码在IDEA实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_SparkSQL_Basic</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._  <span class="comment">//导入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="comment">//DataFrame</span></span><br><span class="line"><span class="comment">//    val df: DataFrame = spark.read.json(&quot;data/user.json&quot;)</span></span><br><span class="line">    <span class="comment">//    df.show()</span></span><br><span class="line">    <span class="comment">//TODO RDD=&gt;DataFrame=&gt;DataSet 转换需要引入隐式转换规则，否则无法转换</span></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; SQL</span></span><br><span class="line"><span class="comment">//    df.createOrReplaceTempView(&quot;user&quot;)</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select * from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select age from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select username from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select avg(age) from user&quot;).show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; DSL</span></span><br><span class="line">    <span class="comment">// 在使用DataFrame时，如果涉及到转换操作，需要引入转换规则</span></span><br><span class="line">    <span class="comment">//    df.select(&quot;age&quot;,&quot;username&quot;).show()</span></span><br><span class="line">    <span class="comment">//    df.select($&quot;age&quot; + 1).show</span></span><br><span class="line">    <span class="comment">//    df.select(&#x27;age + 1).show</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet</span></span><br><span class="line">    <span class="comment">// DataFrame其实是特定泛型的DataSet 是类型只能是Row的DataSet</span></span><br><span class="line">    <span class="comment">// 所以DataFrame的东西DataSet也都有都能用</span></span><br><span class="line"><span class="comment">//    val ints = Seq(1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">//    val ds: Dataset[Int] = ints.toDS()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> context: <span class="type">SparkContext</span> = spark.sparkContext</span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>)] = context.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>), (<span class="number">2</span>, <span class="string">&quot;lisa&quot;</span>, <span class="number">40</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = rdd.toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>) <span class="comment">//DataFrame</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rowRDD: <span class="type">RDD</span>[<span class="type">Row</span>] = df.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">User</span>] = df.as[<span class="type">User</span>]</span><br><span class="line">    <span class="keyword">val</span> df1: <span class="type">DataFrame</span> = ds.toDF()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataSet</span></span><br><span class="line">    <span class="keyword">val</span> ds1: <span class="type">Dataset</span>[<span class="type">User</span>] = rdd.map &#123;</span><br><span class="line">      <span class="keyword">case</span> (id, name, age) =&gt; <span class="type">User</span>(id, name, age)</span><br><span class="line">    &#125;.toDS() <span class="comment">//DataSet</span></span><br><span class="line">    <span class="keyword">val</span> userRDD: <span class="type">RDD</span>[<span class="type">User</span>] = ds1.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户自定义函数">用户自定义函数</h4><p>用户可以通过 spark.udf 功能添加自定义函数，实现自定义功能。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_SparkSQL_UDF</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    df.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="comment">//udf 用户可以通过 spark.udf 功能添加自定义函数，实现自定义功能</span></span><br><span class="line"><span class="comment">//注册UDF</span></span><br><span class="line">    spark.udf.register(<span class="string">&quot;prefixName&quot;</span>,(name:<span class="type">String</span>) =&gt; <span class="string">&quot;姓名: &quot;</span> + name)</span><br><span class="line">    <span class="comment">//应用UDF</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select * from user&quot;</span>).show()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UDAF">UDAF</h4><p>是Spark3.0后面出现的自定义强类型聚合函数Aggreg 代替原来的弱类型的聚合函数UserDefinedAggregateFunction</p><p>计算平均工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.<span class="type">Aggregator</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_SparkSQL_UDAF1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    df.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="comment">//udf 用户可以通过 spark.udf 功能添加自定义函数，实现自定义功能</span></span><br><span class="line"></span><br><span class="line">    spark.udf.register(<span class="string">&quot;ageAvg&quot;</span>,functions.udaf(<span class="keyword">new</span> <span class="type">MyAvgUDAF</span>()))</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;select ageAvg(age) from user&quot;</span>).show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  自定义聚合函数类：计算年龄的平均值</span></span><br><span class="line"><span class="comment">  1. 继承org.apache.spark.sql.expressions.Aggregator, 定义泛型</span></span><br><span class="line"><span class="comment">      IN : 输入的数据类型 Long</span></span><br><span class="line"><span class="comment">      BUF : 缓冲区的数据类型 Buff</span></span><br><span class="line"><span class="comment">      OUT : 输出的数据类型 Long</span></span><br><span class="line"><span class="comment">  2. 重写方法(6)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">ByMyBuff</span>(<span class="params">var total: <span class="type">Long</span>,var count: <span class="type">Long</span></span>)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAvgUDAF</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">Long</span>,<span class="type">ByMyBuff</span>,<span class="type">Long</span>]</span>&#123;</span><br><span class="line">    <span class="comment">// z &amp; zero : 初始值或零值</span></span><br><span class="line">    <span class="comment">// 缓冲区的初始化</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">ByMyBuff</span> = &#123;</span><br><span class="line">      <span class="type">ByMyBuff</span>(<span class="number">0</span>L,<span class="number">0</span>L)<span class="comment">//Long默认初始0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据输入的数据更新缓冲区的数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(b: <span class="type">ByMyBuff</span>, a: <span class="type">Long</span>): <span class="type">ByMyBuff</span> = &#123;</span><br><span class="line">      b.total = b.total + a <span class="comment">//ByMyBuff的total和下一行的数据中的total相加</span></span><br><span class="line">      b.count = b.count + <span class="number">1</span> <span class="comment">//加一次算一个 用户</span></span><br><span class="line">      b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 合并缓冲区</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(b1: <span class="type">ByMyBuff</span>, b2: <span class="type">ByMyBuff</span>): <span class="type">ByMyBuff</span> = &#123;</span><br><span class="line">      b1.total = b1.total + b2.total <span class="comment">//整合一体</span></span><br><span class="line">      b1.count = b1.count + b2.count</span><br><span class="line">      b1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(reduction: <span class="type">ByMyBuff</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">      reduction.total / reduction.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">ByMyBuff</span>] = <span class="type">Encoders</span>.product</span><br><span class="line">    <span class="comment">// 输出区的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Long</span>] = <span class="type">Encoders</span>.scalaLong</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据的加载和保存</strong></p><p>SparkSQL 提供了通用的保存数据和数据加载的方式。这里的通用指的是使用相同的API，根据不同的参数读取和保存不同格式的数据，SparkSQL 默认读取和保存的文件格式为 <strong>parquet</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spark.read.load 是加载数据的通用方法</span><br><span class="line">scala&gt; spark.read.<span class="built_in">format</span>(&quot;…&quot;)[.option(&quot;…&quot;)].load(&quot;…&quot;)</span><br><span class="line">df.write.save 是保存数据的通用方法</span><br><span class="line">scala&gt;df.write.<span class="built_in">format</span>(&quot;…&quot;)[.option(&quot;…&quot;)].save(&quot;…&quot;)</span><br></pre></td></tr></table></figure><p>➢ format(“…”)：指定加载的数据类型，包括&quot;csv&quot;、“jdbc”、“json”、“orc”、“parquet&quot;和&quot;textFile”。</p><p>➢ load(“…”)：在&quot;csv&quot;、“jdbc”、“json”、“orc”、&quot;parquet&quot;和&quot;textFile&quot;格式下需要传入加载数据的路径。</p><p>➢ option(“…”)：在&quot;jdbc&quot;格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable</p><h4 id="加载MySQL数据">加载MySQL数据</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span>.<span class="type">MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_SparkSQL_MySQL</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    spark.read</span><br><span class="line">      .format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      <span class="comment">//localhost主机 3306端口号(SQL8.0)_atguigudb数据库名 </span></span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/atguigudb?rewriteBatchedStatements=true&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;driverClass&quot;</span>, <span class="string">&quot;com.mysql.cj.jdbc.Drive&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      <span class="comment">//表名</span></span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;employees&quot;</span>)</span><br><span class="line">      .load().show</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-9">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>错误点如图，显而易见又是路径问题，同样的代我之前是在Spark下载文件直接打开Spark-shell使用的，之前是好的，因为太麻烦，所以设置了环境变量，在任何地方输入spark-shell都能打开spark，但是这样我输之前的路径就不行了，必须要绝对路径，不知道原因</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220725101816366.png" alt="image-20220725101816366"></p><h2 id=""></h2><h3 id="RDD、DataFrame、DataSet-三者的关系">RDD、DataFrame、DataSet 三者的关系</h3><p><code>因为是在文档中看的 基本都是文字性的描述</code></p><p>版本出现的时间</p><p>➢ Spark1.0 =&gt; RDD</p><p>➢ Spark1.3 =&gt; DataFrame</p><p>➢ Spark1.6 =&gt; Dataset</p><p>时代是在进步的，所以看出现版本就知道哪个更加强大，所以DataSet也是现在的主流</p><p><code>在后期的 Spark 版本中，DataSet 有可能会逐步取代 RDD和 DataFrame 成为唯一的 API 接口。</code></p><p><strong>三者的共性</strong></p><p>➢ RDD、DataFrame、DataSet 全都是 spark 平台下的分布式弹性数据集，为处理超大型数据提供便利;</p><p>➢ 三者都有惰性机制，在进行创建、转换，如 map 方法时，不会立即执行，只有在遇到Action 如 foreach 时，三者才会开始遍历运算;</p><p>➢ 三者有许多共同的函数，如 filter，排序等;</p><p>➢ 在对 DataFrame 和 Dataset 进行操作许多操作都需要这个包:import spark.implicits._（在创建好 SparkSession 对象后尽量直接导入）</p><p>➢ 三者都会根据 Spark 的内存情况自动缓存运算，这样即使数据量很大，也不用担心会内存溢出</p><p>➢ 三者都有 partition 的概念</p><p>➢ DataFrame 和 DataSet 均可使用模式匹配获取各个字段的值和类型</p><h4 id="DataSet">DataSet</h4><p>DataSet</p><p>➢ Dataset 和 DataFrame 拥有完全相同的成员函数，区别只是每一行的数据类型不同。DataFrame 其实就是 DataSet 的一个特例 type DataFrame = Dataset[Row]</p><p>➢ DataFrame 也可以叫 Dataset[Row],每一行的类型是 Row，不解析，每一行究竟有哪些字段，各个字段又是什么类型都无从得知，只能用上面提到的 getAS 方法或者共性中的第七条提到的模式匹配拿出特定字段。而 Dataset 中，每一行是什么类型是不一定的，在自定义了 case class 之后可以很自由的获得每一行的信息</p><p>三者是可以互相转换的 通过特定方式</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220725101311213.png" alt="image-20220725101311213"></p><p>具体代码如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_SparkSQL_Basic</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="comment">//DataFrame</span></span><br><span class="line"><span class="comment">//    val df: DataFrame = spark.read.json(&quot;data/user.json&quot;)</span></span><br><span class="line">    <span class="comment">//    df.show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; SQL</span></span><br><span class="line"><span class="comment">//    df.createOrReplaceTempView(&quot;user&quot;)</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select * from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select age from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select username from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select avg(age) from user&quot;).show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; DSL</span></span><br><span class="line">    <span class="comment">// 在使用DataFrame时，如果涉及到转换操作，需要引入转换规则</span></span><br><span class="line">    <span class="comment">//    df.select(&quot;age&quot;,&quot;username&quot;).show()</span></span><br><span class="line">    <span class="comment">//    df.select($&quot;age&quot; + 1).show</span></span><br><span class="line">    <span class="comment">//    df.select(&#x27;age + 1).show</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet</span></span><br><span class="line">    <span class="comment">// DataFrame其实是特定泛型的DataSet 是类型只能是Row的DataSet</span></span><br><span class="line">    <span class="comment">// 所以DataFrame的东西DataSet也都有都能用</span></span><br><span class="line"><span class="comment">//    val ints = Seq(1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">//    val ds: Dataset[Int] = ints.toDS()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> context: <span class="type">SparkContext</span> = spark.sparkContext</span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>)] = context.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>), (<span class="number">2</span>, <span class="string">&quot;lisa&quot;</span>, <span class="number">40</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = rdd.toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>) <span class="comment">//DataFrame</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rowRDD: <span class="type">RDD</span>[<span class="type">Row</span>] = df.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">User</span>] = df.as[<span class="type">User</span>]</span><br><span class="line">    <span class="keyword">val</span> df1: <span class="type">DataFrame</span> = ds.toDF()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataSet</span></span><br><span class="line">    <span class="keyword">val</span> ds1: <span class="type">Dataset</span>[<span class="type">User</span>] = rdd.map &#123;</span><br><span class="line">      <span class="keyword">case</span> (id, name, age) =&gt; <span class="type">User</span>(id, name, age)</span><br><span class="line">    &#125;.toDS() <span class="comment">//DataSet</span></span><br><span class="line">    <span class="keyword">val</span> userRDD: <span class="type">RDD</span>[<span class="type">User</span>] = ds1.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-10">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容还是很重的，把SparkSQL看完，内容概念性的太多了，花费了很多时间去理解，弄懂，像搞懂RDD，DataFrame和DataSet三者就花费了2个多小时，比较麻烦，前面cmd执行出了点问题，好在解决了，但是没弄懂原因。重点在DataSet的使用和几个自定义方法吧，DataSet应该是现在开发最常用的，这部分我也花重点时间去掌握了，其他一些抽象的概念简单过了一下，有些是对Hive的操作，因为Hive还没写，就没看，明天学Hive了，后面再回来把对Hive操作的这几集看了。</p><h1>7.27 Hive 配置以及DDL语句</h1><h2 id="1-头：日期、所学内容出处-15">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-15">2.标题</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">P1001-尚硅谷-Hive-课程介绍</span><br><span class="line">P2002-尚硅谷-Hive-概念介绍-</span><br><span class="line">P3003-尚硅谷-Hive-优缺点</span><br><span class="line">P4004-尚硅谷-Hive-架构</span><br><span class="line">P5005-尚硅谷-Hive-与数据库比较</span><br><span class="line">P6006-尚硅谷-Hive-安装<span class="meta">&amp;启动</span></span><br><span class="line">P7007-尚硅谷-Hive-简单使用<span class="meta">&amp;Derby存储元数据的问题</span></span><br><span class="line">P8008-尚硅谷-Hive-MySQL的安装<span class="meta">&amp;启动</span></span><br><span class="line">P9009-尚硅谷-Hive-配置Hive元数据存储为MySQL<span class="meta">&amp;再次启动测试</span></span><br><span class="line">P10010-尚硅谷-Hive-使用元数据服务的方式访问Hive</span><br><span class="line">P11011-尚硅谷-Hive-使用JDBC的方式访问Hive</span><br><span class="line">P12012-尚硅谷-Hive-元数据服务<span class="meta">&amp;Hiveserver2脚本封装</span></span><br><span class="line">P13013-尚硅谷-Hive-修改配置文件使用直连方式访问Hive</span><br><span class="line">P14014-尚硅谷-Hive-其他交互方式</span><br><span class="line">P15015-尚硅谷-Hive-配置日志文件位置<span class="meta">&amp;打印当前库名&amp;表头信息</span></span><br><span class="line">P16016-尚硅谷-Hive-配置信息位置<span class="meta">&amp;优先级</span></span><br><span class="line">P17017-尚硅谷-Hive-课程回顾</span><br><span class="line">P18018-尚硅谷-Hive-关于count star不执行MR任务的说明</span><br><span class="line">P19019-尚硅谷-Hive-Hive中数据类型 一</span><br><span class="line">P20020-尚硅谷-Hive-Hive中数据类型 二</span><br><span class="line">P21021-尚硅谷-Hive-DDL 创建数据库</span><br><span class="line">P22022-尚硅谷-Hive-DDL 查询<span class="meta">&amp;切换数据库</span></span><br><span class="line">P23023-尚硅谷-Hive-DDL 修改<span class="meta">&amp;删除数据库</span></span><br><span class="line">P24024-尚硅谷-Hive-DDL 建表语句分析</span><br><span class="line">P25025-尚硅谷-Hive-DDL 内外部创建<span class="meta">&amp;区别</span></span><br><span class="line">P26026-尚硅谷-Hive-DDL 内外部互相转换</span><br><span class="line">P27027-尚硅谷-Hive-DDL 建表时指定字段分隔符</span><br><span class="line">P28028-尚硅谷-Hive-DDL 修改<span class="meta">&amp;删除表</span></span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-15">3.所学内容概述</h2><h3 id="1-18配置Hive在Centos7">1-18配置Hive在Centos7</h3><h4 id="Hive数据类型">Hive数据类型</h4><h4 id="DDL操作">DDL操作</h4><h2 id="4-根据概述分章节描述-13">4.根据概述分章节描述</h2><h3 id="Hive数据类型-2">Hive数据类型</h3><p>注意一点 时间类型 可以直接String类型yyyy-mm-dd，这样用。</p><p><code>对于 Hive 的 String 类型相当于数据库的 varchar 类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储 2GB 的字符数。</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220727205745194.png" alt="image-20220727205745194"></p><h3 id="集合数据类型">集合数据类型</h3><p>Hive 有三种复杂数据类型 ARRAY、MAP 和 STRUCT。ARRAY 和 MAP 与 Java 中的 Array和 Map 类似，而 STRUCT 与 C 语言中的 Struct 类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220727205903414.png" alt="image-20220727205903414"></p><p>案例实操</p><p>创建本地测试文件 test.txt</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">songsong,bingbing_lili,xiao song:<span class="number">18</span>_xiaoxiao song:<span class="number">19</span>,hui long guan_beijing</span><br><span class="line">yangyang,caicai_susu,xiao yang:<span class="number">18</span>_xiaoxiao yang:<span class="number">19</span>,chao yang_beijing</span><br></pre></td></tr></table></figure><p>Hive 上创建测试表 test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table test(</span><br><span class="line">name string,</span><br><span class="line">friends array&lt;string&gt;,</span><br><span class="line">children map&lt;string, int&gt;,</span><br><span class="line">address struct&lt;street:string, city:string&gt; )</span><br><span class="line">row format delimited fields terminated by &#x27;,&#x27;</span><br><span class="line">collection items terminated by &#x27;_&#x27;</span><br><span class="line">map keys terminated by &#x27;:&#x27;</span><br><span class="line">lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><p>后面四个字段的解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row format delimited fields terminated by &#x27;,&#x27; -- 列分隔符</span><br><span class="line">collection items terminated by &#x27;_&#x27; --MAP STRUCT 和 ARRAY 的分隔符(数据分割符号)</span><br><span class="line">map keys terminated by &#x27;:&#x27; -- MAP 中的 key 与 value 的分隔符</span><br><span class="line">lines terminated by &#x27;\n&#x27;; -- 行分隔符</span><br></pre></td></tr></table></figure><h3 id="DDL数据定义">DDL数据定义</h3><h4 id="创建数据库"><strong>创建数据库</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> db_hive; #增加 if <span class="keyword">not</span> <span class="keyword">exists</span>判断</span><br></pre></td></tr></table></figure><p><strong>指定数据库在</strong> <strong>HDFS</strong> <strong>上存放的位置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db_hive2 location <span class="string">&#x27;/db_hive2.db&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="查询数据库"><strong>查询数据库</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><strong>切换当前数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; use db_hive;</span><br></pre></td></tr></table></figure><p>修改数据库</p><p>用户可以使用 ALTER DATABASE 命令为某个数据库的 DBPROPERTIES 设置键-值对属性值，来描述这个数据库的属性信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; alter database db_hive </span><br><span class="line">set dbproperties(&#x27;createtime&#x27;=&#x27;20170830&#x27;);</span><br></pre></td></tr></table></figure><p><strong>删除数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hvie&gt;drop database db_hive2; //删除空的数据库</span><br><span class="line">hive&gt; drop database if exists db_hive2; //判断数据库是否存在</span><br><span class="line">hive&gt; drop database db_hive cascade; //强制删除数据库 不管是否为空</span><br></pre></td></tr></table></figure><h3 id="创建表"><strong>创建表</strong></h3><p><strong>建表语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name</span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line">[COMMENT table_comment]</span><br><span class="line">[PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line">[CLUSTERED BY (col_name, col_name, ...)</span><br><span class="line">[SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</span><br><span class="line">[ROW FORMAT row_format]</span><br><span class="line">[STORED AS file_format]</span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[TBLPROPERTIES (property_name=property_value, ...)]</span><br><span class="line">[AS select_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</span><br><span class="line">（2）EXTERNAL 关键字可以让用户创建一个外部表，在建表的同时可以指定一个指向实际数据的路径（LOCATION），在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。 </span><br><span class="line">（3）COMMENT：为表和列添加注释。</span><br><span class="line">（4）PARTITIONED BY 创建分区表</span><br><span class="line">（5）CLUSTERED BY 创建分桶表</span><br><span class="line">（6）SORTED BY 不常用，对桶中的一个或多个列另外排序</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220727211124456.png" alt="image-20220727211124456"></p><p><strong>实操案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">（1）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br><span class="line">（2）添加列</span><br><span class="line">hive (default)&gt; alter table dept add columns(deptdesc string);</span><br><span class="line">（3）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br><span class="line">（4）更新列</span><br><span class="line">hive (default)&gt; alter table dept change column deptdesc desc string; （5）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br><span class="line">（6）替换列</span><br><span class="line">hive (default)&gt; alter table dept replace columns(deptno string, dname</span><br><span class="line">string, loc string);</span><br><span class="line">（7）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br></pre></td></tr></table></figure><h2 id="7-总结-11">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>前天和昨天基本配置了一天的hive,第一天自己配置和yzg帮我一起弄的，后面jar包找不到了，第二天自己又建了一组克隆机，然而配置到JDBC的时候又出现了问题，等了20分钟都没启动起来。后面干脆不管了，就跳过去了，JDBC的部分，因为后面都是直连使用的，就直接看过去了。等部署的同学搞好帮我配一台，Hive的数据类型和Java基本一样就是Long变成了BIGINT,DDL的操作也和MySQL差不多，创建表稍微有点繁琐。语法有很多的字段代码不太好记，DDL似乎不太重要，后面用到的时候，语法敲着敲着就熟悉了，明天学DML了。</p><h1>7.28 DML操作</h1><h2 id="1-头：日期、所学内容出处-16">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-16">2.标题</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">P29029-尚硅谷-Hive-DML 加载数据 <span class="keyword">load</span></span><br><span class="line">P30030-尚硅谷-Hive-DML 加载数据 <span class="keyword">insert</span></span><br><span class="line">P31031-尚硅谷-Hive-DML 加载数据 <span class="keyword">as</span> <span class="keyword">select</span></span><br><span class="line">P32032-尚硅谷-Hive-DML 加载数据 <span class="keyword">location</span></span><br><span class="line">P33033-尚硅谷-Hive-DML 加载数据 <span class="keyword">import</span> 未完待续</span><br><span class="line">P34034-尚硅谷-Hive-DML 导出数据 <span class="keyword">insert</span></span><br><span class="line">P35035-尚硅谷-Hive-DML 导出数据 hadoop命令&amp;Hive shell</span><br><span class="line">P36036-尚硅谷-Hive-DML 导出数据 export&amp;sqoop说明 <span class="keyword">import</span>补充</span><br><span class="line">P37037-尚硅谷-Hive-DML 清空全表</span><br><span class="line">P38038-尚硅谷-Hive-DML 查询 准备数据</span><br><span class="line">P39039-尚硅谷-Hive-DML 查询 查询全表&amp;指定列 注意事项</span><br><span class="line">P40040-尚硅谷-Hive-DML 查询 列别名&amp;运算符</span><br><span class="line">P41041-尚硅谷-Hive-DML 查询 聚合函数&amp;<span class="keyword">Limit</span>&amp;<span class="keyword">Where</span></span><br><span class="line">P42042-尚硅谷-Hive-DML 查询 比较运算符&amp;逻辑运算符</span><br><span class="line">P43043-尚硅谷-Hive-DML 查询 GroupBy &amp; <span class="keyword">Having</span></span><br><span class="line">P44044-尚硅谷-Hive-课程回顾</span><br><span class="line">P45045-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 内连接</span><br><span class="line">P46046-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 左外连接</span><br><span class="line">P47047-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 右外连接</span><br><span class="line">P48048-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 满外连接</span><br><span class="line">P49049-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 取左表独有数据</span><br><span class="line">P50050-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 取右表独有数据</span><br><span class="line">P51051-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 取左右两表独有数据</span><br><span class="line">P52052-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 多表连接</span><br><span class="line">P53053-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 笛卡尔积</span><br><span class="line">P54054-尚硅谷-Hive-DML 查询 排序 <span class="keyword">Order</span> <span class="keyword">By</span></span><br><span class="line">P55055-尚硅谷-Hive-DML 查询 排序 Sort <span class="keyword">By</span></span><br><span class="line">P56056-尚硅谷-Hive-DML 查询 排序 Distribute <span class="keyword">By</span> &amp; <span class="keyword">Cluster</span> <span class="keyword">By</span></span><br><span class="line">P57057-尚硅谷-Hive-DML 查询 排序 <span class="number">4</span>个<span class="keyword">By</span>总结</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-16">3.所学内容概述</h2><h3 id="数据导入">数据导入</h3><h3 id="数据导出">数据导出</h3><h3 id="查询！">查询！</h3><h2 id="4-根据概述分章节描述-14">4.根据概述分章节描述</h2><h3 id="数据导入-2">数据导入</h3><h4 id="向表中装载数据-Load">向表中装载数据(Load)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; load data [local] inpath &#x27;数据的 path&#x27; [overwrite] into table </span><br><span class="line">student [partit555555</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create table student(id string, name string) row format </span><br><span class="line">delimited fields terminated by &#x27;,&#x27;;  //创建一张表</span><br><span class="line">hive(default)&gt; lcoal data local inpath &#x27;./student.txt&#x27; into table default.student;</span><br></pre></td></tr></table></figure><h4 id="通过查询语句向表中插入数据（Insert）"><strong>通过查询语句向表中插入数据（Insert</strong>）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive(default)&gt; insert overwrite table student1</span><br><span class="line"> &gt; select * from student;</span><br></pre></td></tr></table></figure><h4 id="查询语句中创建表并加载数据As-Select">查询语句中创建表并加载数据As Select</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists student3</span><br><span class="line">as select id, name from student;</span><br></pre></td></tr></table></figure><h4 id="创建表时通过Location指定加载数据路径">创建表时通过Location指定加载数据路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create external table if not exists student5(</span><br><span class="line"> id int, name string)</span><br><span class="line"> row format delimited fields terminated by &#x27;,&#x27;</span><br><span class="line"> location &#x27;/student;</span><br></pre></td></tr></table></figure><h4 id="Import-数据到指定-Hive-表中"><strong>Import</strong> <strong>数据到指定</strong> <strong>Hive</strong> 表中</h4><p>注意：先用 export 导出后，再将数据导入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; import table student2</span><br><span class="line">from &#x27;/user/hive/warehouse/export/student&#x27;;</span><br></pre></td></tr></table></figure><h3 id="数据导出-2">数据导出</h3><h4 id="将查询的结果导出到本地">将查询的结果导出到本地</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; insert overwrite local directory &#x27;./student&#x27; //到hive/student文件夹</span><br><span class="line">    &gt; row format delimited fields terminated by &#x27;,&#x27;  //格式化导出 分隔符为，</span><br><span class="line">    &gt; select * from student5; </span><br></pre></td></tr></table></figure><p>如果导出到HDFS 就把local 去掉 后面指定 HDFS的路径 可以直接CP 所以不常用</p><h4 id="hadoop命令导出到本地">hadoop命令导出到本地</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs -get /文件路径 /导出路径</span><br></pre></td></tr></table></figure><p>这个比上面的常用</p><h4 id="Hive-Shell-命令导出"><strong>Hive Shell</strong> <strong>命令导出</strong></h4><p>基本语法：（hive -f/-e 执行语句或者脚本 &gt; file）</p><p>缺点：打印出来有表头信息 所以不常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hive]$ bin/hive -e &#x27;select * from default.student;&#x27; &gt;&gt;</span><br><span class="line">/opt/module/hive/data/export/student4.txt;</span><br></pre></td></tr></table></figure><p>**清除表中数据（**Truncate）</p><p>只能清除内部表中的数据 外部表不行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; truncate table student;</span><br></pre></td></tr></table></figure><h3 id="基本查询">基本查询</h3><p>和MySQL语句一样</p><p>全表和特定列查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from emp;</span><br><span class="line">select empno, ename from emp;</span><br></pre></td></tr></table></figure><p>注意:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意： （<span class="number">1</span>）<span class="keyword">SQL</span> 语言大小写不敏感。</span><br><span class="line">（<span class="number">2</span>）<span class="keyword">SQL</span> 可以写在一行或者多行</span><br><span class="line">（<span class="number">3</span>）关键字不能被缩写也不能分行</span><br><span class="line">（<span class="number">4</span>）各子句一般要分行写。</span><br><span class="line">（<span class="number">5</span>）使用缩进提高语句的可读性。</span><br></pre></td></tr></table></figure><h4 id="列别名">列别名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename AS name, deptno dn from emp;</span><br></pre></td></tr></table></figure><p>AS可以不加 改成空格</p><h4 id="算数运算符">算数运算符</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220728164250522.png" alt="image-20220728164250522"></p><h4 id="常用函数">常用函数</h4><p>要通过MR 运行很慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1）求总行数（count）</span><br><span class="line">hive (default)&gt; select count(*) cnt from emp;</span><br><span class="line">2）求工资的最大值（max）</span><br><span class="line">hive (default)&gt; select max(sal) max_sal from emp;</span><br><span class="line">3）求工资的最小值（min）</span><br><span class="line">hive (default)&gt; select min(sal) min_sal from emp;</span><br><span class="line">4）求工资的总和（sum）</span><br><span class="line">hive (default)&gt; select sum(sal) sum_sal from emp; </span><br><span class="line">5）求工资的平均值（avg）</span><br><span class="line">hive (default)&gt; select avg(sal) avg_sal from emp;</span><br></pre></td></tr></table></figure><h4 id="Limit-语句"><strong>Limit</strong> <strong>语句</strong></h4><p>限制返回的行数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp limit 5; //查询EMP表 返回前5行</span><br></pre></td></tr></table></figure><h4 id="Where-语句"><strong>Where</strong> <strong>语句</strong></h4><p><strong>使用</strong> <strong>WHERE</strong> <strong>子句，将不满足条件的行过滤掉</strong></p><p><strong>WHERE</strong> <strong>子句紧随</strong> <strong>FROM</strong> <strong>子句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp where sal &gt;1000;</span><br><span class="line">--where子句不能用字段别名</span><br><span class="line">--查询出薪水大于1000的所有员工</span><br></pre></td></tr></table></figure><h4 id="比较运算符（Between-In-Is-Null）"><strong>比较运算符（<strong><strong>Between/In/ Is Null</strong></strong>）</strong></h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220728164848185.png" alt="image-20220728164848185"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220728164905841.png" alt="image-20220728164905841"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--（1）查询出薪水等于 5000 的所有员工</span><br><span class="line">hive (default)&gt; select * from emp where sal =5000;</span><br><span class="line">--（2）查询工资在 500 到 1000 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where sal between 500 and 1000;</span><br><span class="line">--（3）查询 comm 为空的所有员工信息</span><br><span class="line">hive (default)&gt; select * from emp where comm is null;</span><br><span class="line">--（4）查询工资是 1500 或 5000 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where sal IN (1500, 5000);</span><br></pre></td></tr></table></figure><h4 id="Like-和-RLike"><strong>Like</strong> <strong>和</strong> <strong>RLike</strong></h4><p>Like和mysql中Like匹配一样，%代表零个或者多个字符(任意个字符)  _代表一个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--（1）查找名字以 A 开头的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where ename LIKE &#x27;A%&#x27;;</span><br><span class="line">--（2）查找名字中第二个字母为 A 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where ename LIKE &#x27;_A%&#x27;;</span><br></pre></td></tr></table></figure><p>Rlike</p><p>RLIKE 子句是 Hive 中这个功能的一个扩展，其可以通过 Java 的正则表达式这个更强大的语言来指定匹配条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（3）查找名字中带有 A 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where ename RLIKE &#x27;[A]&#x27;;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符-And-Or-Not">逻辑运算符(And/Or/Not)</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">AND </span> 逻辑并</span><br><span class="line"><span class="keyword">OR </span>  逻辑或</span><br><span class="line">NOT  逻辑否</span><br></pre></td></tr></table></figure><h3 id="分组函数">分组函数</h3><p>分组函数的语句顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 SELECT</span><br><span class="line"> ...</span><br><span class="line">2 FROM</span><br><span class="line">...</span><br><span class="line">3 WHERE</span><br><span class="line">...</span><br><span class="line">4 GROUP BY</span><br><span class="line">...</span><br><span class="line">5 HAVING</span><br><span class="line">...</span><br><span class="line">6 ORDER BY</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Group-By语句">Group By语句</h4><p>计算 emp 表每个部门的平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select t.deptno, avg(t.sal) avg_sal from emp t group by t.deptno;</span><br></pre></td></tr></table></figure><h4 id="Hiving语句">Hiving语句</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">having</span> 与 <span class="keyword">where</span> 不同点</span><br><span class="line">（<span class="number">1</span>）<span class="keyword">where</span> 后面不能写分组函数，而 <span class="keyword">having</span> 后面可以使用分组函数。</span><br><span class="line">（<span class="number">2</span>）<span class="keyword">having</span> 只用于 <span class="keyword">group</span> <span class="keyword">by</span> 分组统计语句。</span><br></pre></td></tr></table></figure><p>案例实操</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求每个部门的平均薪水大于 2000 的部门</span><br><span class="line">hive (default)&gt; select deptno, avg(sal) avg_sal from emp group by deptno having avg_sal &gt; 2000;</span><br></pre></td></tr></table></figure><h2 id="7-总结-12">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的DML的基本操作部分，查询语句，分组语句和SQL语句基本差不多，前面是有数据的导入和导出，是结合Hadoop以及hive自己的一些功能，可以实现本地文件或者HDFS的上传加载，导入导出。总体来说今天的学习任务不难，之前有SQL的基础，分组这边的语句，之前没学，不是很好理解，算今天的难点吧，今天学习状态还可以，敲了很多SQL语句，也都记住了，算唤醒之前SQL的记忆吧。</p><h1>7.29 Join语句</h1><h2 id="1-头：日期、所学内容出处-17">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-17">2.标题</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">P44044-尚硅谷-Hive-课程回顾</span><br><span class="line">P45045-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>内连接</span><br><span class="line">P46046-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>左外连接</span><br><span class="line">P47047-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>右外连接</span><br><span class="line">P48048-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>满外连接</span><br><span class="line">P49049-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>取左表独有数据</span><br><span class="line">P50050-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>取右表独有数据</span><br><span class="line">P51051-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>取左右两表独有数据</span><br><span class="line">P52052-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>多表连接</span><br><span class="line">P53053-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>笛卡尔积</span><br><span class="line">P54054-尚硅谷-Hive-DML 查询 排序 <span class="keyword">Order </span><span class="keyword">By</span></span><br><span class="line"><span class="keyword"></span>P55055-尚硅谷-Hive-DML 查询 排序 Sort <span class="keyword">By</span></span><br><span class="line"><span class="keyword"></span>P56056-尚硅谷-Hive-DML 查询 排序 <span class="keyword">Distribute </span><span class="keyword">By </span>&amp; Cluster <span class="keyword">By</span></span><br><span class="line"><span class="keyword"></span>P57057-尚硅谷-Hive-DML 查询 排序 <span class="number">4</span>个<span class="keyword">By总结</span></span><br><span class="line"><span class="keyword"></span>P58058-尚硅谷-Hive-分区表 说明</span><br><span class="line">P59059-尚硅谷-Hive-分区表 创建&amp;简单使用</span><br><span class="line">P60060-尚硅谷-Hive-分区表 分区的增删查</span><br><span class="line">P61061-尚硅谷-Hive-分区表 二级分区</span><br><span class="line">P62062-尚硅谷-Hive-分区表 使HDFS数据与分区表产生联系的方式</span><br><span class="line">P63063-尚硅谷-Hive-分区表 load加载数据不指定分区 演示</span><br><span class="line">P64064-尚硅谷-Hive-分区表 动态分区 演示</span><br><span class="line">P65065-尚硅谷-Hive-分区表 动态分区 <span class="number">3</span>.<span class="number">0</span>新特性</span><br><span class="line">P66066-尚硅谷-Hive-分桶表</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-17">3.所学内容概述</h2><h3 id="Join语句">Join语句</h3><h4 id="查询多表">查询多表</h4><h4 id="排序">排序</h4><h2 id="4-根据概述分章节描述-15">4.根据概述分章节描述</h2><h3 id="等值于SQL-join">等值于SQL join</h3><p>Hive 支持通常的 SQL JOIN 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> emp;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>清除emp表所有行 防止用本地文件往表格内添加信息的时候 变成追加</span><br></pre></td></tr></table></figure><h4 id="表的别名">表的别名</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）好处</span><br><span class="line">（1）使用别名可以简化查询。</span><br><span class="line">（2）使用表名前缀可以提高执行效率。</span><br></pre></td></tr></table></figure><h5 id="合并员工表和部门表">合并员工表和部门表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d </span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h3 id="SQL-Joins">SQL Joins</h3><p>join有很多种连接方式 都如图了 类似于集合中的交集 并集 差集</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FTRDExODUyNDA1MTE=,size_16,color_FFFFFF,t_70-16590607630123.png" alt="img"></p><h4 id="内连接"><strong>内连接</strong></h4><p>内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。 交集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e inner join dept d </span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="左外连接"><strong>左外连接</strong></h4><p>左外连接：JOIN 操作符左边表中符合 WHERE 子句的所有记录将会被返回。 返回join左边的表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e left join </span><br><span class="line">dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="右外连接"><strong>右外连接</strong></h4><p>右外连接：JOIN 操作符右边表中符合 WHERE 子句的所有记录将会被返回。 返回join右边的表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e right join </span><br><span class="line">dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="满外连接"><strong>满外连接</strong></h4><p>满外连接：将会返回所有表中符合 WHERE 语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值替代。 并集！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e full join </span><br><span class="line">dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="左连接">左连接</h4><p>取左边特有的部分 就是左外连接除去公共部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, e.deptno,d.dname from emp e left join </span><br><span class="line">              &gt; dept d on e.deptno = d.deptno</span><br><span class="line">              &gt; where d.deptno is null;</span><br></pre></td></tr></table></figure><p>右连接和外连接类似</p><h4 id="外连接">外连接</h4><p>取两边的数据。 两表独有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, e.deptno,d.dname from emp e full join </span><br><span class="line">              &gt; dept d on e.deptno = d.deptno</span><br><span class="line">              &gt; where d.deptno is null or e.deptno is null;</span><br></pre></td></tr></table></figure><h3 id="查询多表-2">查询多表</h3><p>查询员工姓名(e)、部门名称(d)以及部门所在城市(l)名称；</p><p>hive运行总是从左往右</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; SELECT e.ename, d.dname, l.loc_name</span><br><span class="line">              &gt; FROM emp e </span><br><span class="line">              &gt; JOIN dept d</span><br><span class="line">              &gt; ON d.deptno = e.deptno </span><br><span class="line">              &gt; JOIN location l</span><br><span class="line">              &gt; ON d.loc = l.loc;</span><br></pre></td></tr></table></figure><h4 id="笛卡尔积">笛卡尔积</h4><p>出来的行数相当于两边表格相乘</p><p>笛卡尔集会在下面条件下产生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）省略连接条件</span><br><span class="line">（2）连接条件无效</span><br><span class="line">（3）所有表中的所有行互相连接</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno, dname from emp,dept;</span><br></pre></td></tr></table></figure><h3 id="排序-2">排序</h3><h4 id="全局排序（order-by）">全局排序（order by）</h4><p>Order By：全局排序，只有一个 Reducer</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ASC</span>（ascend）: 升序（默认）</span><br><span class="line"><span class="keyword">DESC</span>（descend）: 降序</span><br></pre></td></tr></table></figure><p>案例实操</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）查询员工信息按工资升序排列</span><br><span class="line">hive (default)&gt; select * from emp order by sal;</span><br><span class="line">（2）查询员工信息按工资降序排列</span><br><span class="line">hive (default)&gt; select * from emp order by sal desc;</span><br></pre></td></tr></table></figure><h4 id="多个列排序">多个列排序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt;  select ename, deptno,sal from emp order by deptno,sal;</span><br></pre></td></tr></table></figure><p><strong>每个</strong> <strong>Reduce</strong> **内部排序（**Sort By）</p><p><code>Sort By：对于大规模的数据集 order by 的效率非常低。在很多情况下，并不需要全局排序，此时可以使用 **sort by**。</code></p><p><code>Sort by 为每个 reducer 产生一个排序文件。每个 Reducer 内部进行排序，对全局结果集来说不是排序</code> 区内有序</p><p><strong>设置</strong> <strong>reduce</strong> <strong>个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; set mapreduce.job.reduces=3;</span><br></pre></td></tr></table></figure><p>根据部门编号降序查看员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp sort by deptno desc;</span><br></pre></td></tr></table></figure><h4 id="分区-（-Distribute-By）">分区**（**Distribute By）</h4><p>一般和sort by一起排序</p><p>Distribute By：</p><p>在有些情况下，我们需要控制某个特定行应该到哪个 reducer，通常是为了进行后续的聚集操作。<strong>distribute by</strong> 子句可以做这件事。<strong>distribute by</strong> 类似 MR 中 partition（自定义分区），进行分区，结合 sort by 使用。</p><p>在CSDN中有特别讲分区排序</p><p><a href="http://t.csdn.cn/HhwIw">http://t.csdn.cn/HhwIw</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> select * from emp distribute by </span><br><span class="line">deptno sort by empno desc;</span><br></pre></td></tr></table></figure><p>部门编号分区 员工编号排序</p><p>当 distribute by 和 sorts by 字段相同时，可以使用 cluster by 方式。</p><p><code>cluster by 除了具有 distribute by 的功能外还兼具 sort by 的功能。但是排序只能是升序排序，不能指定排序规则为 ASC 或者 DESC</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp cluster by deptno;</span><br><span class="line">hive (default)&gt; select * from emp distribute by deptno sort by deptno;</span><br></pre></td></tr></table></figure><h4 id="分区表">分区表</h4><h2 id="5-BUG点-10">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>左连接的时候，deptno这列我很多null，但是检查数据源文件这列是有的</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729094359004.png" alt="image-20220729094359004"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729094431338.png" alt="image-20220729094431338"></p><p>先是怀疑hive建表的时候是不是出现了问题 又建了一遍表格发现还是有问题，查询的时候，最后一行只有null有问题</p><p>只能显示30看了自己的源文件，发现30的信息是最全的，每一列都有，就怀疑是源文件内的问题:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建表格的时候分了<span class="number">8</span>列 以空格切割，但是源文件有几行 只有 <span class="number">6</span>列 <span class="number">7</span>列 那它空格切出来 也是<span class="number">6</span>列 <span class="number">7</span>列而且是按顺序。像第四列我是<span class="built_in">int</span>类的 但是有几行没有这一列的数据 就自动算后面的data 类型不统一 就显示了<span class="literal">null</span> 后面数据没有也自然显示<span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p>查询hiredate的时候，发现有一行显示的5000 而这一行恰好是没有mgr的那一行。那就是长度问题 导致分隔符切错了。</p><p>把源文件emp.txt没数据的地方 输入两个空格 作为分隔就解决了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729102024370.png" alt="image-20220729102024370"></p><h3 id="JVM报错">JVM报错</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729150136194.png" alt="image-20220729150136194"></p><p>在CSDN解决</p><p>Hive命令调用MR任务报错</p><p>将 hive 设置成本地模式来执行任务试试,命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set hive.exec.mode.local.auto=true;</span><br></pre></td></tr></table></figure><p>问题解决，但是只有一次性，hive退出就不行了，把他写到配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题永久解决</p><h2 id="7-总结-13">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的内容主要是Join语句和排序以及分区方面的一小部分内容，join语句和排序比较简单的也容易掌握，今天建表切割方面的原理方面的知识出现了缺陷，解决BUG,补充了知识点。今天的重点和难点在分区，分区能让效率提高很多，还是很重要的，能避免全局扫描，导致运行速度很慢，在公司甚至运行不起来，效率太低了。内容比较多，这部分的原理，只是一知半解，明天再好好回顾一下分区方面的内容。</p><h1>7.31 函数</h1><h2 id="1-头：日期、所学内容出处-18">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-18">2.标题</h2><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">P</span><span class="number">67067</span>-尚硅谷-Hive-DML 函数 查询系统函数</span><br><span class="line"><span class="keyword">P</span><span class="number">68068</span>-尚硅谷-Hive-DML 函数 NVL</span><br><span class="line"><span class="keyword">P</span><span class="number">69069</span>-尚硅谷-Hive-DML 函数 CASE WHEN THEN <span class="keyword">ELSE</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">P</span><span class="number">70070</span>-尚硅谷-Hive-课程回顾</span><br><span class="line"><span class="keyword">P</span><span class="number">71071</span>-尚硅谷-Hive-DML 函数 拼接字符串 函数说明</span><br><span class="line"><span class="keyword">P</span><span class="number">72072</span>-尚硅谷-Hive-DML 函数 拼接字符串 函数使用</span><br><span class="line"><span class="keyword">P</span><span class="number">73073</span>-尚硅谷-Hive-DML 函数 Explode</span><br><span class="line"><span class="keyword">P</span><span class="number">74074</span>-尚硅谷-Hive-DML 函数 行转列&amp;列转行说明</span><br><span class="line"><span class="keyword">P</span><span class="number">75075</span>-尚硅谷-Hive-DML 函数 窗口函数 初体验</span><br><span class="line"><span class="keyword">P</span><span class="number">76076</span>-尚硅谷-Hive-DML 函数 窗口函数 需求二</span><br><span class="line"><span class="keyword">P</span><span class="number">77077</span>-尚硅谷-Hive-DML 函数 窗口函数 需求三</span><br><span class="line"><span class="keyword">P</span><span class="number">78078</span>-尚硅谷-Hive-DML 函数 窗口函数 排序值相同时说明</span><br><span class="line"><span class="keyword">P</span><span class="number">79079</span>-尚硅谷-Hive-DML 函数 窗口函数 需求四</span><br><span class="line"><span class="keyword">P</span><span class="number">80080</span>-尚硅谷-Hive-DML 函数 窗口函数 需求五</span><br><span class="line"><span class="keyword">P</span><span class="number">81081</span>-尚硅谷-Hive-DML 函数 窗口函数 Rank</span><br><span class="line"><span class="keyword">P</span><span class="number">82082</span>-尚硅谷-Hive-DML 函数 其他常用函数 日期函数</span><br><span class="line"><span class="keyword">P</span><span class="number">83083</span>-尚硅谷-Hive-DML 函数 其他常用函数 数据取整函数</span><br><span class="line"><span class="keyword">P</span><span class="number">84084</span>-尚硅谷-Hive-DML 函数 其他常用函数 字符串相关函数</span><br><span class="line"><span class="keyword">P</span><span class="number">85085</span>-尚硅谷-Hive-DML 函数 其他常用函数 集合函数</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-18">3.所学内容概述</h2><h4 id="查询系统函数">查询系统函数</h4><h4 id="各种系统函数">各种系统函数</h4><h4 id="行转列-列转行">行转列 列转行</h4><h4 id="窗口函数">窗口函数</h4><h2 id="4-根据概述分章节描述-16">4.根据概述分章节描述</h2><h3 id="系统内置函数"><strong>系统内置函数</strong></h3><p>Hive中系统自带的函数有很多 有条命令相当于API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show funcations; //查看系统自带的函数</span><br><span class="line">desc function uppper;//显示自带函数的用发 可以翻译中文</span><br><span class="line">desc function extended lower; //详细显示用法 这个好用些</span><br></pre></td></tr></table></figure><h3 id="常用内置函数">常用内置函数</h3><h4 id="空字符串赋值">空字符串赋值</h4><p>NVL：给值为 NULL 的数据赋值，它的格式是 NVL( value，default_value)。它的功能是如果 value 为 NULL，则 NVL 函数返回 default_value 的值，否则返回 value 的值。第二个参数可以不填，这样value如果是NULL，返回值也是NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select comm,nvl(comm, -1) from emp; //如果comm为NULL -1代替 </span><br></pre></td></tr></table></figure><h3 id="行转列">行转列</h3><p>大白话其实就是一列转换为多列</p><p>用的到三个函数变形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONCAT(string A/col, string B/col…)：返回输入字符串连接后的结果，支持任意个输入字符串;</span><br><span class="line">CONCAT_WS(separator, str1, str2,...)：它是一个特殊形式的 CONCAT()。第一个参数是合并参数间的分隔符。</span><br><span class="line">COLLECT_SET(col)：函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生 Array 类型字段。</span><br></pre></td></tr></table></figure><p>实例代码不太好懂 都标上注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT t1.c_b, CONCAT_WS(&quot;|&quot;,collect_set(t1.name)) --名字去重 并用|分割</span><br><span class="line">FROM (SELECT NAME, --用c_b结果</span><br><span class="line">CONCAT_WS(&#x27;,&#x27;,constellation,blood_type) c_b --合并两条数据并用,隔开 别名c_b</span><br><span class="line">FROM person_info</span><br><span class="line">)t1 --别名t1</span><br><span class="line">GROUP BY t1.c_b --按照t1的c_b查询结果分组</span><br></pre></td></tr></table></figure><h3 id="列转行">列转行</h3><p>一行转多行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLODE(col)：将 hive 一列中复杂的 Array 或者 Map 结构拆分成多行。</span><br><span class="line">LATERAL VIEW</span><br><span class="line">用法：LATERAL VIEW udtf(expression) tableAlias AS columnAlias</span><br></pre></td></tr></table></figure><p>案例用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">movie,</span><br><span class="line">category_name</span><br><span class="line">FROM</span><br><span class="line">movie_info</span><br><span class="line">lateral VIEW --使用函数</span><br><span class="line">explode(split(category,&quot;,&quot;)) movie_info_tmp --别名 </span><br><span class="line">AS category_name; --作为category_name 可给上面返回查询</span><br></pre></td></tr></table></figure><h3 id="窗口函数-2">窗口函数</h3><p>一般情况窗口函数都会搭配over使用 以四个案例来大致了解窗口函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">OVER</span><span class="params">()</span></span>：指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变</span><br></pre></td></tr></table></figure><h4 id="查询在-2017-年-4-月份购买过的顾客及总人数">查询在 2017 年 4 月份购买过的顾客及总人数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select name,count(*) over () </span><br><span class="line">from business</span><br><span class="line">where substring(orderdate,1,7) = &#x27;2017-04&#x27; --筛选orderdate这一列前1-7的字符串为2017-04的</span><br><span class="line">group by name; --按照name分组</span><br></pre></td></tr></table></figure><h4 id="查询顾客的购买明细及月购买总额">查询顾客的购买明细及月购买总额</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select name,orderdate,cost,sum(cost) --分区内cost的和</span><br><span class="line">over(partition by month(orderdate)) --按照orderdate月份分区</span><br><span class="line">from business;</span><br></pre></td></tr></table></figure><h4 id="查看顾客上次的购买时间或者下次购买时间">查看顾客上次的购买时间或者下次购买时间</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select name,orderdate,cost,</span><br><span class="line">lag(orderdate,1,&#x27;1900-01-01&#x27;) over(partition by name order by orderdate ) as time1 --上次购买时间 lag第三个参数是如果 为null 改成1900 01 01</span><br><span class="line">from business;</span><br></pre></td></tr></table></figure><h3 id="Rank"><strong>Rank</strong></h3><p>案例直观的感受三者的区别</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">RANK</span><span class="params">()</span></span> 排序相同时会重复，总数不会变</span><br><span class="line"><span class="function"><span class="title">DENSE_RANK</span><span class="params">()</span></span> 排序相同时会重复，总数会减少</span><br><span class="line"><span class="function"><span class="title">ROW_NUMBER</span><span class="params">()</span></span> 会根据顺序计算</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rank</span><br><span class="line">宋宋英语841</span><br><span class="line">大海英语841</span><br><span class="line">婷婷英语783</span><br><span class="line">孙悟空英语684</span><br><span class="line">dense<span class="emphasis">_rank</span></span><br><span class="line"><span class="emphasis">宋宋英语841</span></span><br><span class="line"><span class="emphasis">大海英语841</span></span><br><span class="line"><span class="emphasis">婷婷英语782</span></span><br><span class="line"><span class="emphasis">孙悟空英语683</span></span><br><span class="line"><span class="emphasis">row_</span>Number</span><br><span class="line">宋宋英语841</span><br><span class="line">大海英语842</span><br><span class="line">婷婷英语783</span><br><span class="line">孙悟空英语684</span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-9">6.扩展学习部分</h2><p>Hive常用的日期 字符串 集合的方法 以及案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">常用日期函数</span><br><span class="line">unix_timestamp:返回当前或指定时间的时间戳</span><br><span class="line">select unix_timestamp();</span><br><span class="line">select unix_timestamp(&quot;2020-10-28&quot;,&#x27;yyyy-MM-dd&#x27;);</span><br><span class="line"></span><br><span class="line">from_unixtime：将时间戳转为日期格式</span><br><span class="line">select from_unixtime(1603843200);</span><br><span class="line"></span><br><span class="line">current_date：当前日期</span><br><span class="line">select current_date;</span><br><span class="line"></span><br><span class="line">current_timestamp：当前的日期加时间</span><br><span class="line">select current_timestamp;</span><br><span class="line"></span><br><span class="line">to_date：抽取日期部分</span><br><span class="line">select to_date(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">year：获取年</span><br><span class="line">select year(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">month：获取月</span><br><span class="line">select month(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">day：获取日</span><br><span class="line">select day(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">hour：获取时</span><br><span class="line">select hour(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">minute：获取分</span><br><span class="line">select minute(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">second：获取秒</span><br><span class="line">select second(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">weekofyear：当前时间是一年中的第几周</span><br><span class="line">select weekofyear(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">dayofmonth：当前时间是一个月中的第几天</span><br><span class="line">select dayofmonth(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">months_between： 两个日期间的月份</span><br><span class="line">select months_between(&#x27;2020-04-01&#x27;,&#x27;2020-10-28&#x27;);</span><br><span class="line"></span><br><span class="line">add_months：日期加减月</span><br><span class="line">select add_months(&#x27;2020-10-28&#x27;,-3);</span><br><span class="line"></span><br><span class="line">datediff：两个日期相差的天数</span><br><span class="line">select datediff(&#x27;2020-11-04&#x27;,&#x27;2020-10-28&#x27;);</span><br><span class="line"></span><br><span class="line">date_add：日期加天数</span><br><span class="line">select date_add(&#x27;2020-10-28&#x27;,4);</span><br><span class="line"></span><br><span class="line">date_sub：日期减天数</span><br><span class="line">select date_sub(&#x27;2020-10-28&#x27;,-4);</span><br><span class="line"></span><br><span class="line">last_day：日期的当月的最后一天</span><br><span class="line">select last_day(&#x27;2020-02-30&#x27;);</span><br><span class="line"></span><br><span class="line">date_format(): 格式化日期</span><br><span class="line">select date_format(&#x27;2020-10-28 12:12:12&#x27;,&#x27;yyyy/MM/dd HH:mm:ss&#x27;);</span><br><span class="line"></span><br><span class="line">常用取整函数</span><br><span class="line">round： 四舍五入</span><br><span class="line">select round(3.14);</span><br><span class="line">select round(3.54);</span><br><span class="line"></span><br><span class="line">ceil：  向上取整</span><br><span class="line">select ceil(3.14);</span><br><span class="line">select ceil(3.54);</span><br><span class="line"></span><br><span class="line">floor： 向下取整</span><br><span class="line">select floor(3.14);</span><br><span class="line">select floor(3.54);</span><br><span class="line"></span><br><span class="line">常用字符串操作函数</span><br><span class="line">upper： 转大写</span><br><span class="line">select upper(&#x27;low&#x27;);</span><br><span class="line"></span><br><span class="line">lower： 转小写</span><br><span class="line">select lower(&#x27;low&#x27;);</span><br><span class="line"></span><br><span class="line">length： 长度</span><br><span class="line">select length(&quot;atguigu&quot;);</span><br><span class="line"></span><br><span class="line">trim：  前后去空格</span><br><span class="line">select trim(&quot; atguigu &quot;);</span><br><span class="line"></span><br><span class="line">lpad： 向左补齐，到指定长度</span><br><span class="line">select lpad(&#x27;atguigu&#x27;,9,&#x27;g&#x27;);</span><br><span class="line"></span><br><span class="line">rpad：  向右补齐，到指定长度</span><br><span class="line">select rpad(&#x27;atguigu&#x27;,9,&#x27;g&#x27;);</span><br><span class="line"></span><br><span class="line">regexp_replace：使用正则表达式匹配目标字符串，匹配成功后替换！</span><br><span class="line">SELECT regexp_replace(&#x27;2020/10/25&#x27;, &#x27;/&#x27;, &#x27;-&#x27;);</span><br><span class="line"></span><br><span class="line">集合操作</span><br><span class="line">size： 集合中元素的个数</span><br><span class="line">select size(friends) from test3;</span><br><span class="line"></span><br><span class="line">map_keys： 返回map中的key</span><br><span class="line">select map_keys(children) from test3;</span><br><span class="line"></span><br><span class="line">map_values: 返回map中的value</span><br><span class="line">select map_values(children) from test3;</span><br><span class="line"></span><br><span class="line">array_contains: 判断array中是否包含某个元素</span><br><span class="line">select array_contains(friends,&#x27;bingbing&#x27;) from test3;</span><br><span class="line"></span><br><span class="line">sort_array： 将array中的元素排序</span><br><span class="line">select sort_array(friends) from test3;</span><br><span class="line"></span><br><span class="line">grouping_set:多维分析</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-总结-14">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习任务是Hive的函数部分，其实就是了解Hive中对数据处理的各种方式，有一些处理方式，有点像Java中的几个函数，改了名字。实际作用是差不多的，合理使用函数，对数据处理的效率能提高不少。这些函数对数据的筛选和过滤，利用好分区和分组加排序，能很灵活的对数据处理。今天难度简单吧，基本全部掌握了，列转行这里有些函数没有去尝试过，也没出BUG，学习状态也不错。</p>]]></content>
    
    
    <summary type="html">工作室2022/07 学习笔记</summary>
    
    
    
    <category term="工作室月笔记" scheme="https://u7u7.top/categories/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E6%9C%88%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="月笔记" scheme="https://u7u7.top/tags/%E6%9C%88%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://u7u7.top/posts/suanfa.html"/>
    <id>https://u7u7.top/posts/suanfa.html</id>
    <published>2023-03-10T14:16:25.000Z</published>
    <updated>2023-03-10T14:16:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1>力扣算法刷题——备战蓝桥杯</h1><h2 id="1月9号之前的算法题">1月9号之前的算法题</h2><blockquote><p>之前做了很多算法题，但是因为没有写笔记的原因，效果不太好，先把之前写的算法题的代码都放上来。以后写的算法题，要做好笔记。因为力扣做题都是给你一个函数的模版让你写题目，一般都是有返回值的，所以都可以放一个代码中去。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> December;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.rmi.CORBA.Util;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        runningSum(arr);</span><br><span class="line">        canConstruct(<span class="string">&quot;aab&quot;</span>,<span class="string">&quot;baa&quot;</span>);</span><br><span class="line">        solution.minOperations(<span class="string">&quot;110&quot;</span>);</span><br><span class="line">        System.out.println(solution.secondHighest(<span class="string">&quot;ck077&quot;</span>));</span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">22</span>,<span class="number">27</span>,<span class="number">33</span>,<span class="number">57</span>,<span class="number">66</span>,<span class="number">77</span>&#125;;</span><br><span class="line"><span class="comment">//        int[] arr = new int[]&#123;-1,0,3,9,11,13,22,27,33,57,66,77&#125;;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> searchInsert(arr1, <span class="number">1</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="type">int</span>[] nums  = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        solution.twoSum(nums,<span class="number">8</span>);</span><br><span class="line">        solution.maxSubArray(nums);</span><br><span class="line">        solution.lengthOfLongestSubstring(<span class="string">&quot;pwwkep&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;123456789&quot;</span>.substring(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>,s2 = <span class="string">&quot;eidboaoo&quot;</span>;</span><br><span class="line">        solution.checkInclusion(s1, s2);</span><br><span class="line">        solution.mostCompetitive(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>&#125;,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    力扣P1673贪心算法 自己半暴力做出来的 题解都用了数据栈 所以88个点只过了86个 后面学数据栈回头再来做一下</span></span><br><span class="line"><span class="comment">//    public int[] mostCompetitive(int[] nums, int k) &#123;</span></span><br><span class="line"><span class="comment">//        int len  = nums.length;</span></span><br><span class="line"><span class="comment">//        int[] ints = new int[k];</span></span><br><span class="line"><span class="comment">//        int min=0;</span></span><br><span class="line"><span class="comment">//        int start = 0;</span></span><br><span class="line"><span class="comment">//        for (int x = 0;x&lt;k;x++)&#123;</span></span><br><span class="line"><span class="comment">//            for (int n = start; n &lt; len-k+x;n++)&#123;</span></span><br><span class="line"><span class="comment">//                if (nums[min] &gt; nums[n+1])&#123;</span></span><br><span class="line"><span class="comment">//                    min = n+1;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            ints[x] = nums[min];</span></span><br><span class="line"><span class="comment">//            start = min;</span></span><br><span class="line"><span class="comment">//            min +=1 ;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return ints;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//正确解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> n-k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.size()&gt;<span class="number">0</span> &amp;&amp; last&gt;<span class="number">0</span> &amp;&amp; stack.get(stack.size()-<span class="number">1</span>)&gt;nums[i]) &#123;</span><br><span class="line">                stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">                last --;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = stack.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//P567 字符串排序优解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkInclusion</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=s1.length(),n2=s2.length();</span><br><span class="line">        <span class="keyword">if</span> (n1&gt;n2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;n1;x++)&#123;</span><br><span class="line">            cnt[s1.charAt(x) - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">str</span> <span class="operator">=</span> s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            cnt[str] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (cnt[str] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                cnt[s2.charAt(left) - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i-left+<span class="number">1</span> == n1)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1480</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] runningSum(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] += nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public boolean checkInclusion(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//        int n = s1.length(), m = s2.length();</span></span><br><span class="line"><span class="comment">//        if (n &gt; m) &#123;</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int[] cnt = new int[26];</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line"><span class="comment">//            --cnt[s1.charAt(i) - &#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int left = 0;</span></span><br><span class="line"><span class="comment">//        for (int right = 0; right &lt; m; ++right) &#123;</span></span><br><span class="line"><span class="comment">//            int x = s2.charAt(right) - &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">//            ++cnt[x];</span></span><br><span class="line"><span class="comment">//            while (cnt[x] &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//                --cnt[s2.charAt(left) - &#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">//                ++left;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (right - left + 1 == n) &#123;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//力扣P383</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ransomNote.length() &gt; magazine.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray()) &#123;</span><br><span class="line">            cnt[c - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : ransomNote.toCharArray()) &#123;</span><br><span class="line">            cnt[c - <span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">            <span class="keyword">if</span>(cnt[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P412</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fizzBuzz</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;FizzBuzz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arrayList.add(String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P876 链表中间节点</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P1769</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] minOperations(String boxes) &#123;</span><br><span class="line">        String[] split = boxes.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[split.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;split.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;split.length;x++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (split[x].equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">                    count += Math.abs(x-i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ints[i] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//力扣P1796</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">secondHighest</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; ay = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">47</span> &amp;&amp; i &lt;  <span class="number">58</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!ay.contains(i - <span class="number">48</span>))&#123;</span><br><span class="line">                    ay.add(i-<span class="number">48</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(ay);</span><br><span class="line">        <span class="keyword">if</span> (ay.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ay.get(ay.size()-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P35优解 双指针</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)&#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P704二分查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">            <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P977 输入一个升序的数组，然后返回一个数据各位置平方，也是升序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">//第一种 自己就是直接每位平方再重新排序 执行时间5ms</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line">        <span class="comment">//    nums[i] = nums[i]*nums[i];</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//Arrays.parallelSort(nums);</span></span><br><span class="line">        <span class="comment">//return nums;</span></span><br><span class="line">        <span class="comment">//下面是双指针</span></span><br><span class="line">        <span class="comment">//思路 因为是升序，所以数的平方的最大值一定是两边,把这个大的数 放新数组右边 然后两界限往内夹</span></span><br><span class="line">        <span class="type">int</span>[] result  = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//给result倒着插入的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//右界限</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//左界限</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123; <span class="comment">//当左边等于右边 停止</span></span><br><span class="line">            <span class="keyword">if</span> (nums[left]*nums[left] &lt; nums[right]*nums[right])&#123; <span class="comment">//两边判断大小 右边大</span></span><br><span class="line">                result[k--] = nums[right]*nums[right]; <span class="comment">//大的插入最新数组右边 右边下标-1</span></span><br><span class="line">                right--; <span class="comment">//右界限往内移1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//左边大</span></span><br><span class="line">                result[k--] = nums[left]*nums[left]; <span class="comment">//大的插入最新数组右边 左边下标-1</span></span><br><span class="line">                left++; <span class="comment">//左界限往内移1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P189 轮转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//int count = nums.length;</span></span><br><span class="line">        <span class="comment">//int newNums[] = new int[count];</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; count; i++) &#123;</span></span><br><span class="line">        <span class="comment">//    newNums[(i+k) % count] = nums[i];</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//System.arraycopy(newNums, 0, nums, 0, count); //打印</span></span><br><span class="line">        reversal(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        reversal(nums,<span class="number">0</span>,k-<span class="number">1</span>);</span><br><span class="line">        reversal(nums,k,nums.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转 下标为start 和 end 间的反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversal(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)&#123;</span><br><span class="line">        <span class="keyword">while</span> (start&lt;end)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P283移动〇</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length,left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] != <span class="number">0</span>)&#123;</span><br><span class="line">                res(nums,left,right);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">res</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[x];</span><br><span class="line">        nums[x] = nums[y];</span><br><span class="line">        nums[y] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p344 反转字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = s.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1832 全字母句</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkIfPangram</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] booleans = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sentence.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> sentence.charAt(i);</span><br><span class="line">            booleans[c - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">boolean</span> x : booleans)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!x)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣217</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p1 两数之和优解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123; <span class="comment">//是否有该key</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P3 无重复字符的最长子串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(ch))&#123;</span><br><span class="line">                start = Math.max(map.get(ch)+<span class="number">1</span>,start);</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max,end - start + <span class="number">1</span>);</span><br><span class="line">            map.put(ch,end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//p53最大数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> nums[<span class="number">0</span>], previous = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i :nums)&#123;</span><br><span class="line">            previous = Math.max(previous+i, i);</span><br><span class="line">            ans = Math.max(previous, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p88</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> m -<span class="number">1</span>,p2 = n -<span class="number">1</span>,length = m + n -<span class="number">1</span>,i;</span><br><span class="line">        <span class="keyword">while</span> (p1&gt;=<span class="number">0</span> || p2 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == -<span class="number">1</span>)&#123;</span><br><span class="line">                i = nums2[p2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p2 == -<span class="number">1</span>)&#123;</span><br><span class="line">                i = nums1[p1--];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2])&#123;</span><br><span class="line">                i = nums2[p2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                i = nums1[p1--];</span><br><span class="line">            &#125;</span><br><span class="line">            nums1[length--] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String x)</span> &#123;</span><br><span class="line">        String[] s = x.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s[i]);</span><br><span class="line">            s[i] = stringBuffer.reverse().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P19 删除链表倒数第N个结点</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">second</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line">        second.next = second.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1672</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumWealth</span><span class="params">(<span class="type">int</span>[][] accounts)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] i: accounts)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k : i)&#123;</span><br><span class="line">                max1 += k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max1 &gt; max)&#123;</span><br><span class="line">                max = max1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还没怎么学习的链表题目中也有几道，后面学数据结构的时候再巩固一下 自定义链表代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> December;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val, ListNode next) &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="力扣题记">力扣题记</h2><h3 id="力扣P1673贪心算法">力扣P1673贪心算法</h3><ul><li>自己半暴力做出来的 题解都用了数据栈 所以88个点只过了86个 后面学数据栈回头再来做一下</li></ul><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230109223549100.png" alt="image-20230109223549100"></p><ul><li>没过的原因自己也知道，因为自己空间复杂度是k*nums.length也就是所需要的数组长度和原数组的长度的循环次数 下面是自己的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span>  <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="type">int</span> min=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//思路:从倒数k之前先找最小值(防止k取不够) 然后从该索引再开始 取的位置可以往后移一格 以此类推</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;k;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> start; n &lt; len-k+x;n++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[min] &gt; nums[n+<span class="number">1</span>])&#123;</span><br><span class="line">                min = n+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ints[x] = nums[min];</span><br><span class="line">        start = min;</span><br><span class="line">        min +=<span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是python中似乎比较简单，因为可以从尾部删除，我用java模仿的话，模仿出来需要新建一个arrayList</li><li>题解原理：看了很久才明白题解代码的巧妙之处先把数组中值加一个到列表，然后如果该值不满足三个任何条件中一个(代码中有)，就再往列表加入一个数组的值，再把新加入的值和后面的数组的值比，如果比后面的大就删除。如此一直，直到删除的数够了(比如数组长度是10，我需要数组长度为3的最具竞争力的，那我需要把原数组的值删除7次，只要3个值)，需要的最具竞争力的数组也够了。</li></ul><blockquote><p>下面是python和java对该题使用单调栈的代码对比</p></blockquote><div class="tabs" id="p1673"><ul class="nav-tabs"></ul><div class="tab-contents"></div></div><h3 id="力扣P136-异或算法">力扣P136 异或算法</h3><blockquote><p>题目不难 简单来说就是找出数组中只存在一个的数 其他的数字都是出现过两次 找只出现过一次的那个数                      利用到了  异或中的交换律 数组中所有的数都异或 有两个的 都会变成0 最后只会剩下出现过一次的数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">              nums[<span class="number">0</span>] ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="力扣P15-双指针">力扣P15 双指针</h3><blockquote><p>题目为给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p>难点在防止重复的地方  代码讲解点都在代码中了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums); <span class="comment">//先排序</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//创建一个list里面好添加需要的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; nums.length - <span class="number">2</span>; x++) &#123; <span class="comment">//循环直到倒数第三个</span></span><br><span class="line">        <span class="keyword">if</span> (nums[x] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//如果第一位大于0 总和就永远不会小于0</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; nums[x] == nums[x - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">//如果该数和前一位相同 暂停本次循环 防止重复数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x + <span class="number">1</span>, z = nums.length - <span class="number">1</span>;  <span class="comment">//设置左和右指针</span></span><br><span class="line">        <span class="keyword">while</span> (y &lt; z) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[x] + nums[y] + nums[z]; <span class="comment">//相加的总和值</span></span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123; <span class="comment">//小于0 左指针 向右</span></span><br><span class="line">                y++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123; <span class="comment">//大于0 右指针向左</span></span><br><span class="line">                z--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(nums[x], nums[y], nums[z])));</span><br><span class="line">                <span class="keyword">while</span> (y &lt; z &amp;&amp; nums[y] == nums[++y]) ; <span class="comment">//当条件满足时 为满足不重复的三元组 左右指针的值就不能跟原来一样了 加入while循环 直到指针区间的两边 跟满足条件的时候不同</span></span><br><span class="line">                <span class="keyword">while</span> (y &lt; z &amp;&amp; nums[z] == nums[--z]) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="今日小爬虫">今日小爬虫</h2><p>1月27号 抖音刷到一个Java爬虫的案例 自己试着更改敲了一遍</p><blockquote><p>难点在两次连接 所要实现的代码功能为 利用java爬虫爬取该页面中，点击图片后跳转的链接中的高清背景图</p></blockquote><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230127143522704.png" alt="image-20230127143522704"></p><blockquote><p>跳转后的页面 我拿赵怀真举例 检查中利用标签如何使用 已经写在图片中了</p></blockquote><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230127144106376.png" alt="image-20230127144106376"></p><p>使用IDEA 需要导入jsoup包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> htmlPhoto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Connection;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">htmlPhoto</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//Java爬虫</span></span><br><span class="line">        <span class="comment">//1.建立连接</span></span><br><span class="line">        <span class="comment">//网页链接 https://pvp.qq.com/web201605/herolist.shtml</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> Jsoup.connect(<span class="string">&quot;https://pvp.qq.com/web201605/herolist.shtml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过链接获取 Document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> connection.get();</span><br><span class="line">        <span class="comment">//2.找到ul标签对象</span></span><br><span class="line">        <span class="comment">//通过Document对象 找class为 herolist clearfix的ul</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">elementUl</span> <span class="operator">=</span> document.selectFirst(<span class="string">&quot;[class=herolist clearfix]&quot;</span>);</span><br><span class="line">        <span class="comment">//找ul中的li</span></span><br><span class="line">        <span class="keyword">assert</span> elementUl != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elementLis</span> <span class="operator">=</span> elementUl.select(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.for 循环读取li集合</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">countHero</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//共计下载的图片数量</span></span><br><span class="line">        <span class="keyword">for</span> (Element elementLi:elementLis)&#123;</span><br><span class="line">            <span class="comment">//得到li中的a-href的路径</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">elementA</span> <span class="operator">=</span> elementLi.selectFirst(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            <span class="comment">//a标签中间的名字</span></span><br><span class="line">            <span class="keyword">assert</span> elementA != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">heroName</span> <span class="operator">=</span> elementA.text();</span><br><span class="line">            <span class="comment">//获取href的内容 然后拼接前面的链接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">hrefUrl</span> <span class="operator">=</span> elementA.attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;https://pvp.qq.com/web201605/&quot;</span> + hrefUrl;</span><br><span class="line">            <span class="comment">//创建新的连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> Jsoup.connect(path);</span><br><span class="line">            <span class="comment">//根据链接创建新的document对象</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">newDocument</span> <span class="operator">=</span> connect.get();</span><br><span class="line">            <span class="type">Element</span> <span class="variable">elementDiv</span> <span class="operator">=</span> newDocument.selectFirst(<span class="string">&quot;[class=zk-con1 zk-con]&quot;</span>);</span><br><span class="line">            <span class="comment">//获取element中的style属性</span></span><br><span class="line">            <span class="keyword">assert</span> elementDiv != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">backgroundURL</span> <span class="operator">=</span> elementDiv.attr(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">            <span class="comment">//background:url(&#x27;//game.gtimg.cn/images/yxzj/img201606/skin/hero-info/545/545-bigskin-1.jpg&#x27;) center 0</span></span><br><span class="line">            <span class="comment">//裁出需要的图片地址 两个单引号中间</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> backgroundURL.indexOf(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> backgroundURL.lastIndexOf(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">photoURL</span> <span class="operator">=</span> backgroundURL.substring(left + <span class="number">1</span>, right);</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https:&quot;</span> + photoURL);</span><br><span class="line">            <span class="comment">//已经获取到了图片的路径 url了 只需要通过IO流进行下载即可</span></span><br><span class="line">            System.out.println(<span class="string">&quot;下载&quot;</span> + heroName+<span class="string">&quot;的高清1080P图片...&quot;</span>);</span><br><span class="line">            <span class="comment">//输入流 读取刚刚的图片</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> url.openStream();</span><br><span class="line">            <span class="comment">//输出流 下载到本地</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E://IOTest/wzImg/&quot;</span> + heroName + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">//下载图片</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> is.read(bytes);</span><br><span class="line">            <span class="keyword">while</span> (count!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,count);</span><br><span class="line">                fos.flush();</span><br><span class="line">                count = is.read(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            fos.close();</span><br><span class="line">            countHero+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;共计&quot;</span>+countHero+<span class="string">&quot;位英雄图片全部下载完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用该案例以及方法的使用，可以用java爬虫到很多不加密网站的图片或者视频链接 进行下载 如图已下载到该文件夹</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230127185113640.png" alt="image-20230127185113640"></p><h3 id="BUG点">BUG点</h3><p>网页的一个BUG，我看网页中113个英雄，下载只有93个。我自己的代码是没什么问题的，然后检查中也是113个标签，当我不知所措的时候，我点开了网页的源代码。发现其中是从云中君开始的，也就是源代码中只有93英雄，但是检查中的确英雄数量是齐全的，所以应该是他网页的一些问题，但为什么这样我也不清楚，检查和源代码不一样，页面显示的效果竟然和源代码不一样。但是问题不大，思路已经清楚了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230131191045116.png" alt="image-20230131191045116"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230131191214943.png" alt="image-20230131191214943"></p>]]></content>
    
    
    <summary type="html">力扣算法刷题</summary>
    
    
    
    <category term="算法" scheme="https://u7u7.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://u7u7.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GZ-07 综合分析</title>
    <link href="https://u7u7.top/posts/dashuju.html"/>
    <id>https://u7u7.top/posts/dashuju.html</id>
    <published>2023-03-10T12:17:25.000Z</published>
    <updated>2023-03-10T12:20:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>#7月综合分析</p><h2 id="如何解决Job运行效率低的问题">如何解决Job运行效率低的问题</h2><p>在模块B中出现某些Job运行时间较长，你认为可能是哪些情况造成？有什么相应的处理办法吗？将内容编写至对应报告中。</p><ol><li>可能是程序中出现了较多的网络IO操作，如远程调用，RPC等，会造成程序运行时间较长；</li><li>可能是spark程序中存在较多的计算任务，如计算量大的排序、递归，或者数据量较大，程序处理过程比较复杂，会造成程序运行时间较长；</li><li>可能是spark集群的配置问题，比如内存、cpu等不足或者不合理，会影响运行效率；</li><li>可能是spark应用程序使用的较低版本，造成程序性能较低；</li></ol><p>相应的处理办法：</p><ol><li>尽可能减少网络IO操作，尝试本地化调用；</li><li>提升程序性能，优化算法和架构；</li><li>合理配置spark集群，保证资源充足；</li><li>更新spark应用程序使用的版本，保证性能。</li></ol><p>##对于数据挖掘模块中的用户推荐有什么好的建议</p><p>在模块C中使用基于用户的推荐系统思路对用户的相似性进行计算，从而为每个用户推荐商品，你认为可以从哪些方面再进行优化？这种推荐策略对业务的发展会起到什么样的作用？将内容编写至对应报告中。</p><p>一、基于用户的推荐系统优化方面：<br>1、引入更多的用户行为数据，比如用户的购买趋势、搜索习惯、浏览历史、点赞记录等，这些数据可以更加精准的找到用户的相似性，从而提高推荐精度。<br>2、结合上下文信息，比如用户当前的位置、设备类型、时间等，这些信息可以更加准确的给出推荐内容。<br>3、采用互信息算法，可以找到用户未来可能会感兴趣的内容，而不仅仅是基于历史行为的内容。 二、基于用户的推荐系统对业务发展的作用：<br>1、提高用户对产品的兴趣，让用户更容易发现有价值的内容，从而提高用户的忠诚度，降低用户流失率；<br>2、提升用户体验，更加精准的把用户想要看到的内容推荐给用户，让用户能够在利用有限的时间里，找到最有价值的内容；<br>3、提升商业价值，可以更加精准的把产品推荐给有需求的用户，从而提高广告的投放效率，节省成本，提高收益。</p><h2 id="数仓中Hive内外表对比">数仓中Hive内外表对比</h2><p>Hive内外表之间的主要区别是数据存储方式不同。<br>Hive内表将数据存储在HDFS中，而Hive外表将数据存储在外部存储系统中，如HBase、Amazon S3等。<br>Hive内表不支持对数据进行更新和删除操作，而Hive外表可以支持对数据进行更新和删除操作。 Hive内表访问速度快，而Hive外表访问速度较慢。</p><h2 id="对于分组排序的理解">对于分组排序的理解</h2><p>请问Hive SQL有哪三种分组排序，他们各自的特点是什么。将内容编写至对应报告中。</p><p>Hive SQL有三种分组排序：<br>1.排序分组：这是Hive SQL中最常用的分组排序。它按照定义的字段进行排序，然后将它们分组。 2.分组分组：这种排序首先将记录分组，然后再按照定义的字段进行排序。<br>3.Hash分组：这种排序将记录分为多组，每组都有自己的哈希值。每组中的记录按照定义的字段进行排序。<br>总之，这三种分组排序都是按照定义的字段进行排序，但是排序的顺序不同。排序分组将记录按照定义的字段进行排序，然后再分组；分组分组则将记录先分组，然后再按照定义的字段进行排序；最后，Hash分组将记录分为多组，每组都有自己的哈希值，并且每组中的记录按照定义的字段进行排序。</p><h2 id="UDF-UDAF-UDTF的区别">UDF/UDAF/UDTF的区别</h2><p>UDF（User Defined Function）是用户定义函数，是一种在Hive SQL中添加自定义函数的方式，可以将复杂的逻辑封装为函数，以便在SQL语句中使用，从而提高SQL处理效率。<br>UDAF（User Defined Aggregate Function）是用户定义聚合函数，是一种在Hive SQL中添加自定义聚合函数的方式，可以对多行数据进行聚合操作，从而得到更好的结果。<br>UDTF（User Defined Table Function）是用户定义表函数，是一种在Hive SQL中添加自定义表函数的方式，可以根据输入的参数生成多行输出，从而实现对Hive表的转换、拆分和聚合等操作。</p>]]></content>
    
    
    <summary type="html">大数据7月样题——电商综合分析</summary>
    
    
    
    <category term="大数据训练" scheme="https://u7u7.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="大数据" scheme="https://u7u7.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>瑞吉外卖优化</title>
    <link href="https://u7u7.top/posts/ea7374cf.html"/>
    <id>https://u7u7.top/posts/ea7374cf.html</id>
    <published>2023-03-10T12:17:25.000Z</published>
    <updated>2023-03-10T12:20:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1>11.3 优化前git linux Redis</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述">2.所学内容概述</h2><h3 id="Git命令">Git命令</h3><p>git在之前学过一遍，做博客的时候也应用过，已经很熟悉了。记下命令吧</p><p>本地仓库的操作</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">git status</td><td style="text-align:center">查看文件状态</td></tr><tr><td style="text-align:center">git add</td><td style="text-align:center">将文件修改加入暂存区</td></tr><tr><td style="text-align:center">git reset</td><td style="text-align:center">将暂存区的文件取消暂存或者切换版本</td></tr><tr><td style="text-align:center">git commit</td><td style="text-align:center">将暂存区的文件修改提交到版本库</td></tr><tr><td style="text-align:center">git log</td><td style="text-align:center">查看日志</td></tr></tbody></table><p>远程仓库操作</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">git remote</td><td style="text-align:center">查看远程仓库</td></tr><tr><td style="text-align:center">git remote add</td><td style="text-align:center">添加远程仓库</td></tr><tr><td style="text-align:center">git clone</td><td style="text-align:center">从远程仓库克隆</td></tr><tr><td style="text-align:center">git pull</td><td style="text-align:center">从远程仓库拉取</td></tr><tr><td style="text-align:center">git push</td><td style="text-align:center">推送到远程仓库</td></tr></tbody></table><p>标签操作 可以切换版本和更新时间</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git tag</td><td>列出已有的标签</td></tr><tr><td>git tag [name]</td><td>创建标签</td></tr><tr><td>git push [shortName] [name]</td><td>将标签推送远程仓库</td></tr><tr><td>git checkout -b [branch] [name]</td><td>检出标签</td></tr></tbody></table><p>在IDEA中集成使用Git</p><p>==在上面VCS中，点commit 选git 然后把路径改成自己git.exe安装的路径 就完成了IDEA集成，设置和远程仓库，就能用了==</p><ol><li>本地初始仓库<ul><li>选择VCS选项卡 —&gt; 创建Git仓库 —&gt; 选择需要被Git管理的目录 —&gt; 确定</li></ul></li><li>从远程仓库克隆（常用）<ul><li>这个可以自己选择克隆的本地位置</li><li>可以直接把远程仓库的代码都克隆到本地</li><li>远程克隆下来的项目会自带一个文件：<code>.gitignore</code>文件，在里面的信息是代表哪些文件不需要交给git管理</li></ul></li></ol><h3 id="Linux">Linux</h3><p>比较简单和基础，过一遍发现是自己都会的，简单的安装软件配置环境，还是很easy的</p><h3 id="Redis">Redis</h3><p>跟着视频把Redis安装完成了</p><h4 id="Linux安装Redis">Linux安装Redis</h4><ol><li><p>将Redis安装包上传Linux</p></li><li><p>解压安装包，改成你自己的redis版本，路径解压到<code>/usr/local</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redisVersion.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure></li><li><p>安装Redis的依赖环境gcc，编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖环境</span></span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>进入redis，编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis根目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>进入redis的src目录，进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到src目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis根目录/src</span><br><span class="line"><span class="comment"># 进行安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ol><h4 id="Redis启动和停止">Redis启动和停止</h4><p>设置一个后台运行，需要先修改redis.conf文件把<code>aemonize on</code>字段，将其修改为<code>daemonize yes</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行server 选择配置文件 后台运行</span></span><br><span class="line">src/redis-server ./redis.conf</span><br></pre></td></tr></table></figure><h4 id="Redis添加密码登陆">Redis添加密码登陆</h4><p>还是修改redis.conf配置文件，找到<code>requirepass</code>这行，将其注释去掉，并在后面写上自己的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新启动</span></span><br><span class="line">src/redis-server ./redis.conf </span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录时同时进行认证</span></span><br><span class="line">src/redis-cli -h localhost -p 6379 -a 密码</span><br><span class="line"><span class="comment"># 需要再次</span></span><br></pre></td></tr></table></figure><h2 id="3-BUG点">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>IDEA集成Git，一直报错，自己另外提交了一个就没问题，不知道什么原因。<br>CSDN搜到原因了，是文件在本地仓库和远程仓库上不一致，但是不知道如何解决，看两个库中唯一一个共同的文件是.gitnore打开，的确是不一样，就干脆直接把远程仓库的.gitnore删除了，再次提交，成功了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211071929437.png" alt="img"></p><h2 id="4-扩展学习部分">4.扩展学习部分</h2><h2 id="5-总结">5.总结</h2><p>今天的学习其实主要是复习和巩固，之前粗略学习的git和redis，全部重新过了一下，难度不大，就是晚上想把瑞吉上传到码云的时候，出了些问题，搞了有点久了，在前面的基本没什么问题，分支那边懂是懂了，但是没有实际操作过，因为自己做项目就一个分支就好了。明天试着把瑞吉部署到服务器中，就彻底结束SpringBotot的学习了。</p><h1>11.4 瑞吉外卖优化</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-2">2.所学内容概述</h2><h3 id="Git部署">Git部署</h3><p>之前git已经集成IDEA成功,直接commit完了直接提交没有报错，很顺利也很简单。</p><h3 id="缓存优化">缓存优化</h3><p>缓存优化用Redis，导入SpringDataRedis坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.76</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>配置序列化器</p><p>方便图形化界面中看我们存入的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码改造">代码改造</h4><p>因为实现的思路比较长，就写代码注释中了，这里使用一个butterfly自带的标签外挂把代码合并了，</p><p><code>+</code>为增加的代码      <code>-</code>为原来的代码删除的</p><p>u7-u7.github.io效果是分页的</p><div class="tabs" id="redis1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis1-1">缓存邮箱验证码</button></li><li class="tab"><button type="button" data-href="#redis1-2">缓存菜品</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis1-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (!phone.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//随机生成一个验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line">        log.info(code);</span><br><span class="line">        <span class="comment">//这里的phone其实就是邮箱，code是我们生成的验证码</span></span><br><span class="line">        MailUtils.sendTestMail(phone, code);</span><br><span class="line">        <span class="comment">//验证码缓存到Redis，设置存活时间5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>, code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis1-2"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">public Result&lt;List&lt;DishDto&gt;&gt; get(Dish dish) &#123;   </span><br><span class="line"><span class="addition">+   List&lt;DishDto&gt; dishDtoList;</span></span><br><span class="line"><span class="addition">+   String key = &quot;dish_&quot; + dish.getCategoryId() + &quot;_&quot; + dish.getStatus();</span></span><br><span class="line"><span class="addition">+   dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span></span><br><span class="line"><span class="addition">+   //如果有，则直接返回</span></span><br><span class="line"><span class="addition">+   if (dishDtoList != null)&#123;</span></span><br><span class="line"><span class="addition">+       return Result.success(dishDtoList);</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"><span class="addition">+   //如果无，则查询 </span></span><br><span class="line">    //条件查询器</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    //根据传进来的categoryId查询</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != null, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    //只查询状态为1的菜品（在售菜品）</span><br><span class="line">    queryWrapper.eq(Dish::getStatus, 1);</span><br><span class="line">    //简单排下序，其实也没啥太大作用</span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    //获取查询到的结果作为返回值</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    log.info(&quot;查询到的菜品信息list:&#123;&#125;&quot;,list);</span><br><span class="line">    //item就是list中的每一条数据，相当于遍历了</span><br><span class="line"><span class="deletion">-   List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span></span><br><span class="line"><span class="addition">+   dishDtoList = list.stream().map((item) -&gt; &#123;</span></span><br><span class="line">        //创建一个dishDto对象</span><br><span class="line">        DishDto dishDto = new DishDto();</span><br><span class="line">        //将item的属性全都copy到dishDto里</span><br><span class="line">        BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">        //由于dish表中没有categoryName属性，只存了categoryId</span><br><span class="line">        Long categoryId = item.getCategoryId();</span><br><span class="line">        //所以我们要根据categoryId查询对应的category</span><br><span class="line">        Category category = categoryService.getById(categoryId);</span><br><span class="line">        if (category != null) &#123;</span><br><span class="line">            //然后取出categoryName，赋值给dishDto</span><br><span class="line">            dishDto.setCategoryName(category.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        //然后获取一下菜品id，根据菜品id去dishFlavor表中查询对应的口味，并赋值给dishDto</span><br><span class="line">        Long itemId = item.getId();</span><br><span class="line">        //条件构造器</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //条件就是菜品id</span><br><span class="line">        lambdaQueryWrapper.eq(itemId != null, DishFlavor::getDishId, itemId);</span><br><span class="line">        //根据菜品id，查询到菜品口味</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">        //赋给dishDto的对应属性</span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line">        //并将dishDto作为结果返回</span><br><span class="line">        return dishDto;</span><br><span class="line">        //将所有返回结果收集起来，封装成List</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"><span class="addition">+   //将查询的结果让Redis缓存，设置存活时间为60分钟</span></span><br><span class="line"><span class="addition">+   redisTemplate.opsForValue().set(key,dishDtoList,60, TimeUnit.MINUTES);</span></span><br><span class="line">    return Result.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>因为菜品中save和update和status都需要，加入清理缓存的逻辑，单独把修改的代码放出来 同样使用diff放修改的代码</p><div class="tabs" id="redis2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis2-1">修改后的save</button></li><li class="tab"><button type="button" data-href="#redis2-2">修改后的update</button></li><li class="tab"><button type="button" data-href="#redis2-3">修改后的status</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis2-1"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping</span><br><span class="line">public Result&lt;String&gt; save(@RequestBody DishDto dishDto) &#123;</span><br><span class="line">    log.info(&quot;接收到的数据为：&#123;&#125;&quot;, dishDto);</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line"><span class="addition">+   String key = &quot;dish_&quot; + dishDto.getCategoryId() + &quot;_1&quot;;</span></span><br><span class="line"><span class="addition">+   redisTemplate.delete(key);</span></span><br><span class="line">    return Result.success(&quot;添加菜品成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis2-2"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PutMapping</span><br><span class="line">public Result&lt;String&gt; update(@RequestBody DishDto dishDto) &#123;</span><br><span class="line">    log.info(&quot;接收到的数据为：&#123;&#125;&quot;, dishDto);</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line"><span class="addition">+   String key = &quot;dish_&quot; + dishDto.getCategoryId() + &quot;_1&quot;;</span></span><br><span class="line"><span class="addition">+   redisTemplate.delete(key);</span></span><br><span class="line">    return Result.success(&quot;修改菜品成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis2-3"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br><span class="line">public Result&lt;String&gt; status(@PathVariable Integer status, @RequestParam List&lt;Long&gt; ids) &#123;</span><br><span class="line">    log.info(&quot;status:&#123;&#125;,ids:&#123;&#125;&quot;, status, ids);</span><br><span class="line">    LambdaUpdateWrapper&lt;Dish&gt; updateWrapper = new LambdaUpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper.in(ids != null, Dish::getId, ids);</span><br><span class="line">    updateWrapper.set(Dish::getStatus, status);</span><br><span class="line"><span class="addition">+   LambdaQueryWrapper&lt;Dish&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="addition">+   lambdaQueryWrapper.in(Dish::getId, ids);</span></span><br><span class="line"><span class="addition">+   List&lt;Dish&gt; dishes = dishService.list(lambdaQueryWrapper);</span></span><br><span class="line"><span class="addition">+   for (Dish dish : dishes) &#123;</span></span><br><span class="line"><span class="addition">+       String key = &quot;dish_&quot; + dish.getCategoryId() + &quot;_1&quot;;</span></span><br><span class="line"><span class="addition">+       redisTemplate.delete(key);</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">    dishService.update(updateWrapper);</span><br><span class="line">    return Result.success(&quot;批量操作成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>删除的话不需要修改的原因的是，我们删除之前需要修改为停售状态，所以我们已经给修改状态加入了清理缓存，所以要删除的话，一定会先清理过缓存的。</p><h4 id="SpringCache">SpringCache</h4><p>一个框架，能实现基本注解的缓存功能，就是加注解就能清理缓存，常用注解网上都搜得到用法，我就记项目中所使用的说明一下，@Cacheable和@CacheEvict</p><p><code>@cacheable</code>的作用主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</p><p><code>@CachEvict</code>的作用主要针对方法配置，能够根据一定的条件对缓存进行清空</p><h4 id="项目使用SpringCache">项目使用SpringCache</h4><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yml为Redis缓存</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.76</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span> <span class="comment"># 设置缓存过期时间</span></span><br></pre></td></tr></table></figure><p>缓存套餐</p><p>导入坐标配置好文件，然后在启动项加@EnableCaching 开启缓存注解</p><p>SetmealController的list方法上加上<code>@Cacheale</code>注解 和之前的不注解差不多 就是把值写注解里面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;, key = &quot;#setmeal.categoryId + &#x27;_&#x27; + #setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    List&lt;Setmeal&gt; setmealList = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SetmealController的save、update和status方法，加入清理缓存的逻辑 很简单直接复制就行改成true全部填返回值</p><div class="tabs" id="redis3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis3-1">save</button></li><li class="tab"><button type="button" data-href="#redis3-2">update</button></li><li class="tab"><button type="button" data-href="#redis3-3">status</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis3-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="comment">//设置allEntries为true，清空缓存名称为setmealCache的所有缓存</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;套餐添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis3-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Setmeal&gt; <span class="title function_">updateWithDish</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> setmealDto.getId();</span><br><span class="line">    <span class="comment">//根据id把对应套餐数据删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">    setmealDishService.remove(qw);</span><br><span class="line">    <span class="comment">//重新添加</span></span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        item.setSetmealId(id);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//更新套餐数据</span></span><br><span class="line">    setmealService.updateById(setmealDto);</span><br><span class="line">    <span class="comment">//更新套餐对应的数据 批量保存</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis3-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> String status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    LambdaUpdateWrapper&lt;Setmeal&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.in(Setmeal::getId, ids);</span><br><span class="line">    updateWrapper.set(Setmeal::getStatus, status);</span><br><span class="line">    setmealService.update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;批量操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>==!!! R需要实现Serializable接口，因为有个序列化的过程==</p><h3 id="读写分离">读写分离</h3><p>读写分离比较麻烦，需要先实现MySQL的主从表,让阿贵克隆了两台虚拟机。一个为主库，一个为从库。跟着步骤来就行，唯一有问题的点就是，因为是克隆的，所以mysql需要修改uuid。这里自己出过BUG。</p><p>修改方法 查看uuid</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> uuid();</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> uuid()                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">26532364</span><span class="number">-4</span>f8d<span class="number">-11</span>ed<span class="operator">-</span>a300<span class="number">-005056307198</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/lib/mysql/auto.cnf <span class="comment"># 修改uuid为上面查找的</span></span><br></pre></td></tr></table></figure><p>别忘记重启服务</p><h4 id="项目实现读写分离">项目实现读写分离</h4><p>创建一个新的分支，测试没问题再并入main</p><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改原来的mysql配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://172.16.1.77:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://172.16.1.78:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-BUG点-2">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>这是mysql主从复制，查询主从信息的时候正常的显示，但是自己显示的是Connecting to source,网上搜都说的uuid的问题，但是自己uuid修改了很多次，还是失败，就重连了一下，然后全部重新配置了uuid和Slave_Io_Running，就好了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211071929438.png" alt="image-20221107161447726"></p><h2 id="4-扩展学习部分-2">4.扩展学习部分</h2><h2 id="5-总结-2">5.总结</h2><p>今天周五上午练车，下午把基本的优化知识学了，修改了原来没加入缓存和读写分离的项目，开了两台虚拟机，调配下载软件，今天的学习难度是很简单的，明天就可以部署到h3c的服务器上面了，配置方面总是会出问题的，mysql自己修了近一个半小时，linux命令也在修bug的路上，越发熟练，明天部署完停下来，梳理一下这段时间所学的知识。</p><h1>11.7 部署项目在<code>h3c</code></h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-3">2.所学内容概述</h2><h3 id="配置环境">配置环境</h3><p>三台服务器</p><p>172.16.1.76 Redis缓存 启动Redis服务的</p><p>172.16.1.77 Nginx放前端项目和反向代理 Mysql 主从复制结构的主库</p><p>172.16.1.78 Mysql 主从复制结构的从库 jar jdk git maven 放后端项以及配置</p><h3 id="部署前端项目">部署前端项目</h3><p>在77中修改nginx.conf  把课件中的dist文件放html目录中去</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">root</span> <span class="string">html/dist; #前端页面存放位置</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">^~ /api/ &#123;</span></span><br><span class="line">        <span class="attr">rewrite</span> <span class="string">^/api/(.*)$ /$1 break;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://172.16.1.78:8080; #后端</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="部署后端项目">部署后端项目</h3><p>后端这块自己出了些问题，首先安装好JDK git Mysql Maven 查看的命令也很简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version <span class="comment">#看jdk 和 jar</span></span><br><span class="line">git -v <span class="comment"># 看git</span></span><br><span class="line">mvn -v <span class="comment"># 看Maven</span></span><br></pre></td></tr></table></figure><p>然后把IDEA中的项目执行git commit 然后push 上传到gittee码云 创建一个/usr/local/app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/u7u7-sjh/reggie_take_out.git</span><br></pre></td></tr></table></figure><p>sh脚本  自己包名跟这个不太一样，然后自己修改了一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span>  自动化部署脚本启动</span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 停止原来运行中的工程</span><br><span class="line">APP_NAME=reggie_take_out</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Process...&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -15 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Kill Process!&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Success!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 准备从Git仓库拉取最新代码</span><br><span class="line"><span class="built_in">cd</span> /usr/local/app/reggie_take_out <span class="comment">#注意文件所在地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> 代码拉取完成</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=<span class="literal">true</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line"><span class="built_in">echo</span> 启动项目</span><br><span class="line"><span class="built_in">nohup</span> java -jar reggie_take_out-1.0-SNAPSHOT.jar &amp;&gt; reggie_take_out.log &amp; <span class="comment"># 注意jar包名</span></span><br><span class="line"><span class="built_in">echo</span> 项目启动完成</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-3">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>进来后端全是报错，不知道什么原因，看项目是没问题的，但是我linux中的打包是自己添加的，并不是git中克隆下来的，然后把linux中app中克隆的文件删除，重新把IDEA中main和target都上传，然后再克隆下来就没问题了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211071929439.png" alt="image-20221107183351369"></p><h2 id="4-扩展学习部分-3">4.扩展学习部分</h2><h2 id="5-总结-3">5.总结</h2><p>今天上午考完科二，下午把项目部署到了h3c，就后端出了一点点问题，但是也成功了，还是小有成就的。明天上午缓冲一下，下午可以大概的进入SpringCloud的学习了，问题应该不是很大，可以带着vue学一下，感觉前端的知识还是很必要的，晚上整改一下图床的管理，买一个阿里云OSS图床，这样以后自己的Typora文件，发给别人图片加载不出来的情况也就没有了。上传到CSDN和Github  语雀也不会有图片不显示的情况了。</p>]]></content>
    
    
    <summary type="html">缓存优化以及部署</summary>
    
    
    
    <category term="前后端项目" scheme="https://u7u7.top/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://u7u7.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>7月总结</title>
    <link href="https://u7u7.top/posts/9a4dfe43.html"/>
    <id>https://u7u7.top/posts/9a4dfe43.html</id>
    <published>2023-03-10T06:00:25.000Z</published>
    <updated>2023-03-10T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、知识点汇总">一、知识点汇总</h2><h3 id="第一周7-7-7-11">第一周7.7-7.11</h3><ul><li><strong>这周的学习内容</strong> ：linux入门 实操文件 Shell编程  Scala的基础入门</li></ul><p>​<strong>难点</strong>： Scala基础语法   Shell编程</p><p>​<strong>个人理解</strong>：</p><p>**Shell编程：**shell在我理解有点像python，脚本语言。但是和python比，语言的简洁性,可读性都很差。毕竟是脚本语言，一些比较复杂的代码和程序，写出来就很麻烦用shell。因此现在shell是有一个let 可以用c和java的语言，还是方便的。Shell 主要用来开发一些实用的、自动化的小工具，而不是用来开发具有复杂业务逻辑的中大型软件，因为他的代码我觉得写起来非常难受，应该在搭建环境和分析日志这类的场景，shell会有比较好的表现力吧，在Linux中Shell应该是很重要的一个章节，毕竟老师说使用 Shell 的熟练程度反映了你对 Linux 的掌握程度。</p><p>**Scala基础语法：**Scala刚入门的时候，使用非常的难受，在scala中有java和python的影子，但是又不一样，就导致刚开始经常写错，它的语言很简洁，Java8中的lambda就是借鉴scala的，所以如果学Java的时候Lambda学好的话，入门上手还是蛮快的。Scala是一种强数据类型的语言，变量声明了类型，就变不了了。改变的话，只能创造新的变量，原变量是改不了的。毕竟称为Java++，也有强转，但是比较麻烦，这种脚本语言类，学明白了掌握还是容易的，而且思路可以清晰。</p><h4 id="自我周总结：">自我周总结：</h4><p>这周时间比较短，因为刚进入暑假集训，玩了十来天，状态自己调整了两天，不过学习速度比之前有很大的提高，刚来集训，劲头比较足吧，寝室室友什么的也比较舒服，所以尽管玩了几天，学习状态倒还是很满意的，这周主要是3天把Linux看完了，基本操作啊，对文件的实操。这方面之前就知道一些，看文档，一天能抵七八个小时的视频时间，后面的Shell编程，是仔细看了视频，因为有点奇怪，是脚本语言，写起来跟命令一样，然后看了一天的Scala编程，自己对语言可能比较敏感吧，上午还不习惯，下午用起来就舒服了，感觉比python写起来还舒服，就是它的类型声明有点奇怪。一天把前面一般语言都共有的部分，看掉了，主要都是看文档，看文档跟着案例敲学习语言，速度和效率真的快。</p><h3 id="第二周7-12-7-17">第二周7.12-7.17</h3><p><strong>这周的学习内容</strong> ： hadooop基本入门 hadoop完全分布式  HDFS</p><p>​<strong>难点：</strong> hadoop概念  hadoop克隆群起</p><p><strong>个人理解</strong>：</p><p>hadoop概念:这一块也不算个人理解吧，因为学hadoop学了很久，都不知道hadoop是什么，干嘛用的，就去CSDN去搜了，<a href="http://t.csdn.cn/J6cLT">http://t.csdn.cn/J6cLT</a> 这个链接，我觉得讲的特别好。也让我弄懂了hadoop和大数据。看文档完了，感觉Hadoop技术就是大数据这行的核心，像我们这次比赛要学的很多内容都是基于hadoop或者是和hadoop有关的，总之是离不开，hive，spark都是如此，这些算是hadoop的模块，模块之间又有关联。hadoop像是一个生态圈了，也有人讲hadoop生态。总结hadoop的话，Hadoop就是存储海量数据和分析海量数据的工具。它的核心是我学掉的HDFS和没学的MR，赶进度MR就看看文档就好了，HDFS是存储数据的，而MR就是计算数据的，理解为计算引擎。</p><p>**hadoop克隆：**这部分也不算难点，但是总是会出现问题，然后自己去解决，后面自己总结出了一套配置步骤，虚拟机克隆这部分，到配置IP。群起配置在多太虚拟机的时候，真的很方便，像如果一台装了java，并配置好了环境，后面几台只要，配置完ip和映射，以主虚拟机，直接分发就好了。写完配置文件，启动hadoop各集群也很方便。1.克隆虚拟机 2.修改静态IP 3.修改主机名做映射 4.关闭防火墙 。这样一台有ip能上完的虚拟机就配置好了。后面群起什么，主虚拟机分发一下就好了，交给环境配置的同学。</p><h4 id="自我周总结：-2">自我周总结：</h4><p>这周学习的效率就落下来了，这周是hadoop结束，以为hadoop是都要学习的，自己就很认真的在搞配置什么的命令，也出现了很多问题，一个一个去找，有配置报错，CSDN解决，浪费了很多时间。前面概念的有点莫论两可，后面跟概念相关的就比较吃力了。这周后面学HDFS，Java用IDEA充当客户端那天学习状态还可以的，自己学习状态和学习内容有点挂钩太多了。</p><h3 id="第三周7-18-7-24">第三周7.18-7.24</h3><p><strong>这周的学习内容</strong> ：Scala函数式编程 Scala面向对象 数组集合 Spark入门</p><p>Spark-RDD 转换算子 运行算子 SparkSQL</p><p><strong>难点：</strong> Scala集合计算函数   元组  Spark概念</p><p><strong>个人理解：</strong></p><p>元组：元组在我理解和java里面的元组完全不一样，在Scala元组是一个容器，将很多无关的数据封装为一个整体，元组最大只能有22个元素。元组可以存不同的元素，但是调用的时候比较抽象，是用._顺序号,他是有序的，在后面集合计算高级函数中经常使用，结合Map，和对象就很抽象，一层嵌一层的。</p><p>Scala集合计算函数：看文档的代码和扁平化+映射的方法，Scala的代码又简洁，更像抽象，一下子看文档看不明白，一套嵌一套的，很多地方的类型什么都省略了，用_直接代替，导致我这一块卡了很久，去换了IDEA设置，自动补齐类型，理解起来方便多了，在我理解的flatMap 相当于先进行 map 操作，在进行 flatten操作，这里基本就是扁平化+映射的原理，到后面分区什么又结合一起，代码全部写一行，要看好一会才行。慢慢也能捋清除。</p><p>Spark概念：之前学Scala的时候就说，学Scala就是为了Spark，到Spark，发现开发语句都是Scala。在我看来，Spark也是一种大数据计算框架，和MR类似，但是比MR强很多，不管是运行还是各种方面，效率方面比MR强100倍，有这么夸张。但是Spark因为是新起的，所以有些地方不够完善，容易内存溢出，但我只遇到过一次。Spark主要用于大数据的计算，而Hadoop以后主用于大数据的存储HDFS和Hive，以及资源调度。Spark+Hadoop的组合，是未来大数据领域最热门的组合，也是最有前景的组合！过断时间把Hadoop换成Spark执行应该会快上不少。</p><h4 id="自我周总结：-3">自我周总结：</h4><p>这周学完了Scala和Spark，学习速度还是很满意的。但是学习顺序出现了点问题，没有学Hive，就去看Spark了，前面听的很懵，到后面最重要的SparkSQL，文档让用Hive的，我连Hive是什么都不知道，下周得去看完Hive才回头来看SparkSQL了，这周的学习状态是很不错的，都是敲代码，代码敲了很多，Spark语法也都记住了，结合笔记，也能自己写出简单的案例。这周BUG出现蛮多的，都是在Scala的语句中，._这块出现了很多次问题，Scala还是没用顺，为了简洁的语法，明明是一层调用一层的，全部写在一行，然后化简，导致自己有时候都得看好一会，才能捋清除。</p><h3 id="第四周7-25-7-31">第四周7.25-7.31</h3><p><strong>这周的学习内容</strong> ：Hive配置 DDL语句 DML语句 Join语句 函数</p><p><strong>难点：</strong> Hive配置</p><h4 id="自我周总结：-4">自我周总结：</h4><p>这周配置这个Hive的环境配置了两天半，才磕磕绊绊搞好。原本自己弄了一天，第二天的时候又不行了，然后一报错，就去CSDN找解决方法，到JDBC的时候完全起不来，Jar包都找不到了，不知道被搞到哪里了，就让喻中贵重新帮我克隆配置了3台有hadoop的虚拟机，自己从头到尾又根据之前解决的思路，配置了一下午，全部都搞好了，也花了两天多时间，导致本来想这周就结束Hive的现在才学了2/3。这块配置还是不要瞎搞了，太浪费时间了，后面才是自己要知道的重点。Hive后面的任务，我觉得没什么难的地方。DDL和DML语句基本和SQL语句差不多，都是SQL基础语句。</p><h2 id="二、自我总结">二、自我总结</h2><p><strong>自我反省：</strong></p><p>自己解决BUG的能力不太行，现在文档的重要性是体现出来了，因为老师很多东西都调教好了，我们用的时候会出现很多问题，要去解决就是要看博客。平常解决一些BUG不顺利的话都会花一小时甚至一上午的时间去解决，这样影响还是很大的，不管是进度还是心态。</p><p>配置Hive那两天的时候发现了自身的问题，可能我自己的那台机子，应该是好的，启动方式和老师不一样而已，导致我用老师那种方式，一直等不到OK，而且命令敲完，提示信息和老师不一样，就觉得自己之前的配置哪里有了问题，又找不到，重写弄了三台，从头到尾 java hadoop hive spark 重配置。后面到JDBC的时候，提示信息跟之前还是一样，但是自己试着去运行了一下，发现好了。感觉浪费了很多时间，就是因为自己没有去试beeline命令，认为前面错，后面也错。</p><p>然后自己学习的时候，没先提前去搞懂这东西是干嘛的，要在什么的基础之上，所以出现了学习步骤的问题，SparkSQL之前要看Hive，Hive之前要看Hadoop，这是一条线，整反了，就会听不懂。像之前学Hadoop的时候，没先搞懂Hadoop是什么，前面讲hadoop是什么干嘛的，为了进度，直接跳了，导致学到后面，都不知道hadoop是什么干嘛的，又去看了博客，再学的时候会相对容易点，有清晰的条理。不然就像无头苍蝇一样，不知道在学什么。为了进度，讲概述可以跳，最好还是得先去博客了解，看文档比视频快很多，也能弄明白东西的作用。</p><p>现在学习的时间相对之前增加了，加上周末以及每天的早八晚九，一天学习时间可以达到8个小时，加上要赶进度，学习效率比之前高上不少，因为配置和学习顺序，拖累的这个月的进度，本来这个月打算Hive学完的，然后花两天回头看下SparkSQL就可以刷题了，现在Hive只看了一半，希望下星期能学完自己的任务，然后学长出题做一下，看一百遍不如去做一遍。自己比之前的进步也蛮大的，学会了看文档，真的是事半功倍，学会一个语言的基本用法，看文档不需要一个星期就能搞定。文档的重要还是体现出来了。现在的学习步骤就是看文档，到出BUG，或者看不懂的地方，再去看视频，视频不行就去CSDN搜。然后自己的博客也是很久没更新了，虽然没什么点击量，但是我觉得还是要写起来的，等大数据结束了，希望能再把博客发起来，自己处理BUG的过程什么，都可以去发，争取一天一篇。当作日常任务一样。</p><h2 id="三、浅谈情商">三、浅谈情商</h2><p>​EQ俗称情商。开门见山了，对于这篇文章还是有自己的见解的。首先是对于本文第二点，新时期大学生情商存在的问题，谈谈我自己踩到的点，像是照镜子一般。</p><p>​最严重就是自我管理能力，情商本质上是一种自我管理能力。我经常在自己的签名或者锁屏上，写上律字，或者和自律相关的话，之前看到几个同学也跟我差不多，相信都是因为自己的自制力很差，才写这种提醒着自己，但是效果微乎其微了，经常自己明明制定好了计划，学习或者是锻炼，总之是对自己好的计划，但是自己却不开心干的事情。不出所料，自己会忍不住去干自己喜欢的事情，不是打游戏就是刷抖音，甚至是发呆，就是不想去做，懒字刻在身了。第二点的心里素质，曾经踩过坑吧，现在算是跳出来了，还是蛮严重的。情绪是真的很可怕的事情，自己在大学之前大概有过三次，严重的情绪波动，都是和学习相关的，再清晰点就是考试成绩，三次影响自己一生的考试，都是大大的失常发挥，所以想过自己去做极端的事情。我觉得这也不算承受能力差吧，发生在自己身上的都是独一无二的，放到别人身上又会如何，没人能跟你感同身受。</p><p>后面几点我觉得没踩坑踩下去，人际交往能力和道德素质是很挂钩的，从小在学校班级，年级等。自己都会有一大堆的朋友，也有很多交心的，像长达十年的朋友也是很多的。所以我觉得这两点自己做的还是可以的。感恩方面的意识，很懂得“百善孝为先”“滴水之恩，定当涌泉相报”这类诸式的话的。</p><p>情商的重要性不言而喻，在我去年暑假在剧组中，见过很多形形色色的人，有个老大哥那天做那边和我聊天，说剧组中很多人都是能力很强，但是就是赚不到钱，成不了大事，我是灯光组的，灯光组那么多人，几十个，为什么就一个灯光总监，剩下的都是调灯的。灯光总监手下人，一大半都曾经尝试过自己去带一些人，去拍戏，但是都是失败而终，有了一次没下次，就是情商的问题，大白话就是不会说话，不会做事，性格不行，各种各种方面，导致人家只和你拍一次。从那次以后，我就一直认为机遇&gt;情商&gt;能力，现实就是这样，除非你能力很强很强。能力强的人，又有几个低情商呢？</p><p>文章学校层面的政策，说难听点，对大学生这些方面的改善几乎咩用。辅导员（班主任）要经常与学生保持密切的联系和交流，多与学生进行平等地谈心谈话，关注大学生的情感动向，并进行正向的引导。这点倒是有点用，我高中后面学习，自律等方面都是源于，自己原本不太喜欢的语文老师的一句话。老师因为身体原因两个月没来学校(这之前几乎和老师没什么交流)，老师回来看到我，第一句话就是：你怎么都瘦了，我瞳孔直接震惊。后面老师说的什么话，我都会去听，一天两三篇作文改了又改，追着老师问，那段时间还是很怀念的，也是老师改变了我，学习习惯也好，自律也好，尊师也好，都是老师带给我的。所以我觉得要对一个人情商，行为的改变，如果靠外人，那这个人是在他心中有一定分量的。不然这些表面的开展活动，讲座，在我看来觉得一点用都没有，是我的主观感受。</p><p>总而言之，一万个人有一万个哈姆雷特，相信每个人对自己对他人，对任何事都有自己的看法，自己的问题自己最知道，解决方法也在乎个人，这不是固定式。问君能有几多愁？愁啊愁啊</p>]]></content>
    
    
    <summary type="html">创新工作室7月总结</summary>
    
    
    
    <category term="工作室月总结" scheme="https://u7u7.top/categories/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://u7u7.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>瑞吉外卖</title>
    <link href="https://u7u7.top/posts/a1e1aa91.html"/>
    <id>https://u7u7.top/posts/a1e1aa91.html</id>
    <published>2023-03-10T06:00:25.000Z</published>
    <updated>2023-03-10T06:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1>10.26 瑞吉外卖 DAY1</h1><h2 id="1-头-所学内容出处">1.头 所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述">2.所学内容概述</h2><h3 id="了解软件开发整体介绍">了解软件开发整体介绍</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807437.png" alt="image.png"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807438.png" alt="image.png"></p><h3 id="开发环境的搭建">开发环境的搭建</h3><h4 id="数据库环境的搭建">数据库环境的搭建</h4><p>课件提供了sql文件，可以直接source 导入mysql中 早就习以为常了</p><h4 id="Maven项目创建">Maven项目创建</h4><p>也很简单，普通的maven项目，复习导入坐标和yaml文件，因为不是直接创建的springBoot 项目，所以要创建Boot程序入口</p><h4 id="3-1-后台登录开发">3.1 后台登录开发</h4><p>先创建一个实体类和mapper以及service</p><p>再封装一个R作为返回的结果类<br>给EmployeeController类添加一个login方法</p><ul><li>@RequestBody 主要用于接收前端传递给后端的json字符串（请求体中的数据）</li><li>HttpServletRequest 作用：如果登录成功，将员工对应的id存到session一份，这样想获取一份登录用户的信息就可以随时获取出来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;<span class="comment">//接收前端的json数据,这个json数据是在请求体中的</span></span><br><span class="line"><span class="comment">//        1、将页面提交的密码password进行md5加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();<span class="comment">//从前端用户获取到登录时候的密码</span></span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes()); <span class="comment">//加密</span></span><br><span class="line"><span class="comment">//        2、根据页面提交的用户名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;(); <span class="comment">//泛型需要填写Employee</span></span><br><span class="line">        queryWrapper.eq(Employee::getUsername,employee.getUsername()); <span class="comment">//eq用lambda::</span></span><br><span class="line">        <span class="comment">//在设计数据库的时候我们对username使用了唯一索引,所以这里可以使用getOne方法</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"><span class="comment">//        3、如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4、密码比对，如果不一致则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (! emp.getPassword().equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户已被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6、登录成功，将员工id存入Session并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">        <span class="comment">//把从数据库中查询到的用户返回出去</span></span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//员工退出</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">//清除Session中当前登录员工的id</span></span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2后台系统退出功能">3.2后台系统退出功能</h4><p>这个比较简单 点击按钮退出到登陆页面就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出功能</span></span><br><span class="line"><span class="comment"> * ①在controller中创建对应的处理方法来接受前端的请求，请求方式为post；</span></span><br><span class="line"><span class="comment"> * ②清理session中的用户id</span></span><br><span class="line"><span class="comment"> * ③返回结果（前端页面会进行跳转到登录页面）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">//清理session中的用户id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><h3 id="3-3-完善登录功能">3.3 完善登录功能</h3><p>之前的登陆功能是有个bug的，像之前web的一个登陆案例，直接输入地址的话，就可以跳过登录页面，达到不登录就能进入需要登录的 页面，之前web是用过滤器的，现在用拦截器解决这个小bug</p><p>要先在启动项上面加入@ServletComponentScan注解 识别bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登陆</span></span><br><span class="line"><span class="comment"> * filterName过滤器名字</span></span><br><span class="line"><span class="comment"> * urlPatterns拦截的请求，这里是拦截所有的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;LongCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径  比如静态资源(静态页面我们不需要拦截,因为此时的静态页面是没有数据的)</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        log.info(<span class="string">&quot;拦截到的请求:&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check)&#123;</span><br><span class="line">            <span class="comment">//对请求进行放行</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">employee</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>); <span class="comment">//用户登录状态</span></span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为:&#123;&#125;&quot;</span>,employee);</span><br><span class="line">            <span class="comment">//对请求进行放行</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据,具体响应什么数据，看前端的需求，然后前端会根据登陆状态做页面跳转</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url: urls)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扩展学习部分">4.扩展学习部分</h2><h2 id="5-总结">5.总结</h2><p>刚进入瑞吉外卖，下载了一些资料，没找到老师的官方的ppt文档，就CSDN去搜的，第一天的任务不是很难，主要是帮助回看一下springboot的部分，算是小复习，就做了一个登录和退出，还有个登录的小BUG，基本都是后台的代码，前端的一些功能都做好了，后端加bean，调用一下响应和请求就好了，比较基础的还是。学习方法就是看老师过一遍功能如何实现，如何测试，然后就自己试着去敲，慢慢做出来，这样学，进度可能会有些慢，但是能搞清楚每一块是干嘛的，每个注解和类的作用和功能。</p><h1>10.27 瑞吉外卖 DAY2</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述💻">2.所学内容概述💻</h2><h3 id="添加员工">添加员工</h3><h4 id="执行流程分析">执行流程分析</h4><ol><li>页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端</li><li>服务端Controller接收页面提交的数据并调用Service将数据进行保存</li><li>Service调用Mapper操作数据库，保存数据</li></ol><h4 id="具体实现">具体实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增的员工信息：&#123;&#125;&quot;</span>, employee.toString());</span><br><span class="line">        <span class="comment">//设置默认密码123456 MD5加密</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line">        <span class="comment">////设置createTime和updateTime</span></span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //根据session来获取创建人的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置id</span></span><br><span class="line">        employee.setCreateUser(empId);</span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入数据库</span></span><br><span class="line">        employeeService.save(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;添加员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="完善全局异常处理">完善全局异常处理</h4><p>现在的代码其实是有BUG存在的,username不能重复，因为在建表的时候设定了unique，只能存在唯一的username，如果存入相同的username则会报错<br>java.sql.SQLIntegrityConstraintViolationException: Duplicate entry ‘Kyle’ for key ‘employee.idx_username’<br>看的出来报错类是SQLIntegrityConstraintViolationException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException sqlBug)</span>&#123;</span><br><span class="line">        log.error(sqlBug.getMessage());</span><br><span class="line">        <span class="comment">//包含Duplicate entry是说明有条目重复</span></span><br><span class="line">        <span class="keyword">if</span> (sqlBug.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//对字符串切片</span></span><br><span class="line">            String[] error = sqlBug.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//Duplicate entry &#x27;zhangsan&#x27; for key &#x27;employee.idx_username&#x27;</span></span><br><span class="line">            <span class="comment">//这句日志信息 下标为2的刚好是用户名 返回对应用户名的报错信息就好了</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> error[<span class="number">2</span>];</span><br><span class="line">            log.error(username +<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> R.error(username +<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="员工信息分页查询">员工信息分页查询</h3><p>添加MP自带的分页插件 前段时间刚写过分页 还是很熟悉的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看前端代码利用检查功能，发现是get请求 /page 利用Rest规范 写业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器</span></span><br><span class="line">        Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加过滤条件（当我们没有输入name时，就相当于查询所有了）</span></span><br><span class="line">        wrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并对查询的结果进行降序排序，根据更新时间</span></span><br><span class="line">        wrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        employeeService.page(pageInfo,wrapper);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以修改显示一页多少行，直接在前端的comment包中的list.html中修改</p><h3 id="启用-禁用-员工账户">启用/禁用 员工账户</h3><p>其实很简单对于后端来说，权限问题只有管理员才能使用，这样的功能是在前端实现的，后端的话只要点击按钮的时候注入对应的Rest请求，就好了。<br>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作在Controller中创建update方法，此方法是一个通用的修改员工信息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">Update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">        log.info(employee.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>); <span class="comment">//获取id</span></span><br><span class="line">        employee.setUpdateUser(empId); <span class="comment">//设置更新用户id</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now()); <span class="comment">//更新时间为当前时间</span></span><br><span class="line">        employeeService.updateById(employee);/ /调用update方法</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>出现了问题，ajdx返回的id值是和实际的id值不一致，是js对Long类型的数据处理时候丢失了精度<br>json数据时进行处理，将Long型数据统一转为String字符串<br>直接把课件中的 对象映射器JacksonObjectMapper 复制到common包中<br>扩展Mvc框架中的消息转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转化器，底层使用jackson将java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合当中(index设置为0，表示设置在第一个位置，避免被其它转换器接收，从而达不到想要的功能)</span></span><br><span class="line">        converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="编辑员工信息">编辑员工信息</h3><p>先跟着老师的文档分析了前端代码是如何实现页面的 回显什么也是前端所实现的。</p><p>我所实现的服务端接受请求，并根据员工id查询员工信息，并将员工信息以json形式响应给页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;根据id查询员工信息...&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有此用户的信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>服务端接受员工信息，并进行处理，完成后给页面响应<br>由于修改员工信息也是发送的PUT请求，与之前启用/禁用员工账号是一致的，而且前面我们已经写过了PUT请求的Controller层<br>所以当我们点击保存按钮时，调用submitForm函数，而在submitForm函数中我们又调用了editEmployee函数，发送PUT请求，实现修改功能,直接就调用前面启动/禁用员工账户的update方法了，所以只用实现根据id查询员工信息就行了</p><h3 id="公共字段填充">公共字段填充</h3><p>前面我们已经完成了对员工数据的添加与修改，在添加/修改员工数据的时候，都需要指定一下创建人、创建时间、修改人、修改时间等字段，而这些字段又属于公共字段，不仅员工表有这些字段，在菜品表、分类表等其他表中，也拥有这些字段。所以下面做菜单页面的时候为了方便，降低耦合度，可以把这些字段称为公共字段。</p><h4 id="实现方式">实现方式</h4><p>创建一个类 实现MyMetaObjectHandler 接口 利用ThreadLocal中的方法实现对id的获取<br>前面更新和插入时候 对时间和用户id的修改 可以注释掉了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">//插入的时候</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(insert)....&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新的时候</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(update)....&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-2">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)<br>今天基本没什么bug，小bug就是导入包的时候导入错了，导致对应类的方法没找到，但是很快就反应过来了。</p><h2 id="4-扩展学习部分-2">4.扩展学习部分</h2><h2 id="5-总结-2">5.总结</h2><p>今天学习难度一般，学习状态极佳，静下心来完成了项目对员工的基本功能实现，发现所用到的很多方法都是之前所没有接触和学过的，也有一些小技巧是前面某个案例所使用的，像分页什么的，因为在赶进度，想快点把项目做完，基本都是二倍数过一遍视频，了解原理，代码使用，然后就开始自己敲了，感觉这个项目前端方面其实比较难，我现在做来，后端处理一下请求就好了，一些复杂的功能都是前端所实现的，最后做了一个公共字段的自动填充，其实有点麻烦的，而且不是很理解，用到了多线程解决，自己其实是看一遍视频，自己就能实现了，也大致明白这样做的原因。</p><h1><strong>10.28 github hexo 个人博客搭建</strong></h1><h2 id="1-头：日期、所学内容出处-2"><strong>1.头：日期、所学内容出处</strong></h2><p>b站以及QQ请教 还有github博客讲解</p><h2 id="2-所学内容概述-2">2.所学内容概述</h2><h3 id="实现流程">实现流程</h3><p>开始需要安装ndoejs<br>然后npm 下载hexo 和hexo-cli<br>github创建自己仓库，用git命令绑定<br>hexo也绑定仓库<br>npm可以找别人的主题模版 下载到global仓库<br>分析代码 看主题步骤 跟着做<br>hexo clean 清理缓存<br>hexo g 上传文件<br>hexo s 启动服务<br>hexo d 上传到github仓库 直接到页面</p><p>目前的笔记页面效果如下，还有很多地方需要完善，想到什么等闲下来再去做好，已经知道一些地方的原理了。<br><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807439.png" alt="image.png"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807440.png" alt="image.png"><br><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807441.png" alt="123"></p><h2 id="3-BUG点-3"><strong>3. BUG点</strong></h2><p>难点(关键代码或关键配置，BUG截图+解决方案)<br>看报错信息以为是butterfly的源文件被我不小心修改了，然后我去github中把之前备份的拉下来，重写添加了一遍，还是报错，那唯一和初始不同的地方只有，yml文件了，然后拿默认的和原本的对比，发现在添加社交图标的时候，qq和微信的图标标注了，但是后面没输入信息。把两个注释掉，就没报错了，但是很奇怪，因为之前yml文件报错，都会说哪一行报错，这个应该是骗过了js的编译。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807442.png" alt=""></p><h2 id="4-扩展学习部分-3">4.扩展学习部分</h2><h2 id="5-总结-3">5.总结</h2><p>今天搞了一天的个人博客的小开发，昨天看到一个大佬记的笔记，发现页面很好看也很清楚，但是不知道是什么笔记网站，然后问他，发现是利用github和hexo搭建的自己的网站，可以放md文件，一些笔记可以梳理，我觉得这样很好，今天就搞了出来，大致基本都弄出来了，还没有美化，过程还是有很多磕磕绊绊的，尤其是npm下载的时候，太吃网络了，之前一直下不下来，有点看运气，github有时候也访问不进去。等项目做完了，美化一下，把自己之前的笔记，都上传到自己的博客网站，个人网站已经建好了，因为还没实现typora上传图片，这样会导致自己的笔记，图片会丢失，所以明天把上传问题解决一下。<br>页面如下 把去年学的一点笔记当作实验了效果还可以<br><a href="https://u7-u7.github.io/">https://u7-u7.github.io/</a></p><h1>10.29 分类管理功能实现</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-3">2.所学内容概述</h2><p>今天先完成了公共字段的自动填充 对更新时间和创建时间，这样对后面菜品和菜单，套餐等等页面功能实现就不需要再写一遍了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//利用MetaObjectHandler类 实现还是很简单 易懂的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(insert)...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(update)...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成了菜品的基本增删改查的操作(代码比较多，就不放在笔记中去了，需要注意的点也在代码中注解了),难度不是很大，在之前员工中一样，实现方法的流程都是差不多的，分析页面请求，看前端代码，写后端代码。</p><p>在删除功能完善的时候，又创建了一个自定义异常类 在删除不能删除的信息的时候，抛出自定义运行类的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123; <span class="comment">//运行时异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException exception)</span> &#123;</span><br><span class="line">    log.error(exception.getMessage());</span><br><span class="line">    <span class="keyword">return</span> Result.error(exception.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-4">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>删除页面显示 删除成功 但是数据依旧存在 不知道原因 看返回的日志中id=null 也就是根本没有获取到id的值。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807443.png" alt="image-20221030135557307"></p><p>发现前端 发送post 请求的时候 页面是?ids id后面带了一个s 应该前端的问题，把方法内参数id修改成ids 没问题了。这个请求的设置在js目录下面的category.js 19行 上面写着ids 应该是打错了 因为我看老师的代码是id</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807444.png" alt="image-20221030135513708"></p><h2 id="4-扩展学习部分-4">4.扩展学习部分</h2><p>把之前hexo中图片无法显示的问题，解决了，申请了一个免费的图库，之前原本尝试过gitee图库和bilibili图库，不知道为什么到了hexo中是不显示的，gitee图库，typora一直都验证不到，插件下载总是失败，具体原因也不知道。使用的自定义web图床也只能上传2000张图片，等到放不下了，就要考虑换图床了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807445.png" alt="image-20221031082701258"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807446.png" alt="image-20221031082631770"></p><h2 id="5-总结-4">5.总结</h2><p>今天学习内容简单，因为今天是周末，在寝室学习的，学习效率就一般了，下午还去练车了，基本只学了一上午到2点，学习内容很简单，基本都是自己独立完成的，看业务需求是对菜单功能完善，自己去前端页面看请求方式，进行需求分析一下，自己就能打出来了，出了点小插曲，好在顺利解决了，解决bug的过程还是蛮顺利的，也明白了参数名对代码的影响，一定要统一好。然后在晚上又去把博客图片无法显示的问题解决了一下，过两天还是换一个图床比较好。</p><h1>10.31 菜品和套餐功能实现</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-4">2.所学内容概述</h2><p>对菜品和套餐基本功能的实现，因为有的参数是实体类不满足接收的参数，需要创建导入Dto层的类，封装页面提交数据。其实就是把不能接受的参数，重写一下方法，封装为list，再循环赋值，就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品数据保存到dish表</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">        <span class="comment">//获取dishId</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line">        <span class="comment">//将获取到的dishId赋值给dishFlavor的dishId属性</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor dishFlavor : flavors) &#123;</span><br><span class="line">            dishFlavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//同时将菜品口味数据保存到dish_flavor表</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点!!!</p><p>多表操作的时候需要在方法上面加<code>@Transactional</code>，我比较偷懒就直接在业务层Impl类上面加了。然后运行类上面加<code>@EnableTransactionManagement</code></p><h2 id="3-BUG点-5">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>难点写在扩展学习部分了</p><h2 id="4-扩展学习部分-5">4.扩展学习部分</h2><p>因为在视频中和博客中，对有一个列表的stream().map加lambda的方式，一下子没怎么懂，然后就去看了视频，对代码的解释，以及作用，看弹幕，很多人用增强for循环做了出来，因为暑假学了scala，看了一会他的代码也大致的懂了，然后自己去用for循环，发现写出来似乎更方便，而且可读性高，效率倒是还没有去测试过，不过这种小项目，应该相差不大，效率分析过了应该是lambda快很多，用stream流。那一块lambda也是今天的难点所在。</p><p>两种方式对比</p><div class="tabs" id="contrast"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#contrast-1">stream流</button></li><li class="tab"><button type="button" data-href="#contrast-2">增强for</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="contrast-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>, Setmeal::getName, name);</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    setmealService.page(pageInfo, queryWrapper);</span><br><span class="line">    BeanUtils.copyProperties(pageInfo, dtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line">    <span class="comment">//stream流 调用records中元素 拷贝给新建的setmealDto 再通过collect转换为list</span></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item, setmealDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            setmealDto.setCategoryName(category.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    dtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> Result.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="contrast-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize ,String name)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; setmealDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    wrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    setmealService.page(pageInfo,wrapper);</span><br><span class="line">    BeanUtils.copyProperties(pageInfo,setmealDtoPage,<span class="string">&quot;records&quot;</span>);       </span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;SetmealDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//for循环 调用records中元素 拷贝处理 放入空列表list中</span></span><br><span class="line">    <span class="keyword">for</span> (Setmeal item : records)&#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(setmealDto);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="5-总结-5">5.总结</h2><p>今天学习难度稍难，而且下午练了回车，但是今日的学习状态极佳，一股脑扎进去敲代码。今天的难点其实是在多表操作中，因为在菜品功能和套餐中，都有调用另外一个关联表的操作，就需要用LambdaQueryWrapper进行公共字段匹配，有点像sql中的多表连接，但是是用java实现的，和left join这样差不多,LambdaQueryWrapper就是类似于on，实现连接条件，还有一个lambda对列表的处理，分页查询那边，代码量有点太大了，但是如果分析好步骤，自己也是可以敲出来的。其他的修改和删除操作，也比之前的稍难点，需要自定义在业务层写方法，进行一个自定义处理，因为有些条件是需要添加的，很多categoryId是需要后面添加的。总体来说今天学习的内容还是很丰富的，早上做文件上传和下载，把java基础的流又算复习了一遍，明天状态好的话，项目的简单实现应该就完成了，再花个两三天把redis和优化解决。</p><h1>11.1 移动端功能的实现</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-5">2.所学内容概述</h2><p>移动端功能实现(过段时间，会写在自己博客中，笔记内容就不放了，代码很多)</p><p><a href="https://u7-u7.github.io/%E8%BF%99%E9%87%8C%E4%BC%9A%E6%94%BE%E4%BB%A3%E7%A0%81,%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86">https://u7-u7.github.io/这里会放代码,以及流程梳理</a></p><h3 id="修改手机验证-为邮箱">修改手机验证 为邮箱</h3><p>教程是用手机发送一个虚假的请求验证码输入验证，但是手机号要真正实现是要钱的，突然记得之前自己学过邮箱的发送，然后自己去改成了自己的邮箱，把邮箱的SMTP打开，是可以发送的，自己改前端代码的时候有点问题，去CSDN搜到了邮箱的正则匹配的表达式，然后页面把手机号都改成了邮箱，验证码也实现了，但是发现验证码是用equals的这样大小写一定要统一，我们日常使用是不用的，就改成了不区分大小写，倒是不难。</p><h4 id="准备工作">准备工作</h4><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送邮箱的工具类 带测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">//可以在这里直接测试方法，填自己的邮箱即可</span></span><br><span class="line">        sendTestMail(<span class="string">&quot;1452582554@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">MailUtils</span>().achieveCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTestMail</span><span class="params">(String email, String code)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 创建Properties 类用于记录邮箱的一些属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 表示SMTP发送邮件，必须进行身份验证</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">//此处填写SMTP服务器</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//端口号，QQ邮箱端口587</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写，写信人的账号</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.user&quot;</span>, <span class="string">&quot;1452582554@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写16位STMP口令</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.password&quot;</span>, <span class="string">&quot;vxccjkvvlrokgigh&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">        <span class="type">Authenticator</span> <span class="variable">authenticator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 用户名、密码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.user&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.password&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(userName, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">mailSession</span> <span class="operator">=</span> Session.getInstance(props, authenticator);</span><br><span class="line">        <span class="comment">// 创建邮件消息</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(mailSession);</span><br><span class="line">        <span class="comment">// 设置发件人</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">form</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(props.getProperty(<span class="string">&quot;mail.user&quot;</span>));</span><br><span class="line">        message.setFrom(form);</span><br><span class="line">        <span class="comment">// 设置收件人的邮箱</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(email);</span><br><span class="line">        message.setRecipient(RecipientType.TO, to);</span><br><span class="line">        <span class="comment">// 设置邮件标题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;u7&#x27;s Blog 邮件测试&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置邮件的内容体</span></span><br><span class="line">        message.setContent(<span class="string">&quot;尊敬的用户:你好!\n注册验证码为:&quot;</span> + code + <span class="string">&quot;(有效期为一分钟,请勿告知他人)&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 最后当然就是发送邮件啦</span></span><br><span class="line">        Transport.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">achieveCode</span><span class="params">()</span> &#123;  <span class="comment">//由于数字 1 、 0 和字母 O 、l 有时分不清楚，所以，没有数字 1 、 0</span></span><br><span class="line">        String[] beforeShuffle = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>,</span><br><span class="line">                <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>,</span><br><span class="line">                <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(beforeShuffle);<span class="comment">//将数组转换为集合</span></span><br><span class="line">        Collections.shuffle(list);  <span class="comment">//打乱集合顺序</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            sb.append(s); <span class="comment">//将集合转化为字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改拦截器">修改拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/sendMsg&quot;</span>,<span class="comment">//移动端发送短信</span></span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>判断用户是否登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断用户是否登录</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改的前段页面 (把手机号都先改成邮箱登录) 然后修改 front中的login.html 判断手机号的正则表达式换成判断邮箱的正则表达式 ^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*$(上网搜的)</p><h4 id="发送验证码">发送验证码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="comment">//请求体/user/sendMsg</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (!phone.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//随机生成一个验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line">        log.info(code);</span><br><span class="line">        <span class="comment">//这里的phone其实就是邮箱，code是我们生成的验证码</span></span><br><span class="line">        MailUtils.sendTestMail(phone, code);</span><br><span class="line">        <span class="comment">//验证码存session，方便后面拿出来比对</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邮箱收到了就成功了就可以写login登录的实现了 顺利完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line">        log.info(map.toString());</span><br><span class="line">        <span class="comment">//获取邮箱</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//从session中获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeInSessionUpp</span> <span class="operator">=</span> codeInSession.toUpperCase(); <span class="comment">//全部变成大写</span></span><br><span class="line">        <span class="comment">//比较这用户输入的验证码和session中存的验证码是否一致</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">upperCase</span> <span class="operator">=</span> code.toUpperCase(); <span class="comment">//全部变成大写 这样输入验证码就不需要大小写了</span></span><br><span class="line">        <span class="keyword">if</span> (upperCase.equals(codeInSessionUpp)) &#123;</span><br><span class="line">            <span class="comment">//如果输入正确，判断一下当前用户是否存在</span></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//判断依据是从数据库中查询是否有其邮箱</span></span><br><span class="line">            queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">            <span class="comment">//如果不存在，则创建一个，存入数据库</span></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setPhone(phone);</span><br><span class="line">                userService.save(user);</span><br><span class="line"></span><br><span class="line">                user.setName(<span class="string">&quot;用户&quot;</span> + codeInSession);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//存个session，表示登录状态</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">            <span class="comment">//并将其作为结果返回</span></span><br><span class="line">            <span class="keyword">return</span> R.success(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-6">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>输入验证码以后，就自动又跳会登录页面，浏览器没有login 的请求，看日志跳到了最后的用户未登录，说明check没有匹配上，检查代码，发现拦截器的数组中，“/user/login” 少了一个/,加上以后顺利解决了问题</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807447.png" alt="image-20221101093111494"></p><p>客户端list查询找的时候，因为调用的是同一个请求，但是我一直没有显示，找不到原因，后面发现自己写的list代码和老师的有一些区别，有一块条件判断的时候，我少加了一个 不等于null的判断，导致我的type在前端显示是null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapper.eq(category.getType() != <span class="literal">null</span>,Category::getType,category.getType());</span><br></pre></td></tr></table></figure><h2 id="4-扩展学习部分-6">4.扩展学习部分</h2><p>移动端补充一些视频未完善的功能(自己写的) 过段时间把这几个功能的实现以及流程 思路 写进来</p><h3 id="历史订单功能">历史订单功能</h3><p>需要先添加一个OrderDto层 然后直接在OrderController编写方法</p><div class="tabs" id="orders"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#orders-1">orderDto</button></li><li class="tab"><button type="button" data-href="#orders-2">OrderController</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="orders-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrdersDto</span> <span class="keyword">extends</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetail&gt; orderDetails;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="orders-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    <span class="comment">//获取orders的page</span></span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//获取ordersDto的page 到时候用属性拷贝</span></span><br><span class="line">    Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//创建orders条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//匹配 userid</span></span><br><span class="line">    queryWrapper.eq(Orders::getUserId,userId);</span><br><span class="line">    <span class="comment">//根据订单时间排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Orders::getOrderTime);</span><br><span class="line">    <span class="comment">//orders分页</span></span><br><span class="line">    orderService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="comment">//pageInfo属性 拷贝给orderDtoPage</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,ordersDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Orders&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;OrdersDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Orders item : records) &#123;</span><br><span class="line">        <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,ordersDto);</span><br><span class="line">        <span class="comment">//获取orderId 根据id 去orderDetail表查数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        qw.eq(OrderDetail::getOrderId,orderId);</span><br><span class="line">        List&lt;OrderDetail&gt; details = orderDetailService.list(qw);</span><br><span class="line">        ordersDto.setOrderDetails(details);</span><br><span class="line">        list.add(ordersDto);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提交给ordersDtoPage</span></span><br><span class="line">    ordersDtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="登出功能">登出功能</h3><ul><li><p>登出功能比较简单，跟之前的管理端是一样的</p></li><li><p>请求路径<code>/user/loginout</code>,请求方式为<code>POST</code></p><p>要在UserController写方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登出功能</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/loginout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">loginout</span><span class="params">(HttpServletRequest httpServletRequest)</span>&#123;</span><br><span class="line">        httpServletRequest.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>); <span class="comment">//获取登录状态的Attribute</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="修改-删除地址">修改/删除地址</h3><h4 id="数据回显">数据回显</h4><ul><li><p>修改第一步和之前一样完成<code>数据回显</code> 同样看前端请求</p></li><li><p>/addressBook/{id}<code>请求方式是</code>GET 在AddressBookController中写方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">byId</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (byId == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(byId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="修改地址">修改地址</h4><blockquote><p>请求网址: <a href="http://localhost/addressBook">http://localhost/addressBook</a><br>请求方法: PUT</p></blockquote><ul><li>直接在AddressBookController写Put方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updateAdd</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (addressBook == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在，请刷新重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addressBookService.updateById(addressBook); <span class="comment">//调用MP方法</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;地址修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="删除地址">删除地址</h4><blockquote><p>请求网址: <a href="http://localhost/addressBook?ids=1579828298672885762">http://localhost/addressBook?ids=1579828298672885762</a><br>请求方法: DELETE</p></blockquote><ul><li>直接在AddressBookController写Delete方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> Long ids)</span>&#123;</span><br><span class="line">    <span class="comment">//删除地址</span></span><br><span class="line">    <span class="keyword">if</span> (ids == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在，请刷新重试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(ids);</span><br><span class="line">    <span class="keyword">if</span> (addressBook == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在，请刷新重试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    addressBookService.removeById(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减号按钮">减号按钮</h3><ul><li>加入购物车以后，前端是给了一个减号的按钮，平常自己点外卖也有使用，大概功能就是点一下数量-1 0的时候菜品就会消失</li></ul><blockquote><p>请求网址: <a href="http://localhost/shoppingCart/sub">http://localhost/shoppingCart/sub</a><br>请求方法: POST</p></blockquote><p>有返回json数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>   dishId<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">    setmealId<span class="punctuation">:</span> <span class="string">&quot;1579044544635232258&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>思路:通过这两个ID 实现对套餐和菜品的number属性的修改 最后为0的话调用删除操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">deleteSub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">       <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> shoppingCart.getSetmealId();</span><br><span class="line">       LambdaQueryWrapper&lt;ShoppingCart&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//只查询当前用户ID的购物车</span></span><br><span class="line">       lambdaQueryWrapper.eq(ShoppingCart::getUserId, BaseContext.getCurrentId());</span><br><span class="line">       <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//匹配出菜品数据</span></span><br><span class="line">           lambdaQueryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">           <span class="type">ShoppingCart</span> <span class="variable">dishCart</span> <span class="operator">=</span> shoppingCartService.getOne(lambdaQueryWrapper);</span><br><span class="line">           dishCart.setNumber(dishCart.getNumber() - <span class="number">1</span>);</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> dishCart.getNumber();</span><br><span class="line">           <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               shoppingCartService.updateById(dishCart);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               shoppingCartService.removeById(dishCart.getId());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> R.success(dishCart);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (setmealId != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//通过setmealId查询购物车套餐数据</span></span><br><span class="line">           lambdaQueryWrapper.eq(ShoppingCart::getSetmealId, setmealId);</span><br><span class="line">           <span class="type">ShoppingCart</span> <span class="variable">setmealCart</span> <span class="operator">=</span> shoppingCartService.getOne(lambdaQueryWrapper);</span><br><span class="line">           <span class="comment">//将查出来的数据的数量-1</span></span><br><span class="line">           setmealCart.setNumber(setmealCart.getNumber() - <span class="number">1</span>);</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">currentNum</span> <span class="operator">=</span> setmealCart.getNumber();</span><br><span class="line">           <span class="comment">//然后判断</span></span><br><span class="line">           <span class="keyword">if</span> (currentNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//大于0则更新</span></span><br><span class="line">               shoppingCartService.updateById(setmealCart);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNum == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//等于0则删除</span></span><br><span class="line">               shoppingCartService.removeById(setmealCart.getId());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> R.success(setmealCart);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> R.error(<span class="string">&quot;系统繁忙，请稍后再试&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="点图片查看套餐的详情">点图片查看套餐的详情</h3><p>这个前端其实是写好了的，阿贾克斯请求在api也看得到 先看下请求</p><blockquote><p>请求网址: <a href="http://localhost/setmeal/dish/1579044544635232258">http://localhost/setmeal/dish/1579044544635232258</a><br>请求方法: GET</p></blockquote><p>是通过id可以实现的 restFul风格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">showSetmealDish</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//手里的数据只有setmealId</span></span><br><span class="line">        dishLambdaQueryWrapper.eq(SetmealDish::getSetmealId, id);</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        List&lt;SetmealDish&gt; records = setmealDishService.list(dishLambdaQueryWrapper);</span><br><span class="line">        List&lt;DishDto&gt; dtoList = records.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//copy数据</span></span><br><span class="line">            BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">            <span class="comment">//查询对应菜品id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getDishId();</span><br><span class="line">            <span class="comment">//根据菜品id获取具体菜品数据，这里要自动装配 dishService</span></span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(dishId);</span><br><span class="line">            BeanUtils.copyProperties(dish,dishDto); <span class="comment">//这里不写也没事 但是我想验证数据</span></span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> R.success(dtoList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-总结-6">5.总结</h2><p>今天的学习难度较难，因为之前做了三四天的客户端的功能完善，功能实现方法什么，自己基本就知道，所以移动端的差不多的功能一天就完成了，很多都是跟客户端大差不大。难点在刚开始的时候，自己把教程的手机号接受验证码验证改成了邮箱（写在扩展学习了），还有后面的购物车和用户下单的代码也是挺难的，看了老师敲了一遍理解完，才尝试去敲。在下午练完车以后 ，快到晚自习了，把移动端的基本功能都实现了。但是自己发现很多功能都没完善，去前端页面是能看到请求的，就想自己尝试完善一下，晚自习将视频中没完善的功能给完善了，大概五六个功能，自己后台代码写掉了。</p><h1>11.2 瑞吉外卖完结</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-6">2.所学内容概述</h2><p>上午把管理端老师未完善的功能去完善了一下，下午和晚上花时间，将项目重新回顾梳理了一下。自己用自己的手机操作了一下，客户端的功能是没有问题的。</p><h2 id="3-BUG点-7">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>在扩展学习写批量启售/停售的时候，运行时候就报错，刚开始不知道啥原因，注解掉写的方法，就没报错了，问题在自己写的allStatus方法，以为是把return写到循环体中了，放外面还是报错，翻译报错信息，有一条说DishController什么已存在，奥就发现因为启售和停售的请求是一样的，只是请求体不一样，所以@PostMapepr里面我写的其实是一样的，可能这样会导致匹配不到，就把原本写的单独启售和停售注释了(批量启售/停售也适用单独的),问题解决了，功能也实现了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807448.png" alt="image-20221102104452662"></p><h2 id="4-扩展学习部分-7">4.扩展学习部分</h2><ul><li><p>[x] 后台系统端的额外功能实现(代码后续补上)  批量的删除 和 启停售</p></li><li><p>两个重要的功能批量修改和删除，使用批量的时候，单独的修改和删除也是能成功的 自己去CSDN搜到了<code>LambdaUpdateWrapper</code>这个类对删除和修改，代码会优化很多</p></li></ul><h3 id="菜品批量启售-停售">菜品批量启售/停售</h3><p>查看前端请求</p><blockquote><p>请求网址: <a href="http://localhost/dish/status/0?ids=1578942037036703745">http://localhost/dish/status/0?ids=1578942037036703745</a><br>请求方法: POST</p></blockquote><p>和之前修改状态一样，前端已经对status取反了，所以直接用发送的status更新状态</p><div class="tabs" id="batchstatus"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#batchstatus-1">单独</button></li><li class="tab"><button type="button" data-href="#batchstatus-2">批量</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="batchstatus-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long ids)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;status:&#123;&#125;,ids:&#123;&#125;&quot;</span>, status, ids);</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(ids);</span><br><span class="line">    <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//直接用它传进来的这个status改就行</span></span><br><span class="line">        dish.setStatus(status);</span><br><span class="line">        dishService.updateById(dish);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;系统繁忙，请稍后再试&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="batchstatus-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;status:&#123;&#125;,ids:&#123;&#125;&quot;</span>, status, ids);</span><br><span class="line">    LambdaUpdateWrapper&lt;Dish&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.in(ids != <span class="literal">null</span>, Dish::getId, ids); <span class="comment">//dish的id在列表中 相当于where in</span></span><br><span class="line">    updateWrapper.set(Dish::getStatus, status); <span class="comment">//设置状态为前端返回的status</span></span><br><span class="line">    dishService.update(updateWrapper); <span class="comment">//更新</span></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;批量操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="菜品批量删除">菜品批量删除</h3><p>查看前端请求</p><blockquote><p>请求网址: <a href="http://localhost/dish?ids=1578674689490825217">http://localhost/dish?ids=1578674689490825217</a><br>请求方法: DELETE</p></blockquote><p>同样要判断菜品是不是停售状态</p><p>我直接写批量的了，<a href="http://xn--queryWrapper-q45tr2jg6titt.in">区别就在queryWrapper.in</a> 和传入的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">allDelete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除的ids：&#123;&#125;&quot;</span>, ids);</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.in(Dish::getId, ids);</span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> dishService.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;删除列表中存在启售状态商品，无法删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dishService.removeByIds(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套餐批量启售-停售">套餐批量启售/停售</h3><p>查看请求</p><blockquote><p>请求网址: <a href="http://localhost/setmeal/status/1?ids=1580361600576114689">http://localhost/setmeal/status/1?ids=1580361600576114689</a><br>请求方法: POST</p></blockquote><p>和菜品操作的基本一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span><span class="comment">//后面的加入缓存 现在忽略</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> String status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    LambdaUpdateWrapper&lt;Setmeal&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.in(Setmeal::getId, ids);</span><br><span class="line">    updateWrapper.set(Setmeal::getStatus, status);</span><br><span class="line">    setmealService.update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;批量操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套餐修改">套餐修改</h3><p>和其他修改操作一样 需要先数据回显 再修改</p><p>看请求</p><blockquote><p>回显的请求                                                                                                                                                                                             请求网址: <a href="http://localhost/setmeal/1580361496716759041">http://localhost/setmeal/1580361496716759041</a><br>请求方法: GET</p><p>修改的请求  网址: <a href="http://localhost/setmeal">http://localhost/setmeal</a><br>请求方法: PUT</p></blockquote><div class="tabs" id="update11.2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#update11.2-1">回显操作</button></li><li class="tab"><button type="button" data-href="#update11.2-2">修改操作</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="update11.2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span> <span class="comment">//用SetmealDto</span></span><br><span class="line"><span class="keyword">public</span> R&lt;SetmealDto&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealService.getById(id);</span><br><span class="line">    <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">    <span class="comment">//拷贝数据</span></span><br><span class="line">    BeanUtils.copyProperties(setmeal,setmealDto);</span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//配setmealId</span></span><br><span class="line">    queryWrapper.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">    List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line">    setmealDto.setSetmealDishes(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="update11.2-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span> <span class="comment">//后面的加入缓存 现在忽略</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Setmeal&gt; <span class="title function_">updateWithDish</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> setmealDto.getId();</span><br><span class="line">    <span class="comment">//根据id把对应套餐数据删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">    setmealDishService.remove(qw);</span><br><span class="line">    <span class="comment">//重新添加</span></span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        item.setSetmealId(id);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//更新套餐数据</span></span><br><span class="line">    setmealService.updateById(setmealDto);</span><br><span class="line">    <span class="comment">//更新套餐对应的数据 批量保存</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="查看订单明细">查看订单明细</h4><p>查看肯定是get请求  但是这个请求比较多</p><blockquote><p>请求网址: [<a href="http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19%2000%3A00%3A00&amp;endTime=2022-11-16%2023%3A59%3A59">http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19 00%3A00%3A00&amp;endTime=2022-11-16 23%3A59%3A59</a>](<a href="http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19">http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19</a> 00%3A00%3A00&amp;endTime=2022-11-16 23%3A59%3A59)<br>请求方法: GET</p></blockquote><ul><li>感觉和之前的历史订单差不多 对着稍微修改一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, Long number, String beginTime, String endTime)</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前id</span></span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//按时间降序排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    queryWrapper.eq(number != <span class="literal">null</span>, Orders::getId, number);</span><br><span class="line">    <span class="comment">//时间段，大于开始，小于结束</span></span><br><span class="line">    queryWrapper.gt(!StringUtils.isEmpty(beginTime), Orders::getOrderTime, beginTime)</span><br><span class="line">            .lt(!StringUtils.isEmpty(endTime), Orders::getOrderTime, endTime);</span><br><span class="line">    orderService.page(pageInfo, queryWrapper);</span><br><span class="line">    List&lt;OrdersDto&gt; list = pageInfo.getRecords().stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">        <span class="comment">//获取orderId,然后根据这个id，去orderDetail表中查数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(OrderDetail::getOrderId, orderId);</span><br><span class="line">        List&lt;OrderDetail&gt; details = orderDetailService.list(wrapper);</span><br><span class="line">        BeanUtils.copyProperties(item, ordersDto);</span><br><span class="line">        <span class="comment">//之后set一下属性</span></span><br><span class="line">        ordersDto.setOrderDetails(details);</span><br><span class="line">        <span class="keyword">return</span> ordersDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    BeanUtils.copyProperties(pageInfo, ordersDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">    ordersDtoPage.setRecords(list);</span><br><span class="line">    <span class="comment">//日志输出看一下</span></span><br><span class="line">    log.info(<span class="string">&quot;list:&#123;&#125;&quot;</span>, list);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改订单状态">修改订单状态</h3><ul><li>这个需要看下前端写的js文件 先看下请求和返回json</li></ul><blockquote><p>请求网址: <a href="http://localhost/order">http://localhost/order</a><br>请求方法: PUT</p></blockquote><ul><li>返回的json 和 js文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>   </span><br><span class="line">    status<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> </span><br><span class="line">    id<span class="punctuation">:</span> <span class="string">&quot;1580166484741677057&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(row.<span class="property">status</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        str =  <span class="string">&#x27;待付款&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        str =  <span class="string">&#x27;正在派送&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        str =  <span class="string">&#x27;已派送&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        str =  <span class="string">&#x27;已完成&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        str =  <span class="string">&#x27;已取消&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为返回值已经写好了 我们只要传入参数就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> Integer.parseInt(map.get(<span class="string">&quot;status&quot;</span>));</span><br><span class="line">    <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> Long.valueOf(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    log.info(<span class="string">&quot;修改订单状态:status=&#123;&#125;,id=&#123;&#125;&quot;</span>, status, orderId);</span><br><span class="line">    LambdaUpdateWrapper&lt;Orders&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.eq(Orders::getId, orderId);</span><br><span class="line">    updateWrapper.set(Orders::getStatus, status);</span><br><span class="line">    orderService.update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;订单状态修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-总结-7">5.总结</h2><p>今天学习状态还不错，但是学习时间有点少了，对自己今天的任务要求也不重，上午完善完老师没写的功能，晚上自己梳理了一遍，以及对自己博客的美化工作，早上第一次做批量启售和停售的时候，出现了一点小插曲，解决完以后，后面的批量删除以及菜单的功能，实现起来也很顺利。本来想加入公司项目的但是好像接口都差不多写完了，计划还是往后面学，项目部署也去学一下，计划挂到服务器里面，再把git和Redis过一遍，这周之前把部署的任务完成了，然后去开始Cloud了打算。</p>]]></content>
    
    
    <summary type="html">SpringBoot项目</summary>
    
    
    
    <category term="前后端项目" scheme="https://u7u7.top/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Java" scheme="https://u7u7.top/tags/Java/"/>
    
    <category term="项目" scheme="https://u7u7.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="springboot2" scheme="https://u7u7.top/tags/springboot2/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法与外挂标签写法汇总</title>
    <link href="https://u7u7.top/posts/2013454d.html"/>
    <id>https://u7u7.top/posts/2013454d.html</id>
    <published>2022-08-09T10:19:03.000Z</published>
    <updated>2022-10-23T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">🥧本文汇总Markdown格式以及外挂标签在网页端的渲染效果，可作为文档进行查询</summary>
    
    
    
    <category term="演示" scheme="https://u7u7.top/categories/%E6%BC%94%E7%A4%BA/"/>
    
    
    <category term="Markdown" scheme="https://u7u7.top/tags/Markdown/"/>
    
    <category term="外挂标签" scheme="https://u7u7.top/tags/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
