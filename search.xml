<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue笔记</title>
      <link href="/posts/adf5c49.html"/>
      <url>/posts/adf5c49.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在最前">写在最前</h1><blockquote><p>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】 <a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=2&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=2&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><p>视频出处如上 下面每天笔记将不写视频出处 为了兼容博客 下面也不放数字了 博客OTC插件自带了</p></blockquote><h1 id="Vue入门">Vue入门</h1><h2 id="学习日期-11-12">学习日期: 11.12</h2><h2 id="所学内容概述">所学内容概述</h2><h3 id="Vue概述">Vue概述</h3><ul><li>动态构建用户界面的<strong>渐进式</strong> JavaScript 框架</li><li>借鉴 Angular 的<strong>模板</strong>和<strong>数据绑定</strong>技术</li><li>借鉴 React 的<strong>组件化</strong>和<strong>虚拟 DOM</strong> 技术</li></ul><h4 id="Vue特点">Vue特点</h4><ul><li>遵循MVVM模式</li><li>编码简洁, 体积小, 运行效率高, 适合移动/PC 端开发</li><li>可以引入第三方库开发</li></ul><h3 id="搭建环境">搭建环境</h3><blockquote><p>比较简单 浏览器就跟之前导入插件一样，拖进去就行了                                                                                                       注意要打开允许访问文件网址 不然使用文件直接打开会报错 提醒你没装Vue</p><p>Vscode中只要在同级目录下创建一个js包 把课件的vue.js导入就行了</p></blockquote><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221110182752809.png" alt="image-20221110182752809"></p><h3 id="小案例">小案例</h3><p>跟着老师敲的小案例，和之前css html js差不多，填入了Vue的引用，也感觉到了方便，使用Vue感觉和后端代码就有点像了，也就是老师说的和命令式代码的区别。 注释是直接复制的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;初识Vue&lt;/title&gt;</span><br><span class="line">        &lt;!-- 引入vue --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!-- </span><br><span class="line">        初识Vue：</span><br><span class="line">            1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</span><br><span class="line">            2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</span><br><span class="line">            3.root容器里的代码被称为【Vue模板】；</span><br><span class="line">            4.Vue实例和容器是一一对应的；</span><br><span class="line">            5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；</span><br><span class="line">            6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</span><br><span class="line">            7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</span><br><span class="line"></span><br><span class="line">            注意区分：js表达式 和 js代码(语句)</span><br><span class="line">                    1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：</span><br><span class="line">                                (1). a</span><br><span class="line">                                (2). a+b</span><br><span class="line">                                (3). demo(1)</span><br><span class="line">                                (4). x === y ? &#x27;a&#x27; : &#x27;b&#x27;</span><br><span class="line"></span><br><span class="line">                    2.js代码(语句)</span><br><span class="line">                                (1). if()&#123;&#125;</span><br><span class="line">                                (2). for()&#123;&#125;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;!-- 准备好容器 --&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">            &lt;h1&gt;你好, &#123;&#123;name.toUpperCase()&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;h1&gt;我的年龄是 &#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示</span><br><span class="line">            //创建Vue实例</span><br><span class="line">            new Vue(&#123;</span><br><span class="line">                el:&#x27;#root&#x27;, //el用于指定当前Vue实例为哪个容器服务 值通常为css选择器字符串</span><br><span class="line">                data:&#123; //data中用于存储数据 数据供el所指定的容器去使用</span><br><span class="line">                    name:&#x27;u7Uu7&#x27;,</span><br><span class="line">                    age:&#x27;18&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="BUG点">BUG点</h2><p>直接打开html文件，报这样的错误，看自己的地址和老师的不太一样，我是file:///E:/study/Vue/初识Vue/初识Vue.html，但是老师的是127.0.0.1:5500/xxx.xxx.xxx，然后看到弹幕说注意允许访问文件网址，然后自己觉得是插件设置问题，果然看到了，把选项打开问题解决了，到后面装了一个Live Server的插件，跑起来的链接和老师的差不多了，还很方便。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221110183031172.png" alt="image-20221110183031172"></p><h2 id="扩展学习">扩展学习</h2><h2 id="日总结">日总结</h2><blockquote><p>今天的学习内容比较简单，简单的进入了 Vue的学习，比如写简单的字体打到网页，Vue是利用对象一样的方式实现的，可以控制属性，可变性，耦合性比较好。虽然web已经是很久之前学习的了，但是前端时间自己搞博客用的都是css和js代码，现在学Vue也稍微有点记忆，看的懂，可能主要还是今天的内容比较少吧，只是简单的页面。Vue给我的感觉就跟，SpringBoot和Spring一样，升级了js，但是之前js的东西都可以使用。我总结Vue的工作就是创建Vue实例，然后传入一个配置对象，就像编译性语言了。</p></blockquote><h1 id="Vue-数据代理">Vue 数据代理</h1><h2 id="学习日期-11-13">学习日期: 11.13</h2><h2 id="所学内容概述-2">所学内容概述</h2><h3 id="MVVM模型">MVVM模型</h3><blockquote><p>M:模型 data中的数据                                               V: 视图 模版代码VM: 视图模型 Vue实例</p></blockquote><ul><li>开启F12检查以后 在控制台所看到的都是VM中存在的 Vue实例，我们data中添加的，也只是添加到VM VM是自带一些本事自带的属性。在Vue模版都可以直接使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;初识Vue&lt;/title&gt;</span><br><span class="line">        &lt;!-- 引入vue --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">            &lt;h1&gt;学校名称:&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;h1&gt;学校地址:&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;h1&gt;测试1:&#123;&#123;$options&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;h1&gt;测试2:&#123;&#123;$createElement&#125;&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;h1&gt;测试3:&#123;&#123;_c&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示</span><br><span class="line">            //创建Vue实例</span><br><span class="line">            const vm = new Vue(&#123;</span><br><span class="line">              el:&#x27;#root&#x27;,</span><br><span class="line">              data()&#123;</span><br><span class="line">                  return&#123;</span><br><span class="line">                      name: &#x27;金华职业技术学院&#x27;,</span><br><span class="line">                      address: &#x27;金华&#x27;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            console.log(vm)</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221111143214821.png" alt="image-20221111143214821"></p><h3 id="数据代理">数据代理</h3><ul><li>Object.defineProperty参数 第一个是对象 第二个是要代理的参数</li><li>有get和set方法可以读取到代理参数的修改和获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// value:18,</span></span><br><span class="line">    <span class="comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span></span><br><span class="line">    <span class="comment">// writable:true, //控制属性是否可以被修改，默认值是false</span></span><br><span class="line">    <span class="comment">// configurable:true //控制属性是否可以被删除，默认值是false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span><br><span class="line">        number = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>解释什么是数据代理  通过obj2控制obj的x</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）--&gt;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">obj.<span class="property">x</span> = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>小总结一下</p><ul><li><p>1.Vue中的数据代理：</p><p>通过vm对象来代理data对象中属性的操作（读/写）</p><p>2.Vue中数据代理的好处：</p><p>更加方便的操作data中的数据</p><p>3.基本原理：</p><p>通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>为每一个添加到vm上的属性，都指定一个getter/setter。</p><p>在getter/setter内部去操作（读/写）data中对应的属性。</p></li></ul><h2 id="BUG点-2">BUG点</h2><h2 id="扩展学习-2">扩展学习</h2><h2 id="日总结-2">日总结</h2><blockquote><p>今天是算正式学习Vue的第二天，难度一般，有讲到复习js的部分。那部分自己没学过，但理解是什么意思了。今天的学习状态还不错的，因为没有指定计划的原因，学到晚上才发现，自己的进度其实是有点慢了的都，要抓紧时间了，前端自己是不太懂的，所以会跟着老师去敲代码，听一些细节，导致进度会慢很多，等到后面应该会好一点，也要抓紧了，按照自己的计划去学，同时还要复习java的，不能松下来。</p></blockquote><h1 id="Vue-事件-计算属性-监视">Vue 事件 计算属性 监视</h1><h2 id="学习日期-11-14">学习日期: 11.14</h2><h2 id="所学内容概述-3">所学内容概述</h2><h3 id="事件处理">事件处理</h3><p>简单的点击时间用<code>@click</code> 修饰符和监听笔记都放在html代码中去了效果如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 滚动条 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto; </span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Vue中的事件修饰符：</span></span><br><span class="line"><span class="comment">1.prevent：阻止默认事件（常用）；</span></span><br><span class="line"><span class="comment">2.stop：阻止事件冒泡（常用）；</span></span><br><span class="line"><span class="comment">3.once：事件只触发一次（常用）；</span></span><br><span class="line"><span class="comment">4.capture：使用事件的捕获模式；</span></span><br><span class="line"><span class="comment">5.self：只有event.target是当前操作的元素时才触发事件；</span></span><br><span class="line"><span class="comment">6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">div2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(e.target)</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221116091036100.png" alt="image-20221116091036100"></p><h3 id="计算属性">计算属性</h3><p>案例是输入姓和名,输出姓-名,自己就写出来了，但是没有用到计算属性computed</p><p>计算属性简写的话大概就是如此，firstName和lastName是默认值 然后通过双向绑定实现功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">fullName()&#123;</span><br><span class="line">    return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监视">监视</h3><p>监视的方法名是watch，能监视某方法使用或者属性调用发生修改时候，进行执行。如果要开启深度监视的话，就要添加如下的参数，深度监视，就好比你要看一个数组，中的某个属性。</p><p>​          deep:<strong>true</strong>, //开启深度监视</p><blockquote><p>如果使用监视和计算属性都使用，在方法中要使用延时执行setTimeout的话，只能在watch中使用，在computed会报错，但是如果不只是两个属性拼接，多个属性的话，使用监视就会很麻烦，使用时候是要看使用场景的。</p></blockquote><h2 id="BUG点-3">BUG点</h2><ul><li>金师附小在写调用接口的时候报了很多错误，都是一次一次改过来，慢慢解决的，一般问题有如下几点，后端请求少了或者在apifox不一样，还有测试的时候数据库的内容修改了，但是apifox上面写的测试没改，就要去问后端数据库的数据，不然写好接口没法测试。</li></ul><h2 id="扩展学习-3">扩展学习</h2><p>金师附小写了几个ajax请求<br><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221114203302672.png" alt="image-20221114203302672"></p><h2 id="日总结-3">日总结</h2><blockquote><p>今天学习的内容还是蛮多的，学习状态也还不错，难度也一般，难点在对深层监视的时候，需要缕清楚逻辑，才知道自己所要监视的内容具体是哪条。Vue的话，感觉利用对象以及this代替Vue实例，很像函数，学习起来还算顺畅，就是自己的CSS和HTML不太熟悉，具体效果自己一下子搞不明白。</p></blockquote><h1 id="Vue-样式-渲染-列表">Vue 样式 渲染 列表</h1><h2 id="学习日期-11-16">学习日期: 11.16</h2><h2 id="所学内容概述-4">所学内容概述</h2><h3 id="绑定样式">绑定样式</h3><ul><li><p>Style类型我只在博客中使用过</p></li><li><p>基本分为Class和Style两类 大致写法如下:</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;!-- 绑定style样式--对象写法 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;!-- 绑定style样式--数组写法 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&lt;br&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="条件渲染">条件渲染</h3><ul><li><p>v-if v-else-if v-else <code>！template只能配合v-if使用</code> template不影响控制台时候看源代码的结构，节省资源</p><p>该方法就和逻辑判断一样，如果成立显示，不成立直接消失，消失的时候F12都检查不到</p></li><li><p>v-show 这个就不成立的话，页面没对应的效果但是F12其实是在的，适合频繁的调用，不像if每次都要重新解析。</p></li></ul><h2 id="BUG点-4">BUG点</h2><ul><li>处理字符串的时候，刚开始不太清楚Vue中for循环中，取得的参数，刚开始以为和增强for循环一样，直接就是数组中的元素出来，但是打印完日志发现是下标，然后在自己代码上修改一下就好了。大致就是for循环出来本来是人名，但是是0 1 2 3 4这样的下标</li></ul><p><img src="https://docimg10.docs.qq.com/image/AgAABa0mN7l_Q5p0a8pGJ4D_tLuinyFF.png?w=1447&amp;h=901" alt="img"></p><h2 id="扩展学习-4">扩展学习</h2><blockquote><p>金师附小渲染页面 数据处理</p></blockquote><h2 id="日总结-4">日总结</h2><blockquote><p>今天学习状态不错，内容较难，刚Vue学到渲染页面，就要把昨天调用的接口，中调数据，把原来页面的死数据，换成接口中调到的。刚开始还是有难度的，但是搞清楚了需求以及如何使用，一切都引刃而解了。其实调用接口就几种情况，调用完接口，去F12看参数返回的rows，提取出来给前端需要渲染的地方，一些数据是需要处理的，就自己写methods方法，把数据处理以后，传入需要调用对应数据的页面，数据处理的时候稍微有点难。总得来说正式深入Vue之前，用项目先锻炼自己，前面简单功能，以后学习的话应该会快很多。</p></blockquote><h1 id="Vue-列表渲染">Vue 列表渲染</h1><h2 id="学习日期-11-17">学习日期: 11.17</h2><h2 id="所学内容概述-5">所学内容概述</h2><h3 id="列表排序">列表排序</h3><p>也可以说是数组排序，数组中是对象，根据对象，有自带的方法排序 后面减前面是降序 前面减后面升序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.sort((p1,p2)=&gt;&#123;</span><br><span class="line">return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="对象数据更新">对象数据更新</h3><p>splice方法其实是删除以后在新增，相当于替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.persons.splice(0,1,&#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125;) </span><br><span class="line">//删除数组下标为0的 添加1个数据 最后为新增的数据</span><br></pre></td></tr></table></figure><h3 id="添加数据">添加数据</h3><blockquote><p>在需要添加的按钮先加@click事件，调用方法，然后在显示是h2中加v-if判断student.sex。底层逻辑是                                          给this.student 添加一个key为sex value为男的对象</p></blockquote><p>​         <strong>this</strong>.$set(<strong>this</strong>.student,‘sex’,‘男’)</p><h2 id="BUG点-5">BUG点</h2><h2 id="扩展学习-5">扩展学习</h2><ul><li>渲染了三个接口 一个添加重命名以及新增</li></ul><p>下面是v-for对key的作用 相当于key的内部原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1. 虚拟DOM中key的作用：</span><br><span class="line">key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, </span><br><span class="line">随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</span><br><span class="line"></span><br><span class="line">2.对比规则：</span><br><span class="line">(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="line">①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</span><br><span class="line">②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</span><br><span class="line">(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="line">创建新的真实DOM，随后渲染到到页面。</span><br><span class="line"></span><br><span class="line">3. 用index作为key可能会引发的问题：</span><br><span class="line">1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="line">会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="line">2. 如果结构中还包含输入类的DOM：</span><br><span class="line">会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="line">4. 开发中如何选择key?:</span><br><span class="line">1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class="line">2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</span><br><span class="line">使用index作为key是没有问题的。--&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for和直接for循环的区别">v-for和直接for循环的区别</h3><p>比如对一个数组遍历 使用v-for取出的值，直接就是元素，但是在Vue中直接使用for循环返回值是下标</p><h2 id="日总结-5">日总结</h2><blockquote><p>今天学习内容较难，需要理解key和对象以及Vue实例之间的关系，又把几个接口能渲染的都渲染了，帮其他后端同学渲染了一些接口，学列表渲染的时候，清除明白的搞好了数组和对象如何调用属性和元素。还有之前不太清楚的for和v-for，foreach，if之类的方法复习了一遍，总的来说今天的学习状态，都是蛮不错的。</p></blockquote><h1 id="金师附小-Vue渲染">金师附小 Vue渲染</h1><h2 id="学习日期-11-19">学习日期: 11.19</h2><h2 id="所学内容概述-6">所学内容概述</h2><ul><li>提交Execl</li></ul><blockquote><p>自己需要做一个提交execl文件，然后上传到数据库，起初以为是需要自己把execl变成json，然后传给后端接口的，因为apifox中也没有写需要传什么参数，而且在我自己写接口的时候，post请求一般都是接受一个json，后面自己写完execl转json，传的时候失败，然后告诉我后端接受的是file，我就把自己代码中未转换成json的file格式的，利用接口挂载穿进去还是不行。问了很多人，都认为是各式各样的问题，在晚上自己琢磨的时候，发现传送的时候，填的action路径，请求头，我就打印出来看了一下，发现少了解决跨域问题的点，加上去，顺利解决了，请求头也不会出现什么Accpetjson了</p></blockquote><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221121134240835.png" alt="image-20221121134240835"></p><h2 id="BUG点-6">BUG点</h2><p>提交execl，500错误，文件传输失败，类型不匹配！解决步骤如上 代码如下</p><ul><li>就是利用element UI 实现的，之前不知道组件的实现原理，自己去搜索查询了资料，发现action后面只要填写你上传的post请求，就能直接传上file类型的，但是如果你后端是需要json的，就要加一个on-change绑定一个钩子函数对文件进行处理，然后再将处理的文件直接上传。on-change会自动收到你上传文件的参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload class=&quot;upload-demo&quot; action=&quot;/dev-api/business/teacherManage/import&quot;&gt;</span><br><span class="line">    &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot;&gt;导入教师名单&lt;/el-button&gt; </span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><h2 id="扩展学习-6">扩展学习</h2><blockquote><p>遇到问题:每次运行金师附小的项目的时候，因为自己nodejs是19版本的，！16以上会对很多不兼容，所以每次我运行前都需要执行$env:NODE_OPTIONS=“–openssl-legacy-provider” 这样很麻烦，所以我就去解决</p></blockquote><p>解决步骤:安装NVM，nodejs的版本管理工具，可以随意切换版本。出了点问题搞了两个多小时，因为很早我就安装过nodejs19.0.0的而且装了很多插件，hexo picgo啥的，我怕整坏了博客就没了。搞好以后发现，每次输入命令都说找不到，我就要一条一条的配置环境变量，这样太麻烦了，而且以后如果npm下东西，都要去配个变量岂不是得不偿失。就去用户和系统path用{}设置一个C盘到正式D盘的重定向，在切换版本的时候，文件夹目录也会改变，在每一个nodejs版本中都创建两个文件夹，一个node_global和node_cache。配置系统环境以及用户环境，问题解决，这样我用博客切换成19的，用Vue和其他的就用16的就好了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221118122844486.png" alt="image-20221118122844486"></p><h2 id="日总结-6">日总结</h2><blockquote><p><strong>今天还是对金师附小项目的渲染，以及一些功能实现，前端的工作，学习状态其实不是很好，搞东西搞了太久，实现功能的代码其实又不多，有点付出和回报不成正比的感觉。做项目的过程中，和同学讨论也发现了我们学项目的一些问题，比如前端整合不用git，后端接口说明没在apifox描写明白，接口对不上，报错信息没有说清楚是什么类型的报错之类的问题。今天的难度还是有的，起初没沟通好，导致自己报500也不知道什么原因，晚上的时候，才搞清楚后端需要的需求，然后赶了出来，如果一开始就搞清楚，然后自己理解一些element ui的原理，应该很快就能解决了。</strong></p></blockquote><h1 id="Vue-指令">Vue 指令</h1><h2 id="学习日期-11-20">学习日期: 11.20</h2><h2 id="所学内容概述-7">所学内容概述</h2><h3 id="收集表单数据">收集表单数据</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221123090944732.png" alt="image-20221123090944732"></p><ul><li><p>比较重要的点我觉得在多选框和点提交时候，收集数据在控制台那边，其他比较普通css都学过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--userInfo.hobby是一个数组--&gt;</span><br><span class="line">爱好：</span><br><span class="line">学习&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;study&quot;&gt;</span><br><span class="line">打游戏&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;game&quot;&gt;</span><br><span class="line">吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;eat&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>收集数据</p><p>通过在form中添加<code>&lt;form @submit.prevent=&quot;demo&quot;&gt;</code>调用Vue实例中demo方法，点击提交执行。会将data中的数据收集<code>console.log(JSON.stringify(this.userInfo))</code>,主要是通过JSON.stringify所以如果我们需要用数据进行处理的话，就可以在方法中调用这个方法，是一个JSON返回。</p></li></ul><h3 id="过滤器">过滤器</h3><p>前端的过滤器其实是对数据的处理，和后端过滤请求是不一样的。案例就是对时间戳的时间格式的处理。使用方法是在需要处理的参数后面<br><code>&#123;&#123;time **|** timeFormater&#125;&#125;</code>，也可以多次使用。 全局过滤器需要在Vue实例外面用Vue.就能实现了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="指令">指令</h3><p>分为普通的内置指令和自定义指令</p><h4 id="内置指令">内置指令</h4><p>v-text指令</p><blockquote><p>1.作用：向其所在的节点中渲染文本内容。                                                                                                                                                 2.与插值语法的区别：v-text会替换掉节点中的内容，则不会。</p></blockquote><p>v-html指令</p><blockquote><p>1.作用：向指定节点中渲染包含html结构的内容。<br>2.与插值语法的区别：<br>(1).v-html会替换掉节点中所有的内容，则不会。<br>(2).v-html可以识别html结构。</p></blockquote><p>v-cloak指令</p><blockquote><p>1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性<br>2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</p></blockquote><p>v-once指令(鸡肋)</p><blockquote><p>1.v-once所在节点在初次动态渲染后，就视为静态内容了。<br>2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p></blockquote><p>v-pre指令</p><blockquote><p>1.跳过其所在节点的编译过程。<br>2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</p></blockquote><h4 id="自定义指令">自定义指令</h4><p>在Vue实例中directives可以自定义指令分为函数式和对象式</p><p>big是函数式下面的fbind是对象式，一般有三种对象式的回调</p><blockquote><p>(1).bind：指令与元素成功绑定时调用。<br>(2).inserted：指令所在元素被插入页面时调用。<br>(3).update：指令所在模板结构被重新解析时调用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line"><span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//注意此处的this是window</span></span><br><span class="line"><span class="comment">// console.log(&#x27;big&#x27;)</span></span><br><span class="line">element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fbind</span>:&#123;</span><br><span class="line"><span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line"><span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line"><span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="title function_">focus</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line"><span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BUG点-7">BUG点</h2><p>无</p><h2 id="日总结-7">日总结</h2><blockquote><p>今天的学习状态不错，一上午学习了收集表单信息和过滤器以及指令。学习难度一般，学习内容比较多的，下午考了科二，所以只有上午时间学习了，晚上对金师项目进行了测试。最近搞项目让自己的一些计划有点脱离轨道了，需要尽快调整一下自己的状态。</p></blockquote><h1 id="Vue-生命周期和组件">Vue 生命周期和组件</h1><h2 id="学习日期-11-23">学习日期: 11.23</h2><h2 id="所学内容概述-8">所学内容概述</h2><h3 id="生命周期">生命周期</h3><ul><li>生命周期回调函数、生命周期函数、生命周期钩子。</li></ul><p>作用</p><ul><li><p>Vue在关键时刻帮我们调用的一些特殊名称的函数。</p></li><li><p>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</p></li><li><p>生命周期函数中的this指向是vm 或 组件实例对象。</p></li></ul><p>生命周期其实是Vue实例的函数，可以理解成一个对象中封装了的方法。执行完会销毁，销毁后。之前的虚拟DOM转换为真实DOM的DOM会保留。</p><p><em><strong>常用钩子</strong></em></p><blockquote><p>1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。<br>2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</p></blockquote><h3 id="非单项组件">非单项组件</h3><ul><li>Vue使用组件的三大步骤<ul><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ul></li></ul><h4 id="定义组件">定义组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：创建hello组件</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line"><span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;你好啊！！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="注册组件">注册组件</h4><p>在new Vue中写components方法是局部组件</p><p>Vue.component(‘hello’,hello)是全局组件</p><h4 id="写标签">写标签</h4><p>也就是调用自定义组件</p><p><code>&lt;school&gt;&lt;/school&gt;</code></p><p>或者</p><p><code>&lt;school/&gt;</code></p><h4 id="组件嵌套">组件嵌套</h4><p>在组件中注册局部组件component，在组件中注册的组件是该组件的子类，也是嵌套。</p><h2 id="扩展学习-7">扩展学习</h2><p>383.赎金信</p><blockquote><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。<br>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。<br><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p></blockquote><p>自己做出来了感觉题目不是很难，但是自己用了这么多行代码才实现，耗时也有点长了，逻辑性还是很清晰的，就似乎有点太麻烦了，所以我自己的方法不是最优解。找到一个优解在下面。利用26个空数组，和char的数字形式，当作数组的下标，每存在一次+1，调用一次减1，最后判断是否&lt;0了，&lt;0就为false，全部都不小于0就为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ransomNote.length() &gt; magazine.length())&#123; <span class="comment">//长度小于直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//统计magazine 每个字母和出现次数</span></span><br><span class="line">        <span class="keyword">for</span> (String i : magazine.split(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (map.get(i) == <span class="literal">null</span>)&#123;</span><br><span class="line">                map.put(i,count);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.computeIfPresent(i,(key, value) -&gt; value + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Integer&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//ransomNote 每个字母和出现次数</span></span><br><span class="line">        <span class="keyword">for</span> (String x : ransomNote.split(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(x) == <span class="literal">null</span>)&#123; <span class="comment">//有字母不在magazine中直接返回</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (map1.get(x) == <span class="literal">null</span>)&#123;</span><br><span class="line">                map1.put(x,count1);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map1.computeIfPresent(x,(key, value) -&gt; value + <span class="number">1</span>); <span class="comment">//x对应的value + 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String y : map1.keySet())&#123; <span class="comment">//遍历key 次数大于返回false 全部通过才返回true</span></span><br><span class="line">            <span class="keyword">if</span> ( map1.get(y) &gt; map.get(y))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>优解</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(ransomNote.length() &gt; magazine.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray()) &#123;</span><br><span class="line">        cnt[c - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : ransomNote.toCharArray()) &#123;</span><br><span class="line">        cnt[c - <span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">        <span class="keyword">if</span>(cnt[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日总结-8">日总结</h2><blockquote><p>今天的学习状态一般的，可能是因为今天的学习难度提上去了，是对于组件的各种理解。开始是对Vue的声明周期的理解，接受起来还是很容易的，和大部分的编程语言的生命周期都差不多。到了非单组件部分就有点难了，引出了一个新的概念VC，看弹幕和博客，我理解的话，有点类似于子类父类，Vue(Vm)是VC的父类，所以VC可以用Vm的各种东西，如果VC中没有设置的属性，它会往上面找，会找到Vm，最上级的是Object。今天全是理解上面的情况，听起来也非常困，看博客又不是很明白。</p></blockquote><h1 id="Vue单组件分析">Vue单组件分析</h1><h2 id="学习日期-11-26">学习日期: 11.26</h2><h2 id="所学内容概述-9">所学内容概述</h2><h3 id="单组件">单组件</h3><p>最常用的默认 开发就是这个样子 需要下载Vue脚手架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">name:&#x27;School&#x27;,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京昌平&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showName()&#123;</span><br><span class="line">alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="脚手架结构">脚手架结构</h3><p>个人理解:</p><ul><li>创建完vue目录如下</li><li><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221202093053971.png" alt="image-20221202093053971"></li></ul><p><em><strong>执行步骤</strong></em></p><ol><li>项目入口文件在main.js中，通过引入vue和App(最高级的vue文件)</li><li>在APP中已经引入其他的组件</li><li>其他组件中按照vue语法写页面以及功能</li><li>终端输入npm run sever 跑起来</li></ol><h3 id="对main-js理解">对main.js理解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">项目入口文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//引入VUe</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭vue提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">引用的vue是vue.runtime.xxx.js</span></span><br><span class="line"><span class="comment">和完整版的vue的区别</span></span><br><span class="line"><span class="comment">vue.js是完整版的，包含核心功能和模板解析器</span></span><br><span class="line"><span class="comment">vue.runtime.xxx.js是运行时候的vue 只有核心功能没有模版解析器</span></span><br><span class="line"><span class="comment">需要通过render函数,收到createElement函数指定内容，我下面写的就是创建元素为App的而App在上面我已经引入他会自动找到App，然后通过App引入的组件，创建页面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)<span class="comment">//el:&#x27;#app&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="BUG点-8">BUG点</h2><p>刚开始不知道啥原因，之前报的错误更多，然后把文件名和属性名都改成了大驼峰命令规则，少了一个错误，这里又报错，CSDN搜索说是代码不规范，用vscode自带的shift+alt+f格式化代码以后，然后又报错，再搜发现是有个地方缩进有问题。命名必须双驼峰不知道为什么…</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221201170606432.png" alt="image-20221201170606432"></p><h2 id="扩展学习-8">扩展学习</h2><h3 id="力扣算法题">力扣算法题</h3><ul><li><p>链表，java中似乎是没有需要自己创建一个链表类</p></li><li><p>题目不难，但是使用链表的话，逻辑就要不一样了，需要一个慢指针和一个快指针，快指针走的速度是慢指针的两倍(一个next和两个next)。当快指针到null或者快指针下一个是null，当前的慢指针所指的位置就是中间结点。</p></li></ul><blockquote><p>给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。<br>如果有两个中间结点，则返回第二个中间结点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日总结-9">日总结</h2><p>今天学习状态还不错，学习内容难度一般。在学vue讲原理性的时候也听到挺明白的，分析了脚手架的原理，从哪里开始找到哪里的组件，调用，自己都顺了一遍，做了一题力扣算法题，不是很难，但是因为没系统学过数据结构，不太明白链表是什么，解决方法是模仿C中的p指针的。</p><h1 id="Vue关键字">Vue关键字</h1><h2 id="学习日期-11-29">学习日期: 11.29</h2><h2 id="所学内容概述-10">所学内容概述</h2><h3 id="ref的使用">ref的使用</h3><ul><li>ref之前在项目中经常遇到都不知道是干嘛的，今天知道了，他可以调用真实DOM，在组件中写入ref属性</li></ul><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221205083116622.png" alt="image-20221205083116622"></p><p>我用三条控制台打印看结果 如果是自定义组件的ref 调用的时候就是实例对象VC</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">title</span>); <span class="comment">//真实DOM</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">btn</span>); <span class="comment">//真实DOM</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">sch</span>); <span class="comment">//School组件的实例对象 VC</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221205083212800.png" alt="image-20221205083212800"></p><h3 id="props配置">props配置</h3><ul><li><p>接受数据并声明</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221205084125196.png" alt="image-20221205084125196"></p></li><li><p>接收的方法大致有三种，比较常用的还是最简单的那种,因为类型之类的一般都固定好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单声明接收</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;age&#x27;</span>],</span><br><span class="line"><span class="comment">//接收的同时对数据进行类型限制</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="title class_">String</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="title class_">Number</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span> <span class="comment">//true 为必填</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">age</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line"><span class="attr">default</span>:<span class="number">99</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">sex</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line"><span class="attr">default</span>:<span class="string">&quot;男&quot;</span>, <span class="comment">//默认值</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="mixin混合">mixin混合</h3><ul><li>利用mixin混合就是复用配置 可以把多个组件共用的配置提取成一个混入对象</li><li>我觉得在组件需要大量复用配置的时候，比较好用</li><li>混合的时候，如果配置之间有冲突，以自定义组件的为主</li></ul><ol><li><p>定义混合mixin 创建js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hunhe = &#123;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好啊！&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hunhe2 = &#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用混入：需要导入混合的js<br>全局混入：<code>Vue.mixin(xxx)</code> 在main.js中使用</p></li><li><p>局部混入：<code>mixins:['hunhe','hunhe2']</code></p></li></ol><h3 id="插件">插件</h3><ul><li>这个功能很nb,也超级使用，导入插件并使用的话，一些功能可以随心所欲的使用</li></ul><ol><li><p>功能:增强Vue 相当于合理的外挂</p></li><li><p>本质:包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件 其实就是写一个js文件 然后写一个install方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">install</span>(<span class="params">Vue,x,y,z</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x,y,z)</span><br><span class="line"><span class="comment">//全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line"><span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line"><span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="title function_">focus</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line"><span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义混入</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">()=&gt;</span>&#123;<span class="title function_">alert</span>(<span class="string">&#x27;你好啊&#x27;</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用在main.js中 先引入插件包 然后<code>Vue.use(引入的名字,需要传递的数据)</code></p></li></ol><h3 id="scoped样式">scoped样式</h3><ul><li>解决style问题的</li><li>style如果自己定义好名字了，在App.vue中导入，如果vue文件同时调用这个方法，就会出现谁后导入用谁的风格，比如student.vue和school.vue中style都有.demo方法，在App.vue导入两个vue，谁后导入应用谁的demo方法。</li><li>但是如果有scoped面试局部应用，在谁页面就用谁的style样式 <code>&lt;style scoped&gt;</code></li></ul><h2 id="扩展学习-9">扩展学习</h2><p>今天开始每天三-四道sql题目 力扣练手</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221205150658629.png" alt="image-20221205150658629"></p><h2 id="日总结-10">日总结</h2><p>今天的学习内容难度一般，学习状态不错，发现自己刷完sql或者算法题，再去看视频，状态会好上不少。最近做的题目，主要是让自己先不要忘记，练手，过段时间就要去给自己提升一下难度了，抽空去学习一下数据结构。稍微不太理解的点在ref中，只知道会调用DOM。还不清楚拿到真实DOM后，能进行什么操作。</p><h1 id="Vue-TodoList案例">Vue TodoList案例</h1><h2 id="学习日期-11-30">学习日期: 11.30</h2><h2 id="所学内容概述-11">所学内容概述</h2><h3 id="TodoList案例">TodoList案例</h3><ol><li><p>组件化编码流程：</p><p>​(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​1).一个组件在用：放在组件自身即可。</p><p>​2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。 <strong>我在App.vue中设置的todos数组就是一个状态提升</strong></p><p>​(3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>props我觉得是该案例比较重要的点 不同的vue可以相互传数据 在之前帮前端做项目的时候，遇到过这样的问题，但是当时我们都不会，用了其他方式实现，这个很方便</p><p>​(1).父组件 ==&gt; 子组件 通信 <code>子组件直接用父组件传props的东西</code></p><p>​(2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）<code>父组件要用子组件的数据需要写一个函数接收</code></p></li><li><p>使用v-model时：v-model绑定的值不能是props传过来的值</p><ul><li><p>如果同时要get和修改Props数据，要绑定一个computed计算方法,写get和set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">isAll</span>:&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doneTotal</span> === <span class="variable language_">this</span>.<span class="property">countTodo</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">countTodo</span> &gt; <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">      todo.<span class="property">done</span> = value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="扩展学习-10">扩展学习</h2><p>今天做了三题sql题目，不是单纯的查找了，有修改和一个删除的，题目很简单的，但是之前学数据清洗的时候没有做update和delete的操作，所以不太熟悉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 删除person表中email相同的 id大的那个</span><br><span class="line"><span class="keyword">DELETE</span> p1.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">Person p1,</span><br><span class="line">Person p2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">p1.email <span class="operator">=</span> p2.email</span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">p1.Id <span class="operator">&gt;</span> p2.Id</span><br></pre></td></tr></table></figure><h2 id="日总结-11">日总结</h2><p>今天做了一个经典的TodoList案例，在之前javaweb’的时候也写过，挺简单的，但是在这Vue中所学到的知识，基本都在案例中有所体现，之前不知道如何游刃有余使用的computed,props等通过这个案例也都融会贯通了，根据需求自己也都能实现该项目了。难度一般吧，希望前面小基础学完后面的能学习顺利下去。</p><h1 id="webStorage">webStorage</h1><h2 id="学习日期-12-05">学习日期: 12.05</h2><h2 id="所学内容概述-12">所学内容概述</h2><p>学习本地存储，自己应用到之前做的TodoList案例当中去。</p><h3 id="本地存储">本地存储</h3><p>存储在浏览器，分两种。为localStorage,sessionStorage。只是方法名不一样，存储位置也不一样。对象名不一样方法名是一样的。都在存在浏览器中，唯一不同的点是 localStorage重启以后数据还在。但是sessionStorage重启后，数据就清空了。两个存储点都只能存放5M的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><br><span class="line"><span class="keyword">let</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveData</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;hello!!!&#x27;</span>)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg2&#x27;</span>,<span class="number">666</span>)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readData</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg2&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(result))</span><br><span class="line"><span class="comment">// console.log(localStorage.getItem(&#x27;msg3&#x27;))</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteAllData</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>应用到TodoList就是这样的状态，值得注意的是，需要加一个watch监控，并且深度监控，才能监控到数组中对象的变化。还有一个地方是JSON.stringify,可以把对象(JSON语法)还原成原本的样子，这样才能添加到web存储空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="attr">todos</span>:&#123;</span><br><span class="line">    <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;todos&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221208193001540.png" alt="image-20221208193001540"></p><h2 id="BUG点-9">BUG点</h2><p>在做向右轮转的时候，编译器报错了，刚开始没想到只要对每个下标 进行 取余就行 自己想到的是一直减去数组长度，直到下标值是最接近0的正数，因为空间复杂度为2了导致运行时间会很长，超时了，代码修改完就没问题了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221209152507954.png" alt="image-20221209152507954"></p><h2 id="扩展学习-11">扩展学习</h2><p>今天做了两道算法题，都还是有难度的，解题思路很多，自己两个都是先用暴力做出来，然后再去想着如何优化。第一题自己优化出来了，后面那题稍微难一点，题解两种优化方式自己只会第二种，第一种有点太巧妙了。自己题解写在代码中</p><blockquote><p>//输入一个升序的数组，然后返回一个数据各位置平方，也是升序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="comment">//第一种 自己就是直接每位平方再重新排序 执行时间5ms</span></span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line">    <span class="comment">//    nums[i] = nums[i]*nums[i];</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//Arrays.parallelSort(nums);</span></span><br><span class="line">    <span class="comment">//return nums;</span></span><br><span class="line">    <span class="comment">//下面是双指针</span></span><br><span class="line">    <span class="comment">//思路 因为是升序，所以数的平方的最大值一定是两边,把这个大的数 放新数组右边 然后两界限往内夹</span></span><br><span class="line">    <span class="type">int</span>[] result  = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//给result倒着插入的下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//右界限</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//左界限</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123; <span class="comment">//当左边等于右边 停止</span></span><br><span class="line">        <span class="keyword">if</span> (nums[left]*nums[left] &lt; nums[right]*nums[right])&#123; <span class="comment">//两边判断大小 右边大</span></span><br><span class="line">            result[k--] = nums[right]*nums[right]; <span class="comment">//大的插入最新数组右边 右边下标-1</span></span><br><span class="line">            right--; <span class="comment">//右界限往内移1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//左边大</span></span><br><span class="line">            result[k--] = nums[left]*nums[left]; <span class="comment">//大的插入最新数组右边 左边下标-1</span></span><br><span class="line">            left++; <span class="comment">//左界限往内移1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日总结-12">日总结</h2><blockquote><p>今天的任务不是很重，学习难度也比较简单，如果之前自己会的话，之前做前端项目的时候，就可以把图片的地址存进sessionStorage中去，这样不用每次切换页面的时候都需要发送请求给后端，从数据库中拿路径了，list的时候就不用一直挂载了，只要挂载once就好了。其他的时候直接从本地中读取。做算法的时候总是会需要超时问题，因为自己思路都是分析要求，实现要求，从脑子常理判断，然后再去实现，这样不算是实现算法的逻辑，还是需要多做题，培养逻辑，虽然自己能把问题解决，但是运行时长和内存都不是优解。尤其是要考虑好空间复杂度的问题，用自带的方法，也会有坑(可能底层逻辑也是循环)。</p></blockquote><h1 id="Vue-组件自定义事件">Vue 组件自定义事件</h1><h2 id="学习日期-12-06">学习日期: 12.06</h2><h2 id="所学内容概述-13">所学内容概述</h2><h3 id="自定义组件">自定义组件</h3><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit('atguigu',数据)</code></p></li><li><p>解绑自定义事件<code>this.$off('atguigu')</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h3 id="应用TodoList">应用TodoList</h3><p>在Header和Footer中把子给父传数据中，应用自定义组件的方法。差不多就两个 自己有一个删除的 自己直接写到Footer里面了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221212194306954.png" alt="image-20221212194306954"></p><p>值得注意的是在触发自定义事件的时候需要传入数据.把todoObj传进去</p><p><code>    this.$emit('addTodo1',todoObj)</code></p><h2 id="扩展学习-12">扩展学习</h2><blockquote><p>给你一个数组，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = <span class="string">[1,2,3,4,5,6,7]</span>, k = <span class="number">3</span></span><br><span class="line">输出: <span class="string">[5,6,7,1,2,3,4]</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//int count = nums.length;</span></span><br><span class="line">    <span class="comment">//int newNums[] = new int[count];</span></span><br><span class="line">    <span class="comment">//for (int i = 0; i &lt; count; i++) &#123;</span></span><br><span class="line">    <span class="comment">//    newNums[(i+k) % count] = nums[i];</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//System.arraycopy(newNums, 0, nums, 0, count); //打印</span></span><br><span class="line">    <span class="comment">//先全部反转 再将下标为k-1分割线 两边反转</span></span><br><span class="line">    reversal(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    reversal(nums,<span class="number">0</span>,k-<span class="number">1</span>);</span><br><span class="line">    reversal(nums,k,nums.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="comment">//反转 下标为start 和 end 间的反转</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] reversal(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)&#123;</span><br><span class="line">    <span class="keyword">while</span> (start&lt;end)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start];</span><br><span class="line">        nums[start] = nums[end];</span><br><span class="line">        nums[end] = temp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日总结-13">日总结</h2><blockquote><p>今天的学习任务不是很重，难度一般。学习了自定义组件，在子传父数据的时候使用，创建解绑和触发，其实就是加完@，然后再去组件中触发事件，需要传数据的时候，传入数据，然后就是自己对是对TodoList案例的改造。今天做的力扣算法题难度一般，总的来说今天的状态还不错了。</p></blockquote><h1 id="Vue-TodoList案例完善">Vue TodoList案例完善</h1><h2 id="学习日期-12-27">学习日期: 12.27</h2><h2 id="所学内容概述-14">所学内容概述</h2><h3 id="全局事件总线（GlobalEventBus）">全局事件总线（GlobalEventBus）</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h3 id="消息订阅与发布（pubsub）">消息订阅与发布（pubsub）</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from 'pubsub-js'</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish('xxx',数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h3 id="nextTick">nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="扩展学习-13">扩展学习</h2><p>力扣算法练习 两个一般难度 暴力做的出来 算法优解理解了很久 两题做了一下午</p><h2 id="日总结-14">日总结</h2><blockquote><p>今日是寒假学习一来第一天开始记笔记，之前学习的东西以及算法题目啥的都没有记，觉得这样自己学习的东西会很快忘记掉，所以打算寒假学习有时间还是要把自己所学的东西记下来，这样效率也会高不少，今天的学习内容不是很难，还是对案例的优化。重点在全局事件总线，它和消息订阅所实现的功能差不多的，但是还是全局事件比较方便而且不依靠第三方插件。然后是对文本框点击编辑按钮后，对文本框的聚焦，会发现是实现功能上先后逻辑顺序的问题导致无法实现的，我想到的是用一个setTimeout函数延时执行，也能实现，但是功能实用性不强就是了，nextTick就能很好的解决这个问题，在下一次DOM更新结束后执行，学习状态还不错。</p></blockquote><h1 id="Vue-动画">Vue 动画</h1><h2 id="学习日期-12-28">学习日期: 12.28</h2><h2 id="所学内容概述-15">所学内容概述</h2><h3 id="css的动画基础">css的动画基础</h3><p>离场和进场的时间</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.hello-enter-active&#123;</span><br><span class="line"><span class="attribute">animation</span>: atguigu <span class="number">0.5s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line">.hello-leave-active&#123;</span><br><span class="line"><span class="attribute">animation</span>: atguigu <span class="number">0.5s</span> linear reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> atguigu &#123;</span><br><span class="line">from&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line">to&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要在vue中调用的时候要用<code>transition</code>标签给包裹起来，可以自己设置名字名字为<code>.hello-leave-active</code>的第一位自己随意设置</li><li>添加<code>apper</code>属性开始刷新就会有动画</li></ul><h3 id="Vue的过度效果">Vue的过度效果</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置刷新就实现动画效果*/</span></span><br><span class="line">h1&#123;</span><br><span class="line"><span class="attribute">background-color</span>: orange;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.5s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 进入的起点 ,离开的终点*/</span></span><br><span class="line"><span class="selector-class">.hello-enter</span>,.hello-leave-to&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 离开的起点 ,开始的终点*/</span></span><br><span class="line"><span class="selector-class">.hello-enter-to</span>,.hello-leave&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用第三方动画animate">用第三方动画animate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install animate.css <span class="comment">#安装第三方模块</span></span><br></pre></td></tr></table></figure><p>在App.vue中导入</p><p>使用如下 离开和进入的动画是可选的 在animate.style官方可见使用和用法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20221228201357552.png" alt="image-20221228201357552"></p><h2 id="日总结-15">日总结</h2><p>今天学了动画的效果，感觉还是不错的，第三方的动画库里面有丰富的动画，进入或者退出的时候使用。自己做的效果也还可以，没什么大的问题，学习效率一般，只学了早上和晚上的时间。等过两天身体好了，加快一下学习速度，在寒假结束之前把Vue和数据结构和算法学光。</p><h1 id="Vue配置代理-解决跨域问题">Vue配置代理 --解决跨域问题</h1><h2 id="方法一">方法一</h2><p>在vue.config.js中添加如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h2 id="方法二">方法二</h2><p>编写vue.config.js配置具体代理规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h1 id="VUE-github案例">VUE github案例</h1><blockquote><p>案例目标 输入github自带的api地址 请求该地址获取返回值 并进行处理展示在列表中</p></blockquote><p>网页分两部分 上面是Search组件 发请求以及收集请求数据 下面为列表展示部分 将收集到的请求存入List中 用到了全局事件总线$bus</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230208185854818.png" alt="image-20230208185854818"></p><p>具体实现代码如下</p><p>因为要实现全局事件总线所以要在main.js中加入配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Search-Vue">Search.Vue</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section class=&quot;jumbotron&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;jumbotron-heading&quot;&gt;Search Github Users&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; placeholder=&quot;enter the name you search&quot; v-model=&quot;keyword&quot;/&gt;&amp;nbsp;</span><br><span class="line">      &lt;button @click=&quot;searchUsers&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;Search&quot;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        keyword:&#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      searchUsers()&#123;</span><br><span class="line">        // 传入第一次请求数据 </span><br><span class="line">        this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isFirst:false,isLoading:true,errorMsg:&#x27;&#x27;,usersList:[]&#125;)</span><br><span class="line">        axios.get(`https://api.github.com/search/users?q=$&#123;this.keyWord&#125;`).then(</span><br><span class="line">          response =&gt; &#123;</span><br><span class="line">            console.log(&#x27;请求成功&#x27;,response.data.items)</span><br><span class="line">            // 如果请求成功 将返回的值传给List</span><br><span class="line">            this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errorMsg:&#x27;&#x27;,usersList:response.data.items&#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          error =&gt; &#123;</span><br><span class="line">            console.log(&#x27;请求失败&#x27;,error.message)</span><br><span class="line">            // 请求失败 返回值为报错信息</span><br><span class="line">            this.$bus.$emit(&#x27;updateListData&#x27;,&#123;errorMsg:error.message,usersList:[]&#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="List-vue">List.vue</h2><p>收集数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;!-- 还没点击过搜索不显示 用v-for 结合动态属性 --&gt;</span><br><span class="line">&lt;div v-show=&quot;info.usersList.length&quot; class=&quot;card&quot; v-for=&quot;(user) in info.usersList&quot; :key=&quot;user.id&quot;&gt;</span><br><span class="line">&lt;a :href=&quot;user.html_url&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;user.avatar_url&quot; style=&#x27;width:100px&#x27;/&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;p class=&quot;card-text&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 第一次登陆 --&gt;</span><br><span class="line">&lt;h1 v-show=&quot;info.isFirst&quot;&gt;欢迎使用&lt;/h1&gt;</span><br><span class="line">&lt;!-- 加载中 --&gt;</span><br><span class="line">&lt;h1 v-show=&quot;info.isLoading&quot;&gt;加载中........&lt;/h1&gt;</span><br><span class="line">&lt;!-- 报错 --&gt;</span><br><span class="line">&lt;h1 v-show=info.errorMsg&gt;报错啦:  &#123;&#123;info.errorMsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;List&quot;,</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">//返回值封装成集合</span><br><span class="line">info:&#123;</span><br><span class="line">isFirst:true,</span><br><span class="line">isLoading:false,</span><br><span class="line">errorMsg:&#x27;&#x27;,</span><br><span class="line">usersList:[]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">this.$bus.$on(&#x27;updateListData&#x27;,(dataObject) =&gt; &#123;</span><br><span class="line">console.log(&#x27;我是List组件我收到了数据&#x27;,dataObject)</span><br><span class="line">// this.info = dataObject</span><br><span class="line">//es6语法 如果前面的...this.info 有的 后面dataObject也有 就替换 dataObject没有的 就用前面的为数据</span><br><span class="line">//因为后面我传入dataObject的时候丢掉了isFirst 但是第一次还没传参的时候是有的 为防止丢失 使用了这样的方法</span><br><span class="line">this.info = &#123;...this.info,...dataObject&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .album &#123;</span><br><span class="line">    min-height: 50rem; /* Can be removed; just added for demo purposes */</span><br><span class="line">    padding-top: 3rem;</span><br><span class="line">    padding-bottom: 3rem;</span><br><span class="line">    background-color: #f7f7f7;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 33.333%;</span><br><span class="line">    padding: .75rem;</span><br><span class="line">    margin-bottom: 2rem;</span><br><span class="line">    border: 1px solid #efefef;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card &gt; img &#123;</span><br><span class="line">    margin-bottom: .75rem;</span><br><span class="line">    border-radius: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .card-text &#123;</span><br><span class="line">    font-size: 85%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue插槽">Vue插槽</h1><h2 id="学习日期-2-14">学习日期: 2.14</h2><h2 id="所学内容概述-16">所学内容概述</h2><h3 id="Vue插槽的操作">Vue插槽的操作</h3><blockquote><p>分为三块 分别是默认插槽  具名插槽 作用域插槽</p></blockquote><h4 id="默认插槽">默认插槽</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            html结构</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">            &lt;slot&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="具名插槽">具名插槽</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">          &lt;Category&gt;</span><br><span class="line">              &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">                &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;template v-slot:footer&gt;</span><br><span class="line">                 &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">          &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;this.title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">    &lt;slot name=&quot;center&quot;&gt;默认值1&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;默认值2&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="作用域插槽">作用域插槽</h4><pre><code>1. 数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）2. 具体编码：</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Category&gt;</span><br><span class="line">         &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">               &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">         &lt;/template&gt;</span><br><span class="line">      &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Category&gt;</span><br><span class="line">         &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">            &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">         &lt;/template&gt;</span><br><span class="line">      &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="扩展学习-14">扩展学习</h2><blockquote><p>蓝桥杯2022真题 统计单词每个字母出现的次数取最多的 打印字母和出现的次数  使用了Ascii码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> scan.next();</span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;word.length();++i)&#123;</span><br><span class="line">          <span class="type">char</span> <span class="variable">num</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">          count[num-<span class="number">97</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> count[<span class="number">0</span>];</span><br><span class="line">        <span class="type">char</span> <span class="variable">maxWord</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;<span class="number">26</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxNum &lt; count[x])&#123;</span><br><span class="line">                maxNum = count[x];</span><br><span class="line">                maxWord = (<span class="type">char</span>) (x+<span class="number">97</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(maxWord);</span><br><span class="line">        System.out.println(maxNum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日总结-16">日总结</h2><blockquote><p>今天的学习内容不是很多，刚开学还没调整好状态，先对寒假的学习内容看了一点，然后制订了一下大数据以及后面Java进阶的计划。并把近一年的Java学习，打算用xmind做一个思维导图的总结，也当做回顾一下Java SE的基础知识，看哪些难点自己忘记了，再去巩固一下。后面的Java学习计划打算等大数据搞完，再重新调整制定一下。总得来说，今天学习的新知识不是很多，也不是很难，主要是复习，状态还不错。！！！</p></blockquote><h1 id="Vuex">Vuex</h1><h2 id="学习日期-3-21">学习日期: 3.21</h2><h2 id="所学内容概述-17">所学内容概述</h2><h3 id="1-概念">1.概念</h3><p>​     在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-使用情况">2.使用情况</h3><p>​     多个组件需要共享数据时</p><h3 id="3-搭建vuex环境">3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">   store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用">4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line">   <span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line">   <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">      state.<span class="property">sum</span> += value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名',数据)</code> 或 <code>$store.commit('mutations中的方法名',数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用">5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">   <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用">6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h2 id="扩展学习-15">扩展学习</h2><h3 id="模块化-命名空间">模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="日总结-17">日总结</h2><blockquote><p>今天的学习内容是vuex，感觉它的功能就是像是一个Java中的static，设置全局变量或者全局方法，比之前的组件间通讯都好用，流程梳理明白掌握起来也不难，有复杂计算逻辑的需要放Mutations中，普通的就放actions中就行，所有可以使用计算属性的，都可以用mapstate，模块化是算扩展了，也不算很难，以后为了规范性以及代码可读性，估计还是使用vuex模块化的比较多。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前后端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10月总结</title>
      <link href="/posts/22conclusion10.html"/>
      <url>/posts/22conclusion10.html</url>
      
        <content type="html"><![CDATA[<h1 id="22年总结10月总结">22年总结10月总结</h1><h2 id="一、知识点汇总">一、知识点汇总</h2><h3 id="第一周10-8-10-14">第一周10.8-10.14</h3><ul><li><p><strong>这周的学习内容</strong> ： Maven高级,Git入门,SSM框架,Spring事务</p><p>​                                    SpringMVC ,SSM整合,拦截器</p></li><li><p><strong>难点</strong>： git上传远程  Spring注解开发  AOP事务 SSM整合</p></li></ul><p>​<strong>个人理解</strong>:</p><ul><li>git上传远程基本分6步，如果不建立分支的话。我列出来，在文件夹初始化，然后add.，待提交，然后执行git commit到本地,选择自己要上交的分支,主分支默认是main,git branch，直接上传到主分支的话，容易出现冲突问题，需要先pull,把远程库下发下来，然后再push提交，不然会有分支的冲突问题。如果上传到分支，再切换成该分支，在该分支上面工作是比较好的一种方法，在分支上面验证文件和代码没有问题的话，再合并到主分支。</li><li>Spring注解开发,我理解纯注解开发，之前的注解开发定义bean，大抵是以后用不到，都是纯注解开发，简单讲就是用配置类+注解的方式代替xml开发，xml开发效率太低了。核心思想其实就是容器管理对象，然后依赖注入来绑定对象关系，或者像@Value一样传递数据。</li><li>AOP是面向切面编程，其实一种编程模式和面向对象一样都是一种编程的思想。他的作用就是在不惊动原始设计的基础上为其进行功能增强，和之前学过的代理模式很像。实现步骤也很简单就是导入依赖，然后在需要使用AOP事务的地方注入注解。</li><li>SpringSSM整合，是Spring,Spring MVC和Mybatis整合，这样算是正常项目开发的模式了，但是现在开发基本是用MP+Mybatis，也称之为SSMP整合，项目包有着一定的小规范，也有一套建议的开发流程。</li></ul><h4 id="自我周总结：">自我周总结：</h4><ul><li>这周学习的内容其实是比较多，而且比较难的，进度也比较快，从大数据又回到java开发，刚开始还有点不太熟悉，很多新学的知识点，使用起来不游刃有余，而且说实话，一周学这么多东西，一时半会还消化不过来，应该要等后面做项目的时候，顺便消化一下。学Spring，大概有点能摸清项目真正开发时候的样子了，也把之前学习的各种知识都利用到了，整合在一起。自己在这周还是算顶住压力了，为了追赶上其他后端同学的进度，希望能进入项目中去，所以也算给自己增压了。</li></ul><h3 id="第二周10-17-10-23">第二周10.17-10.23</h3><p><strong>这周的学习内容</strong> ：SpringBoot SSMP整合 SpringBoot运维 热部署 配置高级</p><p>​<strong>难点：</strong> SpringBoot 开发篇(重点)</p><p><strong>个人理解</strong>：</p><ul><li>SpringBoot就是直接把注解开发利用到了极致了，之前Spring的代码，需要配置文件和一些注入，但是SpringBoot一个RestController就搞定了，而且是Rest的开发模式。SpringBoot把之前要写Bean都帮你整理好了，这样你只要输入controller。直接使用Rest+yml的模式写代码，高效又便捷。</li><li>开发篇是这SpringBoot2的重点部分了，前面学Spring的时候都是没讲的，开发篇数据源和持久化还是很有意思的，利用JdbcTemplate持久化，完成比较复杂的sql语句，也验证了我之前觉得MP虽然智能，但是在复杂的企业项目中，会用到复杂的SQL语句，肯定是有些要自己手敲sql的，学一暑假的MYSQL没白学。还有整合第三方也是比较重要的，尤其是整合Redis缓存，后面把瑞吉外卖部署到h3c的时候花了不少功夫。</li></ul><h4 id="自我周总结：-2">自我周总结：</h4><ul><li>这周是对SpringBoot的结尾了，用了两个多星期也是直接赶到了进度。因为Spring前置知识，自己基本都学过了，就看文档一两天就划过去了，主要学习集中在Spring和框架的部分，想学快点，可以去做项目，所以加快了自己的学习进度，基本哪一块的功能，框架作用和如何使用也都是搞懂了，在前面老师说重点的重点在开发篇，自己也把重心放到了开发篇的视频，有些需要安装的NOSQL，问了工作室的其他人说后面做项目和瑞吉都用不到，就没有安装，看懂了如何使用和作用过掉了。原理篇问工作室他们学过的，也基本都没看，我就打算跳了，在下周可以花一周把项目做掉。</li></ul><h3 id="第三周10-24-11-4">第三周10.24-11.4</h3><p><strong>这周的学习内容</strong> ：瑞吉外卖 ，瑞吉外卖部署，个人博客搭建</p><p><strong>难点：</strong> 个人博客搭建 <a href="https://u7u7.top">https://u7u7.top</a></p><p><strong>个人理解：</strong></p><p>​本月博客总结</p><ul><li>做这个博客，花费了自己不少的课余时间，基本晚自习时间，写完笔记就都在搞这个博客，第一次接触是在做瑞吉外卖的时候，发现评论有学习的朋友，分享自己的笔记，进去他的页面发现很好看，笔记记得也很好，起初以为是什么网站类似于语雀一样，但是没找到任何网站的消息，感觉是自己DIY的(牛)，去加了这个博客搭建的兄弟，询问一些做法，他发了一些教程给我，我有了想自己也做出来的想法。过程还是很坎坷的，在搭建的过程中，学了很多东西的使用，也是以后会用到的，比如nodejs，金师附小就有用到，在学java 的路上其实是没有视频交过的，但是又是程序员必备的，我觉得这就很好。 说下过程中使用到的东西吧，最基本的git和github，负责将自己博客本地仓库上传到远程的github，需要自己创建仓库，还需要git绑定。然后是最重要的nodejs和hexo，这博客是基于hexo的。下载hexo之前需要有nodejs，自己下hexo的时候出现了很多问题其实，报错什么，环境配不上之类的，还需要版本相匹配，花了很长时间，hexo下完以后，后面顺利了不少。基本博客框架搞好以后，要绑定域名，github会分配一个域名给你的，是github.io结尾的，之前自己博客的网址是https://u7-u7.github.io，但是其实有时候网不好的时候进不去，比如校园网，210的话进去还是挺快的 ，在11月七八号的时候，自己买了一个域名 <a href="https://u7u7.top">https://u7u7.top</a>，用vercel给绑定上了，还添加了一个二级域名 <a href="https://cc.u7u7.xn--top-3h9do1qntu972ejwmura">https://cc.u7u7.top并进行了加速</a>，但是没有备案，备案要服务器，只是搭建博客的话，有点多此一举了。对博客进行美化的时候，因为都是前端代码，而且他竟然是用yml配置来操作前端css和js一些配置的，不是很能理解，因为之前我学web的时候都是用html，但是它这个源代码全是js和css 还有一些自己不太清楚的格式styl啥的，我只要对yml文件进行修改，如果他前端是写好代码的，我稍微改一下就能实现对应的效果，一些组件是需要额外下插件的 ，用nodejs 的下载命令npm。美化过程中，本地博客崩了两次，源代码被自己改坏了(自己换版本，导致版本不同的冲突)，github自己放上去的一份备份拉下来，还是对改源码的时候有些问题，就直接重新开始了，之前下hexo博客主题的时候是用比较简单的npm命令，直接下在了node_modules仓库，问大佬，说需要魔改(修改源码)最好用git下载，又重新用git下，这次不敢乱换版本了，又重新按照自己的设置思路，现在博客的样子在网站中也能看，博客内容是自动用md格式的，恰好自己在工作室的笔记和总结什么的都是md格式的，直接放进去就能生成文章，除了图片不行，所以自己花小钱，买了阿里云的oss存储，用picgo图床软件，把图片放到阿里云oss中，相当于把本地图片上到网上，这样只要有网络，就能看到我图片的地址，好比我原本在Typora中图片的路径是./assores/xxxx.jps，上传到网上路径就会变成https://u7img.oss-cn-hangzhou.aliyuncs.com/202211071929439.png，浏览器打开就会有图片，这样我发别人自己的md文件，也不需要发压缩包才能看到图片了,刚好自己博客的背景什么也可以放到图床中去，这样上传到网络上，就会快很多，因为不需要把图片上传了(一整个博客文件夹也就60MB，放图片会变很大，上传很慢还容易上传失败)。md文件上次到博客，只要对一些标签外挂(上下三条—添加标签外挂)的配置略微修改一下就好了，有空把自己之前的笔记和总结全部放到博客当中去。</li></ul><h4 id="自我周总结：-3">自我周总结：</h4><ul><li>这周的状态还不错，但是被练车 有点影响了。花一周多把瑞吉外卖160多集，制作完成了，因为这周考科二基本天天练车，导致进度其实比计划的拉慢了很多，前面的100集其实就已经能把本地的瑞吉外卖前后端开发结束，并运行了，自己花了4天做完了，但是做完以后发现很多功能老师是留白的。然后自己去实现了一下，虽然不是很难，全部考自己的话还是花了2天的时间，实现了留白的功能。一天把部署优化前的需要用到的知识去学习了一下使用，主要是Redis缓存比较重要，因为部署是需要用到三台克隆机的，自己电脑怕吃不消而且占内存和储存，让阿贵用服务器开了三台，部署到上面去了。后面优化加部署差不多一天搞好了，解决了一些自己写的代码的BUG的东西。现在连h3c，输172.16.1.77网址，进去就直接能看到自己的项目了。关于部署和优化一些实现过程都写在博客中瑞吉外卖优化中去了。没什么比较难的点其实，搞懂所使用的插件和作用，按照教程部署进去就好了，缓存优化也蛮简单的，Springcache也都有对应的方案和方法。浪费时间的点，反而是初始化克隆机时候的，软件版本冲突和uuid的BUG，自己也是找了很久的解决方案，才搞好。不由的发现，自己没搞linux才两个星期，解决这些问题的能力又下降了，有空还是得打开自己装ubuntu的那台主机多去搞搞，毕竟linux是程序员必修课。</li></ul><h2 id="二、自我总结">二、自我总结</h2><ul><li>这个月学习的学习状态大概是来工作室这么长时间，最好的一个月了，就是很有学习劲头，可能是能看到未来和目标性吧，学完Boots，一般的项目就能实现了，而且听学Java好几年的朋友，说小公司基本掌握Boots就能参与项目的开发了。而且想加入金师附小的项目中，就加快了学习进度，但是也没有囫囵吞枣，在做瑞吉外卖项目的时候其实是放慢进度了，做博客的时候，也算重新复习了前面的知识，项目很多功能都是自己完善了，项目做完，他们说金师附小的接口差不多都写完了，就放慢进度往后面学部署和Vue了。这月最大的收获就是做了个人博客，但是自己还是有点粗心，导致自己的博客有两次崩掉，备份工作也没有做好，应该在改进过以后就要立马备份，这样崩了也不用要重新写很多东西，在做博客的时候，也算是对css和js学习了，打算先去学下Vue再去看SpringCloud，Cloud感觉目前自己是使用不到，在这学期结束之前把Vue和Cloud看完，再去找一个项目自己全程的去做一下。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作室月总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10月笔记</title>
      <link href="/posts/22biji10.html"/>
      <url>/posts/22biji10.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-8-maven高级-Git入门">10.8 maven高级 Git入门</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述">2.所学内容概述</h2><h3 id="Maven依赖管理">Maven依赖管理</h3><h3 id="生命周期和插件">生命周期和插件</h3><h3 id="分模块开发">分模块开发</h3><h3 id="Git基本命令">Git基本命令</h3><h2 id="3-根据概述分章节描述">3.根据概述分章节描述</h2><h3 id="Maven依赖管理-2">Maven依赖管理</h3><h4 id="依赖配置和依赖传递">依赖配置和依赖传递</h4><p>一个项目可以设置多个依赖</p><p>依赖就是平常说的jar包.</p><p><img src="https://pic1.imgdb.cn/item/635d3b1616f2c2beb1ef39bb.png" alt="image-20221008102200401"></p><p><em>依赖传递</em></p><p>依赖是有传递性的 分为直接依赖和间接依赖</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">直接依赖:在当前项目中通过依赖配置建立的依赖关系</span></span><br><span class="line"><span class="section">间接依赖:被资源的资源如果依赖其他资源 当前项目间接依赖其他资源</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/635d3b1c16f2c2beb1ef5735.png" alt="image-20221008102436352"></p><h4 id="依赖范围">依赖范围</h4><p>下面这个表比较重要</p><p><scope>标签四种的作用 能解节约资源</p><p><img src="https://pic1.imgdb.cn/item/635d3e1b16f2c2beb1fb15f9.png" alt="image-20221008102506179"></p><p><em>依赖范围</em></p><p>传递的时候<scope>的影响</p><p><img src="https://pic1.imgdb.cn/item/635d3e1f16f2c2beb1fb2513.png" alt="image-20221008102618339"></p><h3 id="生命周期和插件-2">生命周期和插件</h3><h4 id="生命周期">生命周期</h4><p>Maven构建生命周期描述的是一次构建过程经历了多少的事件</p><p>compile test-compile test package install 类似于这些对 项目处理的功能都是事件</p><p><strong>项目构建的生命周期分三套</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clean 清洗工作</span><br><span class="line"><span class="keyword">default</span> 核心工作 编译 测试 打包 部署</span><br><span class="line">site 产生报告 发布站点</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span>生命周期比较重要 加#都是重要点</span><br><span class="line">列出</span><br><span class="line">validate（校验） 校验项目是否正确并且所有必要的信息可以完成项目的构建过程。</span><br><span class="line">initialize（初始化） 初始化构建状态，比如设置属性值。</span><br><span class="line">generate<span class="operator">-</span>sources（生成源代码） 生成包含在编译阶段中的任何源代码。</span><br><span class="line">process<span class="operator">-</span>sources（处理源代码） 处理源代码，比如说，过滤任意值。</span><br><span class="line">generate<span class="operator">-</span>resources（生成资源文件） 生成将会包含在项目包中的资源文件。</span><br><span class="line">process<span class="operator">-</span>resources （处理资源文件） 复制和处理资源到目标目录，为打包阶段最好准备。</span><br><span class="line">#compile（编译） 编译项目的源代码。</span><br><span class="line">process<span class="operator">-</span>classes（处理类文件） 处理编译生成的文件，比如说对Java class文件做字节码改善优化。</span><br><span class="line">generate<span class="operator">-</span>test<span class="operator">-</span>sources（生成测试源代码） 生成包含在编译阶段中的任何测试源代码。</span><br><span class="line">process<span class="operator">-</span>test<span class="operator">-</span>sources（处理测试源代码） 处理测试源代码，比如说，过滤任意值。generate<span class="operator">-</span>test<span class="operator">-</span>resources（生成测试资源文件） 为测试创建资源文件。</span><br><span class="line">process<span class="operator">-</span>test<span class="operator">-</span>resources（处理测试资源文件） 复制和处理测试资源到目标目录。</span><br><span class="line">#test<span class="operator">-</span>compile（编译测试源码） 编译测试源代码到测试目标目录. </span><br><span class="line">process<span class="operator">-</span>test<span class="operator">-</span>classes（处理测试类文件） 处理测试源码编译生成的文件。</span><br><span class="line">#test（测试） 使用合适的单元测试框架运行测试（Juint是其中之一）。</span><br><span class="line"><span class="keyword">prepare</span><span class="operator">-</span>package（准备打包） 在实际打包之前，执行任何的必要的操作为打包做准备。</span><br><span class="line">#package（打包） 将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。</span><br><span class="line">pre<span class="operator">-</span>integration<span class="operator">-</span>test（集成测试前） 在执行集成测试前进行必要的动作。比如说，搭建需要的环境。</span><br><span class="line">integration<span class="operator">-</span>test（集成测试） 处理和部署项目到可以运行集成测试环境中。</span><br><span class="line">post<span class="operator">-</span>integration<span class="operator">-</span>test（集成测试后） 在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。</span><br><span class="line">verify （验证） 运行任意的检查来验证项目包有效且达到质量标准。</span><br><span class="line">#install（安装） 安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。</span><br><span class="line">deploy（部署） 将最终的项目包复制到远程仓库中与其他开发者和项目共享。</span><br></pre></td></tr></table></figure><h4 id="插件">插件</h4><p>插件就是该生命周期所能支持的事件</p><p>多个插件组成一个生命周期</p><h3 id="分模块开发-2">分模块开发</h3><p>聚合 多个工程的功能集于一个工程</p><p>继承 父工程的坐标以及插件可以给子工程使用</p><p><img src="https://pic1.imgdb.cn/item/635d3e7b16f2c2beb1fcebf0.png" alt="image-20221008140717415"></p><h3 id="属性">属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义自定义属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可自定义</p><p>调用方法如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Git命令">Git命令</h3><p><strong>Git的工作原理</strong></p><p>分三个区 工作区 暂存区 本地库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">工作区：写代码的</span><br><span class="line">暂存区：缓冲点 临时存储</span><br><span class="line">本地库：历史版本 可查可切换</span><br></pre></td></tr></table></figure><p>常用命令如下：</p><p>黑色只用设置一次</p><p><img src="https://pic1.imgdb.cn/item/635d3e8716f2c2beb1fd18e2.png" alt="image-20221008164523139"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">初始化的效果 会生成一个隐藏的.git文件</span><br><span class="line">status查看本地库文件的状态 ： 文件在什么区</span><br><span class="line">git <span class="keyword">add</span> 将文件提交到缓存区</span><br><span class="line">git <span class="keyword">commit</span> -m &quot;日志信息&quot; 文件名 提交到本地库</span><br><span class="line">git reflog 查看历史记录</span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard 版本号 版本穿梭 就是切换到之前保存到本地库的 时间库的状态 </span></span><br></pre></td></tr></table></figure><h2 id="4-BUG点">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>当时maven的pugin全部报错 之前遇到过找自己的setting.xml文件并没有问题</p><p>后面 发现默认的C中.m2的仓库就可以 觉得是仓库的问题 自己的仓库有问题，就把老师资料中的仓库直接覆盖自己 问题解决了</p><p><img src="https://pic1.imgdb.cn/item/635d3e9716f2c2beb1fd554d.png" alt="image-20221008223738434"></p><h2 id="5-总结">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习点是git和maven两大以后团队协作做项目很有用的操作，之前都略有接触过，maven都用过很久了，高级部分多看了一下，基础文档过了一眼。git的命令有点像linux，git就是解决团队协作时候，对服务器更改的各种问题。今天大部分都是看文档，安装的时候是跟着视频的，因为哪里没配置好会很麻烦，所以学习进度也很快。有过接触，掌握起来也不难。</p><h1 id="10-9-Git分支-SSM框架Bean">10.9 Git分支 SSM框架Bean</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-2">2.所学内容概述</h2><h3 id="Git分支">Git分支</h3><h3 id="Spring入门">Spring入门</h3><h2 id="3-根据概述分章节描述-2">3.根据概述分章节描述</h2><h3 id="Git分支-2">Git分支</h3><p>分支按我自己的理解就像支线(影分身)，各个人负责自己的支线，然后做完了以后，将任务提交到主线中去，能大大提高开发的效率，而且开发失败对主线影响不大，</p><h4 id="分支的操作">分支的操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名 创建分支</span><br><span class="line">git branch -v 查看分支</span><br><span class="line">git checkout 分支名 切换分支</span><br><span class="line">git checkout -b 分支名 切换分支 分支不存在就创建</span><br><span class="line">git merge 分支名 把指定的分支合并到当前的分支 一般当前分支需要是主分支</span><br></pre></td></tr></table></figure><p><em><strong>注意点</strong></em></p><p>冲突问题</p><p>合并的时候，如果主线和分支的同一个文件的同一个位置有两套不同的 修改 Git 就无法为我们决定哪一个 就需要人为 的选择</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编辑有冲突的文件，删除特殊符号，决定要使用的内容</span><br><span class="line">特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span><br></pre></td></tr></table></figure><p>删除以后 添加暂存区然后提交</p><h3 id="Spring相关概念">Spring相关概念</h3><p>Spring框架主要的优势是在<code>简化开发</code>和<code>框架整合</code></p><p>我们平常写的代码中耦合度偏高 都知道低耦合度比较好</p><p>因为每次业务层调用数据层的方法，需要在业务层new数据层的对象 ，如果数据层的实现类发生变化，那么业务层的代码也需要跟着改变，发生变更后，都需要进行编译打包和重部署</p><p>使用对象时，在程序中不要主动使用new产生对象，转换为由==外部==提供对象</p><h3 id="Spring中关于bean的使用">Spring中关于bean的使用</h3><p>使用spring 需要导入依赖 如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bean基础设置">bean基础设置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/635d3ea016f2c2beb1fd73cb.png" alt="image-20221009164824083"></p><h4 id="bean的name属性">bean的name属性</h4><p>环境准备好后，接下来就可以在这个环境的基础上进行bean的别名配置，</p><p><img src="https://pic1.imgdb.cn/item/6368dd8716f2c2beb126b041.png" alt="image-20210729183558051"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u7Service bookEbi&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        bean别名可以定义多个 使用逗号 分号 空格 分隔--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bean作用范围scope配置">bean作用范围scope配置</h4><p>关于bean的作用范围是bean属性配置的一个==重点==内容。</p><p><code>prototype可以非单例</code></p><p>默认是singleton是单例模式</p><p>一般都是设置为单例 提高效率</p><p><img src="https://pic1.imgdb.cn/item/635d3ea216f2c2beb1fd7b02.png" alt="image-20210729183628138"></p><p><bean>小总结</p><p><img src="https://pic1.imgdb.cn/item/635d3ea516f2c2beb1fd8767.png" alt="image-20221009181933493"></p><h3 id="生命周期-2">生命周期</h3><p>关于Spring中对bean生命周期控制提供了两种方式:</p><ul><li>在配置文件中的bean标签中添加初始化<code>init-method</code>和销毁<code>destroy-method</code>属性</li><li>类实现<code>InitializingBean</code>与<code>DisposableBean</code>接口</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="close关闭容器">close关闭容器</h4><ul><li><p>ApplicationContext中没有close方法</p></li><li><p>需要将ApplicationContext更换成ClassPathXmlApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">    <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>调用ctx的close()方法</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.close()<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="注册钩子关闭容器">注册钩子关闭容器</h4><ul><li><p>在容器未关闭之前，提前设置好回调函数，让JVM在退出之前回调此函数来关闭容器</p></li><li><p>调用ctx的registerShutdownHook()方法</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.registerShutdownHook()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>上面两种都可以关闭容器  调用xml文件中的destroy-method的方法</p><h2 id="4-BUG点-2">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>UserDaoFactory 的文件夹命名问题 导致找不到 该类</p><p><img src="https://pic1.imgdb.cn/item/635d3eb216f2c2beb1fdb27e.png" alt="image-20221009153349981"></p><h2 id="6-总结">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习了git基本操作最后一点的分支和SSM框架前面Spring的基础部分，总体来说难度不是很大，spring文档前面概念性的自己理解起来花费了一些时间，结合文档给的案例，敲代码帮助自己理解起来快很多，xml调用接口的时候出现了点问题，解决起来也蛮快的，一个一个点进去找就行了。文档结合视频加上自己敲，理解起来很通透，这样学习是很不错的。</p><h1 id="10-10-Spring">10.10 Spring</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-3">2.所学内容概述</h2><h3 id="依赖注入">依赖注入</h3><h3 id="核心容器">核心容器</h3><h2 id="3-根据概述分章节描述-3">3.根据概述分章节描述</h2><h3 id="依赖注入-2">依赖注入</h3><h4 id="setter注入">setter注入</h4><p>在BookDaoImpl类中声明对应的简单数据类型的属性,并提供对应的setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String databaseName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connectionNum;</span><br><span class="line"><span class="comment">//基本类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConnectionNum</span><span class="params">(<span class="type">int</span> connectionNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.connectionNum = connectionNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatabaseName</span><span class="params">(String databaseName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//引用类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>+databaseName+<span class="string">&quot;,&quot;</span>+connectionNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置中使用==property==标签==ref==属性注入引用类型对象</p><p>配置中使用==property==标签==value==属性注入基本类型对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="构造器注入">构造器注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    构造器注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        形参名高耦合--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name=&quot;connectionNum&quot; value=&quot;109&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name=&quot;databaseName&quot; value=&quot;mysql&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        形参名不耦合但是多个类型一样的会出问题--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg type=&quot;int&quot; value=&quot;100&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;mysql&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用位置解决参数匹配--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Service使用构造器 传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.BookService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookServiceImpl</span><span class="params">(BookDao bookDao, UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖方式的选择</p><p><img src="https://pic1.imgdb.cn/item/635d3eb616f2c2beb1fdc1c9.png" alt="image-20221010085335820"></p><h3 id="自动注入">自动注入</h3><p>前面java文件不变 自动调用set方法</p><p>修改配置文件即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="集合注入">集合注入</h3><p>一般集合注入都是注入常量 如果需要注入引用类型 加<ref>标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历数组:&quot;</span> + Arrays.toString(array));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历List&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Set&quot;</span> + set);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Map&quot;</span> + map);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历Properties&quot;</span> + properties);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//setter....方法省略，自己使用工具生成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件如下</p><p>按照集合名字赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--list集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>chuanzhihui<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--map集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;henan&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kaifeng&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span>&gt;</span>china<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span>&gt;</span>henan<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span>&gt;</span>kaifeng<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心容器-2">核心容器</h3><p>因为是之前的源代码了解</p><p>小结一下</p><h4 id="容器相关">容器相关</h4><ul><li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li><li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li><li>ApplicationContext接口常用初始化类<ul><li><strong>==ClassPathXmlApplicationContext(常用)==</strong></li><li>FileSystemXmlApplicationContext</li></ul></li></ul><h4 id="bean相关">bean相关</h4><p><img src="https://pic1.imgdb.cn/item/635d3ebe16f2c2beb1fde06a.png" alt="1629986510487"></p><p>其实整个配置中最常用的就两个属性==id==和==class==。</p><h4 id="依赖注入相关">依赖注入相关</h4><p><img src="https://pic1.imgdb.cn/item/635d3ec116f2c2beb1fde944.png" alt="1629986848563"></p><h3 id="注解开发基础">注解开发基础</h3><p>注解开发分两块内容<code>注解开发定义bean</code>和<code>纯注解开发</code>。</p><p>注解开发定义bean用的是2.5版提供的注解，纯注解开发用的是3.0版提供的注解。</p><p>笔记我主要记纯注解开发</p><p>几个常用的注解我都列举出来</p><h4 id="Component等">@Component等</h4><table><thead><tr><th>名称</th><th>@Component/@Controller/@Service/@Repository</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring管理的bean</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h4 id="知识点1：-Configuration">知识点1：@Configuration</h4><table><thead><tr><th>名称</th><th>@Configuration</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类为spring配置类</td></tr><tr><td>属性</td><td>value（默认）：定义bean的id</td></tr></tbody></table><h4 id="知识点2：-ComponentScan">知识点2：@ComponentScan</h4><table><thead><tr><th>名称</th><th>@ComponentScan</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置spring配置类扫描路径，用于加载使用注解格式定义的bean</td></tr><tr><td>属性</td><td>value（默认）：扫描路径，此路径可以逐层向下扫描</td></tr></tbody></table><h5 id="知识点1：-Scope">知识点1：@Scope</h5><table><thead><tr><th>名称</th><th>@Scope</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>设置该类创建对象的作用范围<br/>可用于设置创建出的bean是否为单例对象</td></tr><tr><td>属性</td><td>value（默认）：定义bean作用范围，<br/>==默认值singleton（单例），可选值prototype（非单例）==</td></tr></tbody></table><h5 id="知识点1：-PostConstruct">知识点1：@PostConstruct</h5><table><thead><tr><th>名称</th><th>@PostConstruct</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>方法上</td></tr><tr><td>作用</td><td>设置该方法为初始化方法</td></tr><tr><td>属性</td><td>无</td></tr></tbody></table><h5 id="知识点2：-PreDestroy">知识点2：@PreDestroy</h5><table><thead><tr><th>名称</th><th>@PreDestroy</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>方法上</td></tr><tr><td>作用</td><td>设置该方法为销毁方法</td></tr><tr><td>属性</td><td>无</td></tr></tbody></table><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实就是把<span class="built_in">xml</span>文件中bean标签需要到的属性 利用注解放到java中 就不需要使用<span class="built_in">xml</span>配置了</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/635d3ec816f2c2beb1fe031a.png" alt="image-20221010154508693"></p><h3 id="注解开发依赖注入">注解开发依赖注入</h3><h4 id="知识点1：-Autowired">知识点1：@Autowired</h4><table><thead><tr><th>名称</th><th>@Autowired</th></tr></thead><tbody><tr><td>类型</td><td>属性注解  或  方法注解（了解）  或  方法形参注解（了解）</td></tr><tr><td>位置</td><td>属性定义上方  或  标准set方法上方  或  类set方法上方  或  方法形参前面</td></tr><tr><td>作用</td><td>为引用类型属性设置值</td></tr><tr><td>属性</td><td>required：true/false，定义该属性是否允许为null</td></tr></tbody></table><h4 id="知识点2：-Qualifier">知识点2：@Qualifier</h4><table><thead><tr><th>名称</th><th>@Qualifier</th></tr></thead><tbody><tr><td>类型</td><td>属性注解  或  方法注解（了解）</td></tr><tr><td>位置</td><td>属性定义上方  或  标准set方法上方  或  类set方法上方</td></tr><tr><td>作用</td><td>为引用类型属性指定注入的beanId</td></tr><tr><td>属性</td><td>value（默认）：设置注入的beanId</td></tr></tbody></table><h4 id="知识点3：-Value">知识点3：@Value</h4><table><thead><tr><th>名称</th><th>@Value</th></tr></thead><tbody><tr><td>类型</td><td>属性注解  或  方法注解（了解）</td></tr><tr><td>位置</td><td>属性定义上方  或  标准set方法上方  或  类set方法上方</td></tr><tr><td>作用</td><td>为  基本数据类型  或  字符串类型  属性设置值</td></tr><tr><td>属性</td><td>value（默认）：要注入的属性值</td></tr></tbody></table><h4 id="知识点4：-PropertySource">知识点4：@PropertySource</h4><table><thead><tr><th>名称</th><th>@PropertySource</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>类定义上方</td></tr><tr><td>作用</td><td>加载properties文件中的属性值</td></tr><tr><td>属性</td><td>value（默认）：设置加载的properties文件对应的文件名或文件名组成的数组</td></tr></tbody></table><h3 id="注解开发管理第三方bean">注解开发管理第三方bean</h3><p>前面定义bean的时候都是在自己开发的类上面写个注解就完成了 第三方是需要导入jar包的</p><p>如果需要管理是要一个新的注解==@Bean==</p><p>其实就是建立一个Java类 retrun返回一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="comment">//1.定义一个方法获得要管理的对象</span></span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//2.添加@Bean，表示当前方法的返回值是一个bean</span></span><br><span class="line">    <span class="comment">//@Bean修饰的方法，形参根据类型自动装配</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring连接的java类中放入注解即可 这时候需要componentScan导入包名扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//@Import:导入配置信息</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解开发小总结">注解开发小总结</h3><p>图片总结 红色的是以后常用的</p><p><img src="https://pic1.imgdb.cn/item/635d3ecc16f2c2beb1fe120f.png" alt="image-20221010161237920"></p><h2 id="4-BUG点-3">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>Translation的问题 IDEA中谷歌插件 报错 CSDN搜索解决方法</p><p>C:\Windows\System32\drivers\etc 中的hosts 进行修改 添加</p><p>要获取ip获取：命令行 ping <a href="http://translate.google.cn">translate.google.cn</a> 会返回对应的ip，<a href="http://xn--translate-pb6nr71bq9dlw9j.googleapis.com">然后加上translate.googleapis.com</a></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Hosts</span>是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的<span class="built_in">IP</span>地址建立一个关联“数据库”</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/635d3ecf16f2c2beb1fe1926.png" alt="image-20221010153637331"></p><p>命令如下</p><p><img src="https://i0.hdslb.com/bfs/album/15409526704f1eb0a942056d0e429ca1b7653899.png" alt="image-20221010153807876"></p><h2 id="6-总结-2">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习的内容比较多的，从依赖注入到容器到重点的注解开发，注解开发是比较重要的，前面的注入和容器什么的，都可以通过注解开发完成，就不需要写xml文件了，这样很方便。过程中没什么问题，但是注解那边需要记很多东西，不然估计不太好打。之前java学注解的时候，没怎么学，现在 算是又看了一遍，也是理解注解的作用了。今天基本都掌握到了，代码量比较多，学习状态也很不错的。</p><h1 id="10-11-AOP-Spring事务">10.11 AOP Spring事务</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-4">2.所学内容概述</h2><h3 id="AOP简介">AOP简介</h3><h3 id="AOP实现步骤">AOP实现步骤</h3><h3 id="AOP配置管理">AOP配置管理</h3><h2 id="3-根据概述分章节描述-4">3.根据概述分章节描述</h2><h3 id="AOP简介-2">AOP简介</h3><p>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构。</p><p>和面向对象编程一样都是一种编程的思想</p><h4 id="AOP作用">AOP作用</h4><p>在不惊动原始设计的基础上为其进行功能增强，和之前学过的代理模式很像。</p><p>如图所实现的功能调用update和delete方法时候 会计算程序执行时间 但是调用select就不会执行</p><p>spring实现方式就是 三个方法为三个连接点，需要实现功能增强(通知)的方法 设置切入点</p><p><img src="https://pic1.imgdb.cn/item/635d3ed216f2c2beb1fe2522.png" alt="image-20221011151249847"></p><h4 id="AOP核心概念">AOP核心概念</h4><p>总结下:</p><ul><li>连接点(JoinPoint)：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等<ul><li>在SpringAOP中，理解为方法的执行</li></ul></li><li>切入点(Pointcut):匹配连接点的式子<ul><li>在SpringAOP中，一个切入点可以描述一个具体方法，也可也匹配多个方法<ul><li>一个具体的方法:如com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法</li><li>匹配多个方法:所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li><li>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</li></ul></li><li>通知(Advice):在切入点处执行的操作，也就是共性功能<ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li>通知类：定义通知的类</li><li>切面(Aspect):描述通知与切入点的对应关系。</li></ul><h3 id="AOP实现步骤-2">AOP实现步骤</h3><p>添加spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现java类</p><p>代码和注解 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">//通知类必须配置成Spring管理的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//设置当前类为切面类类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//设置切入点，要求配置在方法上方</span></span><br><span class="line">    <span class="comment">//如此实现 update调用 method方法 其他的不调用</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置在切入点pt()的前面运行当前操作（前置通知）</span></span><br><span class="line">     <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是切入点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="开启注解格式AOP功能">开启注解格式AOP功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//开启AOP支持</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="所用新注解">所用新注解</h4><h5 id="知识点1：-EnableAspectJAutoProxy">知识点1：@EnableAspectJAutoProxy</h5><table><thead><tr><th>名称</th><th>@EnableAspectJAutoProxy</th></tr></thead><tbody><tr><td>类型</td><td>配置类注解</td></tr><tr><td>位置</td><td>配置类定义上方</td></tr><tr><td>作用</td><td>开启注解格式AOP功能</td></tr></tbody></table><h5 id="知识点2：-Aspect">知识点2：@Aspect</h5><table><thead><tr><th>名称</th><th>@Aspect</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>切面类定义上方</td></tr><tr><td>作用</td><td>设置当前类为AOP切面类</td></tr></tbody></table><h5 id="知识点3：-Pointcut">知识点3：@Pointcut</h5><table><thead><tr><th>名称</th><th>@Pointcut</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>切入点方法定义上方</td></tr><tr><td>作用</td><td>设置切入点方法</td></tr><tr><td>属性</td><td>value（默认）：切入点表达式</td></tr></tbody></table><h5 id="知识点4：-Before">知识点4：@Before</h5><table><thead><tr><th>名称</th><th>@Before</th></tr></thead><tbody><tr><td>类型</td><td>方法注解</td></tr><tr><td>位置</td><td>通知方法定义上方</td></tr><tr><td>作用</td><td>设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</td></tr></tbody></table><h3 id="语法格式">语法格式</h3><p>各个关键字解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> User com.itheima.service.UserService.findById(<span class="type">int</span>))</span><br></pre></td></tr></table></figure><ul><li>execution：动作关键字，描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>public:访问修饰符,还可以是public，private等，可以省略</li><li>User：返回值，写返回值类型</li><li>com.itheima.service：包名，多级包使用点连接</li><li>UserService:类/接口名称</li><li>findById：方法名</li><li>int:参数，直接写参数的类型，多个类型用逗号隔开</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul><h4 id="通配符">通配符</h4><p>这样使用的话比较单一 肯定是有通配符的 和java中 sql中一样 可以简化配置</p><ul><li><p><code>*</code>:单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（<span class="keyword">public</span> * com.itheima.*.UserService.find*(*))</span><br></pre></td></tr></table></figure><p>匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></li><li><p><code>..</code>：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（public <span class="keyword">User</span> <span class="title">com</span>..UserService.findById(..))</span><br></pre></td></tr></table></figure><p>匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</p></li></ul><h3 id="通知类型">通知类型</h3><ul><li><p>前置通知</p></li><li><p>后置通知</p></li><li><p>环绕通知（重点）</p><ul><li>环绕通知依赖形参ProceedingJoinPoint才能实现对原始方法的调用</li><li>环绕通知可以隔离原始方法的调用执行</li><li>环绕通知返回值设置为Object类型</li><li>环绕通知中可以对原始方法调用过程中出现的异常进行处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> <span class="comment">//环绕通知   </span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">        <span class="comment">//表示对原始操作的调用</span></span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回后通知</p></li><li><p>抛出异常后通知</p></li></ul><h4 id="通知中获取参数">通知中获取参数</h4><ul><li>获取切入点方法的参数，所有的通知类型都可以获取参数<ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul></li></ul><h2 id="5-扩展学习部分">5.扩展学习部分</h2><h3 id="通配符使用练习">通配符使用练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">u7</span><br><span class="line"><span class="title function_">execution</span><span class="params">(<span class="keyword">void</span> com.itheima.dao.BookDao.update()</span>)</span><br><span class="line">匹配接口，能匹配到</span><br><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class="line">匹配实现类，能匹配到</span><br><span class="line">execution(* com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class="line">返回值任意，能匹配到</span><br><span class="line">execution(* com.itheima.dao.impl.BookDaoImpl.update(*))</span><br><span class="line">返回值任意，但是update方法必须要有一个参数，无法匹配，要想匹配需要在update接口和实现类添加参数</span><br><span class="line">execution(<span class="keyword">void</span> com.*.*.*.*.update())</span><br><span class="line">返回值为<span class="keyword">void</span>,com包下的任意包三层包下的任意类的update方法，匹配到的是实现类，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> com.*.*.*.update())</span><br><span class="line">返回值为<span class="keyword">void</span>,com包下的任意两层包下的任意类的update方法，匹配到的是接口，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> *..update())</span><br><span class="line">返回值为<span class="keyword">void</span>，方法名是update的任意包下的任意类，能匹配</span><br><span class="line">execution(* *..*(..))</span><br><span class="line">匹配项目中任意类的任意方法，能匹配，但是不建议使用这种方式，影响范围广</span><br><span class="line">execution(* *..u*(..))</span><br><span class="line">匹配项目中任意包任意类下只要以u开头的方法，update方法能满足，能匹配</span><br><span class="line">execution(* *..*e(..))</span><br><span class="line">匹配项目中任意包任意类下只要以e结尾的方法，update和save方法能满足，能匹配</span><br><span class="line">execution(<span class="keyword">void</span> com..*())</span><br><span class="line">返回值为<span class="keyword">void</span>，com包下的任意包任意类任意方法，能匹配，*代表的是方法</span><br><span class="line">execution(* com.itheima.*.*Service.find*(..))</span><br><span class="line">将项目中所有业务层方法的以find开头的方法匹配</span><br><span class="line">execution(* com.itheima.*.*Service.save*(..))</span><br><span class="line">将项目中所有业务层方法的以save开头的方法匹配</span><br></pre></td></tr></table></figure><h3 id="百度网盘密码数据兼容处理">百度网盘密码数据兼容处理</h3><p>密码输入最后一个会是空格的问题 比如我密码是 root 但是我打成了root(空格) 这种情况 就可以使用环绕通知解决</p><p>代码如下 getArgs获取一个对象数组 一般情况其实是string 但是不严谨 所以要循环找出string类型的 再调用trim()处理掉空格最后将改args返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(boolean com.itheima.service.*Service.*(*,*))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;DataAdvice.servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">trimStr</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="comment">//判断参数是不是字符串</span></span><br><span class="line">            <span class="keyword">if</span> (args[i].getClass().equals(String.class)) &#123;</span><br><span class="line">                args[i] = args[i].toString().trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pjp.proceed(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/635d3ed916f2c2beb1fe3ed7.png" alt="image-20221011154849906"></p><p>执行结果如上 4是实际读取密码的位数</p><h2 id="6-总结-3">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天是学习的内容是spring中的AOP和简单的事务管理，充分利用好注解来完成spring项目 ，比之前的xml方便很多，今天的学习任务还是很重的，整个的AOP，有很多的代码要敲，AOP从简介到总结，然后是和java差不多的转账的事务管理，比较麻烦的就是AOP后面的环绕通知了，但是很好用，也是花时间去看了一下，今天的学习状态也不错，明天加快进度学MVC了。</p><h1 id="10-12-SpringMVC">10.12 SpringMVC</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-5">2.所学内容概述</h2><p>SpringMVC简介</p><p>SpringMVC简单使用</p><p>PostMan使用</p><p>请求和响应</p><p>Rest风格</p><h2 id="3-根据概述分章节描述-5">3.根据概述分章节描述</h2><h3 id="SpringMVC简介">SpringMVC简介</h3><ul><li><p>SpringMVC与Servlet技术功能等同，均属于web层或者说表现层开发技术。SpringMVC比Servlet更简单快捷，能通过更少的代码完成项目的开发</p></li><li><p>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</p></li><li><p>优点</p><ul><li>使用简单、开发便捷(相比于Servlet)</li><li>灵活性强</li></ul></li></ul><h3 id="SpringMVC入门案例">SpringMVC入门案例</h3><p>java控制器类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用到的注解</p><h4 id="知识点1：-Controller">知识点1：@Controller</h4><table><thead><tr><th>名称</th><th>@Controller</th></tr></thead><tbody><tr><td>类型</td><td>类注解</td></tr><tr><td>位置</td><td>SpringMVC控制器类定义上方</td></tr><tr><td>作用</td><td>设定SpringMVC的核心控制器bean</td></tr></tbody></table><h4 id="知识点2：-RequestMapping">知识点2：@RequestMapping</h4><table><thead><tr><th>名称</th><th>@RequestMapping</th></tr></thead><tbody><tr><td>类型</td><td>类注解或方法注解</td></tr><tr><td>位置</td><td>SpringMVC控制器类或方法定义上方</td></tr><tr><td>作用</td><td>设置当前控制器方法请求访问路径</td></tr><tr><td>相关属性</td><td>value(默认)，请求访问路径</td></tr></tbody></table><h4 id="知识点3：-ResponseBody">知识点3：@ResponseBody</h4><table><thead><tr><th>名称</th><th>@ResponseBody</th></tr></thead><tbody><tr><td>类型</td><td>类注解或方法注解</td></tr><tr><td>位置</td><td>SpringMVC控制器类或方法定义上方</td></tr><tr><td>作用</td><td>设置当前控制器方法响应内容为当前返回值，无需解析</td></tr></tbody></table><p>使用Tomcat7:run运行</p><h4 id="如何排除某个备案-比如排除掉SpringMVC控制的备案">如何排除某个备案 比如排除掉SpringMVC控制的备案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&#123;&quot;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span></span><br><span class="line"><span class="comment">//设置spring配置类加载bean时的过滤规则，当前要求排除掉表现层对应的bean</span></span><br><span class="line"><span class="comment">//excludeFilters属性：设置扫描加载bean时，排除的过滤规则</span></span><br><span class="line"><span class="comment">//type属性：设置排除规则，当前使用按照bean定义时的注解类型进行排除</span></span><br><span class="line"><span class="comment">//classes属性：设置排除的具体注解类，当前设置排除@Controller定义的bean</span></span><br><span class="line"><span class="meta">@ComponentScan(value=&quot;com.itheima&quot;,</span></span><br><span class="line"><span class="meta">    excludeFilters = @ComponentScan.Filter( //排除 Controller的注解加载</span></span><br><span class="line"><span class="meta">        type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">//@ComponentScan(&#123;&quot;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来的Web配置比较麻烦 可以优化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"><span class="comment">//web配置类简化开发，仅设置配置类类名即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class ServletContainersInitConfig extends AbstractDispatcherServletInitializer &#123;</span></span><br><span class="line"><span class="comment">    protected WebApplicationContext createServletApplicationContext() &#123;</span></span><br><span class="line"><span class="comment">        AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();</span></span><br><span class="line"><span class="comment">        ctx.register(SpringMvcConfig.class);</span></span><br><span class="line"><span class="comment">        return ctx;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    protected WebApplicationContext createRootApplicationContext() &#123;</span></span><br><span class="line"><span class="comment">        AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();</span></span><br><span class="line"><span class="comment">        ctx.register(SpringConfig.class);</span></span><br><span class="line"><span class="comment">        return ctx;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    protected String[] getServletMappings() &#123;</span></span><br><span class="line"><span class="comment">        return new String[]&#123;&quot;/&quot;&#125;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="PostMan工具的使用">PostMan工具的使用</h3><p>就是一款功能为网页调试与发送网页HTTP请求的Chrome插件</p><p>使用截图</p><p><img src="https://pic1.imgdb.cn/item/635d3ee116f2c2beb1fe58af.png" alt="image-20221012142203706"></p><p>Send可以直接发送 就不需要一次一次浏览器打开，也能很好的判断是否连接。</p><h3 id="请求和响应">请求和响应</h3><p>SpringMVC是web层的框架，那它作用应该是和web一样是接收请求、接收数据、响应结果</p><h4 id="请求参数">请求参数</h4><p>请求参数的传递与接收是和请求方式有关系的，目前比较常见的两种请求方式为：</p><ul><li>GET</li><li>POST</li></ul><h4 id="五种类型参数传递">五种类型参数传递</h4><p>GET的时候写入的信息和后台接受参数的设置会有不同，结合情况使用</p><p>因为PostMan中自己都写了，就不放入到笔记中去了</p><h4 id="知识点1：-RequestParam">知识点1：@RequestParam</h4><table><thead><tr><th>名称</th><th>@RequestParam</th></tr></thead><tbody><tr><td>类型</td><td>形参注解</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参定义前面</td></tr><tr><td>作用</td><td>绑定请求参数与处理器方法形参间的关系</td></tr><tr><td>相关参数</td><td>required：是否为必传参数 <br/>defaultValue：参数默认值</td></tr></tbody></table><h3 id="JSON数据传输参数">JSON数据传输参数</h3><p>现在比较流行的开发方式为异步调用。前后台以异步方式进行交换，传输的数据使用的是==JSON==</p><p>对于JSON数据类型，我们常见的有三种:</p><ul><li>json普通数组（[“value1”,“value2”,“value3”,…]）</li><li>json对象（{key1:value1,key2:value2,…}）</li><li>json对象数组（[{key1:value1,…},{key2:value2,…}]）</li></ul><p>如何传递</p><p>在SpringMVC的配置类中开启SpringMVC的注解支持，这里面就包含了将JSON转换成对象的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="参数前添加-RequestBody">参数前添加@RequestBody</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@RequestBody注解将外部传递的json数组数据映射到形参的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list common(json)参数传递 list ==&gt; &quot;</span>+likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list common for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的对象和集合也是差不多的，只要修改类型就就可以了 注意要在pom.xml中导入jackson包</p><h4 id="知识点1：-EnableWebMvc">知识点1：@EnableWebMvc</h4><table><thead><tr><th>名称</th><th>@EnableWebMvc</th></tr></thead><tbody><tr><td>类型</td><td>==配置类注解==</td></tr><tr><td>位置</td><td>SpringMVC配置类定义上方</td></tr><tr><td>作用</td><td>开启SpringMVC多项辅助功能</td></tr></tbody></table><h4 id="知识点2：-RequestBody">知识点2：@RequestBody</h4><table><thead><tr><th>名称</th><th>@RequestBody</th></tr></thead><tbody><tr><td>类型</td><td>==形参注解==</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参定义前面</td></tr><tr><td>作用</td><td>将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td></tr></tbody></table><p>==REST==（Representational State Transfer），表现形式状态转换,它是一种软件架构==风格==</p><p>当我们想表示一个网络资源的时候，可以使用两种方式:</p><ul><li>传统风格资源描述形式<ul><li><code>http://localhost/user/getById?id=1</code> 查询id为1的用户信息</li><li><code>http://localhost/user/saveUser</code> 保存用户信息</li></ul></li><li>REST风格描述形式<ul><li><code>http://localhost/user/1</code></li><li><code>http://localhost/user</code></li></ul></li></ul><p>个人理解：就是简化get post put delete等操作的时候 写路径会很繁琐的这种行为，称之为Rest风格 用这种风格访问就被称为==RESTful==</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* `http:<span class="regexp">//</span>localhost/users`查询全部用户信息 GET（查询）</span><br><span class="line">* `http:<span class="regexp">//</span>localhost<span class="regexp">/users/</span><span class="number">1</span>`  查询指定用户信息 GET（查询）</span><br><span class="line">* `http:<span class="regexp">//</span>localhost<span class="regexp">/users`    添加用户信息    POST（新增/</span>保存）</span><br><span class="line">* `http:<span class="regexp">//</span>localhost<span class="regexp">/users`    修改用户信息    PUT（修改/</span>更新）</span><br><span class="line">* `http:<span class="regexp">//</span>localhost<span class="regexp">/users/</span><span class="number">1</span>`  删除用户信息    DELETE（删除）</span><br></pre></td></tr></table></figure><h4 id="所用到的注解">所用到的注解</h4><p>知识点1：@PathVariable</p><table><thead><tr><th>名称</th><th>@PathVariable</th></tr></thead><tbody><tr><td>类型</td><td>==形参注解==</td></tr><tr><td>位置</td><td>SpringMVC控制器方法形参定义前面</td></tr><tr><td>作用</td><td>绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</td></tr></tbody></table><p>原本的get使用REST风格就变成如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有些地方是重复的</p><p>解决方案如下 注解是原来的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//@Controller + ReponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//@RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题1：每个方法的@RequestMapping注解中都定义了访问路径/books，重复性太高。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将<span class="meta">@RequestMapping</span>提到类上面，用来定义所有方法共同的访问路径。</span><br></pre></td></tr></table></figure><p>问题2：每个方法的@RequestMapping注解中都要使用method属性定义请求方式，重复性太高。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="variable">@GetMapping</span>  <span class="variable">@PostMapping</span>  <span class="variable">@PutMapping</span>  <span class="variable">@DeleteMapping</span>代替</span><br></pre></td></tr></table></figure><p>问题3：每个方法响应json都需要加上@ResponseBody注解，重复性太高。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>将ResponseBody提到类上面，让所有的方法都有<span class="meta">@ResponseBody</span>的功能</span><br><span class="line"><span class="number">2.</span>使用<span class="meta">@RestController</span>注解替换<span class="meta">@Controller</span>与<span class="meta">@ResponseBody</span>注解，简化书写</span><br></pre></td></tr></table></figure><p>使用的注解</p><p>知识点1：@RestController</p><table><thead><tr><th>名称</th><th>@RestController</th></tr></thead><tbody><tr><td>类型</td><td>==类注解==</td></tr><tr><td>位置</td><td>基于SpringMVC的RESTful开发控制器类定义上方</td></tr><tr><td>作用</td><td>设置当前控制器类为RESTful风格，<br/>等同于@Controller与@ResponseBody两个注解组合功能</td></tr></tbody></table><p>知识点2：@GetMapping @PostMapping @PutMapping @DeleteMapping</p><table><thead><tr><th>名称</th><th>@GetMapping @PostMapping @PutMapping @DeleteMapping</th></tr></thead><tbody><tr><td>类型</td><td>==方法注解==</td></tr><tr><td>位置</td><td>基于SpringMVC的RESTful开发控制器方法定义上方</td></tr><tr><td>作用</td><td>设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，<br/>例如@GetMapping对应GET请求</td></tr><tr><td>相关属性</td><td>value（默认）：请求访问路径</td></tr></tbody></table><ol start="4"><li>BUG点</li></ol><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>做 REST风格的案例的时候 连接不到html</p><p><img src="https://pic1.imgdb.cn/item/635d3f1616f2c2beb1ff17a8.png" alt="image-20221012220835426"></p><p>但是问题是在MVC应该是拦截了前端的数据 导致无法访问</p><p><img src="https://pic1.imgdb.cn/item/635d3f2516f2c2beb1ff4cb7.png" alt="image-20221012220912323"></p><p>换成下面这种方式就好了 具体原因没有搞清楚 老师示范的代码是上图的 静态资源进行放行</p><p><img src="https://pic1.imgdb.cn/item/635d3f2716f2c2beb1ff542c.png" alt="image-20221012220646291"></p><p>5.扩展学习部分</p><p>@RequestBody与@RequestParam区别</p><ul><li><p>区别</p><ul><li>@RequestParam用于接收url地址传参，表单传参【application/x-www-form-urlencoded】</li><li>@RequestBody用于接收json数据【application/json】</li></ul></li><li><p>应用</p><ul><li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li></ul></li></ul><p>6.总结</p><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习状态一般 没怎么睡好，下午还不错，学习的内容是MVC也就是和web框架差不多，前后端连接的点比较多，敲很多代码觉得不错的地方就是比原本的webServlet要快很多，而且我觉得很清楚，代码还简洁，利用注解就能接决连接的情况。做REST风格的案例的时候，稍微出现了一些问题，但是也在同学的帮助下解决了，学了很多的注解了，有些其实都没怎么记住，还是要多敲代码多用，才能更好的去记忆如何使用。</p><h1 id="10-13-SSM整合-拦截器">10.13 SSM整合 拦截器</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-6">2.所学内容概述</h2><h2 id="3-根据概述分章节描述-6">3.根据概述分章节描述</h2><h3 id="SSM整合流程">SSM整合流程</h3><p>把前面所学习的三个框架都整合在一起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">1&gt;</span><span class="language-bash">&gt;&gt;创建工程</span></span><br><span class="line"><span class="meta prompt_">2&gt;</span><span class="language-bash">&gt;&gt;SSM整合</span></span><br><span class="line">Spring</span><br><span class="line">MyBatis</span><br><span class="line">SpringMVC</span><br><span class="line"><span class="meta prompt_">3&gt;</span><span class="language-bash">&gt;&gt;功能模块</span></span><br><span class="line">表和实现类</span><br><span class="line">dao接口</span><br><span class="line">service业务层</span><br><span class="line">controller表现层</span><br></pre></td></tr></table></figure><h4 id="入门案例">入门案例</h4><p>以后spring 创建项目包结构都可以用这种 单词自己注意下</p><p>创建项目包结构</p><p><img src="https://pic1.imgdb.cn/item/635d3f3016f2c2beb1ff78f6.png" alt="1630561591931"></p><ul><li>config目录存放的是相关的配置类</li><li>controller编写的是Controller类</li><li>dao存放的是Dao接口，因为使用的是Mapper接口代理方式，所以没有实现类包</li><li>service存的是Service接口，impl存放的是Service实现类</li><li>resources:存入的是配置文件，如Jdbc.properties</li><li>webapp:目录可以存放静态资源</li></ul><p>个人理解:流程可以这样敲</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringConfig -- JdbcConfig -- MybatisConfig -- jdbc.prperties -- SpringMVC --创建Web项目入口配置类 </span><br><span class="line">   </span><br><span class="line">模块开发</span><br><span class="line"> 模型类 == Dao接口 == Service接口和实现类 == Contorller类</span><br></pre></td></tr></table></figure><h4 id="前后台协议统一">前后台协议统一</h4><p>在webAPP添加静态资源</p><p>因为添加了静态资源所以SpringMVC会拦截的 我们需要放行 在SpringConfig放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SpringMvcConfig中扫描SpringMvcSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写前端页面完成项目整合</p><h3 id="拦截器">拦截器</h3><p>可以动态拦截控制器的执行</p><ul><li>在指定的方法调用前后执行预先设定的代码</li><li>阻止原始方法的执行</li><li>总结：拦截器就是用来做增强</li></ul><h4 id="拦截器开发">拦截器开发</h4><p>让类实现HandlerInterceptor接口，重写接口中的三个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//定义拦截器类，实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment">//注意当前类必须受Spring容器控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用前执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="comment">//如果返回true,则代表放行，会执行原始Controller类中要请求的方法，如果返回false，则代表拦截，后面的就不会再执行了。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用完成后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注意:**拦截器类要被SpringMVC容器扫描到。</p><p>所以需要再SpringMvcSupport允许通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器  访问结尾是books的会被拦截</span></span><br><span class="line">        <span class="comment">//registry.addInterceptor(projectInterceptor).addPathPatterns(&quot;/books&quot; );</span></span><br><span class="line">        <span class="comment">//表示访问中有books结尾或者是books后面的 都会被拦截</span></span><br><span class="line">    registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-BUG点-4">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>@Autowired下面一直冒红 也找不到原因 索性重新打了一遍代码就莫名其妙好了</p><p><img src="https://pic1.imgdb.cn/item/635d3f3816f2c2beb1ff9541.png" alt="img"></p><h2 id="6-总结-4">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习状态一般，有点太疲劳了，还是内容问题，感觉有点不是很理解，类太多，使用的注解也很多 ，敲过去有些参数不是很理解，调用的方式，但是也没有死磕，大致的过了一下就好了，后面SpringBoot的时候会简单很多，这些到时候在复习一下，拦截器那里没怎么听懂，今天的掌握只有70吧。也没有报错但是就是有点云里雾里。</p><h1 id="10-14-Mybatis-Puls">10.14 Mybatis-Puls</h1><h2 id="1-头：日期、所学内容出处-7">1.头：日期、所学内容出处</h2><p>【黑马程序员MybatisPlus深入浅出教程，快速上手mybatisplus】 <a href="https://www.bilibili.com/video/BV1rE41197jR?p=12&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1rE41197jR?p=12&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-7">2.所学内容概述</h2><h3 id="了解Mybatis-plus">了解Mybatis-plus</h3><h3 id="快速使用">快速使用</h3><h3 id="使用sql简单功能实现">使用sql简单功能实现</h3><h2 id="3-根据概述分章节描述-7">3.根据概述分章节描述</h2><h3 id="什么是Mybatis-plus-MP">什么是Mybatis-plus(MP)</h3><p>个人理解:之前学过mybatis,连接数据库，利用返回值，以及实现的接口，实现java对mysql的操作。这个Mybatis-plus相当于是把你java对mysql的操作进行封装，这样你开发的时候的代码量等操作就会少很多，提高效率。</p><h3 id="快速使用-2">快速使用</h3><p>需要导入插件在Maven中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus插件依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为之前学过spring了，而且以后基本也都是使用spring 所以 前面mybatis+MP的代码就不列出来了</p><h4 id="Spring-Mybatis-MP">Spring+Mybatis+MP</h4><p>熟悉的流程</p><p>实现查询User</p><h5 id="1-编写jdbc-properties">1.编写jdbc.properties</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mp?</span></span><br><span class="line"><span class="attr">useUnicode</span>=<span class="string">true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL</span></span><br><span class="line">=<span class="attr">false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h5 id="2-xml">2.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里使用MP提供的sqlSessionFactory，完成了Spring与MP的整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描mapper接口，使用的依然是Mybatis原生的扫描器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.itcast.mp.simple.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-UserMapper接口-继承BaseMapper">3.UserMapper接口 继承BaseMapper</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.simple.mapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.simple.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-测试类">4.测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp.simple;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.simple.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.simple.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpringMP</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用CRUD">通用CRUD</h3><p>我都放到一个测试类里面了 也有注解 其实就是调用接口中的方法 忘记的话点击去源代码查看 有MP的中文注解的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.mp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setMail(<span class="string">&quot;2@itcast.cn&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">301</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;caocao1&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;曹操1&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.insert(user); <span class="comment">//result数据库受影响的行数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取自增长后的id值, 自增长后的id值会回填到user对象中</span></span><br><span class="line">        System.out.println(<span class="string">&quot;id =&gt; &quot;</span> + user.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>); <span class="comment">//条件，根据id更新</span></span><br><span class="line">        user.setAge(<span class="number">19</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        user.setPassword(<span class="string">&quot;666666&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">20</span>); <span class="comment">//更新的字段</span></span><br><span class="line">        user.setPassword(<span class="string">&quot;8888888&quot;</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(); <span class="comment">//根据条件更新</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>); <span class="comment">//匹配user_name = zhangsan 的用户数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据条件做更新</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(user, wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.set(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>).set(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;999999&quot;</span>) <span class="comment">//更新的字段</span></span><br><span class="line">        .eq(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>); <span class="comment">//更新的条件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据条件做更新</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 根据id删除数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteById(<span class="number">9L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;999999&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据map删除数据，多条件之间是and关系</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteByMap(map);</span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用法一：</span></span><br><span class="line"><span class="comment">//        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        wrapper.eq(&quot;user_name&quot;, &quot;caocao1&quot;)</span></span><br><span class="line"><span class="comment">//                .eq(&quot;password&quot;, &quot;123456&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用法二：</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;caocao&quot;</span>);</span><br><span class="line">        <span class="comment">//封装到User对象中 删除设置的对象</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据包装条件做删除</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.delete(wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testDeleteBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 根据id批量删除数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.deleteBatchIds(Arrays.asList(<span class="number">6L</span>, <span class="number">7L</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;result =&gt; &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectBatchIds</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 根据id批量查询数据</span></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>, <span class="number">100L</span>));</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectOne</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 查询的数据超过一条时，会抛出异常</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectOne(wrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectCount</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>); <span class="comment">// 条件：年龄大于20岁的用户</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据条件查询数据条数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectCount(wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;count =&gt; &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        wrapper.like(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">3</span>,<span class="number">1</span>); <span class="comment">//查询第一页，查询1条数据</span></span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        wrapper.like(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IPage&lt;User&gt; iPage = <span class="built_in">this</span>.userMapper.selectPage(page, wrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据总条数： &quot;</span> + iPage.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;数据总页数： &quot;</span> + iPage.getPages());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数： &quot;</span> + iPage.getCurrent());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; records = iPage.getRecords();</span><br><span class="line">        <span class="keyword">for</span> (User record : records) &#123;</span><br><span class="line">            System.out.println(record);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.findById(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAllEq</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;password&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE password IS NULL AND name = ? AND age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq(params);</span></span><br><span class="line">        <span class="comment">//SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name = ? AND age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq(params, false);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE age = ?</span></span><br><span class="line"><span class="comment">//        wrapper.allEq((k, v) -&gt; (k.equals(&quot;age&quot;) || k.equals(&quot;id&quot;)) , params);</span></span><br><span class="line">        <span class="comment">//SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name = ? AND age = ?</span></span><br><span class="line">        wrapper.allEq((k, v) -&gt; (k.equals(<span class="string">&quot;age&quot;</span>) || k.equals(<span class="string">&quot;id&quot;</span>) || k.equals(<span class="string">&quot;name&quot;</span>)) , params);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEq</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SELECT id,user_name,password,name,age,email FROM tb_user WHERE password = ? AND age &gt;= ? AND name IN (?,?,?)</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">                .in(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLike</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name LIKE ?</span></span><br><span class="line">        <span class="comment">// 参数：%五(String)</span></span><br><span class="line">        wrapper.likeLeft(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrderByAgeDesc</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//按照年龄倒序排序</span></span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user ORDER BY age DESC</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOr</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// SELECT id,user_name,name,age,email AS mail FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王五&quot;</span>).or().eq(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//SELECT id,name,age FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王五&quot;</span>)</span><br><span class="line">                .or()</span><br><span class="line">                .eq(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>)</span><br><span class="line">                .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>); <span class="comment">//指定查询的字段</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="built_in">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-总结-5">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习状态不错，看着文档敲了很多代码，MP是中国团队写出来的，也是我现在IDEA点进去，唯一一个注释是中文的Maven插件，一些基本的sql语句，我都是看他源代码和注释，了解用法了的。学习中也没遇到什么BUG，偶尔几次是自己写错了方法名字或者jdbc写错了，难度不是很大，前面基本使用是会了，打算明天看SpringBoot2，遇到使用MP进阶的时候再回头看看。</p><h1 id="10-17-SpringBoot">10.17 SpringBoot</h1><h2 id="1-头：日期、所学内容出处-8">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-8">2.所学内容概述</h2><p>简单的入门案例利用SpringBoot  只需要一行就能实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Rest模式</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springboot is running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot is running!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主程序如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot0101QuickstartApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot0101QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来的Spring项目结构如下</p><p><img src="https://pic1.imgdb.cn/item/635d3f4616f2c2beb1ffc92b.png" alt="image-20221017190256901"></p><p>SpringBoot项目结构如下</p><p>只需要一个java类</p><p><img src="https://pic1.imgdb.cn/item/635d3f4716f2c2beb1ffcaec.png" alt="image-20221017190332984"></p><p>个人理解显而易见SpringBoot简单很多 Spring中的配置 在SpringBoot中都给你配好了</p><p>还有一个很智能的 pom.xml文件 他能帮你把所有最合适的版本配置好 在IDEA可以直接创建</p><p><img src="https://pic1.imgdb.cn/item/635d3f4a16f2c2beb1ffd5df.png" alt="image-20221017190740086"></p><h2 id="3-总结">3.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容不是很多，上午考驾照去了，下午先整理了一下前面SSM框架的一些内容，再来看的SpringBoot，只做了一个简单的入门案例，SpringBoot把之前要写Bean都帮你整理好了，这样你只要输入controller文件就好了。暂时没什么难的，就是搞清楚他运行原理的话有点麻烦，学到后面的原理篇再仔细看一下吧。</p><h1 id="10-18-SpringBoot基础篇完结">10.18 SpringBoot基础篇完结</h1><h2 id="1-头：日期、所学内容出处-9">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-9">2.所学内容概述</h2><h3 id="SpringBoot基本配置">SpringBoot基本配置</h3><h4 id="属性配置">属性配置</h4><h4 id="配置文件分类">配置文件分类</h4><h4 id="yaml文件使用">yaml文件使用</h4><h5 id="yaml数据读取">yaml数据读取</h5><h3 id="SpringBoot实现SSMP整合">SpringBoot实现SSMP整合</h3><h2 id="3-根据概述分章节描述-8">3.根据概述分章节描述</h2><h3 id="SpringBoot基本配置-2">SpringBoot基本配置</h3><h4 id="属性配置-2">属性配置</h4><p>修改application.properties文件 设置服务器端口号 格式如下 IDEA会有自动联想功能会有提示</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br><span class="line"><span class="comment"># **关闭运行日志图表（banner)**</span></span><br><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="comment"># **设置运行日志的显示级别**</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="配置文件分类-2">配置文件分类</h4><p>分三种 默认的是properties 然后是两种yaml和yml</p><p>三种格式也不一样</p><ul><li>application.properties（properties格式）</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><ul><li>application.yml（yml格式）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><ul><li>application.yaml（yaml格式）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><p>​仔细看会发现yml式和yaml格式除了文件名后缀不一样，格式完全一样，是这样的，yml和yaml文件格式就是一模一样的，只是文件后缀不同，所以可以合并成一种格式来看。以后企业比较常用的是yml格式的 是yml为重点</p><p>配置文件如果有相同的话 优先级来说的话如下 但是配置文件不同会同时起作用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">application.properties</span>  <span class="string">&gt;</span>  <span class="string">application.yml</span>  <span class="string">&gt;</span>  <span class="string">application.yaml</span></span><br><span class="line"><span class="comment"># 优先级</span></span><br></pre></td></tr></table></figure><h4 id="yaml文件使用-2">yaml文件使用</h4><p>数据书写格式i如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean:</span> <span class="literal">TRUE</span>  <span class="comment">#TRUE,true,True,FALSE,false，False均可</span></span><br><span class="line"><span class="attr">float:</span> <span class="number">3.14</span>    <span class="comment">#6.8523015e+5  #支持科学计数法</span></span><br><span class="line"><span class="attr">int:</span> <span class="number">123</span>       <span class="comment">#0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制</span></span><br><span class="line"><span class="attr">null:</span> <span class="string">~</span>        <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span> <span class="string">HelloWorld</span>      <span class="comment">#字符串可以直接书写</span></span><br><span class="line"><span class="attr">string2:</span> <span class="string">&quot;Hello World&quot;</span>  <span class="comment">#可以使用双引号包裹特殊字符</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-02-17</span>        <span class="comment">#日期必须使用yyyy-MM-dd格式</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2018-02-17T15:02:31+08:00</span>  <span class="comment">#时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure><p>也可以表示数组或多维数组</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subject:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">likes:</span> [<span class="string">王者荣耀</span>,<span class="string">刺激战场</span>]<span class="comment">#数组书写缩略格式</span></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式一</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式二</span></span><br><span class="line">  <span class="bullet">-</span>  </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span>   </span><br><span class="line">    <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span>    </span><br><span class="line"><span class="attr">users2:</span> [ &#123; <span class="string">name:Tom</span> , <span class="string">age:4</span> &#125; , &#123; <span class="string">name:Jerry</span> , <span class="string">age:5</span> &#125; ]<span class="comment">#对象数组缩略格式</span></span><br></pre></td></tr></table></figure><h5 id="yaml数据读取-2">yaml数据读取</h5><p>读取单一数据</p><p>yaml中保存的单个数据，可以使用Spring中的注解直接读取，使用@Value可以读取单个数据，属性名引用方式：<font color="#ff0000"><b>${一级属性名.二级属性名……}</b></font></p><img src="https://pic1.imgdb.cn/item/635d3f5016f2c2beb1fff0db.png" alt="image-20211126180433356" style="zoom:80%;" /><p>读取全部数据</p><p>​读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p><img src="https://pic1.imgdb.cn/item/635d3f5516f2c2beb10002c4.png" alt="image-20211126180738569" style="zoom:80%;" /><p>但是要写env.getProperty太麻烦了</p><p>写成对象数据调用会方便很多</p><p><strong><img src="https://pic1.imgdb.cn/item/635d3f5816f2c2beb1000f6c.png" alt="image-20221018140729972"></strong></p><p>读取方式如下</p><p><img src="https://pic1.imgdb.cn/item/635d3f5b16f2c2beb1001a33.png" alt="image-20221018140758872"></p><p>会简单很多 直接输出就是 对象的tostring</p><h2 id="4-总结">4.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容是Boot2基础篇差不多结束了，配置方面学习的比较多，算是重点吧，yml感觉是比之前properties的文件要舒服很多，连接数据库的时候，输入也很方便，加上MP的配置，感觉将开发效率提高了很多。今天没什么难点，都是理解为主，文档看看，去实验了一下，明天把SSMP的案例过了，就能去下一个阶段了。</p><h1 id="10-19-SSMP案例">10.19 SSMP案例</h1><h2 id="1-头：日期、所学内容出处-10">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-10">2.所学内容概述</h2><h3 id="SSMP步骤">SSMP步骤</h3><p>个人理解:</p><p>1.pom.xml</p><p>配置依赖</p><p>2.application.yml</p><p>设置数据源 端口 框架</p><p>3.dao</p><p>继承BaseMapper 设置@Mapper</p><p>4.dao测试类</p><p>5.service</p><p>调用数据层接口或Mybatis-Plus提供的接口快速开发</p><p>6.service测试类</p><p>7.controller</p><p>基于Restful开发 用Postman测试</p><p>8.页面</p><p>放置resources目录中static静态页面</p><p>本人理解原理:</p><p><img src="https://pic1.imgdb.cn/item/635d3f6116f2c2beb1003359.png" alt="image-20221019194347499"></p><p>接口各个实现原理</p><p>数据层BookDao接口继承mp中的BaseMapper拥有其方法</p><p>IBookService业务层接口 继承mp中IService</p><p>BookServiceImpl注入BookDao实现对象，业务层方法一目了然知道使用方法，创建对应类然后调用数据层的方法</p><p>在表现层BookController写对应请求类所调用的方法 并添加功能</p><h3 id="表现层消息一致性">表现层消息一致性</h3><p>要求是前端请求得到的数据 需要统一</p><p><strong>增删改操作结果</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><p>​<strong>查询单个数据操作结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​<strong>查询全部数据操作结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring 5核心原理与30个类手写实战&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;十年沉淀之作&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>如上面的几种不同的操作 返回的数据格式都不一样，为了方便前端的开发，可以设计一个类 被称为模型类 用于数据统一的 被称为前后端数据协议</p><p>创建R类 写boolean类的flag Object的data 即可 （msg是后面对异常处理添加的）</p><p>Object类可以放数据 flag设计是有没有请求到数据 设计好构造方法 这样前端的返回的数据 都是一个flag一个data了</p><p><img src="https://pic1.imgdb.cn/item/635d3f6316f2c2beb10039ac.png" alt="image-20221019195355827"></p><p>效果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机理论&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring实战 第5版&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Spring入门经典教程&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-BUG点">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><h2 id="4-扩展学习部分">4.扩展学习部分</h2><h2 id="5-总结-2">5.总结</h2><p>今天下午学了车，所以今天主要是做了SSMP的案例，之前讲过学SSM框架的时候的实现效果差不多，但是使用SSMP方便了很多，上次这个案例没怎么做，过了一遍，这次自己尝试去做了一遍，因为没学过vue，在前端实现的部分，就采用了老师的代码，后端开发基本都是自己看完视频以后独立完成，难度不是很大，sql语句也是很简单的，所以MP已经帮你写好了，明天可以进入开发篇中去了。</p><h1 id="10-20-SpringBoot运维">10.20 SpringBoot运维</h1><h2 id="1-头：日期、所学内容出处-11">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-11">2.所学内容概述</h2><h3 id="使用cmd命令行-运行项目jar包">使用cmd命令行 运行项目jar包</h3><p>cmd运行jar包命令如下</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span>XXXXXXX.<span class="keyword">jar</span></span><br></pre></td></tr></table></figure><p>可以设置临时配置属性 两个–后面跟属性然后设置值 和properties文件格式差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxxxxx.jar --server.port=<span class="number">80</span> --logging.level.root=debug</span><br></pre></td></tr></table></figure><p>下面是有时候端口冲突或者进程冲突时候命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查询端口</span><br><span class="line">netstat -ano</span><br><span class="line"># 查询指定端口</span><br><span class="line">netstat -ano |findstr <span class="string">&quot;端口号&quot;</span></span><br><span class="line"># 根据进程PID查询进程名称</span><br><span class="line">tasklist |findstr <span class="string">&quot;进程PID号&quot;</span></span><br><span class="line"># 根据PID杀死任务</span><br><span class="line">taskkill /F /PID <span class="string">&quot;进程PID号&quot;</span></span><br><span class="line"># 根据进程名称杀死任务</span><br><span class="line">taskkill -f -t -im <span class="string">&quot;进程名称&quot;</span></span><br></pre></td></tr></table></figure><h3 id="多环境开发">多环境开发</h3><p>个人理解：在公司中 一些配置是不需要底层的人看到的，所以相当于每个阶层负责的内容不一样。就是说你的电脑上写的程序最终要放到别人的服务器上去运行。每个计算机环境不一样，这就是多环境。常见的多环境开发主要兼顾3种环境设置，开发环境——自己用的，测试环境——自己公司用的，生产环境——甲方爸爸用的。所以一些配置是不一样的，利用不同的文件目录就可以实现</p><h2 id="3-BUG点-2">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><h2 id="4-扩展学习部分-2">4.扩展学习部分</h2><h2 id="5-总结-3">5.总结</h2><p>今天学习的内容对我比较简单，之前学过一些运维方面的知识，打包什么都很熟悉，在大数据比赛的时候已经如鱼得水了，今天看文档就把运维看完了，然后附带了点后面开发的内容，如热部署什么的。总体来说，今天学习状态也不错，内容比较对口吧。</p><h1 id="10-21下午-10-23下午-Spring开发使用篇">10.21下午-10.23下午 Spring开发使用篇</h1><h2 id="1-头：日期、所学内容出处-12">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-12">2.所学内容概述</h2><h3 id="热部署">热部署</h3><p>热部署相当于你启动完服务器，又修改了java的代码，之前是需要重新运行一次的，现在只要<CTR>L+<F9>一下就好了，不需要再次运行浪费时间和资源了</p><p>因为自动和监控比较鸡肋，最常用的还是手动启动热部署，所以就记手动的实现 方式=就行了‘</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CTR&gt;L+&lt;F9&gt; #IDEA启动热部署快捷键</span><br></pre></td></tr></table></figure><h3 id="配置高级">配置高级</h3><p>属性绑定时，可能会遇到如下情况，为了进行标准命名，开发者会将属性名严格按照驼峰命名法书写，在yml配置文件中将datasource修改为dataSource，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSource:</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>​此时程序可以正常运行，然后又将代码中的前缀datasource修改为dataSource，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dataSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">datasource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​明明确定的目标名是一样的，却无法匹配，就是有关属性名称的宽松绑定，也可以称为宽松绑定。</p><p>​实际上是springboot进行编程时人性化设计的一种体现，即配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。可以与下面的配置属性名规则全兼容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">ipAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>       <span class="comment"># 驼峰模式</span></span><br><span class="line">  <span class="attr">ip_address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>      <span class="comment"># 下划线模式</span></span><br><span class="line">  <span class="attr">ip-address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>      <span class="comment"># 烤肉串模式</span></span><br><span class="line">  <span class="attr">IP_ADDRESS:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>      <span class="comment"># 常量模式</span></span><br></pre></td></tr></table></figure><p>​也可以说，以上4种模式最终都可以匹配到ipAddress这个属性名。不过springboot官方推荐使用烤肉串模式，也就是中划线模式。命名的规范问题。看开始出现的编程错误信息</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Configuration property name &#x27;dataSource&#x27; is <span class="keyword">not</span> valid:</span><br><span class="line"></span><br><span class="line">    Invalid characters: &#x27;S&#x27;</span><br><span class="line"><span class="function">    Bean: <span class="title">datasource</span></span></span><br><span class="line"><span class="function">    <span class="title">Reason</span>: <span class="title">Canonical</span> <span class="title">names</span> <span class="title">should</span> <span class="title">be</span> <span class="title">kebab</span>-<span class="title">case</span> (&#x27;-&#x27; <span class="title">separated</span>), <span class="title">lowercase</span> <span class="title">alpha</span>-<span class="title">numeric</span> <span class="title">characters</span> <span class="title">and</span> <span class="title">must</span> <span class="title">start</span> <span class="title">with</span> <span class="title">a</span> <span class="title">letter</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Action</span>:</span></span><br><span class="line"><span class="function"><span class="title">Modify</span> &#x27;<span class="title">dataSource</span>&#x27; <span class="title">so</span> <span class="title">that</span> <span class="title">it</span> <span class="title">conforms</span> <span class="title">to</span> <span class="title">the</span> <span class="title">canonical</span> <span class="title">names</span> <span class="title">requirements</span>.</span></span><br></pre></td></tr></table></figure><p>​其中Reason描述了报错的原因，规范的名称应该是烤肉串(kebab)模式(case)，即使用-分隔，使用小写字母数字作为标准字符，且必须以字母开头。</p><p>​以上规则仅针对springboot中@ConfigurationProperties注解进行属性绑定时有效，对@Value注解进行属性映射无效。</p><p><strong>总结</strong></p><ol><li>@ConfigurationProperties绑定属性时支持属性名宽松绑定，这个宽松体现在属性名的命名规则上</li><li>@Value注解不支持松散绑定规则</li><li>绑定前缀名推荐采用烤肉串命名规则，即使用中划线做分隔符</li></ol><h3 id="数据层">数据层</h3><h4 id="数据源技术">数据源技术</h4><p>之前我们用的是druid springboot还有三个内置的数据源技术</p><ul><li>HikariCP</li><li>Tomcat提供DataSource</li><li>Commons DBCP、</li></ul><p>HikariCP是默认的 不配置啥数据源的话就是这个</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span><span class="comment"># 这里是选择数据源的</span></span><br><span class="line">     <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="持久化技术">持久化技术</h3><p>个人觉得这里比较重要 就提高一个标题等级吧 这里主要是springboot充分发挥其最强辅助的特征，给开发者提供了一套现成的数据层技术，叫做JdbcTemplate。导入坐标完了 可以直接写自定义sql</p><p>导入jdbc对应的坐标，记得是starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure><p>自动装配JdbcTemplate对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot15SqlApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用JdbcTemplate实现查询操作（非实体类封装数据的查询操作）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tbl_book&quot;</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">    System.out.println(maps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用JdbcTemplate实现查询操作（实体类封装数据的查询操作）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from tbl_book&quot;</span>;</span><br><span class="line">    RowMapper&lt;Book&gt; rm = <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;Book&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Book <span class="title function_">mapRow</span><span class="params">(ResultSet rs, <span class="type">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">            temp.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            temp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            temp.setType(rs.getString(<span class="string">&quot;type&quot;</span>));</span><br><span class="line">            temp.setDescription(rs.getString(<span class="string">&quot;description&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    List&lt;Book&gt; list = jdbcTemplate.query(sql, rm);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用JdbcTemplate实现增删改操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJdbcTemplateSave</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into tbl_book values(3,&#x27;springboot1&#x27;,&#x27;springboot2&#x27;,&#x27;springboot3&#x27;)&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人理解:一些复杂的sql语句可以不依赖于MP，自定义会更好些，而且可以满足需求，想写什么类型的sql语句，写完调用jdbcTemplate中对应的实现方法就行了，查询比较麻烦，非实体类看起来不太方便，可以写一个实体类，封装进去。</p><h4 id="数据库技术">数据库技术</h4><p>讲的都是springboot内置的三个数据库，感觉没什么很大的用处以后，还是mysql居多</p><h3 id="NOSQL非关系数据库">NOSQL非关系数据库</h3><p>讲了三个Redis MongoDB ES 都是比较常用的数据库，跟着安装了一下，然后基本的使用学会了，用SpringBoot整合了一下，没什么难点，也没重点，后面需要用的使用，再局部的复习一下</p><h2 id="3-BUG">3. BUG</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>自己写的查询方法这里，想用sql来进行分页，报错了，发现这里修改以后，后面的Service业务层没有修改，导致报错</p><p><img src="https://pic1.imgdb.cn/item/635d3f6a16f2c2beb100519d.png" alt="img"></p><h2 id="4-扩展学习部分-3">4.扩展学习部分</h2><h2 id="5-总结-4">5.总结</h2><p>因为上午都有点事情，就把这两天下午的学习内容放一天了，这两天下午的学习内容是有点难度的，而且内容比较多，从热部署，配置，测试，数据层结局问题，和整合第三方技术。在数据层那边难度比较大，重点在数据层和整合第三方技术，，数据层课件分了两部分，SQL和NOSQL，非关系和关系型的数据库，NOSQL比较简单，除了ES是有点难度的打算下次去专门回头看一下，也只讲了基本操作，SQL中数据源和持久化还是很有意思的，利用JdbcTemplate持久化，完成比较复杂的sql语句，也验证了我之前觉得MP虽然智能，但是在复杂的企业项目中，会用到复杂的SQL语句，肯定是有些要自己手敲sql的，学一暑假的MYSQL没白学。下次就结束整合第三方，开发篇也就完结了，就可以去做项目了，数据层还差一个ES没有看。自己试着用数据库技术，用自己之前比赛清洗的数据库清洗代码，放java中运行今天学习状态极佳，内容也比较多，因为自己擅长sql点，学习也有兴趣。</p><h1 id="10-24-Spring整合第三方技术">10.24 Spring整合第三方技术</h1><h2 id="1-头：日期、所学内容出处-13">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-13">2.所学内容概述</h2><h3 id="缓存">缓存</h3><p>缓存是一种介于数据永久存储介质与应用程序之间的数据临时存储介质，使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能。</p><h4 id="内置缓存">内置缓存</h4><p>就是一些数据可以临时放缓存中，Springboot提供了包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在服务器启动上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启缓存功能</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure><p>在业务层方法上面注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable(value=&quot;cacheSpace&quot;,key=&quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ehcache缓存">ehcache缓存</h4><p>坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外置缓存需要配置的 在yml文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ehcache</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">ehcache.xml</span></span><br></pre></td></tr></table></figure><p>ehcache的配置有独立的配置文件格式，因此还需要指定ehcache的配置文件，以便于读取相应配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\ehcache&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认缓存策略 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- diskPersistent：是否启用磁盘持久化--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maxElementsInMemory：最大缓存数量--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToLiveSeconds：最大存活时间--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- memoryStoreEvictionPolicy：缓存清除策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;smsCode&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Redis">Redis</h4><p>redis的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> <span class="string">//本地</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">key-prefix:</span> <span class="string">sms_</span></span><br><span class="line">      <span class="attr">cache-null-values:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="string">10s</span></span><br></pre></td></tr></table></figure><h4 id="j2cache缓存">j2cache缓存</h4><p>之前还有一种jet的整合方式，我觉得太麻烦，而且只能整合4种，所以就只记j2了。就以整合ehcache和redis</p><p>导入三个坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.4-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-spring-boot2-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置一级与二级缓存，并配置一二级缓存间数据传递方式，配置书写在名称为j2cache.properties的文件中。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1级缓存</span></span><br><span class="line"><span class="attr">j2cache.L1.provider_class</span> = <span class="string">ehcache</span></span><br><span class="line"><span class="attr">ehcache.configXml</span> = <span class="string">ehcache.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 2级缓存</span></span><br><span class="line"><span class="attr">j2cache.L2.provider_class</span> = <span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisProvider</span></span><br><span class="line"><span class="attr">j2cache.L2.config_section</span> = <span class="string">redis</span></span><br><span class="line"><span class="attr">redis.hosts</span> = <span class="string">localhost:6379</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 1级缓存中的数据如何到达二级缓存</span></span><br><span class="line"><span class="attr">j2cache.broadcast</span> = <span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy</span></span><br></pre></td></tr></table></figure><ol><li>j2cache是一个缓存框架，自身不具有缓存功能，它提供多种缓存整合在一起使用的方案</li><li>j2cache需要通过复杂的配置设置各级缓存，以及缓存之间数据交换的方式</li><li>j2cache操作接口通过CacheChannel实现</li></ol><h2 id="3-BUG点-3">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>运行 cache缓存的时候报错，报错点一直没找到，看报错信息是XM，这个没听过，把那两个XM的jar包注释掉也没有用，最后把yml的配置全改了，然后检查数据层的一些注解，把和XM有关的都去掉，BUG解决了，看到后面才知道XM类是外置的一直缓存，需要下载配置才能使用，pom文件中导入不了</p><p><img src="https://pic1.imgdb.cn/item/635d3ae716f2c2beb1ee91b1.png" alt="image-20221024183706622"></p><h2 id="4-扩展学习部分-4">4.扩展学习部分</h2><p>手机验证码案例 自定义校对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">//防止 出现开头是0然后变成整数后 数字不是六位</span></span><br><span class="line">    <span class="keyword">private</span> String [] patch = &#123;<span class="string">&quot;000000&quot;</span>,<span class="string">&quot;00000&quot;</span>,<span class="string">&quot;0000&quot;</span>,<span class="string">&quot;000&quot;</span>,<span class="string">&quot;00&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generator</span><span class="params">(String tele)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> tele.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">encryption</span> <span class="operator">=</span> <span class="number">20206666</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> hash ^ encryption;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        result = result ^ nowTime;</span><br><span class="line">        <span class="type">long</span> <span class="variable">code</span> <span class="operator">=</span> result % <span class="number">1000000</span>;</span><br><span class="line">        code = code &lt; <span class="number">0</span> ? -code : code;</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeStr</span> <span class="operator">=</span> code + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> codeStr.length();</span><br><span class="line">        <span class="keyword">return</span> patch[len] + codeStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;smsCode&quot;,key=&quot;#tele&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String tele)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-总结-5">5.总结</h2><p>今天学习的学习内容一般，内容比较多，主要是整合第三方的缓存部分，然后附带了点任务，出了一个小BUG，然后自己手动解决了，基本都是看文档，不知道具体用法的时候看视频去，然后试着敲一下，请求的时候有点云里雾里。跟着老师知道具体的请求，手敲了一遍简单的手机验证码，福袋啦Quartz任务，看了一会视频，还没明白是个什么事，明天就能结束Boot，后天可以做项目了。今天的学习状态不错，比较集中，看文档也看的下去，效率很高。</p><h1 id="10-25-开发篇完结">10.25 开发篇完结</h1><h2 id="1-头：日期、所学内容出处-14">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-14">2.所学内容概述</h2><h3 id="任务Task">任务Task</h3><p>课件中还有一个Quartz，但是感觉很麻烦不太实用，现在主流的好像是Task</p><p>也就是定时任务，要做定时任务要容器有这功能，然后定时执行什么任务直接告诉对应的bean什么时间执行就行了</p><p>开启定时任务功能，在引导类上开启定时任务功能的开关，使用注解@EnableScheduling</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启定时任务功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot22TaskApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot22TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤②</strong>：定义Bean，在对应要定时执行的操作上方，使用注解@Scheduled定义执行的时间，执行时间的描述方式还是cron表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/1 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; :spring task run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对定时任务进行相关配置，可以通过配置文件进行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">   <span class="attr">scheduling:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">       <span class="attr">size:</span> <span class="number">1</span><span class="comment"># 任务调度线程池大小 默认 1</span></span><br><span class="line">      <span class="attr">thread-name-prefix:</span> <span class="string">ssm_</span>      <span class="comment"># 调度线程名称前缀 默认 scheduling-      </span></span><br><span class="line">        <span class="attr">shutdown:</span></span><br><span class="line">          <span class="attr">await-termination:</span> <span class="literal">false</span><span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line">          <span class="attr">await-termination-period:</span> <span class="string">10s</span><span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>spring task需要使用注解@EnableScheduling开启定时任务功能</li><li>为定时执行的的任务设置执行周期，描述方式cron表达式</li></ol><h3 id="邮件">邮件</h3><p>发邮件是java程序的基本操作，springboot整合javamail其实就是简化开发。发送邮件方是需要配置的，需要在自己的邮箱设置中找到密码SMTP的。收件方只需要一个邮箱地址就行了</p><h3 id="消息">消息</h3><p>消息和之前用java做过的一个交互差不多，现在主要是异步消息，同步消息作用不大。</p><p>现在比较主流的RocketMQ，只要给要发送消息的方法挂上ROcketMQ的注解就可以了，还是比较简单的，步骤就不列出来了。</p><ol><li>springboot整合RocketMQ使用RocketMQTemplate对象作为客户端操作消息队列</li><li>操作RocketMQ需要配置RocketMQ服务器地址，默认端口9876</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@RocketMQMessageListener</li></ol><h3 id="监控">监控</h3><p>监控这边比较重要的是可视化监控平台</p><p>需要先看开启服务器 加入配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在引导类上添加注解@EnableAdminServer，声明当前应用启动后作为SpringBootAdmin的服务器使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot25AdminServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot25AdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这样就能进去admin的页面了</p><p>然后就是开启一个自己的客户端 客户端比较简单导入坐标</p><p>导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致，并将其配置成web工程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​然后需要在yml配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 能显示health 很多详细信息</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>页面大致内容如下 功能很多 回头可以详细的一个一个功能的使用</p><p><img src="https://pic1.imgdb.cn/item/635d3f7616f2c2beb1007b7e.png" alt="image-20221025155656877"></p><h2 id="3-BUG点-4">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>一直报错检查代码也没什么问题，提示是什么命名原因，但是自己根本没有dataSource这个名字，   后面重新开了一个模块，代码没改变没有报错信息了。之前的Spring是快速模块，现在换成2.4.1了，应该是模块的原因阿吧</p><p><img src="https://pic1.imgdb.cn/item/635d3f7916f2c2beb100882b.png" alt="image-20221025091629027"></p><p>发送消息如下</p><p><img src="https://pic1.imgdb.cn/item/635d3f7a16f2c2beb1008ac6.png" alt="image-20221025094450547"></p><h2 id="4-扩展学习部分-5">4.扩展学习部分</h2><h3 id="发送邮件和附件-超链接和图片">发送邮件和附件 超链接和图片</h3><p>导入springboot整合javamail的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>步骤②</strong>：配置邮箱的登录信息 这里是发送方 发送方邮箱需要开启服务 一般都在设置中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spring:</span></span><br><span class="line"><span class="comment">#  mail:</span></span><br><span class="line"><span class="comment">#    host: smtp.qq.com</span></span><br><span class="line"><span class="comment">#    username: 1452582554@qq.com</span></span><br><span class="line"><span class="comment">#    password: vxccjkvvlrokgigh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">asrl825067@163.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">EPEKPEWBZXLAMCYL</span></span><br></pre></td></tr></table></figure><p>写一个业务层的代码就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMailServiceImpl2</span> <span class="keyword">implements</span> <span class="title class_">SendMailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">&quot;2272917904@qq.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> <span class="string">&quot;asrl825067@163.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;测试邮件&quot;</span>;</span><br><span class="line">    <span class="comment">//图片和对应的超链接</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;&lt;img src=&#x27;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.soogif.com%2FV2a5qLlX2gFNIHXSvMrmUjyWxHdb4XXQ.gif&amp;refer=http%3A%2F%2Fimg.soogif.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1669274278&amp;t=7f8449969831195ab78eea7408740099&#x27;/&gt;&lt;a href=&#x27;https://www.itcast.cn&#x27;&gt;点开有惊喜&lt;/a&gt;&quot;</span>;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">            <span class="type">MimeMessageHelper</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage,<span class="literal">true</span>);</span><br><span class="line">            message.setFrom(to+<span class="string">&quot;(u7u7)&quot;</span>);</span><br><span class="line">            message.setTo(from);</span><br><span class="line">            message.setSubject(subject);</span><br><span class="line">            message.setText(context,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加附件</span></span><br><span class="line"><span class="comment">//            File f1 = new File(&quot;D:\\CC\\SpringBootCode\\springboot_mail_test\\target\\springboot_mail_test-0.0.1-SNAPSHOT.jar&quot;);</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\SpringBootCode\\springboot_mail_test\\src\\main\\resources\\cc.png&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            message.addAttachment(f1.getName(),f1);</span></span><br><span class="line">            message.addAttachment(<span class="string">&quot;最zz的cc.png&quot;</span>,f2);</span><br><span class="line"></span><br><span class="line">            javaMailSender.send(mimeMessage);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试点一直调用接口的sendMail的方法就行了需要注入的</p><h2 id="5-总结-6">5.总结</h2><p>今天的内容算是一个结尾吧，然后把前面开发篇的部分又复习了一遍，开发实用篇到这里就暂时完结了，在开发实用篇中 都是大量的第三方技术的整合方案，选择的方案都是市面上比较流行的常用方案。今天也是把整个Boot篇做了个小总结吧，哪些注解哪些东西常用的也都记住了，明天开始做瑞吉外卖的项目，今天自己修改了一下用javamail发消息的代码， 能循环发消息和附件，但是会被官方拉黑。也明白平常的一些垃圾邮件是怎么发送的，利用随机值，发垃圾邮件，他们可能有不被官方拉黑的方法。监控那里的服务器还是很有意思的，能看页面的请求和次数还有自己代码的类啥的，功能很强，使用起来也方便，开启一个服务器，给自己要监控的代码，导入一个坐标，复制一个spring配置就好了。</p><h1 id="10-26-瑞吉外卖-DAY1">10.26 瑞吉外卖 DAY1</h1><h2 id="1-头-所学内容出处">1.头 所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-15">2.所学内容概述</h2><h3 id="了解软件开发整体介绍">了解软件开发整体介绍</h3><p><img src="https://pic1.imgdb.cn/item/635d3f7e16f2c2beb1009a24.png" alt="img"></p><p><img src="https://pic1.imgdb.cn/item/635d3f8116f2c2beb100a4f8.png" alt="img"></p><h3 id="开发环境的搭建">开发环境的搭建</h3><h4 id="数据库环境的搭建">数据库环境的搭建</h4><p>课件提供了sql文件，可以直接source 导入mysql中 早就习以为常了</p><h4 id="Maven项目创建">Maven项目创建</h4><p>也很简单，普通的maven项目，复习导入坐标和yaml文件，因为不是直接创建的springBoot 项目，所以要创建Boot程序入口</p><h4 id="后台登录开发">后台登录开发</h4><p>先创建一个实体类和mapper以及service</p><p>再封装一个R作为返回的结果类</p><p>将登录方法 以及返回值写入controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;<span class="comment">//接收前端的json数据,这个json数据是在请求体中的</span></span><br><span class="line"><span class="comment">//        1、将页面提交的密码password进行md5加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();<span class="comment">//从前端用户获取到登录时候的密码</span></span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes()); <span class="comment">//加密</span></span><br><span class="line"><span class="comment">//        2、根据页面提交的用户名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;(); <span class="comment">//泛型需要填写Employee</span></span><br><span class="line">        queryWrapper.eq(Employee::getUsername,employee.getUsername()); <span class="comment">//eq用lambda::</span></span><br><span class="line">        <span class="comment">//在设计数据库的时候我们对username使用了唯一索引,所以这里可以使用getOne方法</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"><span class="comment">//        3、如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4、密码比对，如果不一致则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (! emp.getPassword().equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户已被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6、登录成功，将员工id存入Session并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">        <span class="comment">//把从数据库中查询到的用户返回出去</span></span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//员工退出</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">//清除Session中当前登录员工的id</span></span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后台系统退出功能">后台系统退出功能</h4><p>这个比较简单 点击按钮退出到登陆页面就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 退出功能</span></span><br><span class="line"><span class="comment">    * ①在controller中创建对应的处理方法来接受前端的请求，请求方式为post；</span></span><br><span class="line"><span class="comment">    * ②清理session中的用户id</span></span><br><span class="line"><span class="comment">    * ③返回结果（前端页面会进行跳转到登录页面）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">       <span class="comment">//清理session中的用户id</span></span><br><span class="line">       request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-5">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>之前的登陆功能是有个bug的，像之前web的一个登陆案例，直接输入地址的话，就可以跳过登录页面，达到不登录就能进入需要登录的 页面，之前web是用过滤器的，现在用拦截器解决这个小bug</p><p>要先在启动项上面加入@ServletComponentScan注解 识别bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登陆</span></span><br><span class="line"><span class="comment"> * filterName过滤器名字</span></span><br><span class="line"><span class="comment"> * urlPatterns拦截的请求，这里是拦截所有的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;LongCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径  比如静态资源(静态页面我们不需要拦截,因为此时的静态页面是没有数据的)</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        log.info(<span class="string">&quot;拦截到的请求:&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check)&#123;</span><br><span class="line">            <span class="comment">//对请求进行放行</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">employee</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>); <span class="comment">//用户登录状态</span></span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为:&#123;&#125;&quot;</span>,employee);</span><br><span class="line">            <span class="comment">//对请求进行放行</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据,具体响应什么数据，看前端的需求，然后前端会根据登陆状态做页面跳转</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url: urls)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扩展学习部分-6">4.扩展学习部分</h2><h2 id="5-总结-7">5.总结</h2><p>刚进入瑞吉外卖，下载了一些资料，没找到老师的官方的ppt文档，就CSDN去搜的，第一天的任务不是很难，主要是帮助回看一下springboot的部分，算是小复习，就做了一个登录和退出，还有个登录的小BUG，基本都是后台的代码，前端的一些功能都做好了，后端加bean，调用一下响应和请求就好了，比较基础的还是。学习方法就是看老师过一遍功能如何实现，如何测试，然后就自己试着去敲，慢慢做出来，这样学，进度可能会有些慢，但是能搞清楚每一块是干嘛的，每个注解和类的作用和功能。</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Git </tag>
            
            <tag> SSM框架 </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> MybatPlus </tag>
            
            <tag> Spring </tag>
            
            <tag> 月笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据总结</title>
      <link href="/posts/22conclusion09.html"/>
      <url>/posts/22conclusion09.html</url>
      
        <content type="html"><![CDATA[<h1 id="大数据省赛总结">大数据省赛总结</h1><p>​前段时间大数据省赛结束，自己负责的部分是数据清洗，我负责的部分，分值占比较大，除去公共的15分，自己负责的部分分值将近占比50%。所以自己这部分对整体的影响是比较大的。自己负责的部分，模块B和C基本没什么问题，因为比赛的数据是和数据平台练习的数据一样的，暑假练习过很多遍了。感觉出问题的点应该在后面综合分析，综合分析之前都没做过，临近比赛那两天看了一下，也没记的很清楚，所以觉得综合分析那边应该是失分了。模块C指标计算最后一题，是看连续两月购买订单的，当时的比赛氛围比较紧张，虽然最后一题我给自己留了充足的时间去做，还是没有打开自己的思路，我认为比赛评分是只看截图的，就用了一种投机取巧的方法，做了出来，如果正儿八经的写的话，可能又要浪费很多时间，怕留下的时间太紧张，所以这题的正确率不太敢确保，再前面基本没什么问题。</p><p>​对于比赛过程的话，大学没有参加过这么正式比赛的经验，比赛过程中刚开始也很紧张，看到卷子以后，发现数据比较熟悉，稍微缓和了一些， 基本没什么磕磕绊绊，但是还是比平常练习的速度慢了很多，场地倒是还适应的。这次也能了解到正式比赛的过程是什么样子的，和一些会埋坑的地方，可能会搞你配置文件什么的，所以在下次比赛之前，一些可能会有坑的地方，要去背起来，这次给了你pom.xml文件下次可能就不给了，要以防万一，比赛前要问清楚的，自己平常也需要多注意一下。</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据9月笔记</title>
      <link href="/posts/2d36b063.html"/>
      <url>/posts/2d36b063.html</url>
      
        <content type="html"><![CDATA[<h1 id="9-1-9-3-数据清洗和指标计算">9.1-9.3 数据清洗和指标计算</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述">2.所学内容概述</h2><p>数据清洗 查询导入</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">Calendar</span>, <span class="type">Date</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">subjectThree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLIP</span> = <span class="string">&quot;192.168.23.89&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">DATABASE</span> = <span class="string">&quot;shtd_store&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLDBURL</span> = <span class="string">&quot;jdbc:mysql://&quot;</span> + <span class="type">MYSQLIP</span> + <span class="string">&quot;:3306/&quot;</span> + <span class="type">DATABASE</span> + <span class="string">&quot;?characterEncoding=UTF-8&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLDRIVER</span> = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLUSER</span> = <span class="string">&quot;root&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLPASSWORD</span> = <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> builder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = builder.appName(<span class="string">&quot;subjectThree&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> calendar: <span class="type">Calendar</span> = <span class="type">Calendar</span>.getInstance</span><br><span class="line">      calendar.add(<span class="type">Calendar</span>.<span class="type">DATE</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> date: <span class="type">Date</span> = calendar.getTime</span><br><span class="line">    <span class="keyword">val</span> dateStr: <span class="type">String</span> = sdf.format(date)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    对于dwd层</span></span><br><span class="line">    <span class="comment">//新版spark对于数据格式转换有强制要求，可采取旧版的</span></span><br><span class="line">    spark.sql(<span class="string">&quot; set spark.sql.storeAssignmentPolicy=LEGACY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义函数 将-变空</span></span><br><span class="line"><span class="comment">//    val makeDT: String =&gt; String = (date: String) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//      date.replaceAll(&quot;-&quot;, &quot;&quot;)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    spark.udf.register(&quot;makeDt&quot;, makeDT(_: String)) //sparksql注册匿名函数 makeDt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态分区设置</span></span><br><span class="line">    spark.sql(<span class="string">&quot;set hive.exec.dynamic.partition=true&quot;</span>)</span><br><span class="line">    spark.sql(<span class="string">&quot;set hive.exec.dynamic.partition.mode=nonstrict&quot;</span>)</span><br><span class="line">    spark.sql(<span class="string">&quot;set hive.exec.max.dynamic.partitions=50000&quot;</span>)</span><br><span class="line">    spark.sql(<span class="string">&quot;set hive.exec.max.dynamic.partitions.pernode=10000&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * from_unixtime 可以把时间戳格式的时间，转化为年月日时分秒格式的时间。 默认是2019-05-02 21:19:59</span></span><br><span class="line"><span class="comment">     * 第二个参数是设置格式的</span></span><br><span class="line"><span class="comment">     * unix_timestamp(concat(orderdate,&quot; 00:00:00&quot;))</span></span><br><span class="line"><span class="comment">     * concat 把原本orderdate列 1996-01-02 这种格式的 拼接 变成1996-01-02 00:00:00</span></span><br><span class="line"><span class="comment">     * unix_timestamp将拼接好的格式转换为时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ！！！！！！！</span></span><br><span class="line"><span class="comment">     * from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd HH:mm:ss&#x27;) hive版本已经弃用了 会报错改成</span></span><br><span class="line"><span class="comment">     * date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="comment">     * date_format()修改日期格式</span></span><br><span class="line"><span class="comment">     * select date_format(&#x27;2015-04-08 10:10:01&#x27;, &#x27;yyyy-MM&#x27;);</span></span><br><span class="line"><span class="comment">     * 2015-04</span></span><br><span class="line"><span class="comment">     * current_timestamp 直接获取当前日期时间 2022-08-31 10:55:37.551 到毫秒的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.dim_customer partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">        |select custkey,name,address,nationkey,</span></span><br><span class="line"><span class="string">        |phone,acctbal,mktsegment,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">        |from ods.customer</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_part partition (etldate=$dateStr)</span></span><br><span class="line"><span class="string">         |select partkey,name,mfgr,brand,type,size,container,retailprice,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.part</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_nation partition (etldate=$dateStr)</span></span><br><span class="line"><span class="string">         |select nationkey,name,regionkey,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.nation</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.dim_region partition (etldate=$dateStr)</span></span><br><span class="line"><span class="string">        |select regionkey,name,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">        |from ods.region</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |select orderkey,custkey,orderstatus,totalprice,</span></span><br><span class="line"><span class="string">         |from_unixtime(unix_timestamp(concat(orderdate,&quot;</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;))) as myorderdate,</span></span><br><span class="line"><span class="string">         |orderpriority,clerk,shippriority,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),etldate</span></span><br><span class="line"><span class="string">         |from ods.orders</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createOrReplaceTempView(<span class="string">&quot;my_orders_test&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.fact_orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select * from my_orders_test</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //删除分区   需删除ods.orders中的分区，仅保留最近的三个分区</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * alter table orders drop partition (etldate&lt;=&#x27;19980730&#x27;);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    val partitions: Array[String] = spark.sql(&quot;show partitions ods.orders&quot;).collect.filter((x: Row) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//      null != x &amp;&amp; x.length != 0</span></span><br><span class="line"><span class="comment">//    &#125;).map((x: Row) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//      println(&quot;zheshi____________________________分区：&quot; + x)</span></span><br><span class="line"><span class="comment">//      x.toString().replace(&quot;]&quot;, &quot;&quot;)</span></span><br><span class="line"><span class="comment">//        .replace(&quot;[&quot;, &quot;&quot;).split(&#x27;=&#x27;)(1)</span></span><br><span class="line"><span class="comment">//    &#125;).sortBy[Int]((x: String) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//      x.toInt</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    if (partitions.length &gt; 3) &#123;</span></span><br><span class="line"><span class="comment">//      for (index &lt;- 0 until partitions.length - 3) &#123;</span></span><br><span class="line"><span class="comment">//      spark.sql(s&quot;ALTER TABLE ods.orders DROP PARTITION (etldate=&#x27;$&#123;partitions(index)&#125;&#x27;)&quot;)</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.fact_lineitem partition (etldate)</span></span><br><span class="line"><span class="string">         |select</span></span><br><span class="line"><span class="string">         |orderkey,partkey,suppkey,lienumber,quantity,extendedprice,discount,</span></span><br><span class="line"><span class="string">         |tax,returnflag,linestatus,</span></span><br><span class="line"><span class="string">         |from_unixtime(unix_timestamp(concat(shipdate,&quot;</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;)),&#x27;yyyy-MM-dd HH:mm:ss&#x27;) as myshopdate,</span></span><br><span class="line"><span class="string">         |from_unixtime(unix_timestamp(concat(commentdate,&quot;</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;)),&#x27;yyyy-MM-dd HH:mm:ss&#x27;) as mycommitdate,</span></span><br><span class="line"><span class="string">         |from_unixtime(unix_timestamp(concat(receiptdate,&quot;</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;)),&#x27;yyyy-MM-dd HH:mm:ss&#x27;) as myreceiptdate,</span></span><br><span class="line"><span class="string">         |shipstruct,shipmode,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),etldate</span></span><br><span class="line"><span class="string">         |from  ods.lineitem</span></span><br><span class="line"><span class="string">      &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指标计算</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">指标数据计算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">indicatorCalculation</span> </span>&#123;</span><br><span class="line">  <span class="comment">//设置mysql的地址参数表格</span></span><br><span class="line"><span class="comment">//  val MYSQLIP = &quot;192.168.23.89&quot;</span></span><br><span class="line"><span class="comment">//  val DATABASE = &quot;shtd_store&quot;</span></span><br><span class="line"><span class="comment">//  val MYSQLDBURL = &quot;jdbc:mysql://&quot; + MYSQLIP + &quot;:3306/&quot; + DATABASE + &quot;?characterEncoding=UTF-8&quot;</span></span><br><span class="line"><span class="comment">//  val MYSQLDRIVER = &quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line"><span class="comment">//  val MYSQLUSER = &quot;root&quot;</span></span><br><span class="line"><span class="comment">//  val MYSQLPASSWORD = &quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> builder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = builder.appName(<span class="string">&quot;indicatorCalculation&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接mysql</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="comment">//    spark.read.format(&quot;jdbc&quot;)</span></span><br><span class="line"><span class="comment">//      .option(&quot;url&quot;, MYSQLDBURL)</span></span><br><span class="line"><span class="comment">//      .option(&quot;driver&quot;, MYSQLDRIVER)</span></span><br><span class="line"><span class="comment">//      .option(&quot;user&quot;, MYSQLUSER)</span></span><br><span class="line"><span class="comment">//      .option(&quot;password&quot;, MYSQLPASSWORD)</span></span><br><span class="line"><span class="comment">//      .option(&quot;dbtable&quot;, &quot;nationeverymonth&quot;).load().createTempView(&quot;mysql_nationeverymonth&quot;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    spark.read.format(&quot;jdbc&quot;)</span></span><br><span class="line"><span class="comment">//      .option(&quot;url&quot;, MYSQLDBURL)</span></span><br><span class="line"><span class="comment">//      .option(&quot;driver&quot;, MYSQLDRIVER)</span></span><br><span class="line"><span class="comment">//      .option(&quot;user&quot;, MYSQLUSER)</span></span><br><span class="line"><span class="comment">//      .option(&quot;password&quot;, MYSQLPASSWORD)</span></span><br><span class="line"><span class="comment">//      .option(&quot;dbtable&quot;, &quot;usercontinueorder&quot;).load().createTempView(&quot;mysql_usercontinueorder&quot;)</span></span><br><span class="line"><span class="comment">//    //    对于dwd层</span></span><br><span class="line">    <span class="comment">//新版spark对于数据格式转换有强制要求，可采取旧版的</span></span><br><span class="line">    spark.sql(<span class="string">&quot; set spark.sql.storeAssignmentPolicy=LEGACY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一、每人每天下单的数量和下单的总金额 存入dws层的customer_consumption_day_aggr表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |with a as ( --获取orders表 需要的信息 作为表a</span></span><br><span class="line"><span class="string">        |select cust_key,</span></span><br><span class="line"><span class="string">        |       total_price,</span></span><br><span class="line"><span class="string">        |       date_format(TO_DATE(order_date), &#x27;yyyy&#x27;) as year,</span></span><br><span class="line"><span class="string">        |       date_format(TO_DATE(order_date), &#x27;MM&#x27;)   as month,</span></span><br><span class="line"><span class="string">        |       date_format(TO_DATE(order_date), &#x27;dd&#x27;)   as day</span></span><br><span class="line"><span class="string">        |from dwd.fact_orders),</span></span><br><span class="line"><span class="string">        |b as ( -- 每人每天的信息</span></span><br><span class="line"><span class="string">        |       select fo.cust_key as keys,</span></span><br><span class="line"><span class="string">        |               max(name) as name,</span></span><br><span class="line"><span class="string">        |               a.year,a.month,a.day</span></span><br><span class="line"><span class="string">        |       from dwd.fact_orders fo</span></span><br><span class="line"><span class="string">        |               left join dwd.dim_customer cust on cust.cust_key=fo.cust_key</span></span><br><span class="line"><span class="string">        |               left join a on a.cust_key=fo.cust_key</span></span><br><span class="line"><span class="string">        |               group by fo.cust_key,year,month,day),</span></span><br><span class="line"><span class="string">        |c as ( -- 每月的订单数 和 金额</span></span><br><span class="line"><span class="string">        |       select sum(total_price) as totalconsumption,</span></span><br><span class="line"><span class="string">        |              count(1)         as totalorder,</span></span><br><span class="line"><span class="string">        |              year,month</span></span><br><span class="line"><span class="string">        |       from a</span></span><br><span class="line"><span class="string">        |       group by year,month)</span></span><br><span class="line"><span class="string">        |select keys,name,</span></span><br><span class="line"><span class="string">        |       totalconsumption,</span></span><br><span class="line"><span class="string">        |       totalorder,</span></span><br><span class="line"><span class="string">        |       b.year,b.month,b.day</span></span><br><span class="line"><span class="string">        |from b</span></span><br><span class="line"><span class="string">        |left join c on b.month=c.month</span></span><br><span class="line"><span class="string">        |order by keys</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createOrReplaceTempView(<span class="string">&quot;my_aggr&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dws.customer_consumption_day_aggr</span></span><br><span class="line"><span class="string">        |select * from my_aggr</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-总结">3.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>这两天把任务书数据清洗的部分都做完了。前面数据清洗比较简单点，就是对列进行处理一下，转换日期什么的，也是去查了hive中的对日期处理的方式。from_unixtime  current_timestamp  date_format 这几个方法，之前使用的unix_timestamp是被淘汰了，我在hive中使用，会一直报错，还以为代码的问题，到后面搜到hive2是淘汰了，如果多条查询是会报错的，但是单独的使用就没有问题，我刚开始使用的时候，就只查了现在的时间，没报错，打jar包进去后就报错了，改成current就好了。</p><h1 id="9月5-数据-指标计算三">9月5 数据 指标计算三</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述-2">2.所学内容概述</h2><h3 id="做生省赛任务书2的指标计算第三题">做生省赛任务书2的指标计算第三题</h3><h2 id="3-根据概述分章节描述">3.根据概述分章节描述</h2><h3 id="SQL语句">SQL语句</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算出某年每个国家的平均消费额和所有国家平均消费额相比较结果</span></span><br><span class="line">   sql(</span><br><span class="line">     <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       |-- a 获得每个消费人的总消费额 以及信息</span></span><br><span class="line"><span class="string">       |with a as (select fo.cust_key,</span></span><br><span class="line"><span class="string">       |max(nation.nation_key) as nation_key,</span></span><br><span class="line"><span class="string">       |max(nation.name) as name ,</span></span><br><span class="line"><span class="string">       |sum(total_price) as total_price from fact_orders fo</span></span><br><span class="line"><span class="string">       |left join dim_customer cust on cust.cust_key=fo.cust_key</span></span><br><span class="line"><span class="string">       |left join dim_nation nation on  cust.nation_key=nation.nation_key</span></span><br><span class="line"><span class="string">       |group by fo.cust_key),</span></span><br><span class="line"><span class="string">       |--b 每个国家 人均消费</span></span><br><span class="line"><span class="string">       |b as (select nation_key as nationkey ,max(name) as name ,sum(total_price) as sumprice,count(1) as countperson,</span></span><br><span class="line"><span class="string">       |round(avg(total_price),2) as avgnationperson</span></span><br><span class="line"><span class="string">       |from a group by nation_key)</span></span><br><span class="line"><span class="string">       |select nationkey,name,round(avgnationperson,2),306980.73,(</span></span><br><span class="line"><span class="string">       |case when avgnationperson &gt; 306980.73 then &#x27;+&#x27;</span></span><br><span class="line"><span class="string">       | when avgnationperson = 306980.73 then &#x27;=&#x27;</span></span><br><span class="line"><span class="string">       | when avgnationperson &lt; 306980.73 then &#x27;-&#x27; end)</span></span><br><span class="line"><span class="string">       |from b</span></span><br><span class="line"><span class="string">       |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createOrReplaceTempView(<span class="string">&quot;my_nation_avg&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-BUG点">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>很久没写sql逻辑语句了</p><p>case 这里出现了BUG  BUG在另一台机器上 图片就不列出来了</p><p>出现问题的原因是case最后忘记加了end when之间是不需要加,的 之前也因为这个报错过</p><p>如果是判断是否为一个值或者一个字符等 case 属性 when 条件 这样的方式去做</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case when avgnationperson &gt; 306980.73 then &#x27;+&#x27;</span><br><span class="line">         when avgnationperson = 306980.73 then &#x27;=&#x27;</span><br><span class="line">         when avgnationperson &lt; 306980.73 then &#x27;-&#x27; end)</span><br></pre></td></tr></table></figure><h2 id="6-总结">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>这个任务超出了自己的目标太多， 本来想半个小时解决掉的，但是整了将近一天，问题就出现在，hive聚合函数这里的漏洞，刚开始打算利用join，把表公共部分都结合起来，结果发现数据多出了好几倍，原本是1条的，变成了9条多，网上搜是出现了笛卡尔积的问题，然后去解决，发现还是有问题，然后我查看了一下自己在dwd库中的表，发现都是三条，三种不同的分区，应该是之前运行jar包的时候，我以为是覆盖，结果分区是还在的，导致里面有三天清洗的数据， 重新把之前的表内数据都删了，重新打jar包，清洗，解决完这个问题，在第四列的时候，因为题目要求的是每个国家平均的，就不能进行分组，不然数据会出现问题。但是前面三列不分组是查找不出来的 。第四列是订单人均消费，也就是第四列每一行都是一样的才是最终效果，但是多行和一行，在hive中没有这种表格的整合方法(没找到),第二题问李昊，说spark里面有但是lit后面要跟常数。一想就把结果计算出来，然后直接打进去不就好了，输入的常数，hive会自动补齐。就用了这样的方式，才完成这个第三题。省赛也算过了一遍了，明天再自己全部做一下另外一个差不多的。</p><p>spark处理方法网址如下https://blog.csdn.net/manba_yqq/article/details/122019749?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166243159716782427468889%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=166243159716782427468889&amp;biz_id=&amp;utm_medium=distribute.pc_search_result.none-task-code-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-122019749-0-null-null.142^v46^control&amp;utm_term=sparksql%E4%B8%ADwithColumn</p><h1 id="9-6-9-7-任务书4">9.6-9.7 任务书4</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述-3">2.所学内容概述</h2><h3 id="省赛任务书4完成">省赛任务书4完成</h3><h3 id="省赛赛项规程">省赛赛项规程</h3><h2 id="3-根据概述分章节描述-2">3.根据概述分章节描述</h2><h3 id="赛项规程">赛项规程</h3><p>发现自己的部分分值权重和时间占了大部分</p><p>sql语句的熟练性就非常重要了</p><table><thead><tr><th><em><strong>*阶段*</strong></em></th><th><em><strong>*竞赛时间*</strong></em></th><th><em><strong>*分值权重*</strong></em></th></tr></thead><tbody><tr><td>大数据平台环境搭建</td><td>4小时</td><td>权重10%</td></tr><tr><td>离线数据抽取</td><td>权重15%</td><td></td></tr><tr><td>离线数据统计</td><td>权重20%</td><td></td></tr><tr><td>数据采集与实时计算</td><td>权重20%</td><td></td></tr><tr><td>数据可视化</td><td>权重20%</td><td></td></tr><tr><td>综合分析报告</td><td>权重10%</td><td></td></tr><tr><td>团队分工明确合理、操作规范、文明竞赛</td><td>权重5%</td><td></td></tr></tbody></table><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220906155330772.png" alt="image-20220906155330772"></p><p>数据抽取</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject4Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataChouQu</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> builder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = builder.appName(<span class="string">&quot;DataChouQu&quot;</span>)</span><br><span class="line">      .enableHiveSupport() <span class="comment">//config 设置动态分区的参数 开启动态分区支持</span></span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接到数据库 并给表格创建临时表名</span></span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;CUSTOMER&quot;</span>,<span class="string">&quot;mysql_customer&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;NATION&quot;</span>,<span class="string">&quot;mysql_nation&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;PART&quot;</span>,<span class="string">&quot;mysql_part&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;PARTSUPP&quot;</span>,<span class="string">&quot;mysql_partsupp&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;REGION&quot;</span>,<span class="string">&quot;mysql_region&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;SUPPLIER&quot;</span>,<span class="string">&quot;mysql_supplier&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;ORDERS&quot;</span>,<span class="string">&quot;mysql_orders&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;LINEITEM&quot;</span>,<span class="string">&quot;mysql_lineitem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.customer&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.customer partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_customer</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.nation&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.nation partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_nation</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.part&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.part partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_part</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.partsupp&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.partsupp partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_partsupp</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.region&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.region partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_region</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.supplier&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.supplier partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_supplier</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot; truncate table ods.orders&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求只取某年某月某日及之后的数据（包括某年某月某日）</span></span><br><span class="line"><span class="comment">     * ，根据ORDERS表中ORDERKEY作为增量字段（提示：对比MySQL和Hive中的表的ORDERKEY大小），</span></span><br><span class="line"><span class="comment">     * 只将新增的数据抽入，字段类型不变，同时添加动态分区，分区字段类型为String，</span></span><br><span class="line"><span class="comment">     * 且值为ORDERDATE字段的内容（ORDERDATE的格式为yyyy-MM-dd，分区字段格式为yyyyMMdd）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select a.*,date_format(orderdate,&#x27;yyyyMMdd&#x27;) from mysql_orders a</span></span><br><span class="line"><span class="string">        |where</span></span><br><span class="line"><span class="string">        |regexp_replace(a.orderdate,&quot;-&quot;,&quot;&quot;) &gt;= &#x27;19960909&#x27;</span></span><br><span class="line"><span class="string">        |and</span></span><br><span class="line"><span class="string">        |orderkey not in (select orderkey from ods.orders)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.lineitem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据LINEITEM表中orderkey作为增量字段，只将新增的数据抽入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.lineitem partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_lineitem</span></span><br><span class="line"><span class="string">        |where orderkey not in (select orderkey from ods.lineitem)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建连接mysql表格函数 --连接 参数</span></span><br><span class="line">    <span class="comment">//1.SparkSession提供连接 dbtable 连接到的表格 temporaryName创建临时表的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ConnectMysql</span></span>(spark:<span class="type">SparkSession</span>,dbtable:<span class="type">String</span>,temporaryName:<span class="type">String</span>):<span class="type">Unit</span> =&#123;</span><br><span class="line">      <span class="keyword">val</span> <span class="type">URL</span>=<span class="string">&quot;jdbc:mysql://192.168.23.89:3306/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user=<span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">      spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>,<span class="type">URL</span>)</span><br><span class="line">        . option(<span class="string">&quot;driver&quot;</span>,driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>,user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>,password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>,dbtable).load().createTempView(temporaryName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据清洗</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject4Test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataChouQu</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> builder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = builder.appName(<span class="string">&quot;DataChouQu&quot;</span>)</span><br><span class="line">      .enableHiveSupport() <span class="comment">//config 设置动态分区的参数 开启动态分区支持</span></span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接到数据库 并给表格创建临时表名</span></span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;CUSTOMER&quot;</span>,<span class="string">&quot;mysql_customer&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;NATION&quot;</span>,<span class="string">&quot;mysql_nation&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;PART&quot;</span>,<span class="string">&quot;mysql_part&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;PARTSUPP&quot;</span>,<span class="string">&quot;mysql_partsupp&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;REGION&quot;</span>,<span class="string">&quot;mysql_region&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;SUPPLIER&quot;</span>,<span class="string">&quot;mysql_supplier&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;ORDERS&quot;</span>,<span class="string">&quot;mysql_orders&quot;</span>)</span><br><span class="line">    <span class="type">ConnectMysql</span>(spark,<span class="string">&quot;LINEITEM&quot;</span>,<span class="string">&quot;mysql_lineitem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.customer&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.customer partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_customer</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.nation&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.nation partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_nation</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.part&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.part partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_part</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.partsupp&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.partsupp partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_partsupp</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.region&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.region partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_region</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.supplier&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.supplier partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_supplier</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot; truncate table ods.orders&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求只取某年某月某日及之后的数据（包括某年某月某日）</span></span><br><span class="line"><span class="comment">     * ，根据ORDERS表中ORDERKEY作为增量字段（提示：对比MySQL和Hive中的表的ORDERKEY大小），</span></span><br><span class="line"><span class="comment">     * 只将新增的数据抽入，字段类型不变，同时添加动态分区，分区字段类型为String，</span></span><br><span class="line"><span class="comment">     * 且值为ORDERDATE字段的内容（ORDERDATE的格式为yyyy-MM-dd，分区字段格式为yyyyMMdd）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select a.*,date_format(orderdate,&#x27;yyyyMMdd&#x27;) from mysql_orders a</span></span><br><span class="line"><span class="string">        |where</span></span><br><span class="line"><span class="string">        |regexp_replace(a.orderdate,&quot;-&quot;,&quot;&quot;) &gt;= &#x27;19960909&#x27;</span></span><br><span class="line"><span class="string">        |and</span></span><br><span class="line"><span class="string">        |orderkey not in (select orderkey from ods.orders)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table ods.lineitem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据LINEITEM表中orderkey作为增量字段，只将新增的数据抽入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.lineitem partition (etldate=&#x27;20220906&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_lineitem</span></span><br><span class="line"><span class="string">        |where orderkey not in (select orderkey from ods.lineitem)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建连接mysql表格函数 --连接 参数</span></span><br><span class="line">    <span class="comment">//1.SparkSession提供连接 dbtable 连接到的表格 temporaryName创建临时表的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ConnectMysql</span></span>(spark:<span class="type">SparkSession</span>,dbtable:<span class="type">String</span>,temporaryName:<span class="type">String</span>):<span class="type">Unit</span> =&#123;</span><br><span class="line">      <span class="keyword">val</span> <span class="type">URL</span>=<span class="string">&quot;jdbc:mysql://192.168.23.89:3306/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user=<span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">      spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>,<span class="type">URL</span>)</span><br><span class="line">        . option(<span class="string">&quot;driver&quot;</span>,driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>,user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>,password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>,dbtable).load().createTempView(temporaryName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给可视化接口提供sql文件</p><p>查询\1. 表二:以订单表为主表， 显示各订单主要信息如下 :</p><p>地区,  国家, 客户名, 采购订单消费额,  供应商名称, 时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> region.name <span class="keyword">as</span> region_name,</span><br><span class="line">nation.name <span class="keyword">as</span> nation_name,</span><br><span class="line">cust.name <span class="keyword">as</span> cust_name,</span><br><span class="line"><span class="comment">--销售额</span></span><br><span class="line">t1.sumprice,</span><br><span class="line">supplier.name <span class="keyword">as</span> supplier_name,</span><br><span class="line">fo.order_date </span><br><span class="line"><span class="keyword">from</span> dwd.fact_orders fo</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dwd.dim_customer cust <span class="keyword">on</span> cust.cust_key<span class="operator">=</span>fo.cust_key</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dwd.dim_nation nation <span class="keyword">on</span> cust.nation_key<span class="operator">=</span>nation.nation_key</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dwd.dim_region region <span class="keyword">on</span> nation.region_key<span class="operator">=</span>region.region_key</span><br><span class="line"><span class="keyword">join</span> dwd.fact_lineitem lineitem <span class="keyword">on</span> lineitem.order_key<span class="operator">=</span>fo.order_key</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> ods.supplier supplier <span class="keyword">on</span> supplier.suppkey<span class="operator">=</span>lineitem.supp_key</span><br><span class="line"><span class="keyword">join</span> <span class="comment">--总订单额</span></span><br><span class="line">(<span class="keyword">select</span> cust2.cust_key,<span class="built_in">sum</span>(total_price) <span class="keyword">as</span> sumprice <span class="keyword">from</span> dwd.fact_orders fo2</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dwd.dim_customer cust2 <span class="keyword">on</span> cust2.cust_key<span class="operator">=</span> fo2.cust_key</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cust2.cust_key) t1 </span><br><span class="line"><span class="keyword">on</span> t1.cust_key<span class="operator">=</span>fo.cust_key</span><br></pre></td></tr></table></figure><p>将mysql表或者库导出 在mysql外面输入命令</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/HRYYZ$AQB5F4%7BJFG%D1YF1.png" alt="img"></p><h2 id="4-BUG点-2">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>看起来说是yyyyMMdd，仔细看了下，发现忘记给他加’'引号了，后面date_format参数应该是字符串</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220907090551269.png" alt="image-20220907090551269"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220907090239599.png" alt="image-20220907090239599"></p><h2 id="5-扩展学习部分">5.扩展学习部分</h2><h3 id="常用的hive函数总结-要背的">常用的hive函数总结 要背的</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * from_unixtime 可以把时间戳格式的时间，转化为年月日时分秒格式的时间。 默认是2019-05-02 21:19:59</span></span><br><span class="line"><span class="comment">     * 第二个参数是设置格式的</span></span><br><span class="line"><span class="comment">     * unix_timestamp(concat(orderdate,&quot; 00:00:00&quot;))</span></span><br><span class="line"><span class="comment">     * concat 把原本orderdate列 1996-01-02 这种格式的 拼接 变成1996-01-02 00:00:00</span></span><br><span class="line"><span class="comment">     * unix_timestamp将拼接好的格式转换为时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ！！！！！！！</span></span><br><span class="line"><span class="comment">     * from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd HH:mm:ss&#x27;) hive版本已经弃用了 会报错改成</span></span><br><span class="line"><span class="comment">     * date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="comment">     * date_format()修改日期格式</span></span><br><span class="line"><span class="comment">     * select date_format(&#x27;2015-04-08 10:10:01&#x27;, &#x27;yyyy-MM&#x27;);</span></span><br><span class="line"><span class="comment">     * 2015-04</span></span><br><span class="line"><span class="comment">     * current_timestamp 直接获取当前日期时间 2022-08-31 10:55:37.551 到毫秒的</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><h4 id="regexp-replace">regexp_replace</h4><p>替换字符的,三个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--使用</span><br><span class="line">regexp_replace(orderdate,&quot;-&quot;,&quot;&quot;)</span><br><span class="line">将orderdate字段中的-变成空\</span><br></pre></td></tr></table></figure><h4 id="date-format">date_format</h4><p>日期函数将日期格式化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select date_format(&#x27;2019-12-12&#x27;,&#x27;yyyyMMdd&#x27;);</span><br><span class="line">--20191212 注意点是第一个参数 必须是yyyy-MM-dd HH:mm:ss格式的</span><br></pre></td></tr></table></figure><h4 id="from-unixtime">from_unixtime</h4><p>转换<a href="https://so.csdn.net/so/search?q=%E6%97%B6%E9%97%B4%E6%88%B3&amp;spm=1001.2101.3001.7020">时间戳</a>为指定格式的时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select from_unixtime(cast(1567896035000 as int),&#x27;yyyy-MM-dd&#x27;);</span><br><span class="line">--2019-09-08</span><br><span class="line">默认有毫秒</span><br></pre></td></tr></table></figure><h4 id="current-timestamp">current_timestamp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--获取当前的时间</span><br><span class="line">select current_timestamp;</span><br><span class="line">--2022-09-07 15:58:36.102</span><br><span class="line">--可以用date_format转换格式</span><br><span class="line">select date_format(current_timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;);</span><br><span class="line">--2022-09-07 15:58:36</span><br></pre></td></tr></table></figure><h4 id="unix-timestamp">unix_timestamp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--空参 得到当前的时间戳</span><br><span class="line">--如果参数date满足yyyy-MM-dd HH:mm:ss形式，则可以直接unix_timestamp(string date) 得到参数对应的时间戳 </span><br><span class="line">--如果参数date不满足yyyy-MM-dd HH:mm:ss形式，则我们需要指定date的形式，在进行转换</span><br><span class="line">select unix_timestamp(&#x27;2009-03-20&#x27;)   --1237507200</span><br><span class="line">select unix_timestamp(&#x27;2009-03-20 00:00:00&#x27;, &#x27;yyyy-MM-dd HH:mm:ss&#x27;) --1237507200</span><br><span class="line">select unix_timestamp(&#x27;2009-03-20 00:00:01&#x27;, &#x27;yyyy-MM-dd HH:mm:ss&#x27;) --1237507201</span><br></pre></td></tr></table></figure><h4 id="truncate-table">truncate table</h4><p>清除表内的数据 结构保存的 自己练习最好每次都加上 防止打的jar包报错 但是之前都已经存在了 数据会重复</p><p>alter table ods.orders partition (etldate &lt; ‘19980731’)</p><h4 id="spark-submit">spark-submit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--master spark://192.168.23.89:7077 \</span><br><span class="line">--executor-memory 2g \</span><br><span class="line">--total-executor-cores 10 \</span><br><span class="line">--driver-memory 4G \</span><br><span class="line">--class BIGDATA.subject4Test.DataChouQu \</span><br><span class="line">--name DataChouQu \</span><br><span class="line">/opt/xxx.jar</span><br></pre></td></tr></table></figure><h2 id="6-总结-2">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>这两天对任务书做法，做了个总结的流程，以及常用方法的总结。先是大数据比赛的赛项规程，自己负责的部分，占了比赛很大一部分的分值。为了保证时间和正确率，所以去总结了这几天做任务书经常用到的hive函数，要背下来的。到时候比赛是都没有的。然后晚上帮可视化的提供了接口数据，也知道了mysql怎么导出来的命令。</p><h1 id="9-8-省赛模拟卷">9.8 省赛模拟卷</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述-4">2.所学内容概述</h2><p>模拟卷</p><h2 id="3-根据概述分章节描述-3">3.根据概述分章节描述</h2><h3 id="离线数据处理">离线数据处理</h3><p>数据抽取</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SubjectTwo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataChouQu2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> builder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = builder.appName(<span class="string">&quot;DataChouQu2&quot;</span>).enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    spark.sql(<span class="string">&quot;set spark.sql.storeAssignmentPolicy=LEGACY&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> date=<span class="string">&quot;20220907&quot;</span><span class="comment">//静态分区日期</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql表明绑定临时表</span></span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;CUSTOMER&quot;</span>,<span class="string">&quot;mysql_customer&quot;</span>)</span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;NATION&quot;</span>,<span class="string">&quot;mysql_nation&quot;</span>)</span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;PART&quot;</span>,<span class="string">&quot;mysql_part&quot;</span>)</span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;PARTSUPP&quot;</span>,<span class="string">&quot;mysql_partsupp&quot;</span>)</span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;REGION&quot;</span>,<span class="string">&quot;mysql_region&quot;</span>)</span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;SUPPLIER&quot;</span>,<span class="string">&quot;mysql_supplier&quot;</span>)</span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;ORDERS&quot;</span>,<span class="string">&quot;mysql_orders&quot;</span>)</span><br><span class="line">    localMysqlByMyself(spark,<span class="string">&quot;LINEITEM&quot;</span>,<span class="string">&quot;mysql_lineitem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//hive全量抽取的数据</span></span><br><span class="line">    hiveT6(spark,<span class="string">&quot;customer&quot;</span>)</span><br><span class="line">    hiveT6(spark,<span class="string">&quot;nation&quot;</span>)</span><br><span class="line">    hiveT6(spark,<span class="string">&quot;part&quot;</span>)</span><br><span class="line">    hiveT6(spark,<span class="string">&quot;partsupp&quot;</span>)</span><br><span class="line">    hiveT6(spark,<span class="string">&quot;region&quot;</span>)</span><br><span class="line">    hiveT6(spark,<span class="string">&quot;supplier&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增量抽取的两条</span></span><br><span class="line">    <span class="comment">//orders 取19970802以后的 动态分区</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select o.*,</span></span><br><span class="line"><span class="string">        |date_format(orderdate,&#x27;yyyyMMdd&#x27;)</span></span><br><span class="line"><span class="string">        |from mysql_orders o</span></span><br><span class="line"><span class="string">        |where regexp_replace(o.orderdate,&quot;-&quot;,&quot;&quot;) &gt;= &#x27;19970802&#x27;</span></span><br><span class="line"><span class="string">        |and</span></span><br><span class="line"><span class="string">        |orderkey not in</span></span><br><span class="line"><span class="string">        |(select orderkey from ods.orders)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //orderkey 增量字段 静态分区</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.lineitem partition (etldate=$date)</span></span><br><span class="line"><span class="string">        |select * from mysql_lineitem</span></span><br><span class="line"><span class="string">        |where orderkey not in</span></span><br><span class="line"><span class="string">        |(select orderkey from ods.lineitem)</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hiveT6</span></span>(spark: <span class="type">SparkSession</span>,hiveName:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      spark.sql(</span><br><span class="line">        <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">          |insert overwrite table ods.$hiveName partition (etldate=$date)</span></span><br><span class="line"><span class="string">          |select * from mysql_$hiveName</span></span><br><span class="line"><span class="string">          |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">localMysqlByMyself</span></span>(<span class="type">Spark</span>:<span class="type">SparkSession</span>,mysqlName:<span class="type">String</span>,tempName:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      <span class="keyword">val</span> url=<span class="string">&quot;jdbc:mysql://192.168.23.89:3306/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user=<span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password=<span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="type">Spark</span>.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>,url)</span><br><span class="line">        .option(<span class="string">&quot;driver&quot;</span>,driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>,user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>,password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>,mysqlName)</span><br><span class="line">        .load().createTempView(tempName)</span><br><span class="line">    &#125;</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据清洗</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SubjectTwo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据清洗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataClear2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> builder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = builder.appName(<span class="string">&quot;DataChouQu2&quot;</span>).enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    spark.sql(<span class="string">&quot;set spark.sql.storeAssignmentPolicy=LEGACY&quot;</span>)</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line">    <span class="keyword">val</span> date=<span class="string">&quot;20220907&quot;</span> <span class="comment">//分区</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table dwd.dim_customer&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.dim_customer partition (etldate=$date)</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |custkey,name,address,nationkey,phone,acctbal,mktsegment,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">        |from ods.customer</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table dwd.dim_part&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_part partition (etldate=$date)</span></span><br><span class="line"><span class="string">         |select</span></span><br><span class="line"><span class="string">         |partkey,name,mfgr,brand,type,size,container,retailprice,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.part</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table dwd.dim_nation&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_nation partition (etldate=$date)</span></span><br><span class="line"><span class="string">         |select</span></span><br><span class="line"><span class="string">         |nationkey,name,regionkey,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.nation</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table dwd.dim_region&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_region partition (etldate=$date)</span></span><br><span class="line"><span class="string">         |select</span></span><br><span class="line"><span class="string">         |regionkey,name,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.region</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table dwd.fact_orders&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.fact_orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |orderkey,custkey,orderstatus,totalprice,</span></span><br><span class="line"><span class="string">        |from_unixtime(unix_timestamp(concat(orderdate,&quot; 00:00:00&quot;)),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |orderpriority,clerk,shippriority,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&quot;yyyy-MM-dd HH:mm:ss&quot;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&quot;yyyy-MM-dd HH:mm:ss&quot;),</span></span><br><span class="line"><span class="string">        |etldate</span></span><br><span class="line"><span class="string">        |from ods.orders</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"><span class="comment">//    alter table ods.orders drop partition (etldate &lt; &#x27;19980731&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table dwd.fact_lineitem&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.fact_lineitem partition (etldate=$date)</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |orderkey,partkey,suppkey,lienumber,quantity,</span></span><br><span class="line"><span class="string">        |extendedprice,discount,tax,returnflag,linestatus,</span></span><br><span class="line"><span class="string">        |from_unixtime(unix_timestamp(concat(shipdate,&quot;</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;)),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |from_unixtime(unix_timestamp(concat(commentdate,&quot;</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;)),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |from_unixtime(unix_timestamp(concat(receiptdate,&quot;</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="string">&quot;)),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |shipstruct,shipmode,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,from_unixtime(unix_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">        |from ods.lineitem</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指标计算 花费时间的点</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SubjectTwo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataMath2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> builder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = builder.appName(<span class="string">&quot;DataChouQu2&quot;</span>).enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line">    loadMysql(spark,<span class="string">&quot;nationeverymonth&quot;</span>,<span class="string">&quot;mysql1&quot;</span>)</span><br><span class="line">    loadMysql(spark,<span class="string">&quot;nationavgcmp&quot;</span>,<span class="string">&quot;mysql2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;truncate table dws.customer_consumption_day_aggr&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |with t1 as (</span></span><br><span class="line"><span class="string">        |select fo.cust_key as cust_key,</span></span><br><span class="line"><span class="string">        |cust.name as name,</span></span><br><span class="line"><span class="string">        |total_price,</span></span><br><span class="line"><span class="string">        |date_format(to_date(order_date),&#x27;yyyy&#x27;) as year,</span></span><br><span class="line"><span class="string">        |date_format(to_date(order_date),&#x27;MM&#x27;) as month,</span></span><br><span class="line"><span class="string">        |date_format(to_date(order_date),&#x27;dd&#x27;) as day</span></span><br><span class="line"><span class="string">        |from dwd.fact_orders fo</span></span><br><span class="line"><span class="string">        |left join dwd.dim_customer cust on cust.cust_key=fo.cust_key)</span></span><br><span class="line"><span class="string">        |select cust_key,max(name),sum(total_price),count(1),year,month,day</span></span><br><span class="line"><span class="string">        |from t1</span></span><br><span class="line"><span class="string">        |group by t1.cust_key,name,year,month,day</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createTempView(<span class="string">&quot;sub1&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dws.customer_consumption_day_aggr</span></span><br><span class="line"><span class="string">        |select * from sub1</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |with t1 as (</span></span><br><span class="line"><span class="string">        |select cust_key,</span></span><br><span class="line"><span class="string">        |sum(totalconsumption) as sumprice,</span></span><br><span class="line"><span class="string">        |count(1) as countprice,</span></span><br><span class="line"><span class="string">        |year,month from dws.customer_consumption_day_aggr</span></span><br><span class="line"><span class="string">        |group by cust_key,year,month),</span></span><br><span class="line"><span class="string">        |t2 as (</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |ccda.cust_key,</span></span><br><span class="line"><span class="string">        |ccda.cust_name,</span></span><br><span class="line"><span class="string">        |nation.nation_key,</span></span><br><span class="line"><span class="string">        |nation.name as nation_name,</span></span><br><span class="line"><span class="string">        |region.region_key,</span></span><br><span class="line"><span class="string">        |region.name as region_name,</span></span><br><span class="line"><span class="string">        |t1.sumprice as totalconsumption,</span></span><br><span class="line"><span class="string">        |t1.countprice as totalorder,</span></span><br><span class="line"><span class="string">        |t1.year,t1.month</span></span><br><span class="line"><span class="string">        |from dws.customer_consumption_day_aggr ccda</span></span><br><span class="line"><span class="string">        |left join dwd.dim_customer cust on ccda.cust_key=cust.cust_key</span></span><br><span class="line"><span class="string">        |left join dwd.dim_nation nation on cust.nation_key=nation.nation_key</span></span><br><span class="line"><span class="string">        |left join dwd.dim_region region on nation.region_key=region.region_key</span></span><br><span class="line"><span class="string">        |join t1 on t1.cust_key=ccda.cust_key</span></span><br><span class="line"><span class="string">        |group by ccda.cust_key,</span></span><br><span class="line"><span class="string">        |ccda.cust_name,</span></span><br><span class="line"><span class="string">        |nation.nation_key,</span></span><br><span class="line"><span class="string">        |nation.name,</span></span><br><span class="line"><span class="string">        |region.region_key,</span></span><br><span class="line"><span class="string">        |region.name ,</span></span><br><span class="line"><span class="string">        |t1.sumprice,</span></span><br><span class="line"><span class="string">        |t1.countprice,</span></span><br><span class="line"><span class="string">        |t1.year,t1.month)</span></span><br><span class="line"><span class="string">        |select t2.*,rank() over(partition by t2.cust_key order by totalconsumption,totalorder,month desc)</span></span><br><span class="line"><span class="string">        |from t2</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createTempView(<span class="string">&quot;sub2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table mysql1</span></span><br><span class="line"><span class="string">        |select * from sub2</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |-- a 获得每个消费人的总消费额 以及信息</span></span><br><span class="line"><span class="string">        |with a as (select fo.cust_key,</span></span><br><span class="line"><span class="string">        |max(nation.nation_key) as nation_key,</span></span><br><span class="line"><span class="string">        |max(nation.name) as name ,</span></span><br><span class="line"><span class="string">        |sum(total_price) as total_price from dwd.fact_orders fo</span></span><br><span class="line"><span class="string">        |left join dwd.dim_customer cust on cust.cust_key=fo.cust_key</span></span><br><span class="line"><span class="string">        |left join dwd.dim_nation nation on  cust.nation_key=nation.nation_key</span></span><br><span class="line"><span class="string">        |group by fo.cust_key),</span></span><br><span class="line"><span class="string">        |--b 每个国家 人均消费</span></span><br><span class="line"><span class="string">        |b as (select nation_key as nationkey ,max(name) as name ,sum(total_price) as sumprice,count(1) as countperson,</span></span><br><span class="line"><span class="string">        |round(avg(total_price),2) as avgnationperson</span></span><br><span class="line"><span class="string">        |from a group by nation_key)</span></span><br><span class="line"><span class="string">        |select nationkey,name,round(avgnationperson,2),306980.73,(</span></span><br><span class="line"><span class="string">        |case when avgnationperson &gt; 306980.73 then &#x27;+&#x27;</span></span><br><span class="line"><span class="string">        | when avgnationperson = 306980.73 then &#x27;=&#x27;</span></span><br><span class="line"><span class="string">        | when avgnationperson &lt; 306980.73 then &#x27;-&#x27; end)</span></span><br><span class="line"><span class="string">        |from b</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createTempView(<span class="string">&quot;sub3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table mysql2</span></span><br><span class="line"><span class="string">        |select * from sub3</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadMysql</span></span>(<span class="type">Spark</span>:<span class="type">SparkSession</span>,totalName:<span class="type">String</span>,tempName:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      <span class="keyword">val</span> url=<span class="string">&quot;jdbc:mysql://192.168.23.89/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user=<span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="type">Spark</span>.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>,url)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>,user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>,password)</span><br><span class="line">        .option(<span class="string">&quot;driver&quot;</span>,driver)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>,totalName).load().createTempView(tempName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结">4.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天第一次半正式的，省赛模拟，早上八点开始，也算是在省赛要求的时间内，把题目做完了，刚刚好踩着点，其实过程中是出现过很多问题的，在数据清洗的时候，有一步是把数据清洗之前的orders表，删除分区。但是我在还没运行清洗的jar包的时候，就先用hive把分区删了，导致我清洗完，fact_orders表数据是缺失的。任务书有一步，查看分区数量的时候，才发现做题顺序错了，又回头把抽取的jar包重新运行，忘记删表了，导致后面又清洗的时候，数据又是有问题的。这样整了很多次，后面干脆把平台的虚拟机重置了，然后才做第三题。心态也有些影响了，觉得题目还是应该多练，才能在比赛避免一些问题。</p><h1 id="9-12-解决干扰自己很久的问题">9.12 解决干扰自己很久的问题</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述-5">2.所学内容概述</h2><p>任务四 指标计算 单行和多行数据并存</p><h2 id="3-根据概述分章节描述-4">3.根据概述分章节描述</h2><p>问题点 困扰我和李昊的原因</p><p>t1表查询结果 这是一个多行多列的数据</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/2022-09-12%2019-35-25%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2022-09-12 19-35-25屏幕截图"></p><p>题目要求 第四列要是全球的中位数</p><p>聚合函数查询结果如下</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/2022-09-12%2019-39-59%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2022-09-12 19-39-59屏幕截图"></p><p>只有一行</p><p>两个表行数不匹配 普通没法成下面的效果 一定会有笛卡尔积的出现 但是又是第一行 我们的目的就是要有笛卡尔积的存在</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/2022-09-12%2019-46-47%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2022-09-12 19-46-47屏幕截图"></p><p>正确答案代码如下</p><p><code>我们需要开启笛卡尔积的支持 否则会报错</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span>,t2.<span class="operator">*</span> <span class="keyword">from</span> t1,t2</span><br><span class="line"><span class="comment">--#这种来自两个表的数据 结合在一起写我也是今天无意间发现的 使用的时候没有报错</span></span><br><span class="line">#我推测这种方法 只能两个表要查的行数相同的情况 不然会有笛卡尔积 </span><br><span class="line">#打开笛卡尔积 支持就好了</span><br></pre></td></tr></table></figure><p>然后spark提交jar包的时候又出现了笛卡尔积的问题 下面为BUG解释了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//percentile_approx(col,p) p=0.5 col为中位数的列 求中位数</span></span><br><span class="line">   <span class="comment">//percentile_approx第一个参数只能是int</span></span><br><span class="line">   <span class="comment">//hive (default)&gt; set hive.strict.checks.cartesian.product=true;</span></span><br><span class="line">   <span class="comment">//hive (default)&gt; set hive.mapred.mode=nonstrict;</span></span><br><span class="line">   sql(<span class="string">&quot;set hive.strict.checks.cartesian.product=true&quot;</span>) <span class="comment">//hive开启笛卡尔积支持</span></span><br><span class="line">sql(<span class="string">&quot;set hive.mapred.mode=nonstrict&quot;</span>) <span class="comment">//开启非严格模式</span></span><br><span class="line">   sql(</span><br><span class="line">     <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       |with t1 as (</span></span><br><span class="line"><span class="string">       |select nation.nation_key as nation_key,max(nation.name) as name ,</span></span><br><span class="line"><span class="string">       |round(percentile_approx(total_price,0.5),2) as per</span></span><br><span class="line"><span class="string">       |from dwd.fact_orders fo</span></span><br><span class="line"><span class="string">       |left join dwd.dim_customer cust on cust.cust_key=fo.cust_key</span></span><br><span class="line"><span class="string">       |left join dwd.dim_nation nation on nation.nation_key=cust.nation_key</span></span><br><span class="line"><span class="string">       |group by nation.nation_key),</span></span><br><span class="line"><span class="string">       |t2 as (</span></span><br><span class="line"><span class="string">       |select round(percentile_approx(per,0.5),2) as per1</span></span><br><span class="line"><span class="string">       |from t1</span></span><br><span class="line"><span class="string">       |)</span></span><br><span class="line"><span class="string">       |select t1.*,t2.* from t1,t2</span></span><br><span class="line"><span class="string">       |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createTempView(<span class="string">&quot;hive2&quot;</span>)</span><br><span class="line">   mysqlExtract(spark,<span class="string">&quot;nationmedian&quot;</span>,<span class="string">&quot;mysql2&quot;</span>)</span><br><span class="line"></span><br><span class="line">   spark.conf.set(<span class="string">&quot;spark.sql.crossJoin.enabled&quot;</span>, <span class="string">&quot;true&quot;</span>)<span class="comment">//spark开启笛卡尔积支持</span></span><br><span class="line">   sql(</span><br><span class="line">     <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       |insert overwrite table mysql2</span></span><br><span class="line"><span class="string">       |select * from hive2</span></span><br><span class="line"><span class="string">       |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">   spark.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-BUG点-3">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>use the CROSS JOIN syntax to allow cartesian products between these relations;;</p><p>上面是报错信息 翻译是 使用交叉连接 CROSS JOIN 语法允许这些关系之间的笛卡尔积；</p><p>CSDN搜索说是spark默认是不支持笛卡尔积的情况的，所以需要打开 在insert 导入mysql之前 加入如下语句</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark.conf.set(<span class="string">&quot;spark.sql.crossJoin.enabled&quot;</span>,<span class="string">&quot;true&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-总结-3">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>开启支持这些命令可能有点长不太好记，花点时间去记一下，而且我做三四个任务下来，经常会遇到这种情况，我都是算好，直接填入字符串的，但是任务书要求截sql语句，如果看到是一个字符串，不太好。今天总算解决了，后面一些任务需要一列的数据要求一样的，就可以达成了。</p><h1 id="9-13-省赛任务1">9.13 省赛任务1</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述-6">2.所学内容概述</h2><p>省赛任务一 完成</p><h2 id="3-根据概述分章节描述-5">3.根据概述分章节描述</h2><h3 id="数据抽取">数据抽取</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataExtract</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .appName(<span class="string">&quot;DataExtract&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> date=<span class="string">&quot;20220912&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line">    <span class="comment">//mysql</span></span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;CUSTOMER&quot;</span>,<span class="string">&quot;mysql_customer&quot;</span>)</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;NATION&quot;</span>,<span class="string">&quot;mysql_nation&quot;</span>)</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;PART&quot;</span>,<span class="string">&quot;mysql_part&quot;</span>)</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;PARTSUPP&quot;</span>,<span class="string">&quot;mysql_partsupp&quot;</span>)</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;REGION&quot;</span>,<span class="string">&quot;mysql_region&quot;</span>)</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;SUPPLIER&quot;</span>,<span class="string">&quot;mysql_supplier&quot;</span>)</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;LINEITEM&quot;</span>,<span class="string">&quot;mysql_lineitem&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//hive sql 6</span></span><br><span class="line">    hiveExtract(spark,<span class="string">&quot;customer&quot;</span>)</span><br><span class="line">    hiveExtract(spark,<span class="string">&quot;nation&quot;</span>)</span><br><span class="line">    hiveExtract(spark,<span class="string">&quot;part&quot;</span>)</span><br><span class="line">    hiveExtract(spark,<span class="string">&quot;partsupp&quot;</span>)</span><br><span class="line">    hiveExtract(spark,<span class="string">&quot;region&quot;</span>)</span><br><span class="line">    hiveExtract(spark,<span class="string">&quot;supplier&quot;</span>)</span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.lineitem partition (etldate=$date)</span></span><br><span class="line"><span class="string">        |select l.* from mysql_lineitem l</span></span><br><span class="line"><span class="string">        |where</span></span><br><span class="line"><span class="string">        |l.orderkey not in</span></span><br><span class="line"><span class="string">        |(select orderkey from ods.lineitem)</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hiveExtract</span></span>(spark:<span class="type">SparkSession</span>,hiveName:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      spark.sql(</span><br><span class="line">        <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">          |insert overwrite table ods.$hiveName partition (etldate=$date)</span></span><br><span class="line"><span class="string">          |select * from mysql_$hiveName</span></span><br><span class="line"><span class="string">          |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysqlExtract</span></span>(spark:<span class="type">SparkSession</span>,mysqlName:<span class="type">String</span>,tempName:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      <span class="keyword">val</span> url=<span class="string">&quot;jdbc:mysql://192.168.23.89/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user=<span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">      spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>,url)</span><br><span class="line">        .option(<span class="string">&quot;driver&quot;</span>,driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>,user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>,password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>,mysqlName).load().createTempView(tempName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="orders表">orders表</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataExtractOrders</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .appName(<span class="string">&quot;DataExtract&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;ORDERS&quot;</span>,<span class="string">&quot;mysql_orders&quot;</span>)</span><br><span class="line">    <span class="comment">//19970913</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table ods.orders partition (etldate)</span></span><br><span class="line"><span class="string">         |select o.*,</span></span><br><span class="line"><span class="string">         |date_format(orderdate,&#x27;yyyyMMdd&#x27;)</span></span><br><span class="line"><span class="string">         |from mysql_orders o</span></span><br><span class="line"><span class="string">         |where</span></span><br><span class="line"><span class="string">         |o.orderkey not in</span></span><br><span class="line"><span class="string">         |(select orderkey from ods.orders)</span></span><br><span class="line"><span class="string">         |and</span></span><br><span class="line"><span class="string">         |regexp_replace(orderdate,&quot;</span>-<span class="string">&quot;,&quot;</span><span class="string">&quot;) &gt;= &#x27;19970913&#x27;</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.stop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysqlExtract</span></span>(spark: <span class="type">SparkSession</span>, mysqlName: <span class="type">String</span>, tempName: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> url = <span class="string">&quot;jdbc:mysql://192.168.23.89/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user = <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">      spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>, url)</span><br><span class="line">        .option(<span class="string">&quot;driver&quot;</span>, driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>, user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>, password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>, mysqlName).load().createTempView(tempName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>alter table ods.orders drop partition (etldate&gt;0)</code> 删除所有分区以及该分区的数据</p><h3 id="数据清洗">数据清洗</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataClear</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .appName(<span class="string">&quot;DataExtract&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> date = <span class="string">&quot;20220912&quot;</span></span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    custkey             string</span></span><br><span class="line"><span class="comment">    name                string</span></span><br><span class="line"><span class="comment">    address             string</span></span><br><span class="line"><span class="comment">    nationkey           string</span></span><br><span class="line"><span class="comment">    phone               string</span></span><br><span class="line"><span class="comment">    acctbal             string</span></span><br><span class="line"><span class="comment">    mktsegment          string</span></span><br><span class="line"><span class="comment">    comment             string</span></span><br><span class="line"><span class="comment">    etldate             string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.dim_customer partition (etldate=$date)</span></span><br><span class="line"><span class="string">        |select custkey,name,address,nationkey,phone,acctbal,mktsegment,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">        |from ods.customer</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    partkey             string</span></span><br><span class="line"><span class="comment">    name                string</span></span><br><span class="line"><span class="comment">    mfgr                string</span></span><br><span class="line"><span class="comment">    brand               string</span></span><br><span class="line"><span class="comment">    type                string</span></span><br><span class="line"><span class="comment">    size                string</span></span><br><span class="line"><span class="comment">    container           string</span></span><br><span class="line"><span class="comment">    retailprice         string</span></span><br><span class="line"><span class="comment">    comment             string</span></span><br><span class="line"><span class="comment">    etldate             string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_part partition (etldate=$date)</span></span><br><span class="line"><span class="string">         |select partkey,name,mfgr,brand,</span></span><br><span class="line"><span class="string">         |type,size,container,retailprice,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.part</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">nationkey           string</span></span><br><span class="line"><span class="comment">    name                string</span></span><br><span class="line"><span class="comment">    regionkey           string</span></span><br><span class="line"><span class="comment">    comment             string</span></span><br><span class="line"><span class="comment">    etldate             string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_nation partition (etldate=$date)</span></span><br><span class="line"><span class="string">         |select nationkey,name,regionkey,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.nation</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.dim_region partition (etldate=$date)</span></span><br><span class="line"><span class="string">         |select regionkey,name,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span></span><br><span class="line"><span class="string">         |from ods.region</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    orderkey            string</span></span><br><span class="line"><span class="comment">    custkey             string</span></span><br><span class="line"><span class="comment">    orderstatus         string</span></span><br><span class="line"><span class="comment">    totalprice          string</span></span><br><span class="line"><span class="comment">    orderdate           string</span></span><br><span class="line"><span class="comment">    orderpriority       string</span></span><br><span class="line"><span class="comment">    clerk               string</span></span><br><span class="line"><span class="comment">    shippriority        string</span></span><br><span class="line"><span class="comment">    comment             string</span></span><br><span class="line"><span class="comment">    etldate             string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.fact_orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select orderkey,custkey,orderstatus,totalprice,</span></span><br><span class="line"><span class="string">        |date_format(orderdate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |orderpriority,clerk,shippriority,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),etldate</span></span><br><span class="line"><span class="string">        |from ods.orders</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    orderkey            string</span></span><br><span class="line"><span class="comment">    partkey             string</span></span><br><span class="line"><span class="comment">    suppkey             string</span></span><br><span class="line"><span class="comment">    lienumber           string</span></span><br><span class="line"><span class="comment">    quantity            string</span></span><br><span class="line"><span class="comment">    extendedprice       string</span></span><br><span class="line"><span class="comment">    discount            string</span></span><br><span class="line"><span class="comment">    tax                 string</span></span><br><span class="line"><span class="comment">    returnflag          string</span></span><br><span class="line"><span class="comment">    linestatus          string</span></span><br><span class="line"><span class="comment">    shipdate            string</span></span><br><span class="line"><span class="comment">    commentdate         string</span></span><br><span class="line"><span class="comment">    receiptdate         string</span></span><br><span class="line"><span class="comment">    shipstruct          string</span></span><br><span class="line"><span class="comment">    shipmode            string</span></span><br><span class="line"><span class="comment">    comment             string</span></span><br><span class="line"><span class="comment">    etldate             string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table dwd.fact_lineitem partition (etldate)</span></span><br><span class="line"><span class="string">         |select orderkey,partkey,suppkey,lienumber,quantity,extendedprice,</span></span><br><span class="line"><span class="string">         |discount,tax,returnflag,linestatus,</span></span><br><span class="line"><span class="string">         |date_format(shipdate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |date_format(commentdate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |date_format(receiptdate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |shipstruct,shipmode,comment,</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">         |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),etldate</span></span><br><span class="line"><span class="string">         |from ods.lineitem</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="orders表-2">orders表</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataClearOrders</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .appName(<span class="string">&quot;DataExtract&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table dwd.fact_orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select orderkey,custkey,orderstatus,totalprice,</span></span><br><span class="line"><span class="string">        |date_format(orderdate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |orderpriority,clerk,shippriority,comment,</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),</span></span><br><span class="line"><span class="string">        |&#x27;user1&#x27;,date_format(current_timestamp(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;),etldate</span></span><br><span class="line"><span class="string">        |from ods.orders</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">      spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="指标计算1">指标计算1</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataMath1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .appName(<span class="string">&quot;DataExtract&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |WITH t1 as (</span></span><br><span class="line"><span class="string">        |select c.cust_key as custkey,</span></span><br><span class="line"><span class="string">        |n.nation_key as nationkey,</span></span><br><span class="line"><span class="string">        |n.name as nationname,</span></span><br><span class="line"><span class="string">        |r.region_key as regionkey,</span></span><br><span class="line"><span class="string">        |r.name as regionname,</span></span><br><span class="line"><span class="string">        |total_price,</span></span><br><span class="line"><span class="string">        |date_format(order_date,&#x27;yyyy&#x27;) as year,</span></span><br><span class="line"><span class="string">        |date_format(order_date,&#x27;MM&#x27;) as month</span></span><br><span class="line"><span class="string">        |from dwd.fact_orders fo</span></span><br><span class="line"><span class="string">        |left join dwd.dim_customer c on fo.cust_key=c.cust_key</span></span><br><span class="line"><span class="string">        |left join dwd.dim_nation n on c.nation_key=n.nation_key</span></span><br><span class="line"><span class="string">        |left join dwd.dim_region r on n.region_key=r.region_key)</span></span><br><span class="line"><span class="string">        |select nationkey,max(nationname),max(regionkey),max(regionname),</span></span><br><span class="line"><span class="string">        |sum(total_price),count(*),year,month</span></span><br><span class="line"><span class="string">        |from t1</span></span><br><span class="line"><span class="string">        |group by nationkey,year,month</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createTempView(<span class="string">&quot;hive1&quot;</span>)</span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;nationeverymonth&quot;</span>,<span class="string">&quot;mysql1&quot;</span>)</span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table mysql1</span></span><br><span class="line"><span class="string">        |select * from hive1</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysqlExtract</span></span>(spark: <span class="type">SparkSession</span>, mysqlName: <span class="type">String</span>, tempName: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> url = <span class="string">&quot;jdbc:mysql://192.168.23.89/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user = <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">      spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>, url)</span><br><span class="line">        .option(<span class="string">&quot;driver&quot;</span>, driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>, user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>, password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>, mysqlName).load().createTempView(tempName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指标计算2">指标计算2</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataMath2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .appName(<span class="string">&quot;DataExtract&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    hive (default)&gt; set hive.strict.checks.cartesian.product=true;</span></span><br><span class="line"><span class="comment">    hive (default)&gt; set hive.mapred.mode=nonstrict;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sql(<span class="string">&quot;set hive.strict.checks.cartesian.product=true&quot;</span>)</span><br><span class="line">    sql(<span class="string">&quot;set hive.mapred.mode=nonstrict&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |with t1 as (</span></span><br><span class="line"><span class="string">        |select c.cust_key as custkey,</span></span><br><span class="line"><span class="string">        |n.nation_key as nationkey,</span></span><br><span class="line"><span class="string">        |n.name as nationname,</span></span><br><span class="line"><span class="string">        |total_price</span></span><br><span class="line"><span class="string">        |from dwd.fact_orders fo</span></span><br><span class="line"><span class="string">        |left join dwd.dim_customer c on fo.cust_key=c.cust_key</span></span><br><span class="line"><span class="string">        |left join dwd.dim_nation n on c.nation_key=n.nation_key),</span></span><br><span class="line"><span class="string">        |t2 as (</span></span><br><span class="line"><span class="string">        |select custkey,max(nationkey) as nationkey, max(nationname) as nationname,</span></span><br><span class="line"><span class="string">        |sum(total_price) as sumprice</span></span><br><span class="line"><span class="string">        |from t1</span></span><br><span class="line"><span class="string">        |group by t1.custkey),</span></span><br><span class="line"><span class="string">        |t3 as (</span></span><br><span class="line"><span class="string">        |select nationkey,</span></span><br><span class="line"><span class="string">        |max(nationname) as nationname,</span></span><br><span class="line"><span class="string">        |round(avg(sumprice),2) as avgprice</span></span><br><span class="line"><span class="string">        |from t2</span></span><br><span class="line"><span class="string">        |group by nationkey),</span></span><br><span class="line"><span class="string">        |t4 as (</span></span><br><span class="line"><span class="string">        |select round(avg(sumprice),2) as allavgprice from t2)</span></span><br><span class="line"><span class="string">        |select t3.*,t4.* from t3,t4</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createTempView(<span class="string">&quot;hive4&quot;</span>)</span><br><span class="line"></span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;nationavgcmp&quot;</span>,<span class="string">&quot;nationavgcmp&quot;</span>)</span><br><span class="line">    spark.conf.set(<span class="string">&quot;spark.sql.crossJoin.enabled&quot;</span>,<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table nationavgcmp</span></span><br><span class="line"><span class="string">        |select h.*,</span></span><br><span class="line"><span class="string">        |(case</span></span><br><span class="line"><span class="string">        |when h.avgprice &gt; h.allavgprice then &#x27;+&#x27;</span></span><br><span class="line"><span class="string">        |when h.avgprice = h.allavgprice then &#x27;=&#x27;</span></span><br><span class="line"><span class="string">        |when h.avgprice &lt; h.allavgprice then &#x27;-&#x27; end</span></span><br><span class="line"><span class="string">        |)</span></span><br><span class="line"><span class="string">        |from hive4 h</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysqlExtract</span></span>(spark: <span class="type">SparkSession</span>, mysqlName: <span class="type">String</span>, tempName: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> url = <span class="string">&quot;jdbc:mysql://192.168.23.89/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user = <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">      spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>, url)</span><br><span class="line">        .option(<span class="string">&quot;driver&quot;</span>, driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>, user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>, password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>, mysqlName).load().createTempView(tempName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指标计算3">指标计算3</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span>.subject1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DataMath3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">      .appName(<span class="string">&quot;DataExtract&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>, <span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .config(<span class="string">&quot;hive.exec.max.dynamic.partitions.pernode&quot;</span>, <span class="string">&quot;100000&quot;</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |with t1 as (</span></span><br><span class="line"><span class="string">        |select cust_key,</span></span><br><span class="line"><span class="string">        |cast(date_format(order_date,&#x27;yyyyMM&#x27;) as int) as month,</span></span><br><span class="line"><span class="string">        |sum(total_price) as total_price,</span></span><br><span class="line"><span class="string">        |count(1) as total_order</span></span><br><span class="line"><span class="string">        |from dwd.fact_orders</span></span><br><span class="line"><span class="string">        |group by cust_key,cast(date_format(order_date,&#x27;yyyyMM&#x27;) as int)</span></span><br><span class="line"><span class="string">        |),</span></span><br><span class="line"><span class="string">        |t2 as (</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |a.cust_key,</span></span><br><span class="line"><span class="string">        |concat(a.month,&#x27;_&#x27;,b.month) as month,</span></span><br><span class="line"><span class="string">        |a.total_price + b.total_price as total_price,</span></span><br><span class="line"><span class="string">        |a.total_order + b.total_order as total_order</span></span><br><span class="line"><span class="string">        |from t1 a</span></span><br><span class="line"><span class="string">        |left join t1 b</span></span><br><span class="line"><span class="string">        | on --判断连续两个月增长</span></span><br><span class="line"><span class="string">        |a.cust_key=b.cust_key</span></span><br><span class="line"><span class="string">        |where</span></span><br><span class="line"><span class="string">        |a.month + 1 = b.month</span></span><br><span class="line"><span class="string">        |and</span></span><br><span class="line"><span class="string">        |a.total_price &lt; b.total_price)</span></span><br><span class="line"><span class="string">        |select c.cust_key,c.name,month,total_price,total_order</span></span><br><span class="line"><span class="string">        |from t2</span></span><br><span class="line"><span class="string">        |left join dwd.dim_customer c on c.cust_key=t2.cust_key</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createTempView(<span class="string">&quot;hiveOrders&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mysqlExtract(spark,<span class="string">&quot;usercontinueorder&quot;</span>,<span class="string">&quot;order1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table order1</span></span><br><span class="line"><span class="string">        |select * from hiveOrders</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysqlExtract</span></span>(spark: <span class="type">SparkSession</span>, mysqlName: <span class="type">String</span>, tempName: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> url = <span class="string">&quot;jdbc:mysql://192.168.23.89/shtd_store&quot;</span></span><br><span class="line">      <span class="keyword">val</span> driver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">      <span class="keyword">val</span> user = <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="keyword">val</span> password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">      spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">        .option(<span class="string">&quot;url&quot;</span>, url)</span><br><span class="line">        .option(<span class="string">&quot;driver&quot;</span>, driver)</span><br><span class="line">        .option(<span class="string">&quot;user&quot;</span>, user)</span><br><span class="line">        .option(<span class="string">&quot;password&quot;</span>, password)</span><br><span class="line">        .option(<span class="string">&quot;dbtable&quot;</span>, mysqlName).load().createTempView(tempName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-BUG点-4">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>暂无出bug的重点</p><h2 id="6-总结-4">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>前面数据抽取 和 清洗 基本很顺利 只出了一点小问题，影响不大。因为orders表 经常会出现问题，所以现在自己改变了策略，清洗和抽取的时候把orders单独取出来，因为它动态分区，较麻烦。经常会打jar包的时候到orders报错，但是前面的表已经导入了。date_format()中第二个参数 yyyyMMMdd多打了一个M 就变成了英文的月份，之前清洗表的代码发现分区信息还在，发现我之前删除表数据的方法，只能删(除表内信息，但是分区是还在的,所以查看分区的时候,错误的分区也还显示,只能用alter table  ods.orders drop partition (etldate&gt;0 )把分区删干净,重新打了一下jar包，浪费了自己20来分钟。最后快做完花了2个半小时，还剩下最后一题的最后一小题，吃完饭回来也顺利搞定了，今天指标计算，就又碰到了和昨天差不多的问题，刚好昨天已经解决了，以后做类似的问题题目，也不会怎么犯错卡住了。指标计算的2和3花了点时间。总体今天学习状态不错。</p><h1 id="9-14-新任务">9.14-~~~ 新任务</h1><h2 id="1-头：日期、所学内容出处-7">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述-7">2.所学内容概述</h2><h2 id="3-根据概述分章节描述-6">3.根据概述分章节描述</h2><h3 id="greatest">greatest</h3><p>greatest(a,b,c,d) 返回参数中的最大值</p><h3 id="coalesce">coalesce</h3><p>coalesce(null,a,b)返回a</p><p>返回 第一个不为null的值</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220918132338009.png" alt="image-20220918132338009"></p><p>想得到这样的表</p><p>多行变一行</p><p>有公共列</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4MDQ0NQ==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>1).先使用collect_set函数使多行成为一行数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select name,collect_set(subject)  res1 ,</span><br><span class="line">    &gt; collect_set(cast(score as string)) res2 </span><br><span class="line">    &gt; from stu group by name;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202106191527505.png" alt="在这里插入图片描述"></p><p>2). 加上concat_ws函数可以取出数组中的每一个元素的值在用分隔符连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; select name,concat_ws(&#x27;@&#x27;,collect_set(subject))  res1 ,</span><br><span class="line">    &gt; concat_ws(&#x27;-&#x27;,collect_set(cast(score as string))) res2 </span><br><span class="line">    &gt; from stu group by name;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/20210619152910469.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hive&gt;select substr(&#x27;qwertyuio&#x27;,0,4)</span><br><span class="line">--qwer、</span><br><span class="line">对字符串的 </span><br><span class="line">第一个参数是从哪个位置开始</span><br><span class="line">第二个参数是取几位数 </span><br></pre></td></tr></table></figure><h2 id="4-BUG点-5">4. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><h3 id="hive导入mysql时候，中文显示-问题">hive导入mysql时候，中文显示???问题</h3><p>编码格式的问题</p><p>解决方法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#<span class="operator">/</span><span class="operator">/</span>查看数据库编码格式</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database shtd_result</span><br><span class="line"><span class="comment">--#修改为utf8</span></span><br><span class="line"><span class="keyword">alter</span> database shtd_result <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line"></span><br><span class="line">#查看表的编码格式</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> regiontopthree</span><br><span class="line">#修改为utf<span class="number">-8</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> regiontopthree <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><p>在scala中创建mysql临时表的时候url需要添加编码格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:<span class="operator">/</span><span class="operator">/</span><span class="number">192.168</span><span class="number">.23</span><span class="number">.89</span><span class="operator">/</span>shtd_result?useUnicode<span class="operator">=</span><span class="literal">true</span><span class="operator">&amp;</span>characterEncoding<span class="operator">=</span>utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><h2 id="6-总结-5">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天做的是7月的新数据比之前的数据逻辑性强了很多，前面两题也难了点，不算是自己独立完成，CSDN搜了几个方法的使用，然后解决了之前的查询中文的情况。磕磕绊绊差不多一天才做了一个任务书，后面应该会好很多，题目表达的和自己理解的不知道一不一样。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Spark </tag>
            
            <tag> Hive </tag>
            
            <tag> SQL </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8月总结</title>
      <link href="/posts/22conclusion08.html"/>
      <url>/posts/22conclusion08.html</url>
      
        <content type="html"><![CDATA[<h1 id="22年总结8月总结">22年总结8月总结</h1><h2 id="一、知识点汇总">一、知识点汇总</h2><h3 id="第一周8-7-8-11">第一周8.7-8.11</h3><ul><li><strong>这周的学习内容</strong> ：linux入门 实操文件 Shell编程  Scala的基础入门</li></ul><p>​<strong>难点</strong>： Scala基础语法   Shell编程</p><p>​<strong>个人理解</strong>：</p><p>**Shell编程：**shell在我理解有点像python，脚本语言。但是和python比，语言的简洁性,可读性都很差。毕竟是脚本语言，一些比较复杂的代码和程序，写出来就很麻烦用shell。因此现在shell是有一个let 可以用c和java的语言，还是方便的。Shell 主要用来开发一些实用的、自动化的小工具，而不是用来开发具有复杂业务逻辑的中大型软件，因为他的代码我觉得写起来非常难受，应该在搭建环境和分析日志这类的场景，shell会有比较好的表现力吧，在Linux中Shell应该是很重要的一个章节，毕竟老师说使用 Shell 的熟练程度反映了你对 Linux 的掌握程度。</p><p>**Scala基础语法：**Scala刚入门的时候，使用非常的难受，在scala中有java和python的影子，但是又不一样，就导致刚开始经常写错，它的语言很简洁，Java8中的lambda就是借鉴scala的，所以如果学Java的时候Lambda学好的话，入门上手还是蛮快的。Scala是一种强数据类型的语言，变量声明了类型，就变不了了。改变的话，只能创造新的变量，原变量是改不了的。毕竟称为Java++，也有强转，但是比较麻烦，这种脚本语言类，学明白了掌握还是容易的，而且思路可以清晰。</p><h4 id="自我周总结：">自我周总结：</h4><p>这周时间比较短，状态自己调整了两天，不过学习速度比之前有很大的提高，刚来集训，劲头比较足吧，寝室室友什么的也比较舒服，学习状态倒还是很满意的，这周主要是3天把Linux看完了，基本操作啊，对文件的实操。这方面之前就知道一些，看文档，一天能抵七八个小时的视频时间，后面的Shell编程，是仔细看了视频，因为有点奇怪，是脚本语言，写起来跟命令一样，然后看了一天的Scala编程，自己对语言可能比较敏感吧，上午还不习惯，下午用起来就舒服了，感觉比python写起来还舒服，就是它的类型声明有点奇怪。一天把前面一般语言都共有的部分，看掉了，主要都是看文档，看文档跟着案例敲学习语言，速度和效率真的快。</p><h3 id="第二周8-12-8-17">第二周8.12-8.17</h3><p><strong>这周的学习内容</strong> ： hadooop基本入门 hadoop完全分布式  HDFS</p><p>​<strong>难点：</strong> hadoop概念  hadoop克隆群起</p><p><strong>个人理解</strong>：</p><p>hadoop概念:这一块也不算个人理解吧，因为学hadoop学了很久，都不知道hadoop是什么，干嘛用的，就去CSDN去搜了，<a href="http://t.csdn.cn/J6cLT">http://t.csdn.cn/J6cLT</a> 这个链接，我觉得讲的特别好。也让我弄懂了hadoop和大数据。看文档完了，感觉Hadoop技术就是大数据这行的核心，像我们这次比赛要学的很多内容都是基于hadoop或者是和hadoop有关的，总之是离不开，hive，spark都是如此，这些算是hadoop的模块，模块之间又有关联。hadoop像是一个生态圈了，也有人讲hadoop生态。总结hadoop的话，Hadoop就是存储海量数据和分析海量数据的工具。它的核心是我学掉的HDFS和没学的MR，赶进度MR就看看文档就好了，HDFS是存储数据的，而MR就是计算数据的，理解为计算引擎。</p><p>**hadoop克隆：**这部分也不算难点，但是总是会出现问题，然后自己去解决，后面自己总结出了一套配置步骤，虚拟机克隆这部分，到配置IP。群起配置在多太虚拟机的时候，真的很方便，像如果一台装了java，并配置好了环境，后面几台只要，配置完ip和映射，以主虚拟机，直接分发就好了。写完配置文件，启动hadoop各集群也很方便。1.克隆虚拟机 2.修改静态IP 3.修改主机名做映射 4.关闭防火墙 。这样一台有ip能上完的虚拟机就配置好了。后面群起什么，主虚拟机分发一下就好了，交给环境配置的同学。</p><h4 id="自我周总结：-2">自我周总结：</h4><p>这周学习的效率就落下来了，这周是hadoop结束，以为hadoop是都要学习的，自己就很认真的在搞配置什么的命令，也出现了很多问题，一个一个去找，有配置报错，CSDN解决，浪费了很多时间。前面概念的有点莫论两可，后面跟概念相关的就比较吃力了。这周后面学HDFS，Java用IDEA充当客户端那天学习状态还可以的，自己学习状态和学习内容有点挂钩太多了。</p><h3 id="第三周8-18-8-24">第三周8.18-8.24</h3><p><strong>这周的学习内容</strong> ：Scala函数式编程 Scala面向对象 数组集合 Spark入门</p><p>Spark-RDD 转换算子 运行算子 SparkSQL</p><p><strong>难点：</strong> Scala集合计算函数   元组  Spark概念</p><p><strong>个人理解：</strong></p><p>元组：元组在我理解和java里面的元组完全不一样，在Scala元组是一个容器，将很多无关的数据封装为一个整体，元组最大只能有22个元素。元组可以存不同的元素，但是调用的时候比较抽象，是用._顺序号,他是有序的，在后面集合计算高级函数中经常使用，结合Map，和对象就很抽象，一层嵌一层的。</p><p>Scala集合计算函数：看文档的代码和扁平化+映射的方法，Scala的代码又简洁，更像抽象，一下子看文档看不明白，一套嵌一套的，很多地方的类型什么都省略了，用_直接代替，导致我这一块卡了很久，去换了IDEA设置，自动补齐类型，理解起来方便多了，在我理解的flatMap 相当于先进行 map 操作，在进行 flatten操作，这里基本就是扁平化+映射的原理，到后面分区什么又结合一起，代码全部写一行，要看好一会才行。慢慢也能捋清除。</p><p>Spark概念：之前学Scala的时候就说，学Scala就是为了Spark，到Spark，发现开发语句都是Scala。在我看来，Spark也是一种大数据计算框架，和MR类似，但是比MR强很多，不管是运行还是各种方面，效率方面比MR强100倍，有这么夸张。但是Spark因为是新起的，所以有些地方不够完善，容易内存溢出，但我只遇到过一次。Spark主要用于大数据的计算，而Hadoop以后主用于大数据的存储HDFS和Hive，以及资源调度。Spark+Hadoop的组合，是未来大数据领域最热门的组合，也是最有前景的组合！过断时间把Hadoop换成Spark执行应该会快上不少。</p><h4 id="自我周总结：-3">自我周总结：</h4><p>这周学完了Scala和Spark，学习速度还是很满意的。但是学习顺序出现了点问题，没有学Hive，就去看Spark了，前面听的很懵，到后面最重要的SparkSQL，文档让用Hive的，我连Hive是什么都不知道，下周得去看完Hive才回头来看SparkSQL了，这周的学习状态是很不错的，都是敲代码，代码敲了很多，Spark语法也都记住了，结合笔记，也能自己写出简单的案例。这周BUG出现蛮多的，都是在Scala的语句中，._这块出现了很多次问题，Scala还是没用顺，为了简洁的语法，明明是一层调用一层的，全部写在一行，然后化简，导致自己有时候都得看好一会，才能捋清除。</p><h3 id="第四周8-25-8-31">第四周8.25-8.31</h3><p><strong>这周的学习内容</strong> ：Hive配置 DDL语句 DML语句 Join语句 函数</p><p><strong>难点：</strong> Hive配置</p><h4 id="自我周总结：-4">自我周总结：</h4><p>这周配置这个Hive的环境配置了两天半，才磕磕绊绊搞好。原本自己弄了一天，第二天的时候又不行了，然后一报错，就去CSDN找解决方法，到JDBC的时候完全起不来，Jar包都找不到了，不知道被搞到哪里了，就让喻中贵重新帮我克隆配置了3台有hadoop的虚拟机，自己从头到尾又根据之前解决的思路，配置了一下午，全部都搞好了，也花了两天多时间，导致本来想这周就结束Hive的现在才学了2/3。这块配置还是不要瞎搞了，太浪费时间了，后面才是自己要知道的重点。Hive后面的任务，我觉得没什么难的地方。DDL和DML语句基本和SQL语句差不多，都是SQL基础语句。</p><h2 id="二、自我总结">二、自我总结</h2><p><strong>自我反省：</strong></p><p>自己解决BUG的能力不太行，现在文档的重要性是体现出来了，因为老师很多东西都调教好了，我们用的时候会出现很多问题，要去解决就是要看博客。平常解决一些BUG不顺利的话都会花一小时甚至一上午的时间去解决，这样影响还是很大的，不管是进度还是心态。</p><p>配置Hive那两天的时候发现了自身的问题，可能我自己的那台机子，应该是好的，启动方式和老师不一样而已，导致我用老师那种方式，一直等不到OK，而且命令敲完，提示信息和老师不一样，就觉得自己之前的配置哪里有了问题，又找不到，重写弄了三台，从头到尾 java hadoop hive spark 重配置。后面到JDBC的时候，提示信息跟之前还是一样，但是自己试着去运行了一下，发现好了。感觉浪费了很多时间，就是因为自己没有去试beeline命令，认为前面错，后面也错。</p><p>然后自己学习的时候，没先提前去搞懂这东西是干嘛的，要在什么的基础之上，所以出现了学习步骤的问题，SparkSQL之前要看Hive，Hive之前要看Hadoop，这是一条线，整反了，就会听不懂。像之前学Hadoop的时候，没先搞懂Hadoop是什么，前面讲hadoop是什么干嘛的，为了进度，直接跳了，导致学到后面，都不知道hadoop是什么干嘛的，又去看了博客，再学的时候会相对容易点，有清晰的条理。不然就像无头苍蝇一样，不知道在学什么。为了进度，讲概述可以跳，最好还是得先去博客了解，看文档比视频快很多，也能弄明白东西的作用。</p><p>现在学习的时间相对之前增加了，加上周末以及每天的早八晚九，一天学习时间可以达到8个小时，加上要赶进度，学习效率比之前高上不少，因为配置和学习顺序，拖累的这个月的进度，本来这个月打算Hive学完的，然后花两天回头看下SparkSQL就可以刷题了，现在Hive只看了一半，希望下星期能学完自己的任务，然后学长出题做一下，看一百遍不如去做一遍。自己比之前的进步也蛮大的，学会了看文档，真的是事半功倍，学会一个语言的基本用法，看文档不需要一个星期就能搞定。文档的重要还是体现出来了。现在的学习步骤就是看文档，到出BUG，或者看不懂的地方，再去看视频，视频不行就去CSDN搜。然后自己的博客也是很久没更新了，虽然没什么点击量，但是我觉得还是要写起来的，等大数据结束了，希望能再把博客发起来，自己处理BUG的过程什么，都可以去发，争取一天一篇。当作日常任务一样。</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8月笔记</title>
      <link href="/posts/c2f4db5d.html"/>
      <url>/posts/c2f4db5d.html</url>
      
        <content type="html"><![CDATA[<h1 id="8-1-Hive压缩和存储-以及优化">8.1 Hive压缩和存储 以及优化</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题">2.标题</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第九章 压缩和存储</span><br><span class="line">第十章 hive优化</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述">3.所学内容概述</h2><p>hadoop压缩配置</p><p>压缩参数配置</p><p>开启Map输出阶段压缩 利用MR</p><p>企业调优</p><h2 id="4-根据概述分章节描述">4.根据概述分章节描述</h2><h3 id="个人理解">个人理解</h3><p>压缩和解压和我们平常window使用的差不多，虽然是在hive中的压缩和解压 但是底层还是利用hadoop中的MR，所以压缩编码也是MR所支持的。</p><p>有哪些我截图出来</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220904125544572.png" alt="image-20220904125544572"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220904125555816.png" alt="image-20220904125555816"></p><p>根据性能比较，可以看出 LZO的性能远远领先于其他两个</p><p>在实际的项目开发当中，hive 表的数据存储格式一般选择：orc 或 parquet。压缩方式一般选择 snappy，lzo。</p><h3 id="开启Map输出阶段压缩">开启Map输出阶段压缩</h3><p>因为map输出阶段压缩中job，数据传输量很大，所以我们根据效率需要适量减少，在job中工作的是map和reduce task间数据传输。利用hive代码开启</p><p>分4步 最后一步是查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--1.开启hive中间传输数据压缩功能</span><br><span class="line">hive (default)&gt;set hive.exec.compress.intermediate=true;</span><br><span class="line">--2.开启mapreduce中map的输出压缩功能</span><br><span class="line">hive (default)&gt;set mapreduce.map.output.compress=true;</span><br><span class="line">--3.设置mapreduce中map输出数据的压缩方式</span><br><span class="line">hive (default)&gt;set mapreduce.map.output.compress.codec=</span><br><span class="line">org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line">--4.执行查询语句</span><br><span class="line">hive (default)&gt; select count(ename) name from emp;</span><br></pre></td></tr></table></figure><h3 id="开启Reduce输出阶段压缩">开启Reduce输出阶段压缩</h3><p>如果hive已经把数据导入的表中没这个时候怎么压缩，就需要用Reduce</p><p>hive.exec.compress.output在hive中 默认设置为false 意思就是输出是纯文本文件</p><p>设置为true 就是压缩文件</p><p>也是四条命令 最后一条查询 可以查询输出文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--（1）开启 hive 最终输出数据压缩功能</span><br><span class="line">hive (default)&gt;set hive.exec.compress.output=true;</span><br><span class="line">--（2）开启 mapreduce 最终输出数据压缩</span><br><span class="line">hive (default)&gt;set mapreduce.output.fileoutputformat.compress=true;</span><br><span class="line">--（3）设置 mapreduce 最终数据输出压缩方式</span><br><span class="line">hive (default)&gt; set mapreduce.output.fileoutputformat.compress.codec =</span><br><span class="line">org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line">--（4）设置 mapreduce 最终数据输出压缩为块压缩</span><br><span class="line">hive (default)&gt; set </span><br><span class="line">mapreduce.output.fileoutputformat.compress.type=BLOCK;</span><br><span class="line">--（5）测试一下输出结果是否是压缩文件</span><br><span class="line">hive (default)&gt; insert overwrite local directory</span><br><span class="line">&#x27;/opt/module/data/distribute-result&#x27; select * from emp distribute by </span><br><span class="line">deptno sort by empno desc;</span><br></pre></td></tr></table></figure><h3 id="企业级调优">企业级调优</h3><p>在尚硅谷给的文档中有，比较多，而且目前对自己学习用处不大。就不计入笔记了。</p><h2 id="5-总结">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习任务不是很重，基本算是hive的完结了。 压缩和存储，跟着文档试着整了一下，花费的时间比较多，三个来小时，然后静下心去看了优化的文档，看完，认为对以后hive操作，应该用处挺大的，主要就是提高效率问题，但是有一些麻烦，而且比赛也不会设置这些参数，就先不去纠结了，今天倒是没有什么难点，明天试着去做hive题库了。</p><h1 id="8-2-Hive复习-sqoop完结">8.2 Hive复习 sqoop完结</h1><h2 id="1-头：日期、所学内容出处-2">1-头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-2">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">P101_尚硅谷<span class="variable">_Sqoop_</span>课程介绍</span><br><span class="line">P202_尚硅谷<span class="variable">_Sqoop_</span>安装</span><br><span class="line">P303_尚硅谷<span class="variable">_Sqoop_</span>全部数据导入</span><br><span class="line">P404_尚硅谷<span class="variable">_Sqoop_</span>查询导入</span><br><span class="line">P505_尚硅谷<span class="variable">_Sqoop_</span>导入指定列</span><br><span class="line">P606_尚硅谷<span class="variable">_Sqoop_</span>查询条件导入</span><br><span class="line">P707_尚硅谷<span class="variable">_Sqoop_</span>导入数据到Hive</span><br><span class="line">P808_尚硅谷<span class="variable">_Sqoop_</span>导入数据到HBase</span><br><span class="line">P909_尚硅谷<span class="variable">_Sqoop_</span>导出数据</span><br><span class="line">P1010_尚硅谷<span class="variable">_Sqoop_</span>脚本调用                </span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-2">3-所学内容概述</h2><h3 id="安装sqoop">安装sqoop</h3><h4 id="导入的几种方式">导入的几种方式</h4><h4 id="导出数据">导出数据</h4><h4 id="脚本调用">脚本调用</h4><h2 id="根据概述分章节描述">根据概述分章节描述</h2><h3 id="什么是Sqoop">什么是Sqoop</h3><p>Sqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库mysql间进行数据的传递，可以将一个关系型数据库Mysql中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p><p>我理解就是导入导出数据库方便</p><h3 id="Sqoop安装">Sqoop安装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下载并解压</span><br><span class="line">修改配置文件</span><br><span class="line">拷贝<span class="keyword">JDBC驱动</span></span><br><span class="line"><span class="keyword"></span>验证Sqoop</span><br><span class="line">测试Sqoop是否能够成功连接数据库</span><br></pre></td></tr></table></figure><h3 id="导入数据">导入数据</h3><p>导入数据就是从非大数据集群 也激素RDBMS 向大数据集群 HDFS Hive Hbase 这些 传输数据 俗称导入</p><p>从RDBMS到HDFS</p><p>1.全部导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop86:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password 000000 \</span><br><span class="line">--table staff \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure><p>2.查询导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop86:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password 000000 \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--query &#x27;select name,sex from staff where id &lt;=1 and $CONDITIONS;&#x27;</span><br></pre></td></tr></table></figure><p><strong>如果query后使用的是双引号，则$CONDITIONS前必须加转移符，防止shell识别为自己的变量。</strong></p><p>3.导入指定列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop86:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password 000000 \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--columns id,sex \</span><br><span class="line">--table staff</span><br></pre></td></tr></table></figure><p>columns中如果涉及到多列，用逗号分隔，分隔时不要添加空格</p><p>4.使用sqoop关键字筛选查询导入数据</p><p>可以自定义筛选或者对数据进行处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop86:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password 000000 \</span><br><span class="line">--target-dir /user/company \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--table staff \</span><br><span class="line">--where &quot;id=1&quot;</span><br></pre></td></tr></table></figure><h4 id="RDBMS到Hive">RDBMS到Hive</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop102:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password 000000 \</span><br><span class="line">--table staff \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--hive-import \</span><br><span class="line">--fields-terminated-by &quot;\t&quot; \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-table staff_hive</span><br></pre></td></tr></table></figure><p>该过程分为两步，第一步将数据导入到HDFS，第二步将导入到HDFS的数据迁移到Hive仓库，第一步默认的临时目录是/user/root/表名</p><h4 id="RDBMS到Hbase">RDBMS到Hbase</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop import \</span><br><span class="line">--connect jdbc:mysql://hadoop102:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password 000000 \</span><br><span class="line">--table company \</span><br><span class="line">--columns &quot;id,name,sex&quot; \</span><br><span class="line">--column-family &quot;info&quot; \</span><br><span class="line">--hbase-create-table \</span><br><span class="line">--hbase-row-key &quot;id&quot; \</span><br><span class="line">--hbase-table &quot;hbase_company&quot; \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--split-by id</span><br></pre></td></tr></table></figure><p>手动创建HBase表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase&gt; create &#x27;hbase_company,&#x27;info&#x27;</span><br></pre></td></tr></table></figure><p>HBase查看表scan命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan &#x27;hbase_company&#x27;</span><br></pre></td></tr></table></figure><h3 id="导出数据-2">导出数据</h3><p>就和导入反过来了 从大数据集群到非大数据集群传输数据 叫做导出 export 关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/sqoop export \</span><br><span class="line">--connect jdbc:mysql://hadoop102:3306/company \</span><br><span class="line">--username root \</span><br><span class="line">--password 000000 \</span><br><span class="line">--table staff \</span><br><span class="line">--num-mappers 1 \</span><br><span class="line">--export-dir /user/hive/warehouse/staff_hive \</span><br><span class="line">--input-fields-terminated-by &quot;\t&quot;</span><br></pre></td></tr></table></figure><h4 id="脚本打包"><strong>脚本打包</strong></h4><p>使用opt格式的文件打包sqoop命令 我的理解就是把命令封装 然后调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vi opt/job_HDFS2RDBMS.opt</span><br><span class="line"></span><br><span class="line">export</span><br><span class="line">--connect</span><br><span class="line">jdbc:mysql://hadoop102:3306/company</span><br><span class="line">--username</span><br><span class="line">root</span><br><span class="line">--password</span><br><span class="line">000000</span><br><span class="line">--table</span><br><span class="line">staff</span><br><span class="line">--num-mappers</span><br><span class="line">1</span><br><span class="line">--export-dir</span><br><span class="line">/user/hive/warehouse/staff_hive</span><br><span class="line">--input-fields-terminated-by</span><br><span class="line">&quot;\t&quot;                 </span><br></pre></td></tr></table></figure><h2 id="扩展学习部分">扩展学习部分</h2><p>Hive练习</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--查询平均成绩大于等于60分的同学</span><br><span class="line">--的学生编号和学生姓名和平均成绩</span><br><span class="line">SELECT stu.id,stu.name,AVG(sco.scores)</span><br><span class="line">from student stu join score sco</span><br><span class="line">on stu.id = sco.sid</span><br><span class="line">group by stu.id,stu.name</span><br><span class="line">having AVG(sco.scores) &gt;= 60;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.查询平均成绩小于60分的同学的学生编号和学生</span><br><span class="line">姓名和平均成绩 – (包括有成绩的和无成绩的)</span><br><span class="line"></span><br><span class="line">SELECT stu.id, stu.name,ROUND(AVG(sco.scores)) as avg_scores</span><br><span class="line">from student stu join score sco</span><br><span class="line">on stu.id = sco.sid</span><br><span class="line">group by stu.id, stu.name</span><br><span class="line">having AVG(sco.scores) &lt; 60</span><br><span class="line">union all --合并查询结果</span><br><span class="line">SELECT stu1.id, stu1.name,0 as avg_scores</span><br><span class="line">from student stu1</span><br><span class="line">where stu1.id not IN</span><br><span class="line">(select sid from score);</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>上午都在安装环境，因为sqoop之前要安装zook和hbase，去看了尚硅谷之前的安装视频，还是挺顺利的，一上午就搞好了，但是在sqoop，从HDFS导出数据到Hive的练习的时候，出现了问题，就是运行过程，到一半卡住不动了。去搜解决问题说是虚拟机CPU分配问题，以后是在服务器上使用的，就没去管了，知道怎么导出就好了。今天的学习状态很不错的，都很顺利，没有之前安装Hive的那种烦躁感，sqoop的使用也比较简单，重点在导入数据，也是蛮容易的，全都掌握了。</p><h1 id="8-4-8-7-省赛题目分析">8.4-8.7 省赛题目分析</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述">2.所学内容概述</h2><p>大数据省赛和国赛spark代码分析</p><h2 id="3-总结">3.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>这几天都是看比赛流程，读懂任务书什么的，还有李昊清洗的代码和sql语句，先看大致的流程，每个案例都怎么弄。每一个函数的作用什么的 ， 在刚看到这些代码都懵逼了，一些关键字都不知道是干嘛用的。不知道的就一个一个去搜，是什么作用，反正去搞懂大致先了，难懂的点在spark的自定义的函数，读取文件什么的，这些弄了很久才搞明白，这两天去问了李昊很多问题，sql啊spark什么的。</p><h1 id="8-8-8-9-SparkSQL深度集成">8.8-8.9 SparkSQL深度集成</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="3-所学内容概述-3">3.所学内容概述</h2><p>SparkSQL用IDEA操作Hive的进阶操作</p><h2 id="4-根据概述分章节描述-2">4.根据概述分章节描述</h2><h3 id="封装SparkSQL连Hive方法"><strong>封装SparkSQL连Hive方法</strong></h3><p>因为每次写SparkSQL代码的时候都需要，写一大串连接Hive的代码，所以自己为了省时间将代码封装到一个工具类了，写SparkSQL代码前调用一下就好了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.sparksql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SQLUntilTools</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Conf</span></span>: <span class="type">SparkSession</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;SparkSQL1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SparkSession</span></span><br><span class="line">    <span class="keyword">val</span> sparkSession: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder()</span><br><span class="line">      .config(conf)</span><br><span class="line">      <span class="comment">//开启对Hive的支持</span></span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    sparkSession</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220808093331230.png" alt="image-20220808093331230"></p><h4 id="使用insertInto向hive表中写入数据">使用insertInto向hive表中写入数据</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.sparksql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQLWriteHive</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkSessionConf: <span class="type">SparkSession</span> = <span class="type">SQLUntilTools</span>.<span class="type">SparkSessionConf</span></span><br><span class="line">    <span class="keyword">import</span> sparkSessionConf.sql</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    <span class="keyword">val</span> resDf: <span class="type">DataFrame</span> = sql(<span class="string">&quot;select * from test6&quot;</span>)</span><br><span class="line"></span><br><span class="line">    resDf.write</span><br><span class="line">      <span class="comment">//指定数据写入格式 append 追加 overwrite覆盖</span></span><br><span class="line">      .mode(<span class="string">&quot;append&quot;</span>)</span><br><span class="line">    <span class="comment">//这里需要指定数据格式 parquet orc json csv text 不指定默认是parquet</span></span><br><span class="line">    <span class="comment">//针对insertInto而言 因为是向已经存在的表写入数据 所以format和options参数会被忽略</span></span><br><span class="line"><span class="comment">//      .format()</span></span><br><span class="line"><span class="comment">//      .options()</span></span><br><span class="line">      .insertInto(<span class="string">&quot;test7&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sparkSessionConf.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>这两天大部分时间都在调配置，代码是没有问题的，但是IDEA一直连不上虚拟机中的hive，晚上才发现是版本问题，第二天就去重装了三台，linux中spark也因为版本问题，导致要全部重装，因为自己把Hive的计算模块从MR换成了Spark，换Linux的spark换了一上午的时间，下午才去在IDEA学SparkSQL操作hive，内容倒是不难，基本就是把hive中的代码放到SparkSQL的语句中去，sql(“show tables”),这种类似，唯一的难点就是IDEA连上hive了。</p><h1 id="8-10-Hive实战之影音数据分析">8.10 Hive实战之影音数据分析</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-3">2.标题</h2><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">P</span><span class="number">119119</span>-尚硅谷-Hive-案例实操 需求一</span><br><span class="line"><span class="keyword">P</span><span class="number">120120</span>-尚硅谷-Hive-案例实操 需求二</span><br><span class="line"><span class="keyword">P</span><span class="number">121121</span>-尚硅谷-Hive-案例实操 需求三</span><br><span class="line"><span class="keyword">P</span><span class="number">122122</span>-尚硅谷-Hive-案例实操 需求四</span><br><span class="line"><span class="keyword">P</span><span class="number">123123</span>-尚硅谷-Hive-案例实操 需求五</span><br><span class="line"><span class="keyword">P</span><span class="number">124124</span>-尚硅谷-Hive-案例实操 需求六</span><br><span class="line"><span class="keyword">P</span><span class="number">125125</span>-尚硅谷-Hive-案例实操 需求七</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-4">3.所学内容概述</h2><p>今日学习部分</p><p>SparkSQL商品</p><p>Hive影音</p><h2 id="4-根据概述分章节描述-3">4.根据概述分章节描述</h2><h3 id="Spark项目实战">Spark项目实战</h3><h4 id="各区域热门商品Top3">各区域热门商品Top3</h4><p>效果图</p><p>注意是要自定义udaf函数 比较难 不太好掌握 所以是跟着老师敲的</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220810194109044.png" alt="image-20220810194109044"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.sparksql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.&#123;<span class="type">Aggregator</span>, <span class="type">UserDefinedAggregateFunction</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">subjectTest2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkSessionConf: <span class="type">SparkSession</span> = <span class="type">SQLUntilTools</span>.<span class="type">SparkSessionConf</span></span><br><span class="line">    <span class="keyword">import</span> sparkSessionConf.sql</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;use atguigu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询基本数据</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select p.product_name,ci.area,ci.city_name,a.* from user_visit_action a</span></span><br><span class="line"><span class="string">        |join product_info p on p.product_id=a.click_product_id</span></span><br><span class="line"><span class="string">        |join city_info ci on a.city_id = ci.city_id where product_id&lt;&gt;-1</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).createOrReplaceTempView(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据区域 商品 进行数据的聚合</span></span><br><span class="line"><span class="comment">//    sparkSessionConf.udf.register(&quot;city_remark&quot;,new CityRemarkUDAF())</span></span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select area,product_name,count(*) as ct,</span></span><br><span class="line"><span class="string">        |cityRemark(city_name) as city_remark</span></span><br><span class="line"><span class="string">        |from t1 group by area, product_name</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).createOrReplaceTempView(<span class="string">&quot;t2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//区域内对点击数量排行</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select *,rank() over (partition by area order by ct desc) as rank from t2</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).createOrReplaceTempView(<span class="string">&quot;t3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取前三名</span></span><br><span class="line">    sql(<span class="string">&quot;select * from t3 where t3.rank&lt;=3&quot;</span>).show(<span class="literal">false</span>) <span class="comment">//false 全部显示</span></span><br><span class="line"></span><br><span class="line">    sparkSessionConf.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Buffer</span>(<span class="params"> var total : <span class="type">Long</span>, var cityMap:mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] </span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义聚合函数：实现城市备注功能</span></span><br><span class="line">  <span class="comment">// 1. 继承Aggregator, 定义泛型</span></span><br><span class="line">  <span class="comment">//    IN ： 城市名称</span></span><br><span class="line">  <span class="comment">//    BUF : Buffer =&gt;【总点击数量，Map[（city, cnt）, (city, cnt)]】</span></span><br><span class="line">  <span class="comment">//    OUT : 备注信息</span></span><br><span class="line">  <span class="comment">// 2. 重写方法（6）</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CityRemarkUDAF</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">String</span>, <span class="type">Buffer</span>, <span class="type">String</span>]</span>&#123;</span><br><span class="line">    <span class="comment">// 缓冲区初始化</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">Buffer</span> = &#123;</span><br><span class="line">      <span class="type">Buffer</span>(<span class="number">0</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新缓冲区数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(buff: <span class="type">Buffer</span>, city: <span class="type">String</span>): <span class="type">Buffer</span> = &#123;</span><br><span class="line">      buff.total += <span class="number">1</span></span><br><span class="line">      <span class="keyword">val</span> newCount: <span class="type">Long</span> = buff.cityMap.getOrElse(city, <span class="number">0</span>L) + <span class="number">1</span></span><br><span class="line">      buff.cityMap.update(city, newCount)</span><br><span class="line">      buff</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并缓冲区数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buff1: <span class="type">Buffer</span>, buff2: <span class="type">Buffer</span>): <span class="type">Buffer</span> = &#123;</span><br><span class="line">      buff1.total += buff2.total</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> map1: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] = buff1.cityMap</span><br><span class="line">      <span class="keyword">val</span> map2: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] = buff2.cityMap</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 两个Map的合并操作</span></span><br><span class="line">      <span class="comment">//            buff1.cityMap = map1.foldLeft(map2) &#123;</span></span><br><span class="line">      <span class="comment">//                case ( map, (city, cnt) ) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//                    val newCount = map.getOrElse(city, 0L) + cnt</span></span><br><span class="line">      <span class="comment">//                    map.update(city, newCount)</span></span><br><span class="line">      <span class="comment">//                    map</span></span><br><span class="line">      <span class="comment">//                &#125;</span></span><br><span class="line">      <span class="comment">//            &#125;</span></span><br><span class="line">      map2.foreach&#123;</span><br><span class="line">        <span class="keyword">case</span> (city , cnt) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> newCount = map1.getOrElse(city, <span class="number">0</span>L) + cnt</span><br><span class="line">          map1.update(city, newCount)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      buff1.cityMap = map1</span><br><span class="line">      buff1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将统计的结果生成字符串信息</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(buff: <span class="type">Buffer</span>): <span class="type">String</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> remarkList = <span class="type">ListBuffer</span>[<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> totalcnt = buff.total</span><br><span class="line">      <span class="keyword">val</span> cityMap = buff.cityMap</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 降序排列</span></span><br><span class="line">      <span class="keyword">val</span> cityCntList = cityMap.toList.sortWith(</span><br><span class="line">        (left, right) =&gt; &#123;</span><br><span class="line">          left._2 &gt; right._2</span><br><span class="line">        &#125;</span><br><span class="line">      ).take(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> hasMore = cityMap.size &gt; <span class="number">2</span></span><br><span class="line">      <span class="keyword">var</span> rsum = <span class="number">0</span>L</span><br><span class="line">      cityCntList.foreach&#123;</span><br><span class="line">        <span class="keyword">case</span> ( city, cnt ) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> r = cnt * <span class="number">100</span> / totalcnt</span><br><span class="line">          remarkList.append(<span class="string">s&quot;<span class="subst">$&#123;city&#125;</span> <span class="subst">$&#123;r&#125;</span>%&quot;</span>)</span><br><span class="line">          rsum += r</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( hasMore ) &#123;</span><br><span class="line">        remarkList.append(<span class="string">s&quot;其他 <span class="subst">$&#123;100 - rsum&#125;</span>%&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      remarkList.mkString(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Buffer</span>] = <span class="type">Encoders</span>.product</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">String</span>] = <span class="type">Encoders</span>.<span class="type">STRING</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hive影音">Hive影音</h3><h4 id="数据清洗">数据清洗</h4><p>写好ETL代码</p><p>利用maven将运行的java代码打包</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin<span class="operator">/</span>yarn jar <span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>software<span class="operator">/</span>subject<span class="operator">/</span>sparksql<span class="number">-1.0</span><span class="operator">-</span>SNAPSHOT.jar com.atguigu.bigdata.sparksql.VideoETLRunner  <span class="comment">--运行代码包名</span></span><br><span class="line"><span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>software<span class="operator">/</span>subject<span class="operator">/</span>video<span class="operator">/</span>video  <span class="comment">--hdfs 需要清洗的文件</span></span><br><span class="line"><span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>software<span class="operator">/</span>subject<span class="operator">/</span>output <span class="comment">--清洗后 文件放的位置</span></span><br></pre></td></tr></table></figure><h4 id="创建表导入数据">创建表导入数据</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220810195710564.png" alt="image-20220810195710564"></p><h4 id="做题">做题</h4><p>答案和步骤都在IDEA里面 包在 bigdata package com.atguigu.bigdata.sparksql.day7SubjectTest</p><p>–统计视频观看数Top10</p><p>–统计视频类别热度Top10</p><p>–统计视频观看数Top20所属类别</p><p>–统计视频观看数Top50所关联视频的所属类别Rank</p><p>–统计每个类别中的视频热度Top10</p><p>–统计每个类别中视频流量Top10</p><p>–统计上传视频最多的用户Top10以及他们上传的视频</p><p>–统计每个类别视频观看数Top10</p><h2 id="7-总结-2">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习的任务不是很重，实战性的，上午把上次的SparkSQL操作的商品表的查询筛选复习了一下，把Hive实战的电影表和用户表建了一下，下午去敲代码，还是很简单，轻松的。因为之前反复琢磨了50题的hive，做了四五天呢，所以看清楚表的结构和要求，敲出来不难。</p><h1 id="8-11-SparkSQL向hive表写入数据">8.11 SparkSQL向hive表写入数据</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-4">2.标题</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>-<span class="number">2</span>-<span class="number">2</span> 使用saveAsTable向Hive表中写入数据-<span class="number">1</span></span><br><span class="line"><span class="attribute">1</span>-<span class="number">2</span>-<span class="number">3</span> 使用saveAsTable向Hive表中写入数据-<span class="number">2</span></span><br><span class="line"><span class="attribute">1</span>-<span class="number">2</span>-<span class="number">4</span> 使用SparkSQL向Hive表中写入数据</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-5">3.所学内容概述</h2><p>SparkSQL向Hive表写入数据的几种方式</p><h2 id="4-根据概述分章节描述-4">4.根据概述分章节描述</h2><h3 id="使用saveAsTabel向Hive表中写入数据">使用saveAsTabel向Hive表中写入数据</h3><p>自己大部分对代码的解释都 在 注解那边</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.sparksql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用saveAsTable()向Hive表中写入数据</span></span><br><span class="line"><span class="comment"> * Created by xuwei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQLWriteHive_2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkSessionConf: <span class="type">SparkSession</span> = <span class="type">SQLUntilTools</span>.<span class="type">SparkSessionConf</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> sparkSessionConf.sql</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    <span class="keyword">val</span> resDf: <span class="type">DataFrame</span> = sql(<span class="string">&quot;select * from student_score&quot;</span>)</span><br><span class="line">    <span class="comment">//2：saveAsTable()</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分为两种情况，表不存在和表存在</span></span><br><span class="line"><span class="comment">     * 1：表不存在，则会根据DataFrame中的Schema自动创建目标表并写入数据</span></span><br><span class="line"><span class="comment">     * 2：表存在</span></span><br><span class="line"><span class="comment">     *  2.1：如果mode=append，当DataFrame中的Schema和表中的Schema相同(字段顺序可以不同)，则执行追加操作。</span></span><br><span class="line"><span class="comment">     *  当DataFrame中的Schema和表中的Schema不相同，则报错。</span></span><br><span class="line"><span class="comment">     *  2.2：如果mode=overwrite，当DataFrame中的Schema和表中的Schema相同(字段顺序可以不同)，则直接覆盖。</span></span><br><span class="line"><span class="comment">     *  当DataFrame中的Schema和表中的Schema不相同，则会删除之前的表，然后按照DataFrame中的Schema重新创建表并写入数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//表不存在</span></span><br><span class="line">    <span class="comment">/*resDf.write</span></span><br><span class="line"><span class="comment">      //指定数据写入格式append：追加。overwrite：覆盖。</span></span><br><span class="line"><span class="comment">      .mode(&quot;overwrite&quot;)</span></span><br><span class="line"><span class="comment">      //这里需要指定数据格式：parquet, orc, avro(需要添加外部依赖), json, csv, text。不指定的话默认是parquet格式。</span></span><br><span class="line"><span class="comment">      //注意：text数据格式在这里不支持int数据类型</span></span><br><span class="line"><span class="comment">      //针对普通文本文件数据格式(json、csv)，默认创建的Hive表示SequenceFile格式的，无法读取生成的普通文件，不要使用这种格式。</span></span><br><span class="line"><span class="comment">      //parquet、orc数据格式可以正常使用</span></span><br><span class="line"><span class="comment">      .format(&quot;parquet&quot;)</span></span><br><span class="line"><span class="comment">      .saveAsTable(&quot;student_score_bak&quot;)*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表存在</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |create table if not exists student_score_bak(</span></span><br><span class="line"><span class="string">        | id int,</span></span><br><span class="line"><span class="string">        | name string,</span></span><br><span class="line"><span class="string">        | sub string,</span></span><br><span class="line"><span class="string">        | score int</span></span><br><span class="line"><span class="string">        |)using hive</span></span><br><span class="line"><span class="string">        | OPTIONS(</span></span><br><span class="line"><span class="string">        |   fileFormat &#x27;parquet&#x27;</span></span><br><span class="line"><span class="string">        |   )</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    resDf.write</span><br><span class="line">      <span class="comment">//指定数据写入格式append：追加。overwrite：覆盖。</span></span><br><span class="line">      .mode(<span class="string">&quot;overwrite&quot;</span>)</span><br><span class="line">      <span class="comment">//这里需要指定数据格式：parquet, orc, avro(需要添加外部依赖), json, csv, text。不指定的话默认是parquet格式。</span></span><br><span class="line">      <span class="comment">//注意：text数据格式在这里不支持int数据类型</span></span><br><span class="line">      <span class="comment">//针对已存在的表，当mode为append时，这里必须指定为hive。</span></span><br><span class="line">      <span class="comment">//针对已存在的表，当mode为overwrite时：</span></span><br><span class="line">      <span class="comment">//  这里如果指定为hive，则会生成默认数据存储格式(TextFile)的Hive表</span></span><br><span class="line">      <span class="comment">//  这里如果指定为普通文本文件数据格式(json、csv)，默认创建的Hive表是SequenceFile格式的，无法读取生成的普通文件，不需要使用这种方式</span></span><br><span class="line">      <span class="comment">//parquet、orc数据格式可以正常使用</span></span><br><span class="line">      .format(<span class="string">&quot;parquet&quot;</span>)</span><br><span class="line">      .saveAsTable(<span class="string">&quot;student_score_bak&quot;</span>)</span><br><span class="line">    sparkSessionConf.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将代码打包 放linux执行 需要修改一些配置 以及在pom.xml文件中 增加 <scope>provided</scope></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.sparksql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用saveAsTable()向Hive表中写入数据</span></span><br><span class="line"><span class="comment"> * Created by xuwei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQLWriteHive_2_cluster</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SparkSession，为了操作SparkSQL</span></span><br><span class="line">    <span class="keyword">val</span> sparkSession = <span class="type">SparkSession</span></span><br><span class="line">      .builder()</span><br><span class="line">      .appName(<span class="string">&quot;SparkSQLWriteHive_2_cluster&quot;</span>)</span><br><span class="line">      .config(conf)</span><br><span class="line">      <span class="comment">//开启对Hive的支持，支持连接Hive的MetaStore、Hive的序列化、Hive的自定义函数</span></span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> sparkSession.sql</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    <span class="keyword">val</span> resDf = sql(<span class="string">&quot;select * from student_score&quot;</span>)</span><br><span class="line">    <span class="comment">//2：saveAsTable()</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分为两种情况，表不存在和表存在</span></span><br><span class="line"><span class="comment">     * 1：表不存在，则会根据DataFrame中的Schema自动创建目标表并写入数据</span></span><br><span class="line"><span class="comment">     * 2：表存在</span></span><br><span class="line"><span class="comment">     *  2.1：如果mode=append，当DataFrame中的Schema和表中的Schema相同(字段顺序可以不同)，则执行追加操作。</span></span><br><span class="line"><span class="comment">     *  当DataFrame中的Schema和表中的Schema不相同，则报错。</span></span><br><span class="line"><span class="comment">     *  2.2：如果mode=overwrite，当DataFrame中的Schema和表中的Schema相同(字段顺序可以不同)，则直接覆盖。</span></span><br><span class="line"><span class="comment">     *  当DataFrame中的Schema和表中的Schema不相同，则会删除之前的表，然后按照DataFrame中的Schema重新创建表并写入数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表不存在</span></span><br><span class="line">    <span class="comment">/*resDf.write</span></span><br><span class="line"><span class="comment">      //指定数据写入格式append：追加。overwrite：覆盖。</span></span><br><span class="line"><span class="comment">      .mode(&quot;overwrite&quot;)</span></span><br><span class="line"><span class="comment">      //这里需要指定数据格式：parquet, orc, avro(需要添加外部依赖), json, csv, text。不指定的话默认是parquet格式。</span></span><br><span class="line"><span class="comment">      //注意：text数据格式在这里不支持int数据类型</span></span><br><span class="line"><span class="comment">      //针对普通文本文件数据格式(json、csv)，默认创建的Hive表示SequenceFile格式的，无法读取生成的普通文件，不要使用这种格式。</span></span><br><span class="line"><span class="comment">      //parquet、orc数据格式可以正常使用</span></span><br><span class="line"><span class="comment">      .format(&quot;parquet&quot;)</span></span><br><span class="line"><span class="comment">      .saveAsTable(&quot;student_score_bak&quot;)*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表存在</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |create table if not exists student_score_bak(</span></span><br><span class="line"><span class="string">        | id int,</span></span><br><span class="line"><span class="string">        | name string,</span></span><br><span class="line"><span class="string">        | sub string,</span></span><br><span class="line"><span class="string">        | score int</span></span><br><span class="line"><span class="string">        |)using hive</span></span><br><span class="line"><span class="string">        | OPTIONS(</span></span><br><span class="line"><span class="string">        |   fileFormat &#x27;parquet&#x27;</span></span><br><span class="line"><span class="string">        |   )</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    resDf.write</span><br><span class="line">      <span class="comment">//指定数据写入格式append：追加。overwrite：覆盖。</span></span><br><span class="line">      .mode(<span class="string">&quot;overwrite&quot;</span>)</span><br><span class="line">      <span class="comment">//这里需要指定数据格式：parquet, orc, avro(需要添加外部依赖), json, csv, text。不指定的话默认是parquet格式。</span></span><br><span class="line">      <span class="comment">//注意：text数据格式在这里不支持int数据类型</span></span><br><span class="line">      <span class="comment">//针对已存在的表，当mode为append时，这里必须指定为hive。</span></span><br><span class="line">      <span class="comment">//针对已存在的表，当mode为overwrite时：</span></span><br><span class="line">      <span class="comment">//  这里如果指定为hive，则会生成默认数据存储格式(TextFile)的Hive表</span></span><br><span class="line">      <span class="comment">//  这里如果指定为普通文本文件数据格式(json、csv)，默认创建的Hive表是SequenceFile格式的，无法读取生成的普通文件，不需要使用这种方式</span></span><br><span class="line">      <span class="comment">//parquet、orc数据格式可以正常使用</span></span><br><span class="line">      .format(<span class="string">&quot;parquet&quot;</span>)</span><br><span class="line">      .saveAsTable(<span class="string">&quot;student_score_bak&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sparkSession.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用SparkSQL向hive表写入数据-（推荐）">利用SparkSQL向hive表写入数据 （推荐）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.sparksql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用SparkSQL向Hive表中写入数据</span></span><br><span class="line"><span class="comment"> * Created by xuwei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQLWriteHive_3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">      .setMaster(<span class="string">&quot;local&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SparkSession，为了操作SparkSQL</span></span><br><span class="line">    <span class="keyword">val</span> sparkSession = <span class="type">SparkSession</span></span><br><span class="line">      .builder()</span><br><span class="line">      .appName(<span class="string">&quot;SparkSQLWriteHive_3&quot;</span>)</span><br><span class="line">      .config(conf)</span><br><span class="line">      <span class="comment">//开启对Hive的支持，支持连接Hive的MetaStore、Hive的序列化、Hive的自定义函数</span></span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> sparkSession.sql</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3：SparkSQL语句</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分为两种情况：表不存在和表存在</span></span><br><span class="line"><span class="comment">     * 1：表不存在，使用create table as select</span></span><br><span class="line"><span class="comment">     * 2：表存在，使用insert into select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//表不存在</span></span><br><span class="line">    <span class="comment">/*sql(</span></span><br><span class="line"><span class="comment">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">        |create table student_score_bak</span></span><br><span class="line"><span class="comment">        |as</span></span><br><span class="line"><span class="comment">        |select * from student_score</span></span><br><span class="line"><span class="comment">        |&quot;&quot;&quot;.stripMargin)*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表存在</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |create table if not exists student_score_bak(</span></span><br><span class="line"><span class="string">        | id int,</span></span><br><span class="line"><span class="string">        | name string,</span></span><br><span class="line"><span class="string">        | sub string,</span></span><br><span class="line"><span class="string">        | score int</span></span><br><span class="line"><span class="string">        |)using hive</span></span><br><span class="line"><span class="string">        | OPTIONS(</span></span><br><span class="line"><span class="string">        |   fileFormat &#x27;textfile&#x27;,</span></span><br><span class="line"><span class="string">        |   fieldDelim &#x27;,&#x27;</span></span><br><span class="line"><span class="string">        |   )</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert into student_score_bak</span></span><br><span class="line"><span class="string">        |select * from student_score</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sparkSession.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>看报错点是最后一行的stored as orc 翻译说是sql不能用orc文件 CSDN搜索</p><p>官方建议在hive中建表 在SparkSQL中使用，因为在spaek只能默认textfile 想要指定需要使用using</p><p>有效指定 create tablet1(id int)  <strong>using hive</strong> options(fileformat’textfile’)</p><p>fileformat支持的六种参数 sequencefile rcfile orc parquet textfile avro</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220811091010618.png" alt="image-20220811091010618"></p><h2 id="7-总结-3">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习了Spark的进阶操作吧，向hive表中添加处理数据，这样的添加方式。可以在将数据过滤以后，  把新过滤好的数据，建立成新的表。 老师讲课说saveAtTable这种方法太麻烦了，平常还是使用SparkSQL比较多。但是看大三的省赛大数据数据清洗的代码是有用到saveAtTable的.</p><h1 id="8-12-with-…-as-Hive-sql理解">8.12 with … as Hive sql理解</h1><h2 id="1-头：日期、所学内容出处-7">1.头：日期、所学内容出处</h2><p><a href="http://t.csdn.cn/KSKLW">http://t.csdn.cn/KSKLW</a></p><p><a href="http://t.csdn.cn/WMTZN">http://t.csdn.cn/WMTZN</a></p><h2 id="3-所学内容概述-6">3.所学内容概述</h2><h4 id="with-…-as">with … as</h4><p>参考博客如上</p><p><em><strong>with as</strong></em> 也叫做子查询部分，首先定义一个sql片段，该sql片段会被整个<strong>sql</strong>语句所用到，为了让<strong>sql</strong>语句的可读性更高些，作为提供数据的部分，也常常用在union等集合操作中。</p><p>with as就类似于一个视图或临时表，可以用来存储一部分的sql语句作为别名，不同的是<strong>with as 属于一次性的，而且必须要和其他sql一起使用才可以</strong>！</p><p>其最大的好处就是适当的提高代码可读性，而且如果with子句在后面要多次使用到，这可以大大的简化SQL；更重要的是：一次分析，多次使用，这也是为什么会提供性能的地方，达到了“少读”的目标。</p><p>简单使用 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> t1 <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> carinfo</span><br><span class="line"> ), </span><br><span class="line"> t2 <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> car_blacklist</span><br><span class="line"> )</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t1, t2</span><br></pre></td></tr></table></figure><p>注意点</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>--<span class="keyword">with</span>子句必须在引用的<span class="keyword">select</span>语句之前定义,同级<span class="keyword">with</span>关键字只能使用一次,多个只能用逗号分割；最后一个<span class="keyword">with</span> 子句与下面的查询之间不能有逗号，只通过右括号分割,<span class="keyword">with</span> 子句的查询必须用括号括起来.</span><br><span class="line"><span class="number">2</span>--如果定义了<span class="keyword">with</span>子句，但其后没有跟<span class="keyword">select</span>查询，则会报错！</span><br></pre></td></tr></table></figure><p>自己使用分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*不使用with as*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> area <span class="keyword">order</span> <span class="keyword">by</span> ct <span class="keyword">desc</span>) <span class="keyword">as</span> rank <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> area,product_name,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> ct <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> p.product_name,ci.area,ci.city_name,a.<span class="operator">*</span> <span class="keyword">from</span> user_visit_action a</span><br><span class="line"><span class="keyword">join</span> product_info p <span class="keyword">on</span> p.product_id<span class="operator">=</span>a.click_product_id</span><br><span class="line"><span class="keyword">join</span> city_info ci <span class="keyword">on</span> a.city_id <span class="operator">=</span> ci.city_id <span class="keyword">where</span> product_id<span class="operator">&lt;&gt;</span><span class="number">-1</span>) t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> area, product_name) t2</span><br><span class="line">) t3 <span class="keyword">where</span> t3.rank<span class="operator">&lt;=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--使用with ..as*/</span></span><br><span class="line"><span class="keyword">with</span>  t1 <span class="keyword">as</span> ( <span class="keyword">select</span> p.product_name,ci.area,ci.city_name,a.<span class="operator">*</span> <span class="keyword">from</span> user_visit_action a</span><br><span class="line">          <span class="keyword">join</span> product_info p <span class="keyword">on</span> p.product_id<span class="operator">=</span>a.click_product_id</span><br><span class="line">          <span class="keyword">join</span> city_info ci <span class="keyword">on</span> a.city_id <span class="operator">=</span> ci.city_id <span class="keyword">where</span> product_id<span class="operator">&lt;&gt;</span><span class="number">-1</span> ),</span><br><span class="line">     t2 <span class="keyword">as</span> ( <span class="keyword">select</span> area,product_name,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> ct <span class="keyword">from</span> t1 <span class="keyword">group</span> <span class="keyword">by</span> area, product_name),</span><br><span class="line">     t3 <span class="keyword">as</span> ( <span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> area <span class="keyword">order</span> <span class="keyword">by</span> ct <span class="keyword">desc</span>) <span class="keyword">as</span> rank <span class="keyword">from</span> t2 )</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3 <span class="keyword">where</span> t3.rank<span class="operator">&lt;=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>以上案例可见，with 对Hive可读性的提升是显而易见的。</p><p><strong>其实一些时候是可以用with as 代替 join on 的但是我觉得join on更方便而且代码量比较少 所以像表格嵌套去查的时候，我才会去使用with as来提高可读性</strong></p><h3 id="Hive查询结构完整">Hive查询结构完整</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select distinct....</span><br><span class="line">from leftTable....</span><br><span class="line">join rightTable.... on ....</span><br><span class="line">where ....</span><br><span class="line">group by ....</span><br><span class="line">having ....</span><br><span class="line">order by ....</span><br><span class="line">limit ....</span><br><span class="line">union [all]....</span><br></pre></td></tr></table></figure><h4 id="hive执行顺序">hive执行顺序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 先执行 <span class="keyword">from</span> 子句 </span><br><span class="line"><span class="number">2.</span> 再执行 <span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="number">3.</span> 然后再关联右表，也就是执行 join....</span><br><span class="line"><span class="number">4.</span> 再执行 where....</span><br><span class="line"><span class="number">5.</span> 执行 <span class="keyword">group</span> by.....</span><br><span class="line"><span class="number">6.</span> 再执行 having....</span><br><span class="line"><span class="number">7.</span> 然后执行 select....</span><br><span class="line"><span class="number">8.</span> 如果有 <span class="keyword">distinct</span>，则会对 <span class="keyword">select</span> 选择的所有字段的值的组合去重</span><br><span class="line"><span class="number">9.</span> 再执行 <span class="keyword">order</span> by....</span><br><span class="line"><span class="number">10.</span> 再执行 limit 进行限制条数查询(分页查询)</span><br><span class="line"><span class="number">11.</span> 最后执行两个 <span class="keyword">sql</span> 的合并。</span><br></pre></td></tr></table></figure><p><strong>注意：列别名和表别名尽量正确使用，在hive中，非常严格，有的时候必须加别名。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. hql什么时候不会被翻译成mr程序</span><br><span class="line"> -- select * from tablename;</span><br><span class="line"> -- select * from tablename limit [m,]n;</span><br><span class="line">2. hql对子查询支持的不够友好</span><br><span class="line"> (1) hql有子查询时，通常都会有表别名和列别名的应用</span><br><span class="line"> (2) 子查询可以在from子句中，与mysql的用法一致</span><br><span class="line"> (3) 子查询可以在where子句中，但是只能应用[not] in 或者 [not] exists</span><br><span class="line"> (4) 子查询可以在having子句中，但是只能应用[not] in 或者 [not] exists</span><br><span class="line"> (5) 子查询在having子句中时，如果用的是in，并且有聚合函数，那么聚合函数应该在select子句出现</span><br><span class="line"> (6) 子查询不支持在select子句中。</span><br><span class="line">--3. 查询原则</span><br><span class="line"> （1）能不使用子查询，就不用子查询，通常子查询都可以使用join来替换</span><br><span class="line"> （2）能不用join就别用join，但是通常避免不了</span><br><span class="line"> （3）[not] in 通常要替换成 [not] exists</span><br><span class="line"> （4）join时，一定要注意小表驱动大表</span><br><span class="line">--4，聚合函数的count的优化</span><br><span class="line"> #1. 执行效果上：</span><br><span class="line"> - count(*)包括了所有的列，相当于行数，在统计结果的时候不会忽略null值</span><br><span class="line"> - count(1)包括了所有列，用1代表行，在统计结果的时候也不会忽略null值</span><br><span class="line"> - count(列名)只包括列名那一列，在统计结果时，会忽略null值</span><br><span class="line"></span><br><span class="line"> #2. 执行效率上：</span><br><span class="line"> - 列名为主键，count(列名)会比count(1)快，count(主键)效率是最高的</span><br><span class="line"> - 列名不为主键，count(1)会比count(列名)快</span><br><span class="line"> - 如果表中有多个列并且没有主键，count（1）的效率高于count(*)</span><br><span class="line"> - 如果表中只有一个字段count(*)效率最高</span><br></pre></td></tr></table></figure><h3 id="5-BUG点-2">5. BUG点</h3><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>当我筛选count 取大于5的时候，报错了。后面注意到 ，count是聚合函数 需要分组才能使用。忘记加了group by 分组</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220812192832083.png" alt="image-20220812192832083"></p><h3 id="总结-2">总结</h3><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天上午在看省赛数据清洗中sparksql那边的代码答案，学长写的，发现比较常用的with as这部分视频没讲，能很好的增强可读性，就去CSDN去搜了一下，sql下面还有read读数据的代码。总之就是代码看不懂的地方就一个一个去搜过来，搞懂作用，不行就问学长，下午又去做了几道hive的案例，多用了with as 原本 join 里面（）t1这样的方式，查询嵌套真的不太看得懂，用了with as 自己写的sql语句，思路也清晰不少，别名出现的几次BUG也去看了一下，以后要多加注意。</p><h1 id="8-13-8-17-hive-50题">8.13-8.17 hive 50题</h1><h2 id="1-头：日期、所学内容出处-8">1.头：日期、所学内容出处</h2><p><a href="http://t.csdn.cn/kVN4d">http://t.csdn.cn/kVN4d</a></p><h2 id="2-所学内容概述-2">2.所学内容概述</h2><h3 id="hive-50题自写-改进-用with-as">hive 50题自写 改进 用with as</h3><h2 id="3-根据概述分章节描述">3.根据概述分章节描述</h2><p>因为之前hive刚看完的时候，直接去看省赛题目，李昊省赛的spark代码只能看个七八十，自己写估计是不大写的出来，问学长说sql语句比较重要，csdn搜hive sql 练习题 很多都是50道经典题，但是都是用很麻烦的方法，看学长的with as   句，就直接打算自己用with as 自己写。</p><p>sql 语句 如下</p><p>像25题有很多种解法，我自己就列出来了3种。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line">-- 4.查询平均成绩小于60分的同学的学生编号和学生</span><br><span class="line">-- 姓名和平均成绩 – (包括有成绩的和无成绩的)</span><br><span class="line">select stu.name,stu.id,round(avg(score.scores),2) as avg_scores from student stu</span><br><span class="line">                                                                         left join score on score.sid=stu.id</span><br><span class="line">group by stu.name, stu.id</span><br><span class="line">having avg(score.scores) &lt; 60</span><br><span class="line">union all</span><br><span class="line">select stu1.id, stu1.name,0 as avg_scores from student stu1</span><br><span class="line">where stu1.id not in (select sid from score);</span><br><span class="line"></span><br><span class="line">-- 5.查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</span><br><span class="line">select stu.id,stu.name,count(cid),nvl(sum(scores),0) from student stu</span><br><span class="line">                                                              left join score sco on sco.sid=stu.id</span><br><span class="line">group by id,name;</span><br><span class="line"></span><br><span class="line">-- 6.查询&quot;李&quot;姓老师的数量</span><br><span class="line">select *,count(tname) as num from teacher</span><br><span class="line">where tname like &quot;李%&quot;</span><br><span class="line">group by tid,tname;</span><br><span class="line"></span><br><span class="line">-- 7.查询学过&quot;张三&quot;老师授课的同学的信息</span><br><span class="line">select student.* from student</span><br><span class="line">left join score on score.sid=student.id</span><br><span class="line">left join course c on score.cid = c.cid</span><br><span class="line">left join teacher t on c.tid = t.tid</span><br><span class="line">where t.tname=&quot;张三&quot;;</span><br><span class="line"></span><br><span class="line">-- 8.查询没学过&quot;张三&quot;老师授课的同学的信息</span><br><span class="line">select *</span><br><span class="line">from student where student.id not in (</span><br><span class="line">select student.id from student</span><br><span class="line">left join score on score.sid=student.id</span><br><span class="line">left join course c on score.cid = c.cid</span><br><span class="line">left join teacher t on c.tid = t.tid</span><br><span class="line">where t.tname=&quot;张三&quot;);</span><br><span class="line"></span><br><span class="line">-- 9.查询学过编号为&quot;01&quot;并且也学过编号为&quot;02&quot;的课程的同学的信息</span><br><span class="line">select student.* from student</span><br><span class="line">left join(</span><br><span class="line">select * from score</span><br><span class="line">where cid=1</span><br><span class="line">union all</span><br><span class="line">select * from score</span><br><span class="line">where cid=2) cc on cc.sid=student.id</span><br><span class="line">group by student.id,name,sex,birthday</span><br><span class="line">having count(cc.sid)=2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 10.查询学过编号为&quot;01&quot;但是没有学过编号为&quot;02&quot;的课程的同学的信息</span><br><span class="line">select student.* from student</span><br><span class="line">join score on score.sid=student.id</span><br><span class="line">where cid=1 and score.sid not in (</span><br><span class="line">select sid from score sco where sco.cid=2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 11、查询没有学全所有课程的同学的信息</span><br><span class="line">select student.* from student</span><br><span class="line">left join (select sid from score</span><br><span class="line">      group by sid</span><br><span class="line">      having count(cid)=3) tmp on tmp.sid=student.id</span><br><span class="line">where tmp.sid is null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 12、查询至少有一门课与学号为&quot;01&quot;</span><br><span class="line">-- 的同学所学相同的同学的信息</span><br><span class="line">select student.* from score</span><br><span class="line">right join student on student.id=score.sid</span><br><span class="line">where score.cid in (</span><br><span class="line">    select sco.cid</span><br><span class="line">    from score sco</span><br><span class="line">    where sco.sid=1) and score.sid&lt;&gt;1</span><br><span class="line">group by student.id,name,birthday,sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 15、查询两门及其以上不及格课程</span><br><span class="line">-- 的同学的学号，姓名及其平均成绩</span><br><span class="line">select student.id,name,pingjun from student</span><br><span class="line">join (</span><br><span class="line">select sid,round(avg(scores),1) pingjun from score</span><br><span class="line">where scores&lt;60</span><br><span class="line">group by sid</span><br><span class="line">having count(scores)&gt;=2) tmp on tmp.sid=student.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--16、检索&quot;01&quot;课程分数小于80，按分数降序排列的学生信息</span><br><span class="line">select student.*,tmp.scores from student</span><br><span class="line">join (select sid,scores from score where cid=1 and scores&lt;60) tmp on tmp.sid=student.id</span><br><span class="line">ORDER BY tmp.scores desc ;</span><br><span class="line"></span><br><span class="line">--     17、按平均成绩从高到低显示所有学生</span><br><span class="line">-- 的所有课程的成绩以及平均成绩</span><br><span class="line">select student.id,student.name,nvl(tmp1.scores,&quot;未考&quot;) as c1,nvl(tmp2.scores,&quot;未考&quot;) as c2,nvl(tmp3.scores,&quot;未考&quot;) as c3,tmp.avg_sc</span><br><span class="line">from student</span><br><span class="line">left join (select sid,round(avg(scores),1) avg_sc from score group by sid) tmp on tmp.sid=student.id</span><br><span class="line">left join (select sid,scores  from score s1 where  cid=&#x27;01&#x27;)tmp1 on  tmp1.sid=student.id</span><br><span class="line">left join (select sid,scores  from score s2 where  cid=&#x27;02&#x27;)tmp2 on  tmp2.sid=student.id</span><br><span class="line">left join (select sid,scores  from score s3 where  cid=&#x27;03&#x27;)tmp3 on  tmp3.sid=student.id</span><br><span class="line">order by tmp.avg_sc desc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：</span><br><span class="line">-- 课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</span><br><span class="line">select score.cid,c.cname,</span><br><span class="line">       max(scores) as                                                                  maxScore,</span><br><span class="line">       min(scores) as                                                                  minScore,</span><br><span class="line">       round(avg(scores),2)                                                            avgScore,</span><br><span class="line">       round(sum(if(scores &gt;= 60, 1, 0))/count(c.cid),2)                               passRate,</span><br><span class="line">       round(sum(if(scores &gt;= 60 and scores &lt; 70, 1, 0))/ count(c.cid), 2)             moderate,</span><br><span class="line">       round(sum(case when scores&gt;=70 and scores&lt;80 then 1 else 0 end)/count(c.cid),2) goodRate,</span><br><span class="line">       round(sum(case when scores&gt;=80 and scores&lt;90 then 1 else 0 end)/count(c.cid),2) excellentRates</span><br><span class="line">from score</span><br><span class="line">join course c on score.cid = c.cid</span><br><span class="line">group by score.cid,c.cname;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 19、按各科成绩进行排序，并显示排名:</span><br><span class="line">select c.cid,c.cname,s.name,rank() over (partition by score.cid order by scores) from score</span><br><span class="line">left join course c on score.cid = c.cid</span><br><span class="line">left join student s on s.id=score.sid;</span><br><span class="line"></span><br><span class="line">-- 20、查询学生的总成绩并进行排名</span><br><span class="line">select student.id,student.name,nvl(sum(scores),&#x27;缺考&#x27;) as sum_sc,rank() over (order by sum(scores) desc )from score</span><br><span class="line">right join student on student.id=score.sid</span><br><span class="line">group by student.id, student.name;</span><br><span class="line"></span><br><span class="line">-- 21、查询不同老师所教不同课</span><br><span class="line">-- 程平均分从高到低显示</span><br><span class="line">select score.cid,c.cname,t.tname,round(avg(scores),1) as avg_sc from score</span><br><span class="line">join course c on score.cid = c.cid</span><br><span class="line">join teacher t on c.tid = t.tid</span><br><span class="line">group by score.cid,cname,tname</span><br><span class="line">order by avg_sc desc;</span><br><span class="line"></span><br><span class="line">-- 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩</span><br><span class="line">select course.cname,student.*,tmp.cid,tmp.scores,tmp.cno from student</span><br><span class="line">join (select *,row_number() over (partition by cid order by scores desc)cno from score) tmp on tmp.sid=student.id</span><br><span class="line">join course on course.cid=tmp.cid</span><br><span class="line">where tmp.cno between 2 and 3;</span><br><span class="line"></span><br><span class="line">-- 23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比</span><br><span class="line">select score.cid,cname,</span><br><span class="line">       sum(if(score.scores &gt;= 85 and score.scores &lt;= 100, 1, 0))              as sum_85,</span><br><span class="line">       round(sum(if(score.scores &gt;= 85 and score.scores &lt;= 100, 1, 0))/ count(c.cid), 2),</span><br><span class="line">       sum(if(score.scores &gt;= 70 and score.scores &lt;= 85, 1, 0))               as sum_70,</span><br><span class="line">       round(sum(if(score.scores &gt;= 70 and score.scores &lt;= 85, 1, 0))/ count(c.cid), 2),</span><br><span class="line">       sum(case when score.scores&gt;=60 and score.scores&lt;=70 then 1 else 0 end) as sum_60,</span><br><span class="line">       round(sum(case when score.scores&gt;=60 and score.scores&lt;=70 then 1 else 0 end)/count(c.cid),2),</span><br><span class="line">       sum(if(scores&gt;=0 and scores&lt;60,1,0)) as sum_0,</span><br><span class="line">       round(sum(if(score.scores &gt;= 0 and score.scores &lt;= 60, 1, 0))/ count(c.cid), 2)</span><br><span class="line"></span><br><span class="line">from score</span><br><span class="line">join course c on score.cid = c.cid</span><br><span class="line">group by score.cid,cname;</span><br><span class="line"></span><br><span class="line">-- 24、查询学生平均成绩及其名次</span><br><span class="line">select id,name,round(avg(scores),2),rank() over (order by round(avg(scores),2) desc) from score</span><br><span class="line">right join student on student.id=score.sid</span><br><span class="line">group by id,name;</span><br><span class="line"></span><br><span class="line">-- 25、查询各科成绩前三名的记录</span><br><span class="line">select course.cname,student.*,tmp.cid,tmp.scores,tmp.cno from student</span><br><span class="line">join (select *,row_number() over (partition by cid order by scores desc)cno from score) tmp on tmp.sid=student.id</span><br><span class="line">join course on course.cid=tmp.cid</span><br><span class="line">where tmp.cno &lt;= 3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from</span><br><span class="line">(select *,rank() over (partition by area order by ct desc) as rank from</span><br><span class="line">(select area,product_name,count(*) as ct from</span><br><span class="line">(select p.product_name,ci.area,ci.city_name,a.* from user_visit_action a</span><br><span class="line">join product_info p on p.product_id=a.click_product_id</span><br><span class="line">join city_info ci on a.city_id = ci.city_id where product_id&lt;&gt;-1) t1</span><br><span class="line">group by area, product_name) t2</span><br><span class="line">) t3 where t3.rank&lt;=3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with  t1 as ( select p.product_name,ci.area,ci.city_name,a.* from user_visit_action a</span><br><span class="line">          join product_info p on p.product_id=a.click_product_id</span><br><span class="line">          join city_info ci on a.city_id = ci.city_id where product_id&lt;&gt;-1 ),</span><br><span class="line">     t2 as ( select area,product_name,count(*) as ct from t1 group by area, product_name),</span><br><span class="line">     t3 as ( select *,rank() over (partition by area order by ct desc) as rank from t2 )</span><br><span class="line">select * from t3 where t3.rank&lt;=3;</span><br><span class="line"></span><br><span class="line">use default;</span><br><span class="line"></span><br><span class="line">-- 26、查询每门课程被选修的学生数</span><br><span class="line">select cid,count(*) `学生数` from score group by cid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 27、查询出只有两门课程的全部学生的学号和姓名</span><br><span class="line">select id,name from score</span><br><span class="line">join student on student.id=score.sid</span><br><span class="line">group by id,name</span><br><span class="line">having count(cid)=2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 28、查询男生、女生人数</span><br><span class="line">select sex,count(sex) from student</span><br><span class="line">group by sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 29、查询名字中含有&quot;风&quot;字的学生信息</span><br><span class="line">select * from  student</span><br><span class="line">where name like &quot;%风%&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 30、查询同名同性学生名单，并统计同名人数</span><br><span class="line">select stu1.name,count(*) from student stu1</span><br><span class="line">join student stu2 on stu1.name=stu2.name</span><br><span class="line">where  stu1.id&lt;&gt;stu2.id and stu1.sex=stu2.sex</span><br><span class="line"> group by stu1.name;</span><br><span class="line"></span><br><span class="line">-- 31、查询1990年出生的学生名单</span><br><span class="line">select * from student</span><br><span class="line">where year(student.birthday)=&quot;1990&quot;;</span><br><span class="line"></span><br><span class="line">-- 32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</span><br><span class="line">select cid,avg(scores) `平均成绩`</span><br><span class="line">from score</span><br><span class="line">group by cid</span><br><span class="line">order by `平均成绩` desc ,cid;</span><br><span class="line"></span><br><span class="line">-- 33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩</span><br><span class="line">select id,name,round(avg(scores),2)  `平均成绩`from score</span><br><span class="line">join student on student.id=score.sid</span><br><span class="line">group by id,name</span><br><span class="line">having round(avg(scores),2) &gt;= 85;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 34、查询课程名称为&quot;数学&quot;，且分数低于60的学生姓名和分数</span><br><span class="line"></span><br><span class="line">select sid,name,scores from score</span><br><span class="line">left join course c on score.cid = c.cid</span><br><span class="line">join student on student.id=score.sid</span><br><span class="line">where cname=&quot;数学&quot; and scores&lt;=60;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 35、查询所有学生的课程及分数情况；</span><br><span class="line">with t1 as ( select sid,</span><br><span class="line">                    sum(case cid when &#x27;1&#x27; then scores else 0 end ) as `语文`,</span><br><span class="line">                    sum(case cid when &#x27;2&#x27; then scores else 0 end ) as `数学`,</span><br><span class="line">                    sum(case cid when &#x27;3&#x27; then scores else 0 end ) as `英语`</span><br><span class="line">                    from score</span><br><span class="line">    group by sid)</span><br><span class="line">select id,name,t1. `语文`, `数学`, `英语` from student</span><br><span class="line">left join t1 on t1.sid=student.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数；</span><br><span class="line">with t as ( select sid,</span><br><span class="line">                    sum(case cid when &#x27;1&#x27; then scores else 0 end ) as `语文`,</span><br><span class="line">                    sum(case cid when &#x27;2&#x27; then scores else 0 end ) as `数学`,</span><br><span class="line">                    sum(case cid when &#x27;3&#x27; then scores else 0 end ) as `英语`</span><br><span class="line">             from score</span><br><span class="line">             group by sid)</span><br><span class="line">select id,name,t. `语文`, `数学`, `英语` from student</span><br><span class="line">left join t on t.sid=student.id</span><br><span class="line">where t.`语文`&gt;70 or t.`数学`&gt;70 or t.`英语`&gt;70;</span><br><span class="line"></span><br><span class="line">-- 37、查询不及格的课程</span><br><span class="line">select name,cid,scores from score</span><br><span class="line">join student on student.id=score.sid</span><br><span class="line">where scores &lt; 60;</span><br><span class="line"></span><br><span class="line">-- 38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名；</span><br><span class="line">select id,name,cid,scores from</span><br><span class="line">student stu</span><br><span class="line">join score sco on sco.sid=stu.id</span><br><span class="line">where sco.scores&gt;60 and sco.cid=&quot;1&quot;;</span><br><span class="line"></span><br><span class="line">-- 39、求每门课程的学生人数</span><br><span class="line">select cid,count(*) from score</span><br><span class="line">group by cid;</span><br><span class="line"></span><br><span class="line">-- 40、查询选修&quot;张三&quot;老师所授课程的学生中，成绩最高的学生信息及其成绩</span><br><span class="line">with tmp as (</span><br><span class="line">select stu.*, scores,rank() over (order by scores desc ) as rkdesc from student stu</span><br><span class="line">join score sc on sc.sid=stu.id</span><br><span class="line">join course c on sc.cid = c.cid</span><br><span class="line">join teacher t on c.tid = t.tid</span><br><span class="line">where tname=&quot;张三&quot;)</span><br><span class="line">select * from tmp</span><br><span class="line">where tmp.rkdesc=&quot;1&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</span><br><span class="line">select sco1.sid, sco1.cid, sco1.scores from score sco1</span><br><span class="line">join score sco2 on sco2.sid=sco1.sid</span><br><span class="line">where sco1.cid&lt;&gt;sco2.cid and sco1.scores=sco2.scores</span><br><span class="line">group by sco1.sid, sco1.cid, sco1.scores;</span><br><span class="line"></span><br><span class="line">-- 42、查询每门成绩最好的前两名</span><br><span class="line">with tmp as</span><br><span class="line">(select name,cname,scores,row_number()  over (partition by score.cid order by scores desc )  Toptwo from score</span><br><span class="line">join student on student.id=score.sid</span><br><span class="line">join course c on score.cid = c.cid)</span><br><span class="line">select * from tmp</span><br><span class="line">where tmp.Toptwo&lt;=2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 43、统计每门课程的学生选修人数（超过5人的课程才统计）。</span><br><span class="line">-- 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</span><br><span class="line">select c.cid,cname,count(1) c from score</span><br><span class="line">join course c on score.cid = c.cid</span><br><span class="line">group by c.cid, cname</span><br><span class="line">having count(1) &gt; 5</span><br><span class="line">order by c desc , cid;</span><br><span class="line"></span><br><span class="line">-- 44、检索至少选修两门课程的学生学号</span><br><span class="line">select sid,name,count(cid) `次数`</span><br><span class="line">from score</span><br><span class="line">join student on student.id=score.sid</span><br><span class="line">group by sid,name</span><br><span class="line">having count(cid) &gt;= 2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 45、查询选修了全部课程的学生信息</span><br><span class="line">with tmp as ( select count(1) num from course )</span><br><span class="line">select student.*,count(1) `次数`</span><br><span class="line">from score</span><br><span class="line">join student</span><br><span class="line">join tmp</span><br><span class="line">on student.id=score.sid</span><br><span class="line">group by student.id,birthday,name,sex,tmp.num</span><br><span class="line">having count(1)=tmp.num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 46、查询各学生的年龄：按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</span><br><span class="line">select *,</span><br><span class="line">       year(current_date())-year(birthday)-</span><br><span class="line">(case when month(current_date()) &lt; month(birthday) then 1</span><br><span class="line">    when month(current_date()) = month(birthday) and day(current_date())&gt;day(birthday) then 1 else 0 end ) as age</span><br><span class="line">       from student;</span><br><span class="line"></span><br><span class="line">select * ,</span><br><span class="line">       year(current_date())-year(birthday)-if(current_date()&gt;to_date(concat(&quot;2022-&quot;,substr(birthday,6))),0,1) as `age`</span><br><span class="line">from student;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 47、查询本周过生日的学生</span><br><span class="line">select *,weekofyear(birthday) from student</span><br><span class="line">where weekofyear(birthday)=weekofyear(current_date());</span><br><span class="line"></span><br><span class="line">-- 48、查询下周过生日的学生</span><br><span class="line">select *,weekofyear(birthday) from student</span><br><span class="line">where weekofyear(birthday)=weekofyear(current_date())+1;</span><br><span class="line">-- 49、查询本月过生日的学生</span><br><span class="line">select *,month(birthday) from student</span><br><span class="line">where month(birthday)=month(current_date());</span><br><span class="line">-- 50、查询上月过生日的学生</span><br><span class="line">select *,month(birthday) from student</span><br><span class="line">where month(birthday)=month(current_date())-1;</span><br></pre></td></tr></table></figure><h2 id="4-总结">4.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>这几天任务量也不算大，其实超出了自己的时间，本来打算3天写完，然后1天去总结的。但是发现hive这些语句和B站讲的都不太一样，老师所讲的自己没有去实操过，老师给的题目都是很简单的。像这种稍微有点难度的，需要用大量的join 和 over() 这两个比较难的点，自己去找了很多文档，再看了几遍，觉得差不多了才去做题目。前面第一题就做了三题，到后面上手了一天能做15 道，最后一天17号早上写完了，下午又把语句一个一个运行，去分析每一个关键字的作用，当时是怎么想的，写出来的，模糊的，就再写一遍。</p><h1 id="8-18-8-25-hive提高题-15">8.18-8.25 hive提高题 15</h1><h2 id="1-头：日期、所学内容出处-9">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-根据概述分章节描述">2.根据概述分章节描述</h2><p>题目出自<a href="http://t.csdn.cn/ojSHo">http://t.csdn.cn/ojSHo</a></p><p>ti1</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220825154825546.png" alt="image-20220825154825546"></p><p>建表语句和SparkSQL代码</p><p>后面虚拟机打开，再开IDEA有点吃不消了，hive sql语句就放虚拟机里面了。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.<span class="type">SparksqlTest15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bigdata.sparksql.<span class="type">SQLUntilTools</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CreateTable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">     <span class="comment">//获取spark连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkSession: <span class="type">SparkSession</span> = <span class="type">SQLUntilTools</span>.<span class="type">SparkSessionConf</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> sparkSession.sql</span><br><span class="line">     <span class="comment">//切换db_hive_1数据库</span></span><br><span class="line">    sql(<span class="string">&quot;use db_hive_1&quot;</span>)</span><br><span class="line"> <span class="comment">//建立表格</span></span><br><span class="line">    sql(<span class="string">&quot;&quot;&quot;create table action</span></span><br><span class="line"><span class="string">          |(userId string,</span></span><br><span class="line"><span class="string">          |visitDate string,</span></span><br><span class="line"><span class="string">          |visitCount int)</span></span><br><span class="line"><span class="string">          |row format delimited fields terminated by &quot;\t&quot;</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"> <span class="comment">//添加数据</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u01&#x27;,&#x27;2017/1/21&#x27;,5)</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u02&#x27;,&#x27;2017/1/23&#x27;,6)</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u03&#x27;,&#x27;2017/1/22&#x27;,8)</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u04&#x27;,&#x27;2017/1/20&#x27;,3)</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u01&#x27;,&#x27;2017/1/23&#x27;,6)</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u01&#x27;,&#x27;2017/2/21&#x27;,8)</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u02&#x27;,&#x27;2017/1/23&#x27;,6)</span></span><br><span class="line"><span class="string">        |insert into action values(&#x27;u01&#x27;,&#x27;2017/2/22&#x27;,4)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"> <span class="comment">//查看action数据是否建立</span></span><br><span class="line">    sql(<span class="string">&quot;select * from action&quot;</span>).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bigdata.<span class="type">SparksqlTest15</span></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bigdata.sparksql.<span class="type">SQLUntilTools</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">subject1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkSession</span> = <span class="type">SQLUntilTools</span>.<span class="type">SparkSessionConf</span></span><br><span class="line">    <span class="keyword">import</span> conf.sql</span><br><span class="line"></span><br><span class="line">    sql(<span class="string">&quot;use db_hive_1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//任务一</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |with t1 as (</span></span><br><span class="line"><span class="string">        |    select</span></span><br><span class="line"><span class="string">        |        userId,</span></span><br><span class="line"><span class="string">        |        date_format(regexp_replace(visitDate,&#x27;/&#x27;,&#x27;-&#x27;),&#x27;yyyy-MM&#x27;) mn,</span></span><br><span class="line"><span class="string">        |        visitCount</span></span><br><span class="line"><span class="string">        |    from</span></span><br><span class="line"><span class="string">        |        action),</span></span><br><span class="line"><span class="string">        |     t2 as (</span></span><br><span class="line"><span class="string">        |         select userid,mn,sum(visitcount) mn_count</span></span><br><span class="line"><span class="string">        |         from t1 group by userid, mn)</span></span><br><span class="line"><span class="string">        |select userid,mn,mn_count,sum(mn_count) over (partition by userid order by mn) count_mn from t2 order by userid</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).show()</span><br><span class="line">    <span class="comment">//任务二</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select shop,</span></span><br><span class="line"><span class="string">        |       user_id,</span></span><br><span class="line"><span class="string">        |       ct</span></span><br><span class="line"><span class="string">        |from (select shop,</span></span><br><span class="line"><span class="string">        |             user_id,</span></span><br><span class="line"><span class="string">        |             ct,</span></span><br><span class="line"><span class="string">        |             rank() over (partition by shop order by ct) rk</span></span><br><span class="line"><span class="string">        |      from (select shop,</span></span><br><span class="line"><span class="string">        |                   user_id,</span></span><br><span class="line"><span class="string">        |                   count(*) ct</span></span><br><span class="line"><span class="string">        |            from visit</span></span><br><span class="line"><span class="string">        |            group by shop,</span></span><br><span class="line"><span class="string">        |                     user_id) t1</span></span><br><span class="line"><span class="string">        |     ) t2</span></span><br><span class="line"><span class="string">        |where rk &lt;= 3;</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-BUG点">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><h3 id="SparkSQL添加数据BUG">SparkSQL添加数据BUG</h3><p>刚开始用sparkSQL向action表添加数据报错， 就直接去hive里面直接输入语句了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220818103459749.png" alt="image-20220818103459749"></p><p>虚拟机Linux中Hive启动直接添加</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220818103652166.png" alt="image-20220818103652166"></p><p>成功</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220818103705385.png" alt="image-20220818103705385"></p><h2 id="4-总结-2">4.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>因为自己的任务主要是对数据的处理，也就是sql语句用的比较多，刚好CSDN看到hive提高题，点进去看，感觉还不错，数据也蛮经典的，就想着剩下来的时间刷省赛题之前，刷一下hive sql语句，能节省一点做题时间。这星期都在刷hive的题目，难度还是很大我觉得，前面几天基本一天一道，后面差不多一天两三题，去做完，自己敲完，和答案对一对，看看结果有什么不一样的地方。用spark添加数据这一块会报错，就直接把语句放到文件中，传到虚拟机里面，直接用hive执行，把数据添加好就行了。</p><h1 id="8-26-8-27-sqoop增量导入">8.26-8.27 sqoop增量导入</h1><h2 id="1-头：日期、所学内容出处-10">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-5">2.标题</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">01</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">软件介绍</span></span><br><span class="line"><span class="comment">02</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">安装部署</span></span><br><span class="line"><span class="comment">03</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导入import</span><span class="literal">--</span><span class="comment">全量数据导入hdfs</span></span><br><span class="line"><span class="comment">04</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导入import</span><span class="literal">--</span><span class="comment">全量数据导入hdfs</span><span class="literal">--</span><span class="comment">并行度设置&amp;注意事项</span></span><br><span class="line"><span class="comment">05</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导入import</span><span class="literal">--</span><span class="comment">全量数据导入hive</span></span><br><span class="line"><span class="comment">06</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导入import</span><span class="literal">--</span><span class="comment">表子集数据导入</span></span><br><span class="line"><span class="comment">07</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导入import</span><span class="literal">--</span><span class="comment">增量导入</span><span class="literal">--</span><span class="comment">append模式</span></span><br><span class="line"><span class="comment">08</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导入import</span><span class="literal">--</span><span class="comment">增量导入</span><span class="literal">--</span><span class="comment">lastmodified模式（附加数据）</span></span><br><span class="line"><span class="comment">10</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导出export</span><span class="literal">--</span><span class="comment">默认模式导出（insert）</span></span><br><span class="line"><span class="comment">11</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导出export</span><span class="literal">--</span><span class="comment">默认模式导出（insert）</span><span class="literal">--</span><span class="comment">配置参数</span></span><br><span class="line"><span class="comment">12</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导出export</span><span class="literal">--</span><span class="comment">更新模式导出（insert）</span><span class="literal">--</span><span class="comment">updateonly</span></span><br><span class="line"><span class="comment">13</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">导出export</span><span class="literal">--</span><span class="comment">更新模式导出（insert）</span><span class="literal">--</span><span class="comment">allowinsert</span></span><br><span class="line"><span class="comment">14</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">job作业的使用</span><span class="literal">--</span><span class="comment">创建、查看、执行、删除</span></span><br><span class="line"><span class="comment">15</span><span class="literal">--</span><span class="comment">Apache Sqoop</span><span class="literal">--</span><span class="comment">job作业的使用</span><span class="literal">--</span><span class="comment">免密执行</span></span><br></pre></td></tr></table></figure><h2 id="4-根据概述分章节描述-5">4.根据概述分章节描述</h2><p>在实际工作当中，数据的导入，很多时候都是只需要导入增量数据即可，并不需要将表中的数据每次都全部导入到 hive 或者 hdfs 当中去，这样会造成数据重复的问题。因此一般都是选用一些字段进行增量的导入， sqoop 支持增量的导入据。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大白话讲 就是数据随着增加的，导入</span><br><span class="line">导入表的行</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--incremental append \</span></span><br><span class="line">#上面的选模式 sqoop有两种</span><br><span class="line">#append：追加，比如对大于 <span class="keyword">last</span><span class="operator">-</span><span class="keyword">value</span> 指定的值之后的记录进行追加导入。</span><br><span class="line">#lastmodified：最后的修改时间，追加 <span class="keyword">last</span><span class="operator">-</span><span class="keyword">value</span> 指定的日期之后的记录</span><br><span class="line"><span class="comment">--check-column id \</span></span><br><span class="line">#根据id这列 增量数据 ！这些被指定的列的类型不能使任意字符类型，如 <span class="type">char</span>、<span class="type">varchar</span> 等类</span><br><span class="line">#型都是不可以的，同时<span class="comment">-- check-column 可以去指定多个列。</span></span><br><span class="line"><span class="comment">--last-value 1205</span></span><br><span class="line">#指定列的值以后的数据才能导入</span><br><span class="line">#指定自从上次导入后列的最大值（大于该指定的值），也可以自己设定某一值</span><br></pre></td></tr></table></figure><p>Append<strong>模式导入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin<span class="operator">/</span>sqoop import \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://node-1:3306/userdb \</span></span><br><span class="line"><span class="comment">--username root --password hadoop \</span></span><br><span class="line"><span class="comment">--table emp --m 1 \</span></span><br><span class="line"><span class="comment">--target-dir /appendresult \</span></span><br><span class="line"><span class="comment">--incremental append \</span></span><br><span class="line"><span class="comment">--check-column id \</span></span><br><span class="line"><span class="comment">--last-value 1205</span></span><br></pre></td></tr></table></figure><p>导入过后hdfs会多出一个文件 这个文件就是增量以后的数据  也就是ID 1205后面的数据  不包括1205</p><p>lastmodified<strong>模式导入</strong>、</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bin<span class="operator">/</span>sqoop import \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://node-1:3306/userdb \</span></span><br><span class="line"><span class="comment">--username root \</span></span><br><span class="line"><span class="comment">--password hadoop \</span></span><br><span class="line"><span class="comment">--table customertest \</span></span><br><span class="line"><span class="comment">--target-dir /lastmodifiedresult \</span></span><br><span class="line"><span class="comment">--check-column last_mod \</span></span><br><span class="line"><span class="comment">--incremental lastmodified \</span></span><br><span class="line"><span class="comment">--last-value &quot;2019-05-28 18:42:06&quot; \</span></span><br><span class="line"><span class="comment">--m 1 \</span></span><br><span class="line"><span class="comment">--append</span></span><br></pre></td></tr></table></figure><p>导入也会有一个文件</p><p>check-column列的数据需要是时间戳</p><p>last-value的值 增量导入以后 是时间后面的值 包括该时间</p><p><strong>lastmodified 模式去处理增量时，会将大于等于 last</strong>value 值的数据当做增量插入。</p><h2 id="7-总结-4">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>因为自己在看sqoop的那个视频很短，就两个小时，没有讲过增量导入这一章节，但是省赛任务书是第一点是数据抽取，而且是要求使用sqoop进行抽取，因为要抽8个表格，前面6个都是比较普通的全量抽取，之前自己学的也能做出来，但是到增量导入的时候， 我用sqoop就不知道怎么弄了，问李昊，他们比赛是给后面可视化的，所以没学sqoop，自己整也整不出来，任务书描述的还模糊，两天也没整出来。</p><h1 id="8-28-8-31spark离线数据抽取">8.28-8.31spark离线数据抽取</h1><h2 id="1-头：日期、所学内容出处-11">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-所学内容概述-3">2.所学内容概述</h2><h3 id="IDEA中spark-代码-package打包">IDEA中spark 代码  package打包</h3><p>sparkSQL jar在linux执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark<span class="operator">-</span>submit <span class="comment">--master spark://192.168.23.89:7077 --executor-memory 2g --total-executor-cores 10  --driver-memory 4G  --class com.atguigu.bigdata.Test.subjectTwoData --name subjectTwoData /opt/XXXX.jar</span></span><br></pre></td></tr></table></figure><p><strong>打包过程</strong></p><p>要加Maven插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bigdata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dataClear<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">recompileMode</span>&gt;</span>incremental<span class="tag">&lt;/<span class="name">recompileMode</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-yarn_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-clients_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-scala_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-scala<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.bahir<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-redis_2.10<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据抽取的代码">数据抽取的代码</h3><p>省赛任务书模块D</p><p>spark增量 只用sql 这种where 就比sqoop 我觉得方便很多而且容易理解</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIGDATA</span></span><br><span class="line"><span class="keyword">import</span>  org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">Calendar</span>, <span class="type">Date</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">subjectTwoData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLIP</span> = <span class="string">&quot;192.168.23.89&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">DATABASE</span> = <span class="string">&quot;shtd_store&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLDBURL</span>: <span class="type">String</span> = <span class="string">&quot;jdbc:mysql://&quot;</span> + <span class="type">MYSQLIP</span> + <span class="string">&quot;:3306/&quot;</span> + <span class="type">DATABASE</span> + <span class="string">&quot;?characterEncoding=UTF-8&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLDRIVER</span> = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLUSER</span> = <span class="string">&quot;root&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MYSQLPASSWORD</span> = <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//MYSQL参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立spark连接 hive支持</span></span><br><span class="line">    <span class="keyword">val</span> sparkBuilder: <span class="type">SparkSession</span>.<span class="type">Builder</span> = <span class="type">SparkSession</span>.builder()</span><br><span class="line">    <span class="keyword">if</span> ((args.length &gt; <span class="number">0</span> &amp;&amp; args(<span class="number">0</span>).equals(<span class="string">&quot;local&quot;</span>)) || args.length == <span class="number">0</span>) &#123;</span><br><span class="line">      sparkBuilder.master(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = sparkBuilder.appName(<span class="string">&quot;subjectTwoData&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    连接mysql</span></span><br><span class="line"><span class="comment">     给表格起别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;CUSTOMER&quot;</span>).load().createTempView(<span class="string">&quot;mysql_customer&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;NATION&quot;</span>).load().createTempView(<span class="string">&quot;mysql_nation&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;PART&quot;</span>).load().createTempView(<span class="string">&quot;mysql_part&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;PARTSUPP&quot;</span>).load().createTempView(<span class="string">&quot;mysql_partsupp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;REGION&quot;</span>).load().createTempView(<span class="string">&quot;mysql_region&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;SUPPLIER&quot;</span>).load().createTempView(<span class="string">&quot;mysql_supplier&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;ORDERS&quot;</span>).load().createTempView(<span class="string">&quot;mysql_orders&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="type">MYSQLDBURL</span>)</span><br><span class="line">      .option(<span class="string">&quot;driver&quot;</span>, <span class="type">MYSQLDRIVER</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="type">MYSQLUSER</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="type">MYSQLPASSWORD</span>)</span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;LINEITEM&quot;</span>).load().createTempView(<span class="string">&quot;mysql_lineitem&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置时间为今天</span></span><br><span class="line">    <span class="keyword">val</span> sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> calendar: <span class="type">Calendar</span> = <span class="type">Calendar</span>.getInstance()</span><br><span class="line">    calendar.add(<span class="type">Calendar</span>.<span class="type">DATE</span>,<span class="number">0</span>) <span class="comment">//0代表今天 正数是未来 负数是以前的日期</span></span><br><span class="line">    <span class="keyword">val</span> todayTime: <span class="type">Date</span> = calendar.getTime <span class="comment">//获取时间 格式 ：Mon Aug 29 00:01:10 CST 2022</span></span><br><span class="line">    <span class="keyword">val</span> dateStr: <span class="type">String</span> = sdf.format(todayTime) <span class="comment">//string 类型时间 作分区etldate</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//hive开启动态分区支持</span></span><br><span class="line">    sql(<span class="string">&quot;set hive.exec.dynamic.partition=true&quot;</span>)</span><br><span class="line">    sql(<span class="string">&quot;set hive.exec.dynamic.partition.mode=nonstrict&quot;</span>)</span><br><span class="line">    sql(<span class="string">&quot;set hive.exec.max.dynamic.partitions=50000&quot;</span>)</span><br><span class="line">    sql(<span class="string">&quot;set hive.exec.max.dynamic.partitions.pernode=10000&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取CUSTOMER 到hive的ods设置分区dateStr</span></span><br><span class="line">    <span class="comment">//以下都是全量抽取</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table ods.customer partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">         |select * from mysql_customer</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取NATION 到hive的ods设置分区</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.nation partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">        |select * from mysql_nation</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取PART 到hive的ods设置分区</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table ods.part partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">         |select * from mysql_part</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取PARTSUPP 到hive的ods设置分区</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table ods.partsupp partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">         |select * from mysql_partsupp</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取REGION 到hive的ods设置分区</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table ods.region partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">         |select * from mysql_region</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">//抽取SUPPLIER</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |insert overwrite table ods.supplier partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">         |select * from mysql_supplier</span></span><br><span class="line"><span class="string">         |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增量抽取 1997 12 1以后的数据orderkey为增量字段 etldate为动态分区列</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |select</span></span><br><span class="line"><span class="string">         |orderkey,custkey,orderstatus,totalprice,orderdate,</span></span><br><span class="line"><span class="string">         |orderpriority,clerk,shippriority,comment,regexp_replace(orderdate,&quot;</span>-<span class="string">&quot;,&quot;</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">         | from mysql_orders a</span></span><br><span class="line"><span class="string">         |left join</span></span><br><span class="line"><span class="string">         |(select COALESCE(max(orderkey),-1) as maxid from  ods.orders ) b</span></span><br><span class="line"><span class="string">         |on 1=1 where cast(a.orderkey as int)&gt;cast(b.maxid as int)</span></span><br><span class="line"><span class="string">         |and regexp_replace(a.orderdate,&quot;</span>-<span class="string">&quot;,&quot;</span><span class="string">&quot;)&gt;= &#x27;19971201&#x27;</span></span><br><span class="line"><span class="string">         |</span></span><br><span class="line"><span class="string">      &quot;</span><span class="string">&quot;&quot;</span>.stripMargin).coalesce(<span class="number">50</span>).createOrReplaceTempView(<span class="string">&quot;mysql_order_coalesce&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出过几次BUG的点 任务书的要求是看dealdate这列为动态分区 但是hive表中明显作为动态分区的列 最后一列</span></span><br><span class="line"><span class="comment">     * 是orders.etldate 就把原来代码中的dealdate改成etldate</span></span><br><span class="line"><span class="comment">     * 报错信息</span></span><br><span class="line"><span class="comment">     * exception in thread main org.apache.spark.sql.analysisException dealdate is not a valid partition column in table `ods`.`orders`</span></span><br><span class="line"><span class="comment">     * 线程主org.apache.spark.sql中出现异常。analysisException dealdate不是表“ods”中的有效分区列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table ods.orders partition (etldate)</span></span><br><span class="line"><span class="string">        |select * from mysql_order_coalesce</span></span><br><span class="line"><span class="string">        |</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增量抽取 lineitem orderkey为增量字段 静态分区为当天日期dateStr</span></span><br><span class="line">    sql(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        |insert into table ods.lineitem partition (etldate=&#x27;$dateStr&#x27;)</span></span><br><span class="line"><span class="string">        |select a.* from mysql_lineitem a</span></span><br><span class="line"><span class="string">        |left join</span></span><br><span class="line"><span class="string">        |(select coalesce(max(orderkey),-1) as maxid from ods.lineitem) b on 1=1</span></span><br><span class="line"><span class="string">        |where cast(a.orderkey as int)&gt;cast(b.maxid as int)</span></span><br><span class="line"><span class="string">        |&quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-总结-2">3.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>前段时间因为sqoop增量自己整不来，然后李昊让我基本的sqoop学会就好了，练习题目就用spark，而且省赛说是不考sqoop的，所以我就直接用sparksql连hive，抽取数据了，就是直接用hive 查询导入到MySQL 或者 从MySQL到hive  hive到hive都是可以的，动态分区也很方便，都会默认分区。这几天sparksql使用的比较多，也出现了很多大大小小的问题吧，麻烦的点在打包放linux，里面之前因为没加Maven插件，导致报错了，重新打包还是会报错，代码并没有更新。</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 月笔记 </tag>
            
            <tag> Scala </tag>
            
            <tag> Spark </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7月笔记</title>
      <link href="/posts/33ff80d0.html"/>
      <url>/posts/33ff80d0.html</url>
      
        <content type="html"><![CDATA[<h1 id="7-7-linux入门-基础">7.7 linux入门 基础</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题">2.标题</h2><p>P1001_课程介绍<br>P2002_入门篇_Linux概述（一）_Linux的诞生<br>P3003_入门篇_Linux概述（二）_Unix<br>P4004_入门篇_Linux概述（三）_Linux和Unix的渊源<br>P5005_入门篇_Linux概述（四）_GNU-Linux<br>P6006_入门篇_Linux概述（五）_Linux发行版<br>P7007_入门篇_Linux概述（六）_Linux vs Windows<br>P8008_入门篇_Linux安装（一）_CentOS的版本选择和下载<br>P9009_入门篇_Linux安装（二）_VMware下载安装<br>P10010_入门篇_Linux安装（三）_创建虚拟机<br>P11011_入门篇_Linux安装（四）_安装CentOS<br>P12012_基础篇_桌面和终端基本操作<br>P13013_基础篇_Linux文件系统（一）_文件系统和挂载点<br>P14014_基础篇_Linux文件系统（二）_目录结构<br>P15015_基础篇_VIM编辑器（一）_整体介绍和模式转换<br>P16016_基础篇_VIM编辑器（二）_普通模式<br>P17017_基础篇_VIM编辑器（三）_编辑模式<br>P18018_基础篇_VIM编辑器（四）_命令模式<br>P19019_基础篇_网络配置（一）_网络连接测试<br>P20020_基础篇_网络配置（二）_网络连接模式<br>P21021_基础篇_网络配置（三）_修改静态IP<br>P22022_基础篇_网络配置（四）_配置主机名<br>P23023_基础篇_远程登录<br>P24024_基础篇_系统管理（一）_Linux服务管理<br>P25025_基础篇_系统管理（二）_系统运行级别<br>P26026_基础篇_系统管理（三）_配置服务开机启动和关闭防火墙<br>P27027_基础篇_系统管理（四）_关机重启<br>P28028_实操篇_Shell命令整体介绍及帮助命令</p><h2 id="3-所学内容概述">3.所学内容概述</h2><h3 id="Linux-文件与目录结构"><strong>Linux</strong> <strong>文件与目录结构</strong></h3><h3 id="VI-VIM-编辑器（重要）"><strong>VI/VIM</strong> <strong>编辑器（重要）</strong></h3><h3 id="网络配置"><strong>网络配置</strong></h3><h3 id="系统管理">系统管理</h3><h2 id="4、根据概述分章节描述">4、根据概述分章节描述</h2><h3 id="Linux-文件与目录结构-2"><strong>Linux</strong> <strong>文件与目录结构</strong></h3><p>比较总结的一句话，Linux系统中一切皆文件。一些代码</p><p>Linux内计算机文件目录如图所示</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707191931958.png" alt="image-20220707191931958"></p><p>注意：<code>带箭头是链接，查看属性可以找到其所指向目录</code></p><p>目录结构(树形图)</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707192104440.png" alt="image-20220707192104440"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">常见目录说明</span><br><span class="line">     ①. /bin ：存放常用命令（即二进制可执行程序）</span><br><span class="line"></span><br><span class="line">     ②. /etc ：存放系统配置文件</span><br><span class="line"></span><br><span class="line">     ③. /home ：所有普通用户的家目录</span><br><span class="line"></span><br><span class="line">     ④. /root ：管理员用户的家目录</span><br><span class="line"></span><br><span class="line">     ⑤. /usr ：存放系统应用程序及文档</span><br><span class="line"></span><br><span class="line">     ⑥. /proc ：虚拟文件系统目录，以进程为单位存储内存的映射</span><br><span class="line"></span><br><span class="line">     ⑦. /dev ：存放设备文件</span><br><span class="line"></span><br><span class="line">     ⑧. /mnt ：临时挂载点</span><br><span class="line"></span><br><span class="line">     ⑨. /lib ：存放库文件</span><br><span class="line"></span><br><span class="line">     ⑩. /boot ：系统内核及启动有关的文件</span><br><span class="line"></span><br><span class="line">     ⑪. /tmp ：存放各种临时文件，是所有用户均可访问的地点</span><br><span class="line"></span><br><span class="line">     ⑫. /<span class="keyword">var</span> ：存放系统运行中常改变的文件，如系统日志</span><br></pre></td></tr></table></figure><h3 id="VI-VIM-编辑器（重要）-2"><strong>VI/VIM</strong> <strong>编辑器（重要）</strong></h3><h4 id="简介">简介</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VI 是 Unix 操作系统和类 Unix 操作系统中最通用的文本编辑器。 </span><br><span class="line">VIM 编辑器是从 VI 发展出来的一个性能更强大的文本编辑器。可以主动的以字体颜 色辨别语法的正确性，方便程序设计。VIM 与 VI 编辑器完全兼容</span><br></pre></td></tr></table></figure><p>VI/VIM编辑器分为三个模式，一般模式，编辑模式和命令模式可以互相转换（默认进入是一般模式）</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707193310385.png" alt="image-20220707193310385"></p><h4 id="一般模式">一般模式</h4><p>语法，使用指南</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707193349361.png" alt="image-20220707193349361"></p><h4 id="编辑模式">编辑模式</h4><p>和windows中的记事本差不多，弥补一般模式中无法编辑文件内容的缺点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一般模式中可以进行删除、复制、粘贴等的动作，但是却无法编辑文件内容的！要 等到你按下『<span class="selector-tag">i</span>, <span class="selector-tag">I</span>, o, O, <span class="selector-tag">a</span>, <span class="selector-tag">A</span>』等任何一个字母之后才会进入编辑模式</span><br></pre></td></tr></table></figure><p>[ESC]退出编辑模式到一般模式</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707193840898.png" alt="image-20220707193840898"></p><h4 id="指令模式"><strong>指令模式</strong></h4><p>在一般模式当中，输入『 : / ?』3个中的任何一个按钮，就可以将光标移动到最底下那 一行</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707194023022.png" alt="image-20220707194023022"></p><h3 id="网络配置-2"><strong>网络配置</strong></h3><h4 id="查看网络-IP-和-网关"><strong>查看网络</strong> <strong>IP</strong> <strong>和 网关</strong></h4><p>VMware自带虚拟网络编辑器，可以修改和查看IP地址和网关,<code>在虚拟机便签里</code></p><h4 id="配置网络ip地址">配置网络ip地址</h4><p>查看ip地址(Linux)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span></span><br></pre></td></tr></table></figure><h4 id="修改-IP-地址"><strong>修改</strong> <strong>IP</strong> <strong>地址</strong></h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 桌面]#vim <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707200446620.png" alt="image-20220707200446620"></p><p>先把自动改成静态的，然后添加ip和网关和DNS，终端输入<strong>执行</strong> <strong>service network restart</strong></p><p>然后ping下主机，主机ping下linux，正常即可</p><h4 id="修改主机名称">修改主机名称</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop100</span> 桌面]<span class="meta"># vi /etc/hostname</span></span><br></pre></td></tr></table></figure><p>修改完<code>reboot</code>重启</p><h4 id="下载了xshell和xfip">下载了xshell和xfip</h4><p>远程登录工具</p><h3 id="系统管理-2"><strong>系统管理</strong></h3><p>系统管理一些基本命令CSDN上面都有</p><h4 id="Linux-中的进程和服务"><strong>Linux</strong> <strong>中的进程和服务</strong></h4><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）。</p><p>启动之后一直存在、常驻内存的进程，一般被称作“服务”（service）</p><h4 id="systemctl">systemctl</h4><p>在centos7中systemctl是很重要的查看命令</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707202700316.png" alt="image-20220707202700316"></p><h4 id="常用关机重启命令如下">常用关机重启命令如下</h4><p>这个在后面还是少用，老是说在linux中大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220707201601515.png" alt="image-20220707201601515"></p><h2 id="5-总结">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>开始学习linux，因为之前学python用过一段时间的ubuntu，都是基于linux系统的，一些基本命令都是互通的，查看ls之类的，上手很快，今天学习内容比较简单，入门篇和基础篇，了解到linux一切皆文件，比较有意思，重点中的难点没有，VI和VIM命令记住的话，重点就搞定了，网络配置花了会时间，最后下午把系统管理中重要的命令自己多敲了几遍，今天学习状态还可以，也没有什么地方卡住很久，没出BUG，把ubuntu换到了18.04。</p><h1 id="7-8-实操篇-文件和用户管理">7.8 实操篇 文件和用户管理</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-2">2.标题</h2><p>P28028_实操篇_Shell命令整体介绍及帮助命令<br>P29029_实操篇_文件目录类（一）_目录操作命令（一）_查看和切换工作目录<br>P30030_实操篇_文件目录类（一）_目录操作命令（二）_列出目录内容<br>P31031_实操篇_文件目录类（一）_目录操作命令（三）_创建和删除目录<br>P32032_实操篇_文件目录类（二）_文件操作命令（一）_创建文件<br>P33033_实操篇_文件目录类（二）_文件操作命令（二）_复制文件或文件夹<br>P34034_实操篇_文件目录类（二）_文件操作命令（三）_删除和移动文件<br>P35035_实操篇_文件目录类（二）_文件操作命令（四）_查看文件<br>P36036_实操篇_文件目录类（三）_其它命令（一）_控制台显示和输出重定向<br>P37037_实操篇_文件目录类（三）_其它命令（二）_监控文件变化<br>P38038_实操篇_文件目录类（三）_其它命令（三）_软链接<br>P39039_实操篇_文件目录类（三）_其它命令（四）_查看历史命令<br>P40040_实操篇_时间日期类<br>P41041_实操篇_用户权限类（一）_用户管理（一）_添加和查看用户<br>P42042_实操篇_用户权限类（一）_用户管理（二）_获取root权限和删除用户<br>P43043_实操篇_用户权限类（二）_用户组管理<br>P44044_实操篇_用户权限类（三）_文件属性和权限<br>P45045_实操篇_用户权限类（四）_更改文件权限<br>P46046_实操篇_用户权限类（五）_综合应用案例<br>P47047_实操篇_搜索查找类（一）_查找定位文件<br>P48048_实操篇_搜索查找类（二）_内容过滤查找和管道操作<br>P49049_实操篇_压缩解压类<br>P50050_实操篇_磁盘管理类（一）_查看目录占用空间大小<br>P51051_实操篇_磁盘管理类（二）_查看磁盘使用情况<br>P52052_实操篇_磁盘管理类（三）_查看设备挂载情况<br>P53053_实操篇_磁盘管理类（四）_挂载和卸载<br>P54054_实操篇_磁盘管理类（五）_磁盘分区</p><h2 id="3-所学内容概述-2">3.所学内容概述</h2><h3 id="帮助命令">帮助命令</h3><h3 id="文件目录类">文件目录类</h3><h3 id="时间日期类">时间日期类</h3><h3 id="用户管理命令">用户管理命令</h3><h3 id="用户组管理命令">用户组管理命令</h3><h3 id="文件权限类">文件权限类</h3><h3 id="搜索查找类">搜索查找类</h3><h3 id="压缩和解压类">压缩和解压类</h3><h3 id="磁盘查看和分区类">磁盘查看和分区类</h3><h3 id="进程管理类">进程管理类</h3><h2 id="4、根据概述分章节描述-2">4、根据概述分章节描述</h2><h3 id="帮助命令-2">帮助命令</h3><p><code>man  help</code></p><p>后面跟命令或配置文件 help只能显示内置的而且是全英文</p><p>下载了man中文包，推荐自己使用man，相当于自带的一个tools查看</p><h3 id="文件目录类-2">文件目录类</h3><h4 id="pwd">pwd</h4><p>显示当前目录的绝对路径<code>pwd</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708092158199.png" alt="image-20220708092158199"></p><h4 id="ls">ls</h4><p><strong>查看目录文件</strong></p><p><strong>显示说明</strong></p><p><code>每行列出的信息依次是:文件类型与权限 链接数 文件属主 文件属组 文件大小用byte </code></p><p><code>来表示 建立或最近修改的时间 名字</code></p><p>-a  <strong>全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</strong></p><p>-l  <strong>长数据串列出，包含文件的属性与权限等等数据；(常用)等价于“ll”</strong></p><p>语法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">al</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708093550842.png" alt="image-20220708093550842"></p><h4 id="cd">cd</h4><p>切换目录</p><h5 id="基本用法">基本用法</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708093638995.png" alt="image-20220708093638995"></p><h4 id="创建-删除-查找文件以及目录">创建 删除 查找文件以及目录</h4><h5 id="创建">创建</h5><p><code>mkdir 文件夹名</code></p><p>特殊用法 -p多级创建目录</p><p><code>mkdir -p hello/world/java</code></p><h5 id="删除">删除</h5><p>只能删除空的目录</p><p><code>rmdir 文件夹名</code></p><h5 id="创建文件">创建文件</h5><p><code>touch 文件名</code>只带文件名默认是文本文件</p><p>可加路径 touch 注意:<code>命令后面 直接有/就是绝对路径 否则是相对路径</code></p><h5 id="删除文件">删除文件</h5><p><code>rm 文件名</code></p><p>会提示是否删除 输入yes或者y   或者加入 -f 强制删除就没有提示了 <code>rm -rf</code>强制删除文件内所有目录</p><p><strong>删库跑路 <code>rm -rf /*</code>不要尝试！</strong></p><h5 id="复制文件">复制文件</h5><p>cp</p><p>递归复制 <code>-r</code></p><p>取消提示 <code>/cp</code></p><h5 id="移动文件">移动文件</h5><p><code>mv</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708100810241.png" alt="image-20220708100810241"></p><h5 id="查看文件">查看文件</h5><p><code>cat more less</code></p><p>推荐使用less</p><p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加 强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后 才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;less -e&quot;</span> 当文件显示结束后，自动离开，无需输入<span class="string">&quot;q&quot;</span></span><br><span class="line"><span class="string">&quot;less -f&quot;</span> 强迫打开特殊文件，例如外围设备代号、目录和二进制文件</span><br><span class="line"><span class="string">&quot;less -m&quot;</span> 显示类似<span class="keyword">more</span>命令的百分比</span><br><span class="line"><span class="string">&quot;less -N&quot;</span> 显示每行的行号</span><br><span class="line"><span class="string">&quot;less -s&quot;</span> 将连续的空行合并成一行显示</span><br><span class="line"><span class="string">&quot;less -S&quot;</span> 行信息过长时，将超出部分舍弃</span><br></pre></td></tr></table></figure><p><strong>操作说明</strong></p><p>=可以查看信息</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708101628404.png" alt="image-20220708101628404"></p><p>g回到开头 G到最后一行</p><h4 id="输出重定向">输出重定向</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708102658336.png" alt="image-20220708102658336"></p><h5 id="echo">echo</h5><p>后面跟什么控制台输出什么</p><p>-e 转义可用</p><p><code>echo -e &quot;hello   \nworld&quot;</code></p><h5 id="tail">tail</h5><p>输出文件尾部内容</p><p>重要点是<code>tail -f </code>文件实时追踪该文档的所有更新内容</p><p>在开发环境调试程序，看实时日志很有用的。</p><h4 id="软链接">软链接</h4><p>软链接也称为符号链接，类似于 windows 里的快捷方式，有自己的数据块，主要存放 了链接其他文件的路径</p><p><strong>基本语法</strong></p><p><code>ln -s </code>[原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</p><p><strong>删除和查询</strong></p><p>删除软链接： rm -rf 软链接名，而不是 rm -rf 软链接名/</p><p>如果使用 rm -rf 软链接名/ 删除，会把软链接对应的真实目录下内容删掉</p><p>查询：通过 ll 就可以查看，列表属性第 1 位是 l，尾部会有位置指向。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708104911398.png" alt="image-20220708104911398"></p><h4 id="查看历史命令">查看历史命令</h4><p><code>history</code>在终端敲过的所有命令</p><h3 id="时间日期类-2">时间日期类</h3><p>主要就是date命令很简单</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">date</span> （功能描述：显示当前时间） </span><br><span class="line">（<span class="number">2</span>）<span class="keyword">date</span> +%Y （功能描述：显示当前年份） </span><br><span class="line">（<span class="number">3</span>）<span class="keyword">date</span> +%m （功能描述：显示当前月份） </span><br><span class="line">（<span class="number">4</span>）<span class="keyword">date</span> +%d （功能描述：显示当前是哪一天） </span><br><span class="line">（<span class="number">5</span>）<span class="keyword">date</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span> （功能描述：显示年月日时分秒）</span><br><span class="line">（<span class="number">1</span>）<span class="keyword">date</span> -d <span class="string">&#x27;1 days ago&#x27;</span> （功能描述：显示前一天时间） </span><br><span class="line">（<span class="number">2</span>）<span class="keyword">date</span> -d <span class="string">&#x27;-1 days ago&#x27;</span> （功能描述：显示明天时间）</span><br></pre></td></tr></table></figure><p><code>cal </code>查看本月日期  <code>cal 2003</code>查看2003年日历</p><h3 id="用户管理命令-2">用户管理命令</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名<span class="comment">(添加新用户)</span></span><br><span class="line">passwd 用户名<span class="comment">(设置该用户密码)</span></span><br><span class="line">id 用户名<span class="comment">(该用户是否存在)</span></span><br><span class="line">cat /etc/passwd<span class="comment">(查看创建了什么用户)</span></span><br><span class="line">su 用户名称 （功能描述：切换用户，只能获得用户的执行权限，不能获得环境变量） </span><br><span class="line">su - 用户名称 （功能描述：切换到用户并获得该用户的环境变量及执行权限）</span><br><span class="line">userdel 用户名<span class="comment">(删除用户)</span></span><br><span class="line">userdel -r 用户名<span class="comment">(删除用户，以及相关文件)</span></span><br><span class="line">who查看登录用户信息</span><br><span class="line">whoami （功能描述：显示自身用户名称）</span><br><span class="line">who am i （功能描述：显示登录用户的用户名以及登陆时间）</span><br><span class="line">usermod -g 用户组 用户名<span class="comment">(修改用户的初始登录组)</span></span><br></pre></td></tr></table></figure><h4 id="利用sudo命令给用户root权限">利用sudo命令给用户root权限</h4><p>需要修改配置文件</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708152311189.png" alt="image-20220708152311189"></p><h3 id="文件权限类-2">文件权限类</h3><p>认识文件权限</p><p>（1）0 首位表示类型</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p><p>- 代表文件   d 代表目录   l 链接文档(link file)；</p><p>2）第1-3位确定属主（该文件的所有者）拥有该文件的权限。—User</p><p>3）第4-6位确定属组（所有者的同组用户）拥有该文件的权限，—Group</p><p>4）第7-9位确定其他用户拥有该文件的权限 —Other</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708145803901.png" alt="image-20220708145803901"></p><h4 id="rew在文件和目录的解释">rew在文件和目录的解释</h4><p>（1）作用到文件：</p><p>[ r ]代表可读(read): 可以读取，查看</p><p>[ w ]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前 提条件是对该文件所在的目录有写权限，才能删除该文件</p><p>[ x ]代表可执行(execute):可以被系统执行</p><p>2）作用到目录：</p><p>[ r ]代表可读(read): 可以读取，ls查看目录内容</p><p>[ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录</p><p>[ x ]代表可执行(execute):可以进入该目录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod改变权限</span><br><span class="line">第一种方式变更权限 chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] 文件或目录 </span><br><span class="line">第二种方式变更权限 chmod [<span class="attribute">mode</span>=421 ] [文件或目录]</span><br><span class="line">第二种经验</span><br><span class="line"><span class="attribute">r</span>=4 <span class="attribute">w</span>=2 <span class="attribute">x</span>=1 <span class="attribute">rwx</span>=4+2+1=7 <span class="attribute">rw</span>=4+2=6</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708151136770.png" alt="image-20220708151136770"></p><p>修改所属组和用户(注意权限)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">所属用户 递归-R</span><br><span class="line"><span class="keyword">chown</span></span><br><span class="line">[root@hadoop82 hello]<span class="comment"># chown sjh2 123.txt </span></span><br><span class="line">[root@hadoop82 hello]<span class="comment"># ll</span></span><br><span class="line">总用量 <span class="number">208</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> sjh2 root     <span class="number">41</span> <span class="number">7</span>月   <span class="number">7</span> <span class="number">10</span>:<span class="number">00</span> <span class="number">123</span>.txt</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">所属组</span><br><span class="line">chgrp</span><br><span class="line">[root@hadoop82 hello]<span class="comment"># chgrp sjh2 123.txt </span></span><br><span class="line">[root@hadoop82 hello]<span class="comment"># ll</span></span><br><span class="line">总用量 208</span><br><span class="line">-rw-r--r--.<span class="number"> 1 </span>sjh2 sjh2    <span class="number"> 41 </span>7月  <span class="number"> 7 </span>10:00 123.txt</span><br></pre></td></tr></table></figure><h3 id="搜索查找类-2">搜索查找类</h3><p>find查找文件或者目录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> -name <span class="built_in">info</span></span><br><span class="line"><span class="built_in">find</span> /root -name <span class="string">&quot;*.cfg&quot;</span> (在root目录下结尾是cfg的文件)</span><br><span class="line"><span class="built_in">find</span> /home -size +204800/home目录下查找大于200m的文件)</span><br></pre></td></tr></table></figure><p><strong>locate</strong> <strong>快速定位文件路径</strong></p><p>locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给 定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确 度，管理员必须定期更新 locate 时刻。<code>updatedb</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">locate</span> <span class="number">123</span>.txt</span><br></pre></td></tr></table></figure><p><strong>grep</strong>过滤查找及 **“|” **管道符</p><p><code>-n</code>显示匹配行以及行号</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -<span class="built_in">n</span> <span class="built_in">info</span> MyU7.txt</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708155140955.png" alt="image-20220708155140955"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> | grep .txt(当前目录中以有.txt的文件)</span><br><span class="line"><span class="built_in">wc</span>查找显示行数 单词 字节 </span><br></pre></td></tr></table></figure><h3 id="压缩和解压类-2">压缩和解压类</h3><h4 id="最常用的打包tar">最常用的打包tar</h4><p>tar [选项] XXX.tar.gz 将要打包进去的内容 （打包目录，压缩后的文件式.tar.gz）</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708161541045.png" alt="image-20220708161541045"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf hello<span class="selector-class">.tar</span><span class="selector-class">.gz</span> hello/ <span class="number">1</span><span class="selector-class">.jpg</span></span><br><span class="line">将hello目录和<span class="number">1</span>.jpg图片打包压缩</span><br><span class="line">tar -zxvf hello<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /tmp</span><br><span class="line">将hello<span class="selector-class">.tar</span>.gz压缩包，解压到tmp目录下</span><br></pre></td></tr></table></figure><h3 id="磁盘查看和分区类-2">磁盘查看和分区类</h3><p><code>du</code>命令</p><p>du 目录/文件 （功能描述：显示目录下每个子目录的磁盘使用情况）</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708163438401.png" alt="image-20220708163438401"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop82</span> ~]<span class="meta"># du --max-depth=1 -ah</span></span><br><span class="line">查看目录下一级的文件的大小和总计磁盘空间大小</span><br></pre></td></tr></table></figure><p>df<strong>查看磁盘空间使用情况</strong></p><p><code>df</code>  <code>-h</code>转换为数据内存格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h /目录</span><br><span class="line"><span class="built_in">df</span> -h /(根目录)</span><br><span class="line"><span class="built_in">df</span> -h(当前目录)</span><br></pre></td></tr></table></figure><p><code>free -h</code>当前内存使用情况</p><p><strong>lsblk</strong> <strong>查看设备挂载情况</strong>(了解)</p><p><code>-f</code>查看详细的设备挂载情况，显示文件系统信息</p><h4 id="磁盘分区">磁盘分区</h4><p><strong>fdisk分区</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fdisk</span> -l （功能描述：查看磁盘分区详情） </span><br><span class="line">fdisk 硬盘设备名 （功能描述：对新增硬盘进行分区操作）</span><br></pre></td></tr></table></figure><p><strong>要在root用户下进行</strong></p><h3 id="进程管理类-2">进程管理类</h3><h4 id="ps-查看当前系统进程状态"><strong>ps</strong> <strong>查看当前系统进程状态</strong></h4><p><code>ps aux</code>功能描述：查看系统中所有进程</p><p><code>ps -ef</code>功能描述：可以查看子父进程之间的关系</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708201715785.png" alt="image-20220708201715785"></p><p>使用时机</p><p>如果想查看进程的 CPU 占用率和内存占用率，可以使用 aux;</p><p>如果想查看进程的父进程 ID 可以使用 -ef;</p><h4 id="终止进程">终止进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [选项] 进程号 （功能描述：通过进程号杀死进程） </span><br><span class="line">killall 进程名称 （功能描述：通过进程名称杀死进程，也支持通配符，这 在系统因负载过大而变得很慢时很有用） </span><br></pre></td></tr></table></figure><p><code>kill -9</code>强制停止 谨慎使用</p><p>（1）杀死浏览器进程</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> 桌面]<span class="meta"># kill -9 5102 </span></span><br></pre></td></tr></table></figure><p>（2）通过进程名称杀死进程</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> 桌面]<span class="meta"># killall firefox</span></span><br></pre></td></tr></table></figure><h4 id="pstree查看进程树">pstree查看进程树</h4><p>显示进程pid</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> datas]<span class="meta"># pstree -p</span></span><br></pre></td></tr></table></figure><p>显示进程所属用户</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> datas]<span class="meta"># pstree -u</span></span><br></pre></td></tr></table></figure><h2 id="5-BUG点">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>在分盘操作的时候，报错刚开始不知道什么原因，去CSDN找也没有什么先例，看尚硅谷的笔记，发现分盘只能在root用户下，自己不是root用户，因此会报错，换回root用户就正常了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220708193913260.png" alt="image-20220708193913260"></p><h2 id="6-扩展学习部分">6.扩展学习部分</h2><h3 id="硬链接">硬链接</h3><p><a href="http://t.csdn.cn/g8hbC%E6%9D%A5%E8%87%AA">http://t.csdn.cn/g8hbC来自</a> CSDN 解释清晰</p><p>硬链接的本质就是一条文件名和i结点的关联记录</p><p>结点就是inode</p><p>和软链接的区别：<code>硬链接的文件指向的结点和源文件的结点是一样的，而软链接则是重新建立了一个独立的文件</code></p><p><code>当我们删除了源文件之后，发现硬链接还能正常显示原本的内容，而软链接则提示文件不存在</code></p><p>硬链接关联着我们的源文件，所以源文件的大小是多大，它们就是多大</p><p>但是软链接指向的是文件名，它的大小就是文件名的字节数</p><h2 id="7-总结">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习的Linux命令量比较多，一下子记不住这么多，比较常用的倒是都掌握了，在实操篇的内容，敲的也比较多。难度其实一般，需要掌握的都掌握了，难点都是老师说不需要死钻明白的，最后的磁盘分区，其实实现原理并不太清除，但是实现方法是知道了，就过了。没什么很大的bug，是自己疏忽大意了，忘记自己在什么用户下，权限不够导致无法分区。文件目录类这部分是重点，也是花了一上午，这部分花费的时间和精力比较多，次数敲多了，掌握起来蛮熟练的，忘记的命令可以再看下笔记。</p><h1 id="7-9-扩展篇-Shell编程">7.9 扩展篇 Shell编程</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-3">2.标题</h2><h2 id="3-所学内容概述-3">3.所学内容概述</h2><h2 id="4-根据概述分章节描述">4.根据概述分章节描述</h2><h3 id="软件包管理">软件包管理</h3><p><strong>YUM！</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YUM（全称为 Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 CentOS 中的 <span class="keyword">Shell</span><span class="language-bash"> 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包 并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次 次下载、安装</span></span><br></pre></td></tr></table></figure><p>相当于是Linux中命令行版本的应用商店。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220710231632302.png" alt="image-20220710231632302"></p><p>比如安装火狐浏览器</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> firefox</span><br></pre></td></tr></table></figure><p>卸载火狐浏览器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="built_in">remove</span> firefox</span><br></pre></td></tr></table></figure><h3 id="Shell">Shell</h3><h4 id="概述">概述</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220710232213761.png" alt="image-20220710232213761"></p><p><code>shell默认的解释器是bash</code></p><p>查看命令是<code>  echo $SHELL</code></p><h4 id="Shell脚本">Shell脚本</h4><p>创建一个hello.sh文件，加入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;helloworld&quot;</span></span><br></pre></td></tr></table></figure><p><strong>执行</strong></p><p>第一种：采用 bash 或 sh+脚本的相对路径或绝对路径（不用赋予脚本+x 权限）</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash </span>+路径 或者su +路径</span><br></pre></td></tr></table></figure><p>第二种：采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop82</span> ~]<span class="meta"># chmod +x scripts/hello.sh </span></span><br></pre></td></tr></table></figure><p>再执行脚本</p><p>直接输入路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.sh   <span class="regexp">/root/</span>script/hello.sh</span><br></pre></td></tr></table></figure><h4 id="变量">变量</h4><p>基本语法</p><p>（1）定义变量：变量名=变量值，注意，=号前后不能有空格</p><p>（2）撤销变量：unset 变量名</p><p>变量定义规则</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220711004712936.png" alt="image-20220711004712936"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop82</span> scripts]<span class="meta"># my_var=<span class="string">&quot;hello,  world&quot;</span></span></span><br><span class="line">[root<span class="symbol">@hadoop82</span> scripts]<span class="meta"># echo $my_var</span></span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><p>升级成全局变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> my_var</span><br></pre></td></tr></table></figure><p>只读(静态变量)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">readonly</span> my_var</span><br></pre></td></tr></table></figure><p>特殊变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$n 功能描述：n 为数字，$<span class="number">0</span> 代表该脚本名称，$<span class="number">1</span>-$<span class="number">9</span> 代表第一到第九个参数，十以 上的参数，十以上的参数需要用大括号包含，<span class="comment">#如$&#123;10&#125;</span></span><br><span class="line">$<span class="comment"># （功能描述：获取所有输入参数个数，常用于循环,判断参数的个数是否正确以及 加强脚本的健壮性</span></span><br><span class="line">$* 功能描述：这个变量代表命令行中所有的参数，<span class="comment">#$*把所有的参数看成一个整体</span></span><br><span class="line">$@ 功能描述：这个变量代表命令行中所有的参数，<span class="comment">#$*把所有的参数看成一个整体</span></span><br><span class="line">$? 功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 <span class="number">0</span>，证明上一 个命令正确执行；如果这个变量的值为非 <span class="number">0</span>（具体是哪个数，由命令自己来决定），则证明 上一个命令执行不正确了。</span><br></pre></td></tr></table></figure><h4 id="条件判断">条件判断</h4><p>语法</p><p>（1）test condition</p><p>（2）[ condition ]<strong>（注意 condition 前后要有空格）</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220711110339052.png" alt="image-20220711110339052"></p><p><code>多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一 条命令执行失败后，才执行下一条命令）</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop101 ~]$ [ atguigu ] &amp;&amp; <span class="built_in">echo</span> OK || <span class="built_in">echo</span> notOK </span><br><span class="line">OK</span><br><span class="line">[atguigu@hadoop101 shells]$ [ ] &amp;&amp; <span class="built_in">echo</span> OK || <span class="built_in">echo</span> notOK </span><br><span class="line">notOK</span><br></pre></td></tr></table></figure><h4 id="流程控制">流程控制</h4><h5 id="if语句">if<strong>语句</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ] </span><br><span class="line">then</span><br><span class="line">程序 </span><br><span class="line">elif [ 条件判断式 ] </span><br><span class="line">then</span><br><span class="line">程序 </span><br><span class="line">else</span><br><span class="line">程序 </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="case"><strong>case</strong></h5><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in </span><br><span class="line"><span class="string">&quot;值 1&quot;</span>）</span><br><span class="line">如果变量的值等于值 <span class="number">1</span>，则执行程序 <span class="number">1</span> </span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="string">&quot;值 2&quot;</span>）</span><br><span class="line">如果变量的值等于值 <span class="number">2</span>，则执行程序 <span class="number">2</span> </span><br><span class="line"><span class="comment">;; </span></span><br><span class="line">…省略其他分支… </span><br><span class="line">*） </span><br><span class="line">如果变量的值都不是以上的值，则执行此程序 </span><br><span class="line"><span class="comment">;;</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h5 id="for循环">for<strong>循环</strong></h5><p>从1加到100</p><p>第一种</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum=0 </span><br><span class="line">for((i=0;i&lt;=100;i++)) </span><br><span class="line">do </span><br><span class="line">sum=$[$sum+$i] </span><br><span class="line">done </span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">for i in &#123;1..100&#125;</span><br><span class="line">do </span><br><span class="line">sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><h5 id="while循环">while循环</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum=0 </span><br><span class="line">i=1 </span><br><span class="line">while [ $i -le 100 ] </span><br><span class="line">do </span><br><span class="line">    sum=$[$sum+$i] </span><br><span class="line">    i=$[$i+1] </span><br><span class="line">done </span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure><h4 id="read读取控制台输入">read读取控制台输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-p：指定读取值时的提示符； </span><br><span class="line">-t：指定读取值时等待的时间（秒）如果-t 不加表示一直等待</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -t 7 -p &quot;Enter your name in 7 seconds :&quot; NN</span><br></pre></td></tr></table></figure><h4 id="函数">函数</h4><p>系统函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basename (显示文件的名称)原理就是取/的最后一位</span><br><span class="line">dirname (显示文件的路径) 原理是取最后一位/的前面</span><br></pre></td></tr></table></figure><p>自定义函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line">function sum() </span><br><span class="line">&#123;</span><br><span class="line">s=0</span><br><span class="line">s=$[$1+$2]</span><br><span class="line">echo &quot;$s&quot; </span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;请输入第一个数字: &quot; n1; </span><br><span class="line">read -p &quot;请输入第二个数字: &quot; n2; </span><br><span class="line">sum $n1 $n2;</span><br></pre></td></tr></table></figure><p><code>函数返回值，只能通过$?系统变量获得，可以显示加：return 返回，如果不加，将 以最后一条命令运行结果，作为返回值。return 后跟数值 n(0-255)</code></p><h2 id="5-总结-2">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习内容比较多，昨天的扩展篇收尾，软件包管理yum和一些进程管理类的再次了解。然后今天就是shell部分的学习完毕，shell在我理解有点像python，脚本语言。但是和python比，语言的简洁性,可读性都很差。毕竟是脚本语言，一些比较复杂的代码和程序，写出来就很麻烦用shell。因此现在shell是有一个let 可以用c和java的语言，还是方便的，shell今天学习就和之前的编程语言一样，变量，语法，流程和函数这些基本的。比较简单也就过掉了，在寝室学习雀氏是没有工作室学习的效率高，氛围也有差异，但是在寝室的学习今天算是满意了。</p><h1 id="7-11-Scala基础入门">7.11 Scala基础入门</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-4">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">P1001_尚硅谷<span class="variable">_Scala_</span>课程简介</span><br><span class="line">P2002_尚硅谷<span class="variable">_Scala_Scala</span>概述（一）<span class="variable">_Scala</span>发展历史</span><br><span class="line">P3003_尚硅谷<span class="variable">_Scala_Scala</span>概述（二）<span class="variable">_Scala</span>和Java的关系</span><br><span class="line">P4004_尚硅谷<span class="variable">_Scala_Scala</span>概述（三）<span class="variable">_Scala</span>特点总结</span><br><span class="line">P5005_尚硅谷<span class="variable">_Scala_Scala</span>环境搭建（一）<span class="variable">_Scala</span>安装和交互式命令行测试</span><br><span class="line">P6006_尚硅谷<span class="variable">_Scala_Scala</span>环境搭建（二）<span class="variable">_Scala</span>源文件编写和运行</span><br><span class="line">P7007_尚硅谷<span class="variable">_Scala_Scala</span>环境搭建（三）<span class="variable">_Scala</span>编译结果的反编译深入分析</span><br><span class="line">P8008_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（一）_项目创建和环境配置</span><br><span class="line">P9009_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（二）_编写代码</span><br><span class="line">P10010_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（三）_代码中语法的简单说明</span><br><span class="line">P11011_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（四）_伴生对象的扩展说明</span><br><span class="line">P12012_尚硅谷<span class="variable">_Scala_</span>在IDE中编写HelloWorld（五）_关联源码和查看官方指南</span><br><span class="line">P13013_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（一）_注释和基本编程习惯</span><br><span class="line">P14014_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（二）_变量和常量</span><br><span class="line">P15015_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（三）_标识符</span><br><span class="line">P16016_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（四）_字符串</span><br><span class="line">P17017_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（五）_控制台标准输入</span><br><span class="line">P18018_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（六）_读写文件</span><br><span class="line">P19019_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（七）_数据类型系统</span><br><span class="line">P20020_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（八）_整型和浮点类型</span><br><span class="line">P21021_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（九）_字符和布尔类型</span><br><span class="line">P22022_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十）_空类型</span><br><span class="line">P23023_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十一）<span class="variable">_Unit</span>类型的源码实现</span><br><span class="line">P24024_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（一）<span class="variable">_Java</span>类型转换复习</span><br><span class="line">P25025_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（三）<span class="variable">_Scala</span>自动类型转换</span><br><span class="line">P26026_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（四）<span class="variable">_Scala</span>强制类型转换</span><br><span class="line">P27027_尚硅谷<span class="variable">_Scala_</span>变量和数据类型（十二）_类型转换（五）_强转溢出面试题</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-4">3.所学内容概述</h2><p>案发舒服案发分开</p><h2 id="4-根据概述分章节描述-2">4.根据概述分章节描述</h2><p>fff</p><h3 id="Scala概述">Scala概述</h3><p>因为Spark 所以要学Scala<code>Spark的兴起，带动Scala语言的发展！</code></p><p>Scala基于Java，Scala和Java有密不可分的关系 关系图如下</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220713181600104.png" alt="image-20220713181600104"></p><h4 id="Scala特点">Scala特点</h4><p>Scala是一门以Java虚拟机为运行环境面向对象和函数式编程结合的静态类型的<code>编程语言</code>，scala跟java差不多，源代码编译成字节码文件。</p><p>我使用Scala下来，感觉Scala像是python和java的结合，很简洁，很多地方看到了python的影子。</p><h4 id="Scala环境搭建">Scala环境搭建</h4><p>搭建过这么多的环境，Scala也不复杂，两三分钟就完成了。</p><p>IDEA中导入Scala稍微耗费了点时间，要引入框架。</p><h3 id="Scala入门">Scala入门</h3><p>Scala注解和java完全一样 /* /** 和//</p><h4 id="变量和常量">变量和常量</h4><p>大体和其他编程语言一样，但是要提前声明是变量还是常量</p><p>基本语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var 变量名 [: 变量类型] = 初始值 </span></span><br><span class="line"><span class="keyword">var</span> i:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">//val 常量名 [: 常量类型] = 初始值 </span></span><br><span class="line"><span class="keyword">val</span> j:<span class="type">Int</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>注意点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）声明变量时，类型可以省略，编译器自动推导，即类型推导</span><br><span class="line">（<span class="number">2</span>）类型确定后，就不能修改，说明 Scala 是强数据类型语言。</span><br><span class="line">（<span class="number">3</span>）变量声明时，必须要有初始值</span><br><span class="line">（<span class="number">4</span>）在声明/定义一个变量时，可以使用 <span class="keyword">var</span> 或者 <span class="keyword">val</span> 来修饰，<span class="keyword">var</span> 修饰的变量可改变，</span><br><span class="line"><span class="keyword">val</span> 修饰的变量不可改。</span><br></pre></td></tr></table></figure><h4 id="标识符的命名规范">标识符的命名规范</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Scala </span>对各种变量、方法、函数等命名时使用的字符序列称为标识符。即：凡是自己可以起名字的地方都叫标识符。</span><br></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">和java基本差不多，</span><br><span class="line">（<span class="number">1</span>）以字母或者下划线开头，后接字母、数字、下划线</span><br><span class="line">（<span class="number">2</span>）以操作符开头，且只包含操作符（+ - * / # !等）</span><br><span class="line">（<span class="number">3</span>）用反引号`....`包括的任意字符串，即使是 Scala 关键字（<span class="number">39</span> 个）也可以</span><br></pre></td></tr></table></figure><h4 id="字符串输出">字符串输出</h4><p>关键字<code>println</code></p><h3 id="数据类型-重点"><strong>数据类型(重点)</strong></h3><p>Scala一切是数据都是对象，是Any的子类 如下图</p><p>Scala两大数据类型，引用类AnyRef和数值类型的AnyVal</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220713191734135.png" alt="image-20220713191734135"></p><p>数值类型和其他语言大差不差，语法不一样而已</p><p>如果变量或者常量后面没有声明类型，直接等于号，不报错，是Scala自动给你匹配了对应的类型，就和python一样，还是人性化的，但是最好加上吧，可读性强一些。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"> <span class="keyword">var</span> n1:<span class="type">Byte</span> = <span class="number">127</span></span><br><span class="line"> <span class="keyword">var</span> n2:<span class="type">Byte</span> = <span class="number">-128</span></span><br><span class="line"> <span class="comment">// 错误</span></span><br><span class="line"> <span class="comment">// var n3:Byte = 128</span></span><br><span class="line"> <span class="comment">// var n4:Byte = -129</span></span><br><span class="line"> <span class="comment">// 不带数据类型整型数据默认是int</span></span><br><span class="line"> <span class="keyword">var</span> n5 = <span class="number">10</span></span><br><span class="line"> println(n5)</span><br><span class="line"> <span class="keyword">var</span> n6 = <span class="number">9223372036854775807</span>L</span><br><span class="line"> println(n6)</span><br><span class="line"><span class="comment">//不带数据类型 浮点型默认是Double</span></span><br><span class="line"><span class="comment">// 建议，在开发中需要高精度小数时，请选择 Double</span></span><br><span class="line"> <span class="keyword">var</span> n7 = <span class="number">2.2345678912</span>f</span><br><span class="line"> <span class="keyword">var</span> n8 = <span class="number">2.2345678912</span></span><br><span class="line"> println(<span class="string">&quot;n7=&quot;</span> + n7)</span><br><span class="line"> println(<span class="string">&quot;n8=&quot;</span> + n8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）字符常量是用单引号 &#x27; &#x27; 括起来的单个字符。</span></span><br><span class="line"> <span class="keyword">var</span> c1: <span class="type">Char</span> = &#x27;a&#x27;</span><br><span class="line"> println(<span class="string">&quot;c1=&quot;</span> + c1)</span><br><span class="line"><span class="comment">//注意：这里涉及自动类型提升，其实编译器可以自定判断是否超出范围，</span></span><br><span class="line"> <span class="comment">//不过 idea 提示报错</span></span><br><span class="line"><span class="keyword">var</span> c2:<span class="type">Char</span> = &#x27;a&#x27; + <span class="number">1</span></span><br><span class="line">println(c2)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//（2）\t ：一个制表位，实现对齐的功能</span></span><br><span class="line"> println(<span class="string">&quot;姓名\t 年龄&quot;</span>)</span><br><span class="line"> <span class="comment">//（3）\n ：换行符</span></span><br><span class="line"> println(<span class="string">&quot;西门庆\n 潘金莲&quot;</span>)</span><br><span class="line"> <span class="comment">//（4）\\ ：表示\</span></span><br><span class="line"> println(<span class="string">&quot;c:\\岛国\\avi&quot;</span>)</span><br><span class="line"> <span class="comment">//（5）\&quot; ：表示&quot;</span></span><br><span class="line"> println(<span class="string">&quot;同学们都说：\&quot;大海哥最帅\&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔类 只能false和true占用一个字节</span></span><br><span class="line"><span class="keyword">var</span> isResult : <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line"> <span class="keyword">var</span> isResult2 : <span class="type">Boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="5-总结-3">5.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天是进入Scala的学习，Scala算是一个半新的语言，基于java的。也算是java++，一些语法和规则不太一样，基本运行原理还是差不多的，学习步骤主要是看文档，因为是语言，自己学了很多种了，前面基本的部分，大多语言都大差不差，看看文档还是比较快的，代码敲了四五个吧，关于变量的部分不是很多，今天学习的任务也不是很重，顺便把前几天的centOS中的命令，在ubuntu中，又使用了一些，ubuntu安装是用apt的,不是用Centos的yum，ubuntu下了一个java。</p><h1 id="7-13-hadoop基础入门">7.13 hadoop基础入门</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-5">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span>_尚硅谷_课程简介_大数据课程</span><br><span class="line"><span class="number">02</span>_尚硅谷_课程简介<span class="variable">_Hadoop</span>课程</span><br><span class="line"><span class="number">03</span>_尚硅谷_入门_大数据概念</span><br><span class="line"><span class="number">04</span>_尚硅谷_入门_大数据特点（<span class="number">4</span>V）</span><br><span class="line"><span class="number">05</span>_尚硅谷_入门_大数据应用场景</span><br><span class="line"><span class="number">06</span>_尚硅谷_入门_大数据发展前景</span><br><span class="line"><span class="number">07</span>_尚硅谷_入门_大数据部门业务流程分析</span><br><span class="line"><span class="number">08</span>_尚硅谷_入门_大数据部门组织结构（重点）</span><br><span class="line"><span class="number">09</span>_尚硅谷<span class="variable">_Hadoop_</span>是什么</span><br><span class="line"><span class="number">10</span>_尚硅谷<span class="variable">_Hadoop_</span>发展历史</span><br><span class="line"><span class="number">11</span>_尚硅谷<span class="variable">_Hadoop_</span>三大发行版本</span><br><span class="line"><span class="number">12</span>_尚硅谷<span class="variable">_Hadoop_</span>优势（<span class="number">4</span>高）</span><br><span class="line"><span class="number">13</span>_尚硅谷<span class="variable">_Hadoop_1</span>.x和<span class="number">2</span>.x区别</span><br><span class="line"><span class="number">14</span>_尚硅谷<span class="variable">_Hadoop_</span>组成</span><br><span class="line"><span class="number">15</span>_尚硅谷<span class="variable">_Hadoop_</span>大数据技术生态体系</span><br><span class="line"><span class="number">16</span>_尚硅谷<span class="variable">_Hadoop_</span>推荐系统框架图</span><br><span class="line"><span class="number">17</span>_尚硅谷_环境搭建_虚拟机准备</span><br><span class="line"><span class="number">18</span>_尚硅谷_环境搭建<span class="variable">_JDK</span>安装</span><br><span class="line"><span class="number">19</span>_尚硅谷_环境搭建<span class="variable">_Hadoop</span>安装</span><br><span class="line"><span class="number">20</span>_尚硅谷_环境搭建<span class="variable">_Hadoop</span>目录结构</span><br><span class="line"><span class="number">21</span>_尚硅谷_环境搭建<span class="variable">_Hadoop</span>官网手册</span><br><span class="line"><span class="number">22</span>_尚硅谷_本地模式<span class="variable">_Grep</span>官方案例</span><br><span class="line"><span class="number">23</span>_尚硅谷_本地模式<span class="variable">_WordCount</span>官方案例</span><br><span class="line"><span class="number">24</span>_尚硅谷_伪分布式_启动HDFS并运行MR程序</span><br><span class="line"><span class="number">25</span>_尚硅谷_伪分布式<span class="variable">_Log</span>日志查看和NN格式化前强调</span><br><span class="line"><span class="number">26</span>_尚硅谷_伪分布式<span class="variable">_NameNode</span>格式化注意事项</span><br><span class="line"><span class="number">27</span>_尚硅谷_伪分布式_启动YARN并运行MR程序</span><br><span class="line"><span class="number">28</span>_尚硅谷_伪分布式_配置历史服务器</span><br><span class="line"><span class="number">29</span>_尚硅谷_伪分布式_配置日志聚集</span><br><span class="line"><span class="number">30</span>_尚硅谷_伪分布式_配置文件说明</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-5">3.所学内容概述</h2><p>大数据入门</p><p>hadoop概述入门</p><p>环境搭建</p><p>本地模式</p><p>伪分布式</p><h2 id="4-根据概述分章节描述-3">4.根据概述分章节描述</h2><h3 id="hadoop概述">hadoop概述</h3><p><code>hadoop是一个分布式的基础架构，用于存储和分析计算数据，解决数据问题。</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps1.png" alt="img"></p><p><strong>hadoop的组成</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps2.png" alt="img"></p><p><code>MapReduce和HDFS是重点</code></p><h3 id="虚拟机环境搭建准备"><strong>虚拟机环境搭建准备</strong></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span>克隆虚拟机</span><br><span class="line"><span class="bullet">2.</span>修改克隆虚拟机的静态IP</span><br><span class="line"><span class="bullet">3.</span>修改主机名</span><br><span class="line"><span class="bullet">4.</span>关闭防火墙</span><br><span class="line"><span class="bullet">5.</span>创建atguigu用户</span><br><span class="line"><span class="bullet">6.</span>配置atguigu用户具有root权限</span><br><span class="line">安装JDK 和 hadoop</span><br></pre></td></tr></table></figure><p>安装Jdk和Hadoop时候注意路径，配好环境变量，需要检查。</p><p><code>java -version</code>和<code>hadoop</code>可以检查环境变量有没有配置好</p><h3 id="hadoop目录结构">hadoop目录结构</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）<span class="keyword">bin目录：存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本</span></span><br><span class="line"><span class="keyword"></span>（<span class="number">2</span>）etc目录：Hadoop的配置文件目录，存放Hadoop的配置文件</span><br><span class="line">（<span class="number">3</span>）lib目录：存放Hadoop的本地库（对数据进行压缩解压缩功能）</span><br><span class="line">（<span class="number">4</span>）<span class="keyword">sbin目录：存放启动或停止Hadoop相关服务的脚本</span></span><br><span class="line"><span class="keyword"></span>（<span class="number">5</span>）<span class="keyword">share目录：存放Hadoop的依赖jar包、文档、和官方案例</span></span><br></pre></td></tr></table></figure><h3 id="Hadoop运行模式">Hadoop运行模式</h3><h4 id="本地运行">本地运行</h4><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount wcinput wcoutput</span><br></pre></td></tr></table></figure><h4 id="伪分布式运行模式">伪分布式运行模式</h4><p>具体配置以及测试命令见 文档</p><p>配置集群文档一定要注意命令以及主机名</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）配置集群</span><br><span class="line">（<span class="number">2</span>）启动、测试集群增、删、查</span><br><span class="line">（<span class="number">3</span>）执行<span class="built_in">WordCount</span>案例</span><br></pre></td></tr></table></figure><p>查看集群启动成功用<code>jps</code></p><p>MapReduce和YARN大同小异</p><h4 id="配置历史服务器-日志聚集">配置历史服务器 日志聚集</h4><p>步骤都是配置yarn-site.xml文件然后添加配置</p><p>启动集群 执行即可</p><p><strong>运行情况</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714002441191.png" alt="image-20220714002441191"></p><h2 id="6-扩展学习部分-2">6.扩展学习部分</h2><p>说下这一星期操作linux系统出现的一些常见问题吧，最常见的就是路径问题，经常cd或者解压包的时候，vim和cat找不到文件，大多数就是自己路径的问题。自己出现了的一次问题：我在hadoop-2.7.1中有个文件名叫etc，但是在Linux中根目录也有一个文件名叫etc，所以有好几次，cd和调用命令的时候，报错，说找不到路径，闲下来的时候去CSDN搜了一下，路径的问题，<code>单独一个/代表跟根目录</code>，像<code>/etc/hadoop</code>就是进入根目录的etc中的hadoop目录，如果<code>etc/hadoop</code>就是当前目录有个文件叫etc，是相对的路径，而etc中的hadoop前面带/就是绝对路径，算是两种路径结合在一起，导致自己好几次不成功，几次的经验就是换一个新的路径的时候，ll看一下路径的文件，防止解压等操作的时候，造成不必要的麻烦。</p><h3 id="大数据的技术生态系统体系">大数据的技术生态系统体系</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714002628742.png" alt="image-20220714002628742"></p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）Sqoop：Sqoop是一款开源的工具，主要用于在Hadoop、Hive与传统的数据库(MySql)间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</span><br><span class="line"><span class="number">2</span>）Flume：Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</span><br><span class="line"><span class="number">3</span>）Kafka：Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</span><br><span class="line">（<span class="number">1</span>）通过O(<span class="number">1</span>)的磁盘数据结构提供消息的持久化，这种结构对于即使数以<span class="keyword">TB</span>的消息存储也能够保持长时间的稳定性能。</span><br><span class="line">（<span class="number">2</span>）高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</span><br><span class="line">（<span class="number">3</span>）支持通过Kafka服务器和消费机集群来分区消息。</span><br><span class="line">（<span class="number">4</span>）支持Hadoop并行数据加载。</span><br><span class="line"><span class="number">4</span>）Storm：Storm用于“连续计算”，对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</span><br><span class="line"><span class="number">5</span>）Spark：Spark是当前最流行的开源大数据内存计算框架。可以基于Hadoop上存储的大数据进行计算。</span><br><span class="line"><span class="number">6</span>）Oozie：Oozie是一个管理Hdoop作业（job）的工作流程调度管理系统。</span><br><span class="line"><span class="number">7</span>）Hbase：HBase是一个分布式的、面向列的开源数据库。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</span><br><span class="line"><span class="number">8</span>）Hive：Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</span><br><span class="line"><span class="number">10</span>）<span class="keyword">R</span>语言：<span class="keyword">R</span>是用于统计分析、绘图的语言和操作环境。<span class="keyword">R</span>是属于GNU系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。</span><br><span class="line"><span class="number">11</span>）Mahout：Apache Mahout是个可扩展的机器学习和数据挖掘库。</span><br><span class="line"><span class="number">12</span>）ZooKeeper：Zookeeper是Google的Chubby一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</span><br></pre></td></tr></table></figure><h2 id="7-总结-2">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天从Scala又来看hadoop了，hadoop的概念性不是很好理解，在我看来hadoop是一个框架，而且是开源的。相当于一个思想，它有提供模块和软件做支撑，是大数据必学的东西。今天的内容有点难度，代码会敲，但是内容和代码实现的原因，不是很理解透彻，今天配置java和hadoop的时候，路径出现了一些问题，学习内容也是偏概念性的，hadoop的目录结构作用等，一些命令已经熟悉了，伪分布式运行这里问题有点大，不理解这样做的原理和原因。</p><h1 id="7-14-hadoop完全分布式">7.14 hadoop完全分布式</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-6">2.标题</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">31</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>虚拟机环境准备</span><br><span class="line"><span class="number">32</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_scp案例</span><br><span class="line"><span class="number">33</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_rsync案例</span><br><span class="line"><span class="number">34</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群分发脚本xsync</span><br><span class="line"><span class="number">35</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群配置</span><br><span class="line"><span class="number">36</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群单节点启动</span><br><span class="line"><span class="number">37</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群ssh配置</span><br><span class="line"><span class="number">38</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群群起</span><br><span class="line"><span class="number">39</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群文件存储路径说明</span><br><span class="line"><span class="number">40</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群启动停止方式总结</span><br><span class="line"><span class="number">41</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>每日回顾</span><br><span class="line"><span class="number">42</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_RM启动注意事项</span><br><span class="line"><span class="number">43</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式_Crondtab定时任务调度</span><br><span class="line"><span class="number">44</span><span class="literal">_</span>尚硅谷<span class="literal">_</span>完全分布式<span class="literal">_</span>集群时间同步</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-6">3.所学内容概述</h2><h3 id="准备虚拟机克隆">准备虚拟机克隆</h3><h4 id="编写集群分发脚本">编写集群分发脚本</h4><h4 id="集群配置">集群配置</h4><h2 id="4-根据概述分章节描述-4">4.根据概述分章节描述.</h2><h3 id="准备虚拟机克隆-2">准备虚拟机克隆</h3><p>虚拟机克隆回来需要进行ip配置，看那个老师克隆步骤和自己的对不上，文件都不一样，自己是对着实验指导书配的。查了资料，总结了自己的步骤,后面也是全部对的上的都成功的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置ip</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span></span><br><span class="line"><span class="comment">#将IPADDR这里修改成自己需要的ip最好一个集群在一个网段 然后把 BOOTPROTO=static改成静态的，原本是none</span></span><br><span class="line">systemctl restart network</span><br><span class="line">systemctl restart NetworkManager</span><br><span class="line"><span class="comment">#这两条是重启网络配置 如果这种不行，就把network关了，再只重启NetworkManager，成功的话，reboot重启一次就好</span></span><br><span class="line">虚拟机的网络配置就如上</span><br></pre></td></tr></table></figure><h3 id="编写集群分发配置">编写集群分发配置</h3><p>克隆机的配置和原来是一样的，明显是不妥当的，一个一个改又很麻烦，就需要集群分发。用xsync</p><h4 id="xsync集群分发脚本">xsync集群分发脚本</h4><p>在/usr/sjh/bin这个目录下存放的脚本，sjh用户可以在系统任何地方直接执行。</p><p>（a）在/home/atguigu目录下创建bin目录，并在bin目录下xsync创建文件，文件内容如下：</p><p><code>原来的教程是在/home/sjh目录 试了不行 改到了/usr/sjh 就好了</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop83</span> ~]<span class="variable">$ </span>mkdir bin</span><br><span class="line">[root<span class="variable">@hadoop83</span> ~]<span class="variable">$ </span>cd bin/</span><br><span class="line">[root<span class="variable">@hadoop83</span> bin]<span class="variable">$ </span>touch xsync</span><br><span class="line">[root<span class="variable">@hadoop83</span> bin]<span class="variable">$ </span>vi xsync</span><br></pre></td></tr></table></figure><p>写入xsync</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1 获取输入参数个数，如果没有参数，直接退出</span></span><br><span class="line">pcount=$<span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span>((pcount==<span class="number">0</span>)); then</span><br><span class="line">echo no args;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"><span class="comment">#2 获取文件名称</span></span><br><span class="line">p1=$<span class="number">1</span></span><br><span class="line">fname=`basename $p1`</span><br><span class="line">echo fname=$fname</span><br><span class="line"><span class="comment">#3 获取上级目录到绝对路径</span></span><br><span class="line">pdir=`cd -P $(dirname $p1); pwd`</span><br><span class="line">echo pdir=$pdir</span><br><span class="line"><span class="comment">#4 获取当前用户名称</span></span><br><span class="line">user=`whoami`</span><br><span class="line"><span class="comment">#5 循环</span></span><br><span class="line"><span class="keyword">for</span>((host=<span class="number">103</span>; host&lt;<span class="number">105</span>; host++)); do</span><br><span class="line">echo ------------------- hadoop$host --------------</span><br><span class="line">rsync -rvl $pdir/$fname $user@hadoop$host:$pdir</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>修改脚本的权限 主要是添加执行权限 以及各用户能调用</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sjh<span class="symbol">@hadoop83</span> bin]<span class="meta"># chmod 777 xsync</span></span><br></pre></td></tr></table></figure><p>修改脚本形式</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sjh<span class="symbol">@hadoop83</span> bin]<span class="meta"># xsync /usr/sjh/bin</span></span><br></pre></td></tr></table></figure><h3 id="集群配置-2">集群配置</h3><p>部署规划</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714194338973.png" alt="image-20220714194338973"></p><p>以下配置文件直接copy尚硅谷的 自己的集群搭建 注意自己路径和文件名</p><h4 id="核心配置文件">核心配置文件</h4><p>配置core-site.xml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>vi core-site.xml</span><br></pre></td></tr></table></figure><p>在该文件中编写如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop102:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.7.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HDFS配置文件">HDFS配置文件</h4><p><a href="http://xn--hadoop-env-o150at28m.sh">配置hadoop-env.sh</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ vi hadoop-env.sh</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_HOME</span>=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><p>配置hdfs-site.xml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>vi hdfs-site.xml</span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop104:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="YARN配置">YARN配置</h4><p><a href="http://xn--yarn-env-vz2ve12k.sh">配置yarn-env.sh</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ vi yarn-env.sh</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_HOME</span>=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><p>配置yarn-site.xml</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>vi yarn-site.xml</span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="MapReduce配置文件">MapReduce配置文件</h4><p><a href="http://xn--mapred-env-o150at28m.sh">配置mapred-env.sh</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ vi mapred-env.sh</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">JAVA_HOME</span>=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure><p>配置mapred-site.xml</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[atguigu@hadoop102 hadoop]</span>$ cp mapred-site<span class="selector-class">.xml</span><span class="selector-class">.template</span> mapred-site<span class="selector-class">.xml</span></span><br><span class="line"><span class="selector-attr">[atguigu@hadoop102 hadoop]</span>$ vi mapred-site.xml</span><br></pre></td></tr></table></figure><p>在该文件中增加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在集群上分发配置好的Hadoop配置文件">在集群上分发配置好的Hadoop配置文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop]$ xsync <span class="regexp">/opt/m</span>odule<span class="regexp">/hadoop-2.7.2/</span></span><br></pre></td></tr></table></figure><p>分发完毕 去克隆机查看分发配置情况</p><h3 id="集群单点启动">集群单点启动</h3><p>这个很常规，之前的笔记有</p><p>每次都一个一个节点启动，如果节点数增加到1000个怎么办。所以要学一起启动利用集群 群起</p><p>首先要解决SSH无密登陆配置 不然每次群起要输入很多次密码</p><h4 id="SSh无密登录配置">SSh无密登录配置</h4><p>进入另外一台电脑 ssh语法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ssh</span> <span class="built_in">IP</span>地址 或者 软连接</span><br></pre></td></tr></table></figure><p>无密钥登录原理</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps1-16578004146091.png" alt="img"></p><p>第一步生成公钥和私钥：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> .ssh]<span class="variable">$ </span>ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>在/root/.ssh会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</p><p>拷贝到免密的机器上 自身也需要</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 .ssh]$ ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> hadoop102</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> hadoop103</span><br><span class="line">[atguigu@hadoop102 .ssh]$ ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> hadoop104</span><br></pre></td></tr></table></figure><p>.ssh文件夹文件功能解释</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">known_hosts记录ssh访问过计算机的公钥(<span class="keyword">public</span> <span class="built_in">key</span>)</span><br><span class="line">id_rsa生成的私钥</span><br><span class="line">id_rsa.<span class="property">pub</span>生成的公钥</span><br><span class="line">authorized_keys存放授权过得无密登录服务器公钥</span><br></pre></td></tr></table></figure><h3 id="群起集群">群起集群</h3><p>配置Slaves</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/opt/m</span>odule<span class="regexp">/hadoop-2.7.2/</span>etc<span class="regexp">/hadoop/</span>slaves</span><br><span class="line">[atguigu@hadoop102 hadoop]$ vi slaves</span><br></pre></td></tr></table></figure><p>该文件增加内容</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop83</span><br><span class="line">hadoop84</span><br><span class="line">hadoop85</span><br></pre></td></tr></table></figure><p>同步所有节点配置文件</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop]<span class="variable">$ </span>xsync slaves</span><br></pre></td></tr></table></figure><p>启动集群</p><p>在hadoop83中 放集群的克隆机</p><p>格式化</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>bin/hdfs namenode -format</span><br></pre></td></tr></table></figure><p>启动HDFS</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>启动YARN</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop103</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><h4 id="集群基本测试">集群基本测试</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hdfs dfs -mkdir -p <span class="regexp">/user/</span>atguigu/input</span><br><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hdfs dfs -put wcinput<span class="regexp">/wc.input /u</span>ser<span class="regexp">/atguigu/i</span>nput</span><br></pre></td></tr></table></figure><p>上传大文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ bin/hadoop fs -put</span><br><span class="line"><span class="regexp">/opt/</span>software<span class="regexp">/hadoop-2.7.2.tar.gz  /u</span>ser<span class="regexp">/atguigu/i</span>nput</span><br></pre></td></tr></table></figure><p>查看磁盘存储文件内容</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> subdir0]<span class="variable">$ </span>cat blk_1073741825</span><br><span class="line">hadoop yarn</span><br><span class="line">hadoop mapreduce </span><br><span class="line">atguigu</span><br><span class="line">atguigu</span><br></pre></td></tr></table></figure><h3 id="集群启动-停止方式总结">集群启动/停止方式总结</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）分别启动/停止HDFS组件</span><br><span class="line">hadoop-daemon.sh  start <span class="regexp">/ stop  namenode /</span> datanode / secondarynamenode</span><br><span class="line">（<span class="number">2</span>）启动/停止YARN</span><br><span class="line">yarn-daemon.sh  start <span class="regexp">/ stop  resourcemanager /</span> nodemanager</span><br></pre></td></tr></table></figure><h4 id="集群时间同步">集群时间同步</h4><p>检查ntp是否安装</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop102</span> 桌面]<span class="meta"># rpm -qa|grep ntp</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714212915085.png" alt="image-20220714212915085"></p><h4 id="其他机器配置（必须root）">其他机器配置（必须root）</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop103</span>桌面]<span class="meta"># crontab -e</span></span><br></pre></td></tr></table></figure><p>修改文件时间 Linux中有，指每十分钟切换一次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*/10 *</span> * * <span class="emphasis">*</span></span><br></pre></td></tr></table></figure><h2 id="5-BUG点-2">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>克隆机的时候，因为路径和老师不一样，代码打出来，老师有的文件打开是有的，但是我打开是没的，但是最终目标都是连接配置静态ip地址，和能正常上网，自己找linux尚硅谷的资料，看着配置的，方法很不一样，目的是正常达成了，详情在笔记 虚拟机环境准备有。</p><p>还有个报错的问题。就是在执行ssh命令的时候，提示lias cman='man -M /usr//share/man/zh_CN’报错，看提示信息是在etc/profile.d/cman.sh这个文件下的问题，ssh我使用的时候是正常的，但是会报出这个错误，百度找了，然后进该文件比对，发现最前面少个a然后路径//中间少了local。加上以后ssh就没报错信息了，好像是自己最开始安装中文语言包的时候复制进去的时候光标的原因吧，不太清楚。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220714235620184.png" alt="image-20220714235620184"></p><h2 id="6-总结">6.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容不是很多，但是有一定的难度，和小问题比较多，但都解决了。问题不大，集群的配置比较麻烦，但是单机开启和昨天的命令是一样的。无非是配置多集群的时候，稍微麻烦了点，而且配置文件和老师差异比较大，源被克隆的机子和老师配置很多不一样，克隆出来的机子很多都是要自己去搜命令。好在顺利启动RM了。也能正常使。还是偏向概念性多点，理解集群运行的原理，代码就那么来回几条，多敲几遍就OK了，文件也是配置一次以后，用集群配置就方便了很多。</p><h1 id="7-16-HDFS">7.16 HDFS</h1><h2 id="1-头：日期、所学内容出处-7">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-7">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">70</span>_尚硅谷<span class="variable">_HDFS_</span>机架感知-副本存储节点选择</span><br><span class="line">P71 <span class="number">71</span>_尚硅谷<span class="variable">_HDFS_</span>读数据流程（面试重点）</span><br><span class="line"><span class="number">72</span>_尚硅谷<span class="variable">_HDFS_NN</span>和<span class="number">2</span>NN工作机制（面试重点）</span><br><span class="line"><span class="number">73</span>_尚硅谷<span class="variable">_HDFS_Fsimage</span>和Edits解析</span><br><span class="line"><span class="number">74</span>_尚硅谷<span class="variable">_HDFS_CheckPoint</span>时间设置</span><br><span class="line"><span class="number">75</span>_尚硅谷<span class="variable">_HDFS_NN</span>故障处理_案例</span><br><span class="line"><span class="number">76</span>_尚硅谷<span class="variable">_HDFS_</span>安全模式</span><br><span class="line"><span class="number">77</span>_尚硅谷<span class="variable">_HDFS_</span>集群安全模式_案例</span><br><span class="line"><span class="number">78</span>_尚硅谷<span class="variable">_HDFS_NN</span>多目录配置_案例</span><br><span class="line"><span class="number">79</span>_尚硅谷_每日回顾</span><br><span class="line"><span class="number">80</span>_尚硅谷<span class="variable">_HDFS_DN</span>工作机制（面试重点）</span><br><span class="line"><span class="number">81</span>_尚硅谷<span class="variable">_HDFS_</span>数据完整性</span><br><span class="line"><span class="number">82</span>_尚硅谷<span class="variable">_HDFS_</span>掉线时限参数设置</span><br><span class="line"><span class="number">83</span>_尚硅谷<span class="variable">_HDFS_</span>服役新节点_案例</span><br><span class="line"><span class="number">84</span>_尚硅谷<span class="variable">_HDFS_</span>添加白名单_案例</span><br><span class="line"><span class="number">85</span>_尚硅谷<span class="variable">_HDFS_</span>黑名单退役_案例</span><br><span class="line"><span class="number">86</span>_尚硅谷<span class="variable">_HDFS_DN</span>多目录配置_案例</span><br><span class="line"><span class="number">87</span>_尚硅谷<span class="variable">_HDFS</span>新特性_集群间数据拷贝</span><br><span class="line"><span class="number">88</span>_尚硅谷<span class="variable">_HDFS</span>新特性_小文件归档案例</span><br><span class="line"><span class="number">89</span>_尚硅谷<span class="variable">_HDFS</span>新特性_回收站案例</span><br><span class="line"><span class="number">90</span>_尚硅谷<span class="variable">_HDFS</span>新特性_快照管理</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-7">3.所学内容概述</h2><h3 id="HDFS概述">HDFS概述</h3><h4 id="HDFS的shell操作">HDFS的shell操作</h4><h4 id="HDFS客户端环境准备">HDFS客户端环境准备</h4><h4 id="HDFS的API操作">HDFS的API操作</h4><h4 id="HDFS的I-O流操作">HDFS的I/O流操作</h4><h2 id="4-根据概述分章节描述-5">4.根据概述分章节描述</h2><h3 id="HDFS概述-2">HDFS概述</h3><p>HDFS是分布式文件管理系统的一种。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220715084956748.png" alt="image-20220715084956748"></p><h4 id="优点">优点</h4><p>高容错 <code>数据自动保存多个副本 副本丢失以后可以自动恢复</code></p><p>适合处理大数据</p><p><code>数据规模 能处理数据规模达到GB TB 甚至PB的数据</code></p><p><code>文件规模：能处理百万规模以上的文件数量，数量相当之大</code></p><p>可以构建在廉价机器上</p><p><code>通过多副本机制，提高可靠性</code></p><h4 id="缺点">缺点</h4><p>不适合低延迟数据访问，毫秒这种数据存储，做不到</p><p>对小文件存储，不够高效</p><p>仅仅支持数据追加append 不支持修改</p><h4 id="HDFS组成架构">HDFS组成架构</h4><p>分为4个方面 NameNode DataNode Client客户端 和 Secondary NameNode</p><p><code>Secondary NameNode</code>辅助NameNode，可以定期合并Edits和Fsming，必要的时候可以辅助恢复NameNode，提高安全性。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/wps2-16578472731763.png" alt="img"></p><h3 id="HDFS的Shell操作（开发重点）">HDFS的Shell操作（开发重点）</h3><p>基本语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>/hadoop fs - 具体命令</span><br><span class="line"><span class="built_in">bin</span>/hdfs dfs 具体命令</span><br><span class="line"><span class="comment">#dfs是fs的实现类</span></span><br></pre></td></tr></table></figure><p>查看命令大全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop fs</span><br></pre></td></tr></table></figure><p>基本常用命令合集</p><p>（0）启动Hadoop集群（方便后续的测试）</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-dfs.sh</span><br><span class="line">[atguigu<span class="variable">@hadoop103</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><p>（1）-help：输出这个命令参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -<span class="built_in">help</span> <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><p>（2）-ls: 显示目录信息</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs -ls /</span><br></pre></td></tr></table></figure><p>( 3 )-mkdir:在HDFS上创建目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -mkdir -p <span class="regexp">/sanguo/</span>shuguo</span><br></pre></td></tr></table></figure><p>（4）-moveFromLocal：从本地剪切粘贴到HDFS</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>touch kongming.txt</span><br><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs  -moveFromLocal  ./kongming.txt  /sanguo/shuguo</span><br></pre></td></tr></table></figure><p>（5）-appendToFile：追加一个文件到已经存在的文件末尾</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>touch liubei.txt</span><br><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>vi liubei.txt</span><br><span class="line">输入</span><br><span class="line">san gu mao lu</span><br><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs -appendToFile liubei.txt /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（6）-cat：显示文件内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -cat <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（7）-chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs  -chmod  <span class="number">666</span>  <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs  -chown  atguigu:atguigu   <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（8）-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu<span class="variable">@hadoop102</span> hadoop-<span class="number">2.7</span>.<span class="number">2</span>]<span class="variable">$ </span>hadoop fs -copyFromLocal README.txt /</span><br></pre></td></tr></table></figure><p>（9）-copyToLocal：从HDFS拷贝到本地</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -copyToLocal <span class="regexp">/sanguo/</span>shuguo<span class="regexp">/kongming.txt ./</span></span><br></pre></td></tr></table></figure><p>（10）-cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -cp <span class="regexp">/sanguo/</span>shuguo<span class="regexp">/kongming.txt /</span>zhuge.txt</span><br></pre></td></tr></table></figure><p>（11）-mv：在HDFS目录中移动文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -mv <span class="regexp">/zhuge.txt /</span>sanguo<span class="regexp">/shuguo/</span></span><br></pre></td></tr></table></figure><p>（12）-get：等同于copyToLocal，就是从HDFS下载文件到本地</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -get <span class="regexp">/sanguo/</span>shuguo<span class="regexp">/kongming.txt ./</span></span><br></pre></td></tr></table></figure><p>（13）-getmerge：合并下载多个文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -getmerge <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>* ./zaiyiqi.txt</span><br></pre></td></tr></table></figure><p>（14）-put：等同于copyFromLocal</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -put .<span class="regexp">/zaiyiqi.txt /u</span>ser<span class="regexp">/atguigu/</span>test/</span><br></pre></td></tr></table></figure><p>（15）-tail：显示一个文件的末尾</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -tail <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（16）-rm：删除文件或文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -rm <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>jinlian2.txt</span><br></pre></td></tr></table></figure><p>（17）-rmdir：删除空目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -<span class="built_in">rmdir</span> /test</span><br></pre></td></tr></table></figure><p>（18）-du统计文件夹的大小信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -du -s -h <span class="regexp">/user/</span>atguigu/test</span><br><span class="line"><span class="number">2.7</span> K  <span class="regexp">/user/</span>atguigu/test</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -du  -h <span class="regexp">/user/</span>atguigu/test</span><br><span class="line"><span class="number">1.3</span> K  <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>README.txt</span><br><span class="line"><span class="number">15</span>     <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>jinlian.txt</span><br><span class="line"><span class="number">1.4</span> K  <span class="regexp">/user/</span>atguigu<span class="regexp">/test/</span>zaiyiqi.txt</span><br></pre></td></tr></table></figure><p>（19）-setrep：设置HDFS中文件的副本数量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-<span class="number">2.7</span>.<span class="number">2</span>]$ hadoop fs -setrep <span class="number">10</span> <span class="regexp">/sanguo/</span>shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220715191439091.png" alt="image-20220715191439091"></p><h3 id="HDFS客户端环境准备-2">HDFS客户端环境准备</h3><p>因为教学老师版本那不一样，也没有下载资料，所以环境什么都是自己搜的。</p><p>解压hadoop2.7.1的linux安装包在，windows系统中，然后在CSDN搜到了两个文件，覆盖在hadoop中的bin目录中。两个文件有链接的。然后配置环境变量</p><p>%HADOOP_HOME%指定bin目录</p><p>path中 %HADOOP_HOME%\bin</p><p><a href="http://t.csdn.cn/W0kBg">http://t.csdn.cn/W0kBg</a> 来自CSDN中</p><h3 id="HDFS的API操作-2">HDFS的API操作</h3><p><code>参数优先级</code></p><p>参数优先级排序：（1）客户端代码中设置的值 &gt;（2）ClassPath下的用户自定义配置文件 &gt;（3）然后是服务器的默认配置</p><h4 id="文件下载">文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyToLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 执行下载操作</span></span><br><span class="line"><span class="comment">// boolean delSrc 指是否将原文件删除</span></span><br><span class="line"><span class="comment">// Path src 指要下载的文件路径</span></span><br><span class="line"><span class="comment">// Path dst 指将文件下载到的路径</span></span><br><span class="line"><span class="comment">// boolean useRawLocalFileSystem 是否开启文件校验</span></span><br><span class="line">fs.copyToLocalFile(<span class="literal">false</span>, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banzhang.txt&quot;</span>), <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;e:/banhua.txt&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS文件删除">HDFS文件删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 执行删除</span></span><br><span class="line">fs.delete(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/0508/&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS文件名更改">HDFS文件名更改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRename</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 修改文件名称</span></span><br><span class="line">fs.rename(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banzhang.txt&quot;</span>), <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banhua.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS文件详情查看">HDFS文件详情查看</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListFiles</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1获取文件系统</span></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;atguigu&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 获取文件详情</span></span><br><span class="line">RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fs.listFiles(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(listFiles.hasNext())&#123;</span><br><span class="line"><span class="type">LocatedFileStatus</span> <span class="variable">status</span> <span class="operator">=</span> listFiles.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出详情</span></span><br><span class="line"><span class="comment">// 文件名称</span></span><br><span class="line">System.out.println(status.getPath().getName());</span><br><span class="line"><span class="comment">// 长度</span></span><br><span class="line">System.out.println(status.getLen());</span><br><span class="line"><span class="comment">// 权限</span></span><br><span class="line">System.out.println(status.getPermission());</span><br><span class="line"><span class="comment">// 分组</span></span><br><span class="line">System.out.println(status.getGroup());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取存储的块信息</span></span><br><span class="line">BlockLocation[] blockLocations = status.getBlockLocations();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (BlockLocation blockLocation : blockLocations) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取块存储的主机节点</span></span><br><span class="line">String[] hosts = blockLocation.getHosts();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String host : hosts) &#123;</span><br><span class="line">System.out.println(host);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------班长的分割线----------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 关闭资源</span></span><br><span class="line">fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件和文件夹判断">文件和文件夹判断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStatus</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件配置信息</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 判断是文件还是文件夹</span></span><br><span class="line">    FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (FileStatus fileStatus : listStatus) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是文件</span></span><br><span class="line">        <span class="keyword">if</span> (fileStatus.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件:&quot;</span>+fileStatus.getPath().getName());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件名:&quot;</span>+fileStatus.getPath().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 关闭资源</span></span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HDFS的I-O流操作-2">HDFS的I/O流操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把本地e盘上的banhua.txt文件上传到到HDFS根目录</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putFileToHDFS</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.获取对象</span></span><br><span class="line">       <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">       <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.获取输入法</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:/banhua.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.获取输出流</span></span><br><span class="line">       <span class="type">FSDataOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> fs.create(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banzhang.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.流的对拷</span></span><br><span class="line">       IOUtils.copyBytes(fis,fos,configuration);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.关闭资源</span></span><br><span class="line">       IOUtils.closeStream(fis);</span><br><span class="line">       IOUtils.closeStream(fos);</span><br><span class="line">       fs.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="文件下载-2">文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从HDFS上下载banhua.txt 到本地e盘中</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFileFromHDFS</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">//1.获取对象</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获取输入流</span></span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/banhua.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/HDFS-banhua.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fis,fos,configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定位文件读取">定位文件读取</h4><p>分两步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载第一块</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFileSeek1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 获取输入流</span></span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hadoop-2.7.1.tar.gz&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 创建输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/hadoop-2.7.1.tar.gz.part1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 流的拷贝</span></span><br><span class="line">    <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ; i &lt; <span class="number">1024</span> * <span class="number">128</span>; i++)&#123;</span><br><span class="line">        fis.read(buf);</span><br><span class="line">        fos.write(buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFileSeek2</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop83:9000&quot;</span>), configuration, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 打开输入流</span></span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hadoop-2.7.1.tar.gz&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 定位输入数据位置</span></span><br><span class="line">    fis.seek(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 创建输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/hadoop-2.7.1.tar.gz.part2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fis, fos, configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6 关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-3">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>是这样报错的，也看不太懂，大致意思就是找不到，文件的权限，之类的话，去CSDN看别人写的，突然发现有人在get最后面是写的root，想到自己一直都是以root用户登陆，就把用户sjh改成了root，就好了。</p><p><img src="https://docimg8.docs.qq.com/image/cMLQ9ZBtZy5gqj1iXty_7A.png?w=2560&amp;h=1440" alt="img"></p><h2 id="7-总结-3">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容的重点在于掌握Java来充当客户端，利用HDFS来做上传数据或者从hadoop下载数据。这次的内容就偏向代码的敲写了，每次操作自己都去敲了一遍，看完视频自己去敲过来的，难度一般，因为对代码的处理比较多，自己对代码比较敏感，学习起来上手也快。比较麻烦的地方是windows配置环境，和IDEA配置客户端的环境准备。配置了一个小时左右，找压缩包，和pox文件花费了很多时间，中间也出现了一些小问题，但是都解决了。学习状态还不错，优于大量的概念问题的章节。</p><h1 id="7-18-Scala函数式编程-面向对象">7.18 Scala函数式编程 面向对象</h1><h2 id="1-头：日期、所学内容出处-8">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-8">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">057</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（二）_高阶函数（三）_函数作为返回值</span><br><span class="line"><span class="number">058</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（二）_高阶函数（四）_应用案例</span><br><span class="line"><span class="number">059</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（三）_扩展练习（一）_匿名函数</span><br><span class="line"><span class="number">060</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（三）_扩展练习（二）_函数作为返回值</span><br><span class="line"><span class="number">061</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（四）_闭包（一）_概念和原理</span><br><span class="line"><span class="number">062</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（四）_闭包（二）_具体应用</span><br><span class="line"><span class="number">063</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（四）_柯里化</span><br><span class="line"><span class="number">064</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（五）_递归（一）_概念和实现</span><br><span class="line"><span class="number">065</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（五）_递归（二）_尾递归优</span><br><span class="line"><span class="number">066</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（六）_控制抽象（一）参数</span><br><span class="line"><span class="number">067</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（六）_控制抽象（二）_传名参数</span><br><span class="line"><span class="number">068</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（六）_控制抽象（三）_自定义<span class="keyword">While</span>循环</span><br><span class="line"><span class="number">069</span>_尚硅谷<span class="variable">_Scala_</span>函数式编程（三）_函数高级（七）_惰性加载</span><br><span class="line"><span class="number">070</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（一）_声明和访问</span><br><span class="line"><span class="number">071</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（二）_包对象</span><br><span class="line"><span class="number">072</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（三）_导包说明</span><br><span class="line"><span class="number">073</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（二）_类和对象</span><br><span class="line"><span class="number">074</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（一）_访问权限</span><br><span class="line"><span class="number">075</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（二）_构造器</span><br><span class="line"><span class="number">076</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（三）_构造器参数</span><br><span class="line"><span class="number">077</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（四）_继承</span><br><span class="line"><span class="number">078</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（五）_多态</span><br><span class="line"><span class="number">080</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（六）_抽象类（二）_匿名子类</span><br><span class="line"><span class="number">082</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（七）_伴生对象（二）_单例设计模式</span><br><span class="line"><span class="number">084</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（二）_特质的混入</span><br><span class="line"><span class="number">085</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（三）_特质的叠加</span><br><span class="line"><span class="number">087</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（五）_特质和抽象类的区别</span><br><span class="line"><span class="number">088</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（八）_特质（六）_自身类型</span><br><span class="line"><span class="number">089</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（九）_扩展内容（一）_类型检测和转换</span><br><span class="line"><span class="number">090</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（九）_扩展内容（二）_枚举类和应用类</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-8">3.所学内容概述</h2><p>函数基础</p><p>函数高级</p><h2 id="4-根据概述分章节描述-6">4.根据概述分章节描述</h2><h3 id="函数基础">函数基础</h3><h4 id="面向对象编程和函数式编程的区别">面向对象编程和函数式编程的区别</h4><p><code>面向对象编程：解决问题，分解对象，属性，行为，然后通过对象的关系以及行为的调用来解决问题。</code></p><p>Scala语言是一个完全面向对象编程语言。万物皆对象，比Java还有过之。对象的本质就是对数据和行为的封装</p><p><code>函数式编程:将问题分解成步骤，将步骤封装，调用封装好的步骤解决问题 </code></p><p>Scala 语言是一个完全函数式编程语言。万物皆函数。函数的本质：函数可以当做一个值进行传递</p><p><strong>自己的使用体验来讲，Scala运行速度和python差不多，比Java慢了很多，Scala编译很慢，效率不高，可能函数式编程运行速度都很慢吧</strong></p><h4 id="函数基本语法">函数基本语法</h4><p>在main里面的是函数，在main外面的是方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printTest</span></span>(x:<span class="type">String</span>) : <span class="type">String</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;hi&quot;</span>+x)</span><br><span class="line">    x</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印里面的值 并返回</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220718090955061.png" alt="image-20220718090955061"></p><p>Scala函数参数和返回值的几种情况</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 函数 1：无参，无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(<span class="string">&quot;无参，无返回值&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(test1())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 2：无参，有返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test2</span></span>():<span class="type">String</span>=&#123;</span><br><span class="line">      <span class="string">&quot;无参，有返回值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(test2())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 3：有参，无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test3</span></span>(s:<span class="type">String</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">      println(s)</span><br><span class="line">    &#125;</span><br><span class="line">    test3(<span class="string">&quot;jingling&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 4：有参，有返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test4</span></span>(s:<span class="type">String</span>):<span class="type">String</span>=&#123;</span><br><span class="line">      s+<span class="string">&quot;有参，有返回值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(test4(<span class="string">&quot;hello &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数 5：多参，无返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test5</span></span>(name:<span class="type">String</span>, age:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">      println(<span class="string">s&quot;我叫<span class="subst">$&#123;name&#125;</span>, 我的年龄是<span class="subst">$&#123;age&#125;</span>岁&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(test5(<span class="string">&quot;dealing&quot;</span>,<span class="number">40</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>函数的特殊情况</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// （1）可变参数</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>( s : <span class="type">String</span>* ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(s)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 有输入参数：输出 Array</span></span><br><span class="line">  test(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Scala&quot;</span>)</span><br><span class="line">  <span class="comment">// 无输入参数：输出 List()</span></span><br><span class="line">  test()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// (2)如果参数列表中存在多个参数，那么可变参数一般放置在最后</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test2</span></span>( name : <span class="type">String</span>, s: <span class="type">String</span>* ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(name + <span class="string">&quot;,&quot;</span> + s)</span><br><span class="line">  &#125;</span><br><span class="line">  test2(<span class="string">&quot;jinlian&quot;</span>, <span class="string">&quot;dalang&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// (3)参数默认值</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test3</span></span>( name : <span class="type">String</span>, age : <span class="type">Int</span> = <span class="number">30</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$name</span>, <span class="subst">$age</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果参数传递了值，那么会覆盖默认值</span></span><br><span class="line">  test3(<span class="string">&quot;jinlian&quot;</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="comment">// 如果参数有默认值，在调用的时候，可以省略这个参数</span></span><br><span class="line">  test3(<span class="string">&quot;dalang&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一般情况下，将有默认值的参数放置在参数列表的后面</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test4</span></span>( sex : <span class="type">String</span> = <span class="string">&quot;男&quot;</span>, name : <span class="type">String</span> ): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$name</span>, <span class="subst">$sex</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Scala 函数中参数传递是，从左到右</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//（4）带名参数</span></span><br><span class="line">  test4(name=<span class="string">&quot;ximenqing&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala代码的简化</p><p>能简则简，可读性会差很多！</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// （0）函数标准写法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>( s : <span class="type">String</span> ): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f(<span class="string">&quot;Hello&quot;</span>))</span><br><span class="line">  <span class="comment">// 至简原则:能省则省</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//（1） return 可以省略,Scala 会使用函数体的最后一行代码作为返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>( s : <span class="type">String</span> ): <span class="type">String</span> = &#123;</span><br><span class="line">    s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f1(<span class="string">&quot;Hello&quot;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（2）如果函数体只有一行代码，可以省略花括号</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>(s:<span class="type">String</span>):<span class="type">String</span> = s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//（3）返回值类型如果能够推断出来，那么可以省略（:和返回值类型一起 省略）</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f3</span></span>( s : <span class="type">String</span> ) = s + <span class="string">&quot; jinlian&quot;</span></span><br><span class="line">  println(f3(<span class="string">&quot;Hello3&quot;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（4）如果有 return，则不能省略返回值类型，必须指定。</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f4</span></span>() :<span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ximenqing4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f4())</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（5）如果函数明确声明 unit，那么即使函数体中使用 return 关键字也 不起作用</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f5</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dalang5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(f5())</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（6）Scala 如果期望是无返回值类型,可以省略等号</span></span><br><span class="line">  <span class="comment">// 将无返回值的函数称之为过程</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f6</span></span>() &#123;</span><br><span class="line">    <span class="string">&quot;dalang6&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  println(f6())</span><br><span class="line">  <span class="comment">//（7）如果函数无参，但是声明了参数列表，那么调用时，小括号，可加可 不加</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f7</span></span>() = <span class="string">&quot;dalang7&quot;</span></span><br><span class="line">  println(f7())</span><br><span class="line">  println(f7)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（8）如果函数没有参数列表，那么小括号可以省略,调用时小括号必须省 略</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f8</span> </span>= <span class="string">&quot;dalang&quot;</span></span><br><span class="line">  <span class="comment">//println(f8())</span></span><br><span class="line">  println(f8)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//（9）如果不关心名称，只关心逻辑处理，那么函数名（def）可以省略 和Java的lambda相似</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f9</span> </span>= (x:<span class="type">String</span>)=&gt;&#123;println(<span class="string">&quot;wusong&quot;</span>)&#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f10</span></span>(f:<span class="type">String</span>=&gt;<span class="type">Unit</span>) = &#123;</span><br><span class="line">    f(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  f10(f9)</span><br><span class="line">  println(f10((x:<span class="type">String</span>)=&gt;&#123;println(<span class="string">&quot;wusong&quot;</span>)&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数高级">函数高级</h3><p>函数的高阶用法 我认为可读性极差极差！</p><h4 id="函数作为值传递">函数作为值传递</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//（1）调用 foo 函数，把返回值给变量 f</span></span><br><span class="line">  <span class="comment">//val f = foo()</span></span><br><span class="line">  <span class="keyword">val</span> f = foo</span><br><span class="line">  println(f)</span><br><span class="line">  <span class="comment">//（2）在被调用函数 foo 后面加上 _，相当于把函数 foo 当成一个整体， 传递给变量 f1</span></span><br><span class="line">  <span class="keyword">val</span> f1 = foo _</span><br><span class="line">  foo()</span><br><span class="line">  f1()</span><br><span class="line">  <span class="comment">//（3）如果明确变量类型，那么不使用下划线也可以将函数作为整体传递给 变量</span></span><br><span class="line">  <span class="keyword">var</span> f2:()=&gt;<span class="type">Int</span> = foo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span></span>():<span class="type">Int</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;foo...&quot;</span>)</span><br><span class="line">  <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数也可以作为函数传递</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// （1）定义一个函数，函数参数还是一个函数签名；f 表示函数名称;(Int,Int)表示输入两个 Int 参数；Int 表示函数返回值</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(f: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line"> f(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// （2）定义一个函数，参数和返回值类型和 f1 的输入参数一致</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = a + b</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// （3）将 add 函数作为参数传递给 f1 函数，如果能够推断出来不是调用，_可以省略</span></span><br><span class="line"> println(f1(add))</span><br><span class="line">println(f1(add _))</span><br><span class="line"><span class="comment">//可以传递匿名函数</span></span><br></pre></td></tr></table></figure><p>函数可以作为函数的返回值返回</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>() = &#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>() = &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">f2 _</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> f = f1()</span><br><span class="line"><span class="comment">// 因为 f1 函数的返回值依然为函数，所以可以变量 f 可以作为函数继续调用</span></span><br><span class="line">f()</span><br><span class="line"><span class="comment">// 上面的代码可以简化为</span></span><br><span class="line">f1()()</span><br></pre></td></tr></table></figure><h4 id="匿名函数">匿名函数</h4><p>语法说明</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(x:<span class="type">Int</span>) =&gt; &#123;println&#123;<span class="string">&quot;....&quot;</span>&#125;&#125;</span><br><span class="line">x：表示输入参数类型；<span class="type">Int</span>：表示输入参数类型；函数体：表示具体代码逻辑</span><br></pre></td></tr></table></figure><p>匿名函数也可以至简</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）参数的类型可以省略，会根据形参进行自动的推导</span><br><span class="line">（<span class="number">2</span>）类型省略之后，发现只有一个参数，则圆括号可以省略；其他情况：没有参数和参数超过 <span class="number">1</span> 的永远不能省略圆括号。 （<span class="number">3</span>）匿名函数如果只有一行，则大括号也可以省略</span><br><span class="line">（<span class="number">4</span>）如果参数只出现一次，则参数省略且后面参数可以用<span class="literal">_</span>代替</span><br></pre></td></tr></table></figure><p>代码实现 简化一个形参匿名函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// （1）定义一个函数：参数包含数据和逻辑函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operation</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>], op: <span class="type">Int</span> =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">      <span class="keyword">for</span> (elem &lt;- arr) <span class="keyword">yield</span> op(elem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （2）定义逻辑函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">op</span></span>(ele: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （3）标准函数调用</span></span><br><span class="line">    <span class="keyword">val</span> arr = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), op)</span><br><span class="line">    println(arr.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">// （4）采用匿名函数</span></span><br><span class="line">    <span class="keyword">val</span> arr1 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (ele: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    println(arr1.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">// （4.1）参数的类型可以省略，会根据形参进行自动的推导;</span></span><br><span class="line">    <span class="keyword">val</span> arr2 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (ele) =&gt; &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// （4.2）类型省略之后，发现只有一个参数，则圆括号可以省略；其他情 况：没有参数和参数超过 1 的永远不能省略圆括号。</span></span><br><span class="line">    <span class="keyword">val</span> arr3 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), ele =&gt; &#123;</span><br><span class="line">      ele + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    println(arr3.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">// (4.3) 匿名函数如果只有一行，则大括号也可以省略</span></span><br><span class="line">    <span class="keyword">val</span> arr4 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), ele =&gt; ele + <span class="number">1</span>)</span><br><span class="line">    println(arr4.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">//（4.4）如果参数只出现一次，则参数省略且后面参数可以用_代替</span></span><br><span class="line">    <span class="keyword">val</span> arr5 = operation(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), _ + <span class="number">1</span>)</span><br><span class="line">    println(arr5.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果有多个参数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">calculator</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>, op: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">     op(a, b)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// （1）标准版</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;x + y&#125;))</span><br><span class="line"> <span class="comment">// （2）如果只有一行，则大括号也可以省略</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y))</span><br><span class="line"> <span class="comment">// （3）参数的类型可以省略，会根据形参进行自动的推导;</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, (x , y) =&gt; x + y))</span><br><span class="line"> <span class="comment">// （4）如果参数只出现一次，则参数省略且后面参数可以用_代替</span></span><br><span class="line"> println(calculator(<span class="number">2</span>, <span class="number">3</span>, _ + _))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="函数柯里化和闭包">函数柯里化和闭包</h4><p>闭包：如果一个函数，访问到了它的外部（局部）变量的值，那么这个函数和他所处的环境，称为闭包</p><p>柯里化的写法和 闭包的调用很像，建议：闭包都用柯里化写</p><p><strong>闭包就是本质就是一个函数，只不过使用了外部变量作为返回值的函数，只是语法如果使用柯里化，可读性不一样</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a:<span class="type">Int</span>,b:<span class="type">Int</span>)  = a+ b <span class="comment">//实用性差 每次调用都需要输入a</span></span><br><span class="line">    <span class="comment">//可以先将A定义成一个其他变量 然后调用内部的B</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addByA</span></span>(a:<span class="type">Int</span>) : <span class="type">Int</span> =&gt; <span class="type">Int</span> = &#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">addByB</span></span>(b:<span class="type">Int</span>) = a + b</span><br><span class="line">      addByB</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(add(<span class="number">5</span>,<span class="number">8</span>))</span><br><span class="line">    println(addByA(<span class="number">5</span>)(<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">val</span> addByFive = addByA(<span class="number">5</span>) <span class="comment">//封装成addByFive常量</span></span><br><span class="line">    println(addByFive(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//    lambda简写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addByA1</span></span>(a:<span class="type">Int</span>) : <span class="type">Int</span> =&gt; <span class="type">Int</span> =  a + _</span><br><span class="line">    println(addByA1(<span class="number">3</span>)(<span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//5.柯里化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addCurrying</span></span>(a:<span class="type">Int</span>)(b:<span class="type">Int</span>) = a + b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> addByFour = addCurrying(<span class="number">5</span>)(<span class="number">53</span>)</span><br><span class="line">    println(addByFour)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="递归-阶乘">递归 阶乘</h4><p>就和Java递归是差不多的，无非是方法的格式不一样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(test(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(i : <span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  test(i - <span class="number">1</span>) * i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制抽象">控制抽象</h4><p>分两种 值传递和名传递</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 传值参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f0</span></span>(a:<span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">&#125;</span><br><span class="line">f0(<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>():<span class="type">Int</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;f1调用&quot;</span>)</span><br><span class="line">  <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line">f0(f1())</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.传名参数 传递不再是具体的值，而是代码块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>(a: =&gt; <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">  println(<span class="string">&quot;a: &quot;</span> + a)</span><br><span class="line">&#125;</span><br><span class="line">f2(<span class="number">23</span>)</span><br><span class="line">f2(f1())</span><br></pre></td></tr></table></figure><h4 id="惰性加载">惰性加载</h4><p>当<strong>函数返回值被声明为</strong> <strong>lazy</strong> <strong>时</strong>，函数的<strong>执行将被推迟</strong>，直到我们第一次对此取值，该函数才会执行。这种函数我们称之为惰性函数。</p><p>应用点我觉得像线程的时候，会用得到，使用该方法(函数)，线程执行。和线程的堵塞和锁有点类似。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> res = sum(<span class="number">10</span>,<span class="number">30</span>)</span><br><span class="line">  println(<span class="string">&quot;1，函数调用&quot;</span>)</span><br><span class="line">  println(<span class="string">&quot;2.res = &quot;</span> + res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(i: <span class="type">Int</span>, i1: <span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">  println(<span class="string">&quot;3.sum 被执行。。。&quot;</span>)</span><br><span class="line">  i + i1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1，函数调用</span></span><br><span class="line"><span class="comment">3.sum 被执行。。。</span></span><br><span class="line"><span class="comment">2.res = 40</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-3">6.扩展学习部分</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定义一个函数 <span class="keyword">func</span>，它接收一个 <span class="title function_">Int</span> 类型的参数，返回一个函数（记作 <span class="title function_">f1</span>）。它返回的函数 <span class="title function_">f1</span>，接收一个 <span class="title function_">String</span> 类型的参数，同样返回一个函数（记作 <span class="title function_">f2</span>）。函数 <span class="title function_">f2</span> 接收一个 <span class="title function_">Char</span> 类型的参数，返回一个 <span class="title function_">Boolean</span> 的值。</span><br><span class="line">要求调用函数 <span class="keyword">func</span><span class="params">(<span class="number">0</span>)</span> <span class="params">(“”)</span> <span class="params">(‘<span class="number">0</span>’)</span>得到返回值为 <span class="title function_">false</span>，其它情况均返回 <span class="title function_">true</span>。</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span></span>(int: <span class="type">Int</span>)= &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(string: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>(char: <span class="type">Char</span>)  = &#123;</span><br><span class="line">      <span class="keyword">if</span> (int == <span class="number">0</span> &amp;&amp; string == <span class="string">&quot;&quot;</span> &amp;&amp; char == &#x27;<span class="number">0</span>&#x27;) <span class="literal">false</span> <span class="keyword">else</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    f2 _</span><br><span class="line">  &#125;</span><br><span class="line">  f1 _</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全匿名函数实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span></span>(x: <span class="type">Int</span>):<span class="type">String</span> =&gt; <span class="type">Char</span> =&gt; <span class="type">Boolean</span>= &#123;</span><br><span class="line">  y =&gt; z :  =&gt; &#123;<span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="string">&quot;&quot;</span> &amp;&amp; z == &#x27;<span class="number">0</span>&#x27;) <span class="literal">false</span> <span class="keyword">else</span> <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-4">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天是学习任务是Scala的函数式和部分面向对象，以及对未来大数据比赛的规划。Scala的函数式编程是它的特点，他和Java最大的区别，Scala不仅是函数式编程也是面向对象编程，而且比Java更面向对象，Java8更新的lambda就是借鉴Scala的函数式的。函数式会非常非常简洁，像六七行很长的代码，能缩的很短，而且比java的lambda更短，比python也要短，但是自己简化完，自己都不知道写的什么，可读性就很一言难尽。学习难度是一般，就是代码解读和后面的闭包不是很好掌握，重点还是函数式的简化吧，大部分都是在讲这个，今天状态很佳。</p><h1 id="7-19-Scala面向对象">7.19 Scala面向对象</h1><h2 id="1-头：日期、所学内容出处-9">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Xh411S7bP?p=79&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Xh411S7bP?p=79&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-标题-9">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">070</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（一）_声明和访问</span><br><span class="line"><span class="number">071</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（二）_包对象</span><br><span class="line"><span class="number">072</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（一）_包（三）_导包说明</span><br><span class="line"><span class="number">073</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（二）_类和对象</span><br><span class="line"><span class="number">074</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（一）_访问权限</span><br><span class="line"><span class="number">075</span>_尚硅谷<span class="variable">_Scala_</span>面向对象（三）_封装（二）_构造器</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line"><span class="number">106</span>_尚硅谷<span class="variable">_Scala_</span>集合（三）_列表（二）_可变列表</span><br><span class="line"><span class="number">107</span>_尚硅谷<span class="variable">_Scala_</span>集合（四）<span class="variable">_Set</span>集合（一）_不可变<span class="built_in">Set</span></span><br><span class="line"><span class="number">108</span>_尚硅谷<span class="variable">_Scala_</span>集合（四）<span class="variable">_Set</span>集合（二）_可变<span class="built_in">Set</span></span><br><span class="line"><span class="number">109</span>_尚硅谷<span class="variable">_Scala_</span>集合（五）<span class="variable">_Map</span>集合（一）_不可变Map</span><br><span class="line"><span class="number">110</span>_尚硅谷<span class="variable">_Scala_</span>集合（五）<span class="variable">_Map</span>集合（二）_可变Map</span><br><span class="line"><span class="number">111</span>_尚硅谷<span class="variable">_Scala_</span>集合（六）_元组</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-9">3.所学内容概述</h2><h3 id="类和对象">类和对象</h3><h3 id="封装">封装</h3><h4 id="继承和多态">继承和多态</h4><h2 id="4-根据概述分章节描述-7">4.根据概述分章节描述</h2><h3 id="类和对象-2">类和对象</h3><p>定义属性语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">&quot;alice&quot;</span></span><br><span class="line"><span class="keyword">var</span> age : <span class="type">Int</span> = <span class="number">18</span></span><br><span class="line"><span class="meta">@BeanProperty</span>   <span class="comment">//自动生成get和set的属性方法 是标签</span></span><br><span class="line"><span class="keyword">var</span> sex : <span class="type">String</span> = _</span><br></pre></td></tr></table></figure><h4 id="封装-2">封装</h4><p>Scala默认权限是public 但是Scala没有public关键字</p><p>protected 为受保护权限，Scala 中受保护权限比 Java 中更严格，同类、子类可以访问，同包无法访问。</p><p>private[包名]增加包访问权限，包名下的其他类也可以使用 <code>不加包名就是私有的只能在类的内部和伴生对象中使用</code></p><h5 id="构造器">构造器</h5><p>和Java区别有点大，主构造器是不用声明的。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">类名</span>(<span class="params">形参列表</span>) </span>&#123; <span class="comment">// 主构造器</span></span><br><span class="line"> <span class="comment">// 类体</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(形参列表) &#123; <span class="comment">// 辅助构造器</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(形参列表) &#123; <span class="comment">//辅助构造器可以有多个...</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承和多态-2">继承和多态</h4><p>语法和Java一样</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类会继承父类的属性和方法 同样都是单继承(一个子类只能有一个父类)</p><p>继承的调用顺序：父类构造器-&gt;子类构造器</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">nameParam: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> name = nameParam</span><br><span class="line"> <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(nameParam: <span class="type">String</span>, ageParam: <span class="type">Int</span>) &#123;</span><br><span class="line"> <span class="keyword">this</span>(nameParam)</span><br><span class="line"> <span class="keyword">this</span>.age = ageParam</span><br><span class="line"> println(<span class="string">&quot;父类辅助构造器&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> println(<span class="string">&quot;父类主构造器&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span>(<span class="params">nameParam: <span class="type">String</span>, ageParam: <span class="type">Int</span></span>) <span class="keyword">extends</span> </span></span><br><span class="line"><span class="type">Person</span>(nameParam, ageParam) &#123;</span><br><span class="line"> <span class="keyword">var</span> empNo: <span class="type">Int</span> = _</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(nameParam: <span class="type">String</span>, ageParam: <span class="type">Int</span>, empNoParam: <span class="type">Int</span>) &#123;</span><br><span class="line"> <span class="keyword">this</span>(nameParam, ageParam)</span><br><span class="line"> <span class="keyword">this</span>.empNo = empNoParam</span><br><span class="line"> println(<span class="string">&quot;子类的辅助构造器&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">   println(<span class="string">&quot;子类主构造器&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"> <span class="keyword">new</span> <span class="type">Emp</span>(<span class="string">&quot;z3&quot;</span>, <span class="number">11</span>,<span class="number">1001</span>)</span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>上面案例的运行结果是</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719105724978.png" alt="image-20220719105724978"></p><p>验证了继承，创建对象先调用父类的构造器</p><h5 id="多态">多态</h5><p>动态绑定</p><p><code>Scala 中属性和方法都是动态绑定，而 Java 中只有方法为动态绑定。</code></p><p>自己写了一个Java一个Scala的代码验证</p><p>Java多态代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBind</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PersonByJava</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonByJava</span>();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        person.hello();</span><br><span class="line"></span><br><span class="line">        <span class="type">PersonByJava</span> <span class="variable">studentByJava</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentByJava</span>();</span><br><span class="line">        System.out.println(studentByJava.name);</span><br><span class="line">        studentByJava.hello();</span><br><span class="line"></span><br><span class="line">        <span class="type">StudentByJava</span> <span class="variable">studentByJava1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentByJava</span>();</span><br><span class="line">        System.out.println(studentByJava1.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonByJava</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentByJava</span> <span class="keyword">extends</span> <span class="title class_">PersonByJava</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;student&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala多态代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test08_DynamicBind</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> student: <span class="type">Person8</span> = <span class="keyword">new</span> <span class="type">Student8</span></span><br><span class="line">    println(student.name)</span><br><span class="line">    student.hello()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person8</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;person&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello person&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student8</span> <span class="keyword">extends</span> <span class="title">Person8</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;student&quot;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello student&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719110732747.png" alt="image-20220719110732747"></p><p>可见Scala的动态绑定更为的完善，Java是没有属性绑定的，Scala有。</p><h4 id="重写">重写</h4><p>Scala重写父类的属性和方法的时候，除了类型和名称一样(和java一样)，还要在属性和方法前面加上oberride修饰</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student8</span> <span class="keyword">extends</span> <span class="title">Person8</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name : <span class="type">String</span> = <span class="string">&quot;student&quot;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello student&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的好处显而易见，更为清楚明了的 告知该方法或者属性是父类重写的。</p><h4 id="抽象类">抽象类</h4><p>Scala和Java一模一样，声明方法也差不多</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test09_abstract</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> teacher = <span class="keyword">new</span> <span class="type">Teacher9</span>()</span><br><span class="line">    teacher.hello9()</span><br><span class="line">    println(teacher.name)</span><br><span class="line">    <span class="comment">// 匿名子类  和 Java 一样，可以通过包含带有定义或重写的代码块的方式创建一个匿名的子类。</span></span><br><span class="line">    <span class="keyword">val</span> workers = <span class="keyword">new</span> <span class="type">Person9</span> &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;workers&quot;</span></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello9</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;hello worker&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    workers.hello9()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abstract 声明</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person9</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name: <span class="type">String</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello9</span></span>() : <span class="type">Unit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher9</span> <span class="keyword">extends</span> <span class="title">Person9</span></span>&#123; <span class="comment">//继承抽象类 要重写方法 如果不重写就可以不加override</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;teacher&quot;</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hello9</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;hello 9 abstract and teacher&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="伴生对象">伴生对象</h4><p>伴生对象是Scala所独有的，可以通过伴生对象设计单例设计模式 懒汉式和饿汉式</p><p>基础伴生对象使用，将主构造器设计为私有，通过伴生类去调用 推荐使用apply 可以省略方法名 直接创建(和python创建对象一样了就)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test10_Object</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（3）伴生对象中的属性和方法都可以通过伴生对象名（类名）直接调用访问。</span></span><br><span class="line"><span class="comment">//    val student = new Person10(&quot;alice&quot;,18)</span></span><br><span class="line"><span class="comment">//    student.printInfo()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> person2 = <span class="type">Person10</span>.newPerson10(<span class="string">&quot;alice&quot;</span>,<span class="number">18</span>)</span><br><span class="line">    person2.printInfo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> person3 = <span class="type">Person10</span>.apply(<span class="string">&quot;bob&quot;</span>,<span class="number">29</span>) <span class="comment">//使用apply方法</span></span><br><span class="line">    person3.printInfo()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> person4 = <span class="type">Person10</span>(<span class="string">&quot;akko&quot;</span>,<span class="number">35</span>) <span class="comment">// apply可以省略</span></span><br><span class="line">    person4.printInfo()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）伴生对象采用 object 关键字声明</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person10</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">newPerson10</span></span>(name:<span class="type">String</span>,age:<span class="type">Int</span>): <span class="type">Person10</span> = <span class="keyword">new</span> <span class="type">Person10</span>(name,age)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name:<span class="type">String</span>,age:<span class="type">Int</span>): <span class="type">Person10</span> = <span class="keyword">new</span> <span class="type">Person10</span>(name,age)  <span class="comment">//apply写方法去调用构造器</span></span><br><span class="line">  <span class="comment">//相当于静态存在</span></span><br><span class="line">  <span class="keyword">var</span> school: <span class="type">String</span> = <span class="string">&quot;ZhongCe&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（2）伴生对象对应的类称之为伴生类，伴生对象的名称应该和伴生类名一致。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person10</span> <span class="title">private</span>(<span class="params">val name : <span class="type">String</span>,val age : <span class="type">Int</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">s&quot;student: name = <span class="subst">$name</span> ,age = <span class="subst">$age</span> , school = <span class="subst">$&#123;Person10.school&#125;</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特质">特质</h4><p>Scala 语言中，采用特质 trait（特征）来代替接口的概念，也就是说，多个类具有相同的特质时，就可以将这个特质（独立出来，采用关键字 trait 声明。可写可不写 。<code>与接口不同的是，它还可以定义属性和方法的实现。</code></p><p>我认为和java里一样，是因为都是单继承语言，然后通过这样的方式，对单继承机制的补充 <code>单继承多实现</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test12_Trait</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> student12: <span class="type">Student12</span>= <span class="keyword">new</span> <span class="type">Student12</span></span><br><span class="line">    student12.sysHello()</span><br><span class="line">    student12.study()</span><br><span class="line">    student12.dating()</span><br><span class="line">    student12.play()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person12</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;person&quot;</span></span><br><span class="line">  <span class="keyword">val</span> age: <span class="type">Int</span> = <span class="number">18</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sysHello</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;hello from: &quot;</span> + name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//特质</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Young</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义抽象或者非抽象的属性和方法都可以</span></span><br><span class="line">  <span class="keyword">val</span> age: <span class="type">Int</span> <span class="comment">//抽象</span></span><br><span class="line">  <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;young&quot;</span> <span class="comment">//非抽象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//抽象和非抽象方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">play</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">&quot;young people is playing&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dating</span></span>():<span class="type">Unit</span> <span class="comment">//抽象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student12</span> <span class="keyword">extends</span> <span class="title">Person12</span> <span class="keyword">with</span> <span class="title">Young</span> </span>&#123;</span><br><span class="line">  <span class="comment">//重写冲突的属性</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">&quot;student&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> age: <span class="type">Int</span> = <span class="number">19</span></span><br><span class="line">  <span class="comment">//实现抽象方法</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dating</span></span>(): <span class="type">Unit</span> = println(<span class="string">s&quot;student <span class="subst">$name</span> is dating&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">study</span></span>(): <span class="type">Unit</span> = println(<span class="string">s&quot;student <span class="subst">$name</span> is study&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重写父类方法</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">sysHello</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">super</span>.sysHello()</span><br><span class="line">    println(<span class="string">s&quot;hello from: student <span class="subst">$name</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特质混用</p><p>其实就是类似于Java中一个类实现多个接口一样的概念，Java中已有的接口都可以当作Scala的特质直接使用</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">PersonTrait</span> <span class="keyword">with</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line"> println(<span class="string">&quot;say&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">override</span> <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Teacher</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//所谓动态混用就是一个类用两个特质</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">with</span> <span class="title">Teacher</span> <span class="keyword">with</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特质和抽象类的使用场景</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.优先使用特质。一个类扩展多个特质是很方便的，但却只能扩展一个抽象类。</span><br><span class="line">2.如果你需要构造函数参数，使用抽象类。因为抽象类可以定义带参数的构造函数，而特质不行（有无参构造）。</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-4">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>类和对象代码打完，发现运行的时候，IDEA运行的界面都没了，后面检查，发现编译没错，那就是运行错误，看提示是类的原因，结果发现自己没写main类，无法运行，Scala的这点和Java是一样的。</p><p><img src="https://docimg3.docs.qq.com/image/o6Ax0mlG8JjME539efv5-Q.png?w=1822&amp;h=1013" alt="img"></p><p>看报错信息，是name的问题，检查了一遍代码发现了问题，特质中声明了name，父类person也声明了name。student子类又继承又实现，应该是运行的时候，不知道调用哪个，解决办法：子类自己重写方法，让name属性使用自己的。修改完又报错，翻译是age接口的问题，var要重写set和get方法，想想算了，就把var改成了val常量，正常运行了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719170042441.png" alt="image-20220719170042441"></p><h2 id="6-扩展学习部分-4">6.扩展学习部分</h2><p>上面的第二个错误，我看弹幕也有很多人这样，就去搜了一次Scala特质这种冲突问题，发现是有解释和方法解决的。</p><p>由于一个类可以混入多个 trait，且 trait 中可以有具体的属性和方法，若混入的特质中具有相同的方法（方法名，参数列表，返回值均相同），必然会出现继承冲突问题。冲突分为以下两种：<code>继承的父类也算</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719234527002.png" alt="image-20220719234527002"></p><p>我就是上图的第一种，并没有什么关联的，重写冲突方法或者属性就好了。</p><h3 id="特质叠加">特质叠加</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220719235950669.png" alt="image-20220719235950669"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;ball&quot;</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Color</span> <span class="keyword">extends</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;blue-&quot;</span> + <span class="keyword">super</span>.describe()</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;foot-&quot;</span> + <span class="keyword">super</span>.describe()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBall</span> <span class="keyword">extends</span> <span class="title">Category</span> <span class="keyword">with</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line"> <span class="string">&quot;my ball is a &quot;</span> + <span class="keyword">super</span>.describe()</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestTrait</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"> println(<span class="keyword">new</span> <span class="type">MyBall</span>().describe())</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图就是钻石问题了。运行结果：my ball is a blue-foot-ball</p><p><strong>MyClass</strong> <strong>中的</strong> <strong>super</strong> 指代Color,Color <strong>中的</strong> <strong>super</strong> <strong>指代</strong> **Category，**Category <strong>中的</strong> <strong>super</strong>指代 <strong>Ball</strong>。</p><p>那么叠加顺序就是</p><p>MyClass ----Color ----Category—Ball</p><h2 id="7-总结-5">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天Scala的学习内容是面向对象这块，也是学完了，前面的封装以及继承等和Java基本没有改动，只是优化了权限。抽象类也没变化，Scala面向对象的特别之处就是升级版的接口了，特质，这点也是比较重要的点，存在一定的难度。看文档没有很会，就又去看了一遍视频，结合文档，特质的基本使用已经掌握了，还有一些混用等，代码敲多了，掌握清除没什么问题，今天的学习状态和过程都不错， 明天进入集合和元组的学习，希望能保持今天的劲头。</p><h1 id="7-20-数组和集合">7.20 数组和集合</h1><h2 id="1-头：日期、所学内容出处-10">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-10">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">P91</span><br><span class="line"><span class="number">091</span>_尚硅谷<span class="variable">_Scala_</span>集合（一）_集合类型系统</span><br><span class="line">P92</span><br><span class="line"><span class="number">092</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（一）_创建数组</span><br><span class="line">P93</span><br><span class="line"><span class="number">093</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（二）_访问和修改元素</span><br><span class="line">P94</span><br><span class="line"><span class="number">094</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（三）_遍历数组</span><br><span class="line">P95</span><br><span class="line"><span class="number">095</span>_尚硅谷<span class="variable">_Scala_</span>集合（二）_数组（一）_不可变数组（四）_添加元素</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line"><span class="number">141</span>_尚硅谷<span class="variable">_Scala_</span>泛型（一）_概念和意义</span><br><span class="line">P142</span><br><span class="line"><span class="number">142</span>_尚硅谷<span class="variable">_Scala_</span>泛型（二）_逆变和协变</span><br><span class="line">P143</span><br><span class="line"><span class="number">143</span>_尚硅谷<span class="variable">_Scala_</span>泛型（三）_上下限</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-10">3.所学内容概述</h2><h3 id="Scasla集合简介">Scasla集合简介</h3><h4 id="数组">数组</h4><h5 id="列表">列表</h5><h5 id="set集合">set集合</h5><h5 id="Map集合">Map集合</h5><h5 id="元组">元组</h5><h5 id="常用函数-方法">常用函数 方法</h5><h5 id="队列">队列</h5><h5 id="并行集合">并行集合</h5><h5 id="模式匹配">模式匹配</h5><h5 id="异常处理">异常处理</h5><h2 id="4-根据概述分章节描述-8">4.根据概述分章节描述</h2><h3 id="Scala集合简介">Scala集合简介</h3><p>将Java三大集合照搬了，修改了List为Seq，但是List在Scala还存在</p><p>Scala 的集合有三大类：序列 Seq、集 Set、映射 Map，所有的集合都扩展自 Iterable特质。</p><p>对于几乎所有的集合类，Scala 都同时提供了<strong>可变</strong>和<strong>不可变</strong>的版本</p><p><code>Scala 不可变集合，就是指该集合对象不可修改，每次修改就会返回一个新对象</code></p><p><code>可变集合，就是这个集合可以直接对原对象进行修改，而不会返回新的对象。</code></p><h3 id="数组-2">数组</h3><p>可变和不可变都放下面的案例练习了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter03</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_Array</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//不可变数组</span></span><br><span class="line">    <span class="keyword">val</span> arr01 = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">9</span>)</span><br><span class="line">    arr01.update(<span class="number">1</span>,<span class="number">4</span>) <span class="comment">//指定位置 添加元素 也可以修改</span></span><br><span class="line">    println(arr01.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看数组 ,隔开</span></span><br><span class="line"><span class="comment">//    arr01.foreach(println)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> arr1 = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="string">&quot;jack&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;arr1长度:&quot;</span> + arr1.length)</span><br><span class="line">    arr1.foreach(print)</span><br><span class="line">    println()</span><br><span class="line">    println(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">    <span class="comment">//（4）增加元素（由于创建的是不可变数组，增加元素，其实是产生新的数组）</span></span><br><span class="line">    println(arr01)</span><br><span class="line">    <span class="keyword">val</span> ints: <span class="type">Array</span>[<span class="type">Int</span>] = arr01 :+ <span class="number">5</span></span><br><span class="line">    println(ints)</span><br><span class="line">    println(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    可变数组</span></span><br><span class="line">    <span class="keyword">val</span> arr2 = <span class="type">ArrayBuffer</span>[<span class="type">Any</span>](<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;helen&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;arr2长度:&quot;</span> +arr2.length)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"><span class="comment">//    arr2.foreach(println)</span></span><br><span class="line">    println(<span class="string">&quot;arr2.hash= &quot;</span> + arr2.hashCode())</span><br><span class="line">    <span class="comment">//（3）增加元素</span></span><br><span class="line">    <span class="comment">//（3.1）追加数据</span></span><br><span class="line">    arr2.+=(<span class="number">4</span>)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（3.2）向数组最后追加数据</span></span><br><span class="line">    arr2.append(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（3.3）向指定的位置插入数据 第一位指定下标位置 后面加多少数据都行</span></span><br><span class="line">    arr2.insert(<span class="number">1</span>,<span class="number">7</span>,<span class="number">0.8</span>)</span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;arr2.hash= &quot;</span> + arr2.hashCode())</span><br><span class="line"><span class="comment">//    修改</span></span><br><span class="line">    arr2(<span class="number">5</span>) = <span class="string">&quot;kiss&quot;</span> <span class="comment">//修改指定下标的值</span></span><br><span class="line">    println(arr2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">arr1长度:<span class="number">7</span></span><br><span class="line"><span class="number">145669</span>jack</span><br><span class="line">-----------------------</span><br><span class="line">[<span class="type">I</span>@<span class="number">22</span>f71333</span><br><span class="line">[<span class="type">I</span>@<span class="number">13969</span>fbe</span><br><span class="line">-----------------------</span><br><span class="line">arr2长度:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,helen</span><br><span class="line">arr2.hash= <span class="number">100581814</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,helen,<span class="number">4</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,helen,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"><span class="number">1</span>,<span class="number">7</span>,<span class="number">0.8</span>,<span class="number">2</span>,<span class="number">3</span>,helen,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">arr2.hash= <span class="number">-18482605</span></span><br><span class="line"><span class="number">1</span>,<span class="number">7</span>,<span class="number">0.8</span>,<span class="number">2</span>,<span class="number">3</span>,kiss,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="type">Process</span> finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="可变数组和不可变数组的转换">可变数组和不可变数组的转换</h4><p>对原本的数组没有改变，方法返回一个新数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换说明</span></span><br><span class="line">arr1.toBuffer <span class="comment">//不可变数组转可变数组</span></span><br><span class="line">arr2.toArray <span class="comment">//可变数组转不可变数组</span></span><br><span class="line">（<span class="number">1</span>）arr2.toArray 返回结果才是一个不可变数组，arr2 本身没有变化</span><br><span class="line">（<span class="number">2</span>）arr1.toBuffer 返回结果才是一个可变数组，arr1 本身没有变化</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_ArrayChange</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> arr2 = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]() <span class="comment">//创建可变数组</span></span><br><span class="line">    arr2.append(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)<span class="comment">//添加值</span></span><br><span class="line">    println(arr2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（3）ArrayBuffer ==&gt; Array</span></span><br><span class="line">    <span class="comment">//（3.1）arr2.toArray 返回的结果是一个新的定长数组集合</span></span><br><span class="line">    <span class="comment">//（3.2）arr2 它没有变化</span></span><br><span class="line">    <span class="keyword">val</span> newArr:<span class="type">Array</span>[<span class="type">Int</span>] = arr2.toArray</span><br><span class="line">    println(newArr.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（4）Array ===&gt; ArrayBuffer</span></span><br><span class="line">    <span class="comment">//（4.1）newArr.toBuffer 返回一个变长数组 newArr2</span></span><br><span class="line">    <span class="comment">//（4.2）newArr 没有任何变化，依然是定长数组</span></span><br><span class="line">    <span class="keyword">val</span> newArr2 = newArr.toBuffer</span><br><span class="line">    newArr2.append(<span class="number">123</span>)</span><br><span class="line">    println(newArr2)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多维数组</p><p>这个和Java一样，用处也不是很大感觉，过了一遍，很容易理解</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test03_DimArray</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建了一个二维数组, 有三个元素，每个元素是，含有 4 个元素一维数组()</span></span><br><span class="line">    <span class="keyword">val</span> arr = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    arr(<span class="number">1</span>)(<span class="number">2</span>) = <span class="number">88</span></span><br><span class="line">    <span class="comment">//遍历二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- arr)&#123; <span class="comment">//此时i是三个一维数组</span></span><br><span class="line">      <span class="keyword">for</span> (j &lt;- i)&#123;</span><br><span class="line">        print(j + <span class="string">&quot; &quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      println()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表List">列表List</h3><h4 id="不可变List">不可变List</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test04_List</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）List 默认为不可变集合</span></span><br><span class="line">    <span class="comment">//（2）创建一个 List（数据有顺序，可重复）</span></span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">//(3)遍历查看列表 打印</span></span><br><span class="line">    list.foreach(println)</span><br><span class="line">    println(list.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line">    <span class="comment">//（4）List 增加数据</span></span><br><span class="line">    <span class="comment">//（4.1）::的运算规则从右向左</span></span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="number">7</span> :: <span class="number">9</span> :: <span class="number">8</span> :: list</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> list2 = list1 .+:(<span class="number">10</span>) <span class="comment">//将10添加到数组的第一位创造新数组</span></span><br><span class="line">    println(list2.mkString(<span class="string">&quot;--&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> list3 = <span class="type">List</span>(<span class="number">8</span>,<span class="number">9</span>,<span class="number">53</span>)</span><br><span class="line">    <span class="keyword">val</span> list4 = list3 ::: list2 <span class="comment">//list3元素在左 list2在右 成一个新数组list4</span></span><br><span class="line">    println(list4.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1--2--3--4--3</span></span><br><span class="line"><span class="comment">7--9--8--1--2--3--4--3</span></span><br><span class="line"><span class="comment">10--7--9--8--1--2--3--4--3</span></span><br><span class="line"><span class="comment">8,9,53,10,7,9,8,1,2,3,4,3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="可变ListBuffer">可变ListBuffer</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test05_ListChange</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建一个可变集合</span></span><br><span class="line">    <span class="keyword">val</span> buffer = <span class="type">ListBuffer</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="comment">//（2）向集合中添加数据</span></span><br><span class="line">    buffer.+=(<span class="number">5</span>)</span><br><span class="line">    buffer.append(<span class="number">6</span>)</span><br><span class="line">    buffer.insert(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment">//（3）打印集合数据</span></span><br><span class="line">    buffer.foreach(print)</span><br><span class="line">    println()</span><br><span class="line">    println(buffer.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="comment">//（4）修改数据</span></span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">6</span></span><br><span class="line">    buffer.update(<span class="number">1</span>,<span class="number">7</span>)</span><br><span class="line">    <span class="comment">//（5）删除数据</span></span><br><span class="line">    buffer.-(<span class="number">5</span>)</span><br><span class="line">    buffer.-=(<span class="number">5</span>)</span><br><span class="line">    buffer.remove(<span class="number">5</span>)</span><br><span class="line">    println(buffer.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set集合">Set集合</h3><p>Set 默认是不可变集合，数据无序 数据不能重复</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test06_Set</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）Set 默认是不可变集合，数据无序</span></span><br><span class="line">    <span class="keyword">val</span> set = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">    println(set.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//5,1,2,7,3,4</span></span><br><span class="line">    <span class="comment">//（2）数据不可重复</span></span><br><span class="line">    <span class="keyword">val</span> set1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">//（3）遍历集合</span></span><br><span class="line">    <span class="keyword">for</span>(x&lt;-set1)&#123; <span class="comment">//5 1 6 2 3 4 3取消一个因为不能重复</span></span><br><span class="line">      println(x)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mutable-Set可变集合">mutable.Set可变集合</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test07_MutableSet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建可变集合</span></span><br><span class="line">    <span class="keyword">val</span> set = mutable.<span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">    println(set.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    set += <span class="number">8</span> <span class="comment">//集合添加元素</span></span><br><span class="line">    println(set.mkString(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="comment">//（4）向集合中添加元素，返回一个新的 Set</span></span><br><span class="line">    <span class="keyword">val</span> ints = set.+(<span class="number">9</span>)</span><br><span class="line">    println(ints)</span><br><span class="line">    println(<span class="string">&quot;set2=&quot;</span> + set)</span><br><span class="line">    <span class="comment">//（5）删除数据</span></span><br><span class="line">    set-=(<span class="number">5</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map集合-2">Map集合</h3><p>Scala 中的 Map 和 Java 类似，<strong>也是一个散列表</strong>，它存储的内容也是键值对（<strong>key-value</strong>）映射</p><p><code>不变的Map是有序的 可变的Map是无序的</code></p><h4 id="不可变Map">不可变Map</h4><p>如果 key 不存在，返回 0</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test08_Map</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="comment">//Map</span></span><br><span class="line">   <span class="comment">//（1）创建不可变集合 Map</span></span><br><span class="line">    <span class="keyword">val</span> map = <span class="type">Map</span>( <span class="string">&quot;a&quot;</span>-&gt;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;b&quot;</span>-&gt;<span class="number">2</span>, <span class="string">&quot;c&quot;</span>-&gt;<span class="number">3</span> )</span><br><span class="line">    map.foreach(println)<span class="comment">//打印键值对 带括号的</span></span><br><span class="line">    <span class="comment">//3.访问数据 格式为 keys = Value</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- map.keys)&#123;</span><br><span class="line">      <span class="comment">//使用get访问map集合的数据，会返回特殊Option选项：有值 无值</span></span><br><span class="line">      println(elem + <span class="string">&quot;=&quot;</span> + map(elem))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（4）如果 key 不存在，返回 ,后面的值</span></span><br><span class="line">    println(map.getOrElse(<span class="string">&quot;s&quot;</span>,<span class="number">5</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">(a,A)</span></span><br><span class="line"><span class="comment">(b,2)</span></span><br><span class="line"><span class="comment">(c,3)</span></span><br><span class="line"><span class="comment">a=A</span></span><br><span class="line"><span class="comment">b=2</span></span><br><span class="line"><span class="comment">c=3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h4 id="可变Map">可变Map</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test09_MapChange</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）创建可变集合</span></span><br><span class="line">    <span class="keyword">val</span> map = mutable.<span class="type">Map</span>( <span class="string">&quot;a&quot;</span>-&gt;<span class="number">1</span>, <span class="string">&quot;b&quot;</span>-&gt;<span class="number">2</span>, <span class="string">&quot;c&quot;</span>-&gt;<span class="number">3</span> )</span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line">    <span class="comment">//（3）向集合增加数据</span></span><br><span class="line">    map.+=(<span class="string">&quot;d&quot;</span>-&gt;<span class="number">4</span>)</span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数值 4 添加到集合，并把集合中a原值 1 返回</span></span><br><span class="line">    <span class="keyword">val</span> maybeInt = map.put(<span class="string">&quot;a&quot;</span>, <span class="number">4</span>) <span class="comment">// 相当于修改 有返回值</span></span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line">    println(maybeInt)</span><br><span class="line">    println(maybeInt.getOrElse(<span class="number">0</span>)) <span class="comment">//获取返回值</span></span><br><span class="line">    <span class="comment">//删除键 对应的值也会删除</span></span><br><span class="line">    println(map.-=(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>))</span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（5）修改数据 键对应的值</span></span><br><span class="line">    map.update(<span class="string">&quot;d&quot;</span>,<span class="number">5</span>)</span><br><span class="line">    map(<span class="string">&quot;a&quot;</span>) = <span class="number">1</span></span><br><span class="line">    println(map.mkString(<span class="string">&quot; , &quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">b -&gt; 2 , a -&gt; 1 , c -&gt; 3</span></span><br><span class="line"><span class="comment">b -&gt; 2 , d -&gt; 4 , a -&gt; 1 , c -&gt; 3</span></span><br><span class="line"><span class="comment">b -&gt; 2 , d -&gt; 4 , a -&gt; 4 , c -&gt; 3</span></span><br><span class="line"><span class="comment">Some(1)</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">Map(d -&gt; 4, a -&gt; 4)</span></span><br><span class="line"><span class="comment">d -&gt; 4 , a -&gt; 4</span></span><br><span class="line"><span class="comment">d -&gt; 5 , a -&gt; 1</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h3 id="元组-2">元组</h3><p>元组算是一个容器，可以这么理解，就是可加将很多无关的数据封装为一个整体 元组最大只能有22个元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test10_Tuple</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//（1）声明元组的方式：(元素 1，元素 2，元素 3)</span></span><br><span class="line">    <span class="keyword">val</span> tuple = (<span class="number">40</span>,<span class="string">&quot;bobo&quot;</span>,<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">//（2）访问元组</span></span><br><span class="line">    <span class="comment">//（2.1）通过元素的顺序进行访问，调用方式：_顺序号</span></span><br><span class="line">    println(tuple._1)</span><br><span class="line">    println(tuple._2)</span><br><span class="line">    println(tuple._3)</span><br><span class="line">    <span class="comment">//（2.2）通过索引访问数据</span></span><br><span class="line">    println(tuple.productElement(<span class="number">1</span>))</span><br><span class="line">    <span class="comment">//（2.3）通过迭代器访问数据</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- tuple.productIterator) &#123;</span><br><span class="line">      println(elem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//（3）Map 中的键值对其实就是元组,只不过元组的元素个数为 2，称之为 对偶</span></span><br><span class="line">    <span class="keyword">val</span> map = <span class="type">Map</span>(<span class="string">&quot;a&quot;</span>-&gt;<span class="number">1</span>, <span class="string">&quot;b&quot;</span>-&gt;<span class="number">2</span>, <span class="string">&quot;c&quot;</span>-&gt;<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> map1 = <span class="type">Map</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>), (<span class="string">&quot;b&quot;</span>,<span class="number">2</span>), (<span class="string">&quot;c&quot;</span>,<span class="number">3</span>))</span><br><span class="line">    map.foreach(tuple1=&gt;&#123;println(tuple1._1 + <span class="string">&quot;=&quot;</span> + tuple1._2)&#125;)</span><br><span class="line">    map1.foreach(tuple1=&gt;&#123;println(tuple1._1 + <span class="string">&quot;=&quot;</span> + tuple1._2)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment">bobo</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">bobo</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment">bobo</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">a=1</span></span><br><span class="line"><span class="comment">b=2</span></span><br><span class="line"><span class="comment">c=3</span></span><br><span class="line"><span class="comment">a=1</span></span><br><span class="line"><span class="comment">b=2</span></span><br><span class="line"><span class="comment">c=3</span></span><br></pre></td></tr></table></figure><h3 id="集合常用函数">集合常用函数</h3><p><strong>基本属性和常用操作</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_TestList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="comment">//（1）获取集合长度</span></span><br><span class="line">    println(list.length)</span><br><span class="line">    <span class="comment">//（2）获取集合大小,等同于 length</span></span><br><span class="line">    println(list.size)</span><br><span class="line">    <span class="comment">//（3）循环遍历</span></span><br><span class="line">    list.foreach(println)</span><br><span class="line">    <span class="comment">//（4）迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- list.iterator) &#123;</span><br><span class="line">      println(elem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//（5）生成字符串</span></span><br><span class="line">    println(list.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">//（6）是否包含</span></span><br><span class="line">    println(list.contains(<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7</span></span><br><span class="line"><span class="comment">true</span></span><br></pre></td></tr></table></figure><h4 id="衍生集合">衍生集合</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_TestListPlus</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list1: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">val</span> list2: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">//（1）获取集合的头</span></span><br><span class="line">    println(list1.head)</span><br><span class="line">    <span class="comment">//（2）获取集合的尾（不是头的就是尾 除去第一个）</span></span><br><span class="line">    println(list1.tail)</span><br><span class="line">    <span class="comment">//（3）集合最后一个数据</span></span><br><span class="line">    println(list1.last)</span><br><span class="line">    <span class="comment">//（4）集合初始数据 除去最后一个</span></span><br><span class="line">    println(list1.init)</span><br><span class="line">    <span class="comment">//（5）反转</span></span><br><span class="line">    println(list1.reverse)</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看当前数据顺序</span></span><br><span class="line">    <span class="comment">//（6）取前（后）n 个元素</span></span><br><span class="line">    println(list1.take(<span class="number">4</span>)) <span class="comment">//获取前四个</span></span><br><span class="line">    println(list1.takeRight(<span class="number">3</span>)) <span class="comment">//获取后四个</span></span><br><span class="line">    <span class="comment">//（7）去掉前（后）n 个元素</span></span><br><span class="line">    println(list1.drop(<span class="number">3</span>))</span><br><span class="line">    println(list1.dropRight(<span class="number">3</span>))</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看当前数据顺序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//（8）并集</span></span><br><span class="line">    println(list1.union(list2)) <span class="comment">//重复的也会存在</span></span><br><span class="line">    <span class="comment">//（9）交集</span></span><br><span class="line">    println(list1.intersect(list2))</span><br><span class="line">    <span class="comment">//（10）差集</span></span><br><span class="line">    println(list1.diff(list2))</span><br><span class="line">    println(list1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//查看当前数据顺序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//（11）滑窗</span></span><br><span class="line">    list1.sliding(<span class="number">2</span>, <span class="number">5</span>).foreach(println) <span class="comment">// 长度为2输出 从头开始 一次5位步长 1 2 3 4 5 6 7 11</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//（11）拉链 注:如果两个集合的元素个数不相等，那么会将同等数量的数据进行拉链，多余的数据省略不用 取小的</span></span><br><span class="line">    println(<span class="string">&quot;拉链&quot;</span>)</span><br><span class="line">    println(list1.zip(list2)) <span class="comment">//说白了就是上下对应生成一个新二维列表，二维列表里的列表是两个元素</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">List(2, 3, 4, 5, 6, 7, 11)</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5, 6, 7)</span></span><br><span class="line"><span class="comment">List(11, 7, 6, 5, 4, 3, 2, 1)</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7,11</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">List(6, 7, 11)</span></span><br><span class="line"><span class="comment">List(4, 5, 6, 7, 11)</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7,11</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5, 6, 7, 11, 4, 5, 6, 7, 8, 9, 10)</span></span><br><span class="line"><span class="comment">List(4, 5, 6, 7)</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 11)</span></span><br><span class="line"><span class="comment">1,2,3,4,5,6,7,11</span></span><br><span class="line"><span class="comment">List(1, 2)</span></span><br><span class="line"><span class="comment">List(6, 7)</span></span><br><span class="line"><span class="comment">拉链</span></span><br><span class="line"><span class="comment">List((1,4), (2,5), (3,6), (4,7), (5,8), (6,9), (7,10))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h4 id="集合计算简单函数">集合计算简单函数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test03_ListMath</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">-7</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">//（1）求和</span></span><br><span class="line">    println(list.sum)</span><br><span class="line">    <span class="comment">//（2）求乘积</span></span><br><span class="line">    println(list.product)</span><br><span class="line">    <span class="comment">//（3）最大值</span></span><br><span class="line">    println(list.max)</span><br><span class="line">    <span class="comment">//（4）最小值</span></span><br><span class="line">    println(list.min)</span><br><span class="line">    <span class="comment">//（5）排序</span></span><br><span class="line">    println(list.sorted) <span class="comment">// 自然排序</span></span><br><span class="line">    <span class="comment">// （5.1）按照元素大小排序</span></span><br><span class="line">    println(list.sortBy(x =&gt; x))</span><br><span class="line">    <span class="comment">// （5.2）按照元素的绝对值大小排序</span></span><br><span class="line">    println(list.sortBy(x =&gt; x.abs))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （5.3）按元素大小升序排序</span></span><br><span class="line">    println(list.sortWith((x, y) =&gt; x &lt; y))</span><br><span class="line">    <span class="comment">// （5.4）按元素大小降序排序</span></span><br><span class="line">    println(list.sortWith((x, y) =&gt; x &gt; y))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">5040</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">-7</span></span><br><span class="line"><span class="comment">List(-7, -3, 1, 2, 4, 5, 6)</span></span><br><span class="line"><span class="comment">List(-7, -3, 1, 2, 4, 5, 6)</span></span><br><span class="line"><span class="comment">List(1, 2, -3, 4, 5, 6, -7)</span></span><br><span class="line"><span class="comment">List(-7, -3, 1, 2, 4, 5, 6)</span></span><br><span class="line"><span class="comment">List(6, 5, 4, 2, 1, -3, -7)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br></pre></td></tr></table></figure><h3 id="集合计算高级函数">集合计算高级函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test04_HighLevelFunction_Map</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line">    <span class="comment">//1.过滤</span></span><br><span class="line">    <span class="comment">//选取偶数</span></span><br><span class="line">    println(list.filter(_ % <span class="number">2</span> == <span class="number">0</span> ))</span><br><span class="line">    <span class="comment">//选取奇数</span></span><br><span class="line">    println(list.filter(_ % <span class="number">2</span> == <span class="number">1</span> ))</span><br><span class="line">    println(<span class="string">&quot;=========================&quot;</span>)</span><br><span class="line">    <span class="comment">//2.map</span></span><br><span class="line">    <span class="comment">//集合元素映射</span></span><br><span class="line">    println(list.map(_ * <span class="number">2</span>)) <span class="comment">//集合每个数乘2</span></span><br><span class="line">    println(list.map(x =&gt; x * x)) <span class="comment">//集合每个数平方</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;=========================&quot;</span>)</span><br><span class="line">    <span class="comment">//3.扁平化</span></span><br><span class="line">    <span class="keyword">val</span> nestedList: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>),<span class="type">List</span>(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>))</span><br><span class="line">    println(nestedList.flatten)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.扁平化加映射 flatMap 相当于先进行 map 操作，在进行 flatten操作</span></span><br><span class="line">    <span class="keyword">val</span> wordList: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello atguigu&quot;</span>, <span class="string">&quot;hello scala&quot;</span>)</span><br><span class="line">    println(wordList.flatMap(_.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（5）分组</span></span><br><span class="line">    println(list.groupBy(_ % <span class="number">2</span> == <span class="number">0</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">List(2, 4, 6, 8)</span></span><br><span class="line"><span class="comment">List(1, 3, 5, 7, 9)</span></span><br><span class="line"><span class="comment">=========================</span></span><br><span class="line"><span class="comment">List(2, 4, 6, 8, 10, 12, 14, 16, 18)</span></span><br><span class="line"><span class="comment">List(1, 4, 9, 16, 25, 36, 49, 64, 81)</span></span><br><span class="line"><span class="comment">=========================</span></span><br><span class="line"><span class="comment">List(1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line"><span class="comment">List(hello, world, hello, atguigu, hello, scala)</span></span><br><span class="line"><span class="comment">Map(false -&gt; List(1, 3, 5, 7, 9), true -&gt; List(2, 4, 6, 8))</span></span><br></pre></td></tr></table></figure><h3 id="队列-2">队列</h3><p>Scala 也提供了队列（Queue）的数据结构，队列的特点就是先进先出。进队和出队的方法分别为 enqueue 和 dequeue。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test11_Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> que = <span class="keyword">new</span> mutable.<span class="type">Queue</span>[<span class="type">String</span>]()</span><br><span class="line">    que.enqueue(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">    que.enqueue(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">    println(que.dequeue())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*看运行结果得知 队列是取的时候一个一个来，后面添加也不能插队取</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">T</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="并行集合-2">并行集合</h3><p>是一种利用多核CPU的集合，进行多核的并行运算</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test12_Par</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> result1 = (<span class="number">0</span> to <span class="number">100</span>).map(_ =&gt;  <span class="type">Thread</span>.currentThread.getName)</span><br><span class="line">    <span class="keyword">val</span> result2 = (<span class="number">0</span> to <span class="number">100</span>).par.map(_ =&gt; <span class="type">Thread</span>.currentThread.getName)</span><br><span class="line">    println(result1)</span><br><span class="line">    println(result2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220720144457598.png" alt="image-20220720144457598"></p><p>可见原本的集合是一直都是main线程，而par的则是利用了不同的核心，这样使得 集合创建和运行的效率大大提高。</p><h3 id="异常处理-2">异常处理</h3><p>和java一模一样，只有catch部分有区别，Catch在java中多异常的时候，多写几个Catch就好了，在Scala则是多写几个Case。具体实现代码如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_Exception</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> n= <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">      println(n)</span><br><span class="line"><span class="comment">//      println(&quot;abc&quot;.toInt)</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">ArithmeticException</span>=&gt;</span><br><span class="line">        <span class="comment">// 发生算术异常</span></span><br><span class="line">        println(<span class="string">&quot;发生算术异常&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Exception</span>=&gt;</span><br><span class="line">        <span class="comment">// 对异常处理</span></span><br><span class="line">        println(<span class="string">&quot;发生了异常 1&quot;</span>)</span><br><span class="line">        println(<span class="string">&quot;发生了异常 2&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      println(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>抛出异常 关键字和java一样都是throw</p><p>下面是自己写了一个异常处理嵌套的简单代码，我理解Scala和Java异常处理是没有大变化的</p><p>区别点在异常捕获机制等，看文档，不重要没有深究</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_ExceptionThrow</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      test1()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Exception</span>=&gt; println(<span class="string">&quot;报错咯&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        f11()</span><br><span class="line">        <span class="comment">//      println(&quot;abc&quot;.toInt)</span></span><br><span class="line">      &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">ArithmeticException</span>=&gt;</span><br><span class="line">          <span class="comment">// 发生算术异常</span></span><br><span class="line">          println(<span class="string">&quot;发生算术异常0&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _: <span class="type">Exception</span>=&gt;</span><br><span class="line">          <span class="comment">// 对异常处理</span></span><br><span class="line">          println(<span class="string">&quot;发生了异常 1&quot;</span>)</span><br><span class="line">          println(<span class="string">&quot;发生了异常 2&quot;</span>)</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@throws</span>(classOf[<span class="type">NumberFormatException</span>])</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">f11</span></span>()=&#123;</span><br><span class="line">    <span class="string">&quot;abc&quot;</span>.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>(): <span class="type">Nothing</span> = &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">&quot;不可以哦&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式匹配-2">模式匹配</h3><p>我感觉像是switch的超级升级版，基础使用的话是差不多的，但是Scala用上闭包和柯里化，能让模式匹配变得很强大，可以代替If函数。</p><p>如下是基础使用，了解语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test01_MatchCase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;请输入第一个数字:&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> a: <span class="type">Int</span> = <span class="type">StdIn</span>.readInt()</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;请输入你要进行的操作 (+ - * /)&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> c = <span class="type">StdIn</span>.readChar()</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;请输入第二个数字:&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> b: <span class="type">Int</span> = <span class="type">StdIn</span>.readInt()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span></span>(x:<span class="type">Char</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &#x27;+&#x27; =&gt; a + b</span><br><span class="line">      <span class="keyword">case</span> &#x27;-&#x27; =&gt; a - b</span><br><span class="line">      <span class="keyword">case</span> &#x27;*&#x27; =&gt; a * b</span><br><span class="line">      <span class="keyword">case</span> &#x27;/&#x27; =&gt; a / b</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="string">&quot;illegal&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;请输入你要进行的操作 (+ - * /)&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> value = result(c)</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$a</span> <span class="subst">$c</span> <span class="subst">$b</span> = <span class="subst">$value</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过_来进行输入类型判断</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test02_MatchVal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(describe(<span class="number">6</span>))</span><br><span class="line">    <span class="comment">//泛型擦除</span></span><br><span class="line">    println(describe(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line">    <span class="comment">//数组例外，可保留泛型</span></span><br><span class="line">    println(describe(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)))</span><br><span class="line">    println(describe(<span class="type">Array</span>(<span class="string">&quot;abc&quot;</span>))) <span class="comment">//是java中lang包的泛型</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">describe</span></span>(x: <span class="type">Any</span>) = x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; <span class="string">&quot;Int&quot;</span></span><br><span class="line">    <span class="keyword">case</span> s: <span class="type">String</span> =&gt; <span class="string">&quot;String hello&quot;</span></span><br><span class="line">    <span class="keyword">case</span> m: <span class="type">List</span>[_] =&gt; <span class="string">&quot;List&quot;</span></span><br><span class="line">    <span class="keyword">case</span> c: <span class="type">Array</span>[<span class="type">Int</span>] =&gt; <span class="string">&quot;Array[Int]&quot;</span></span><br><span class="line">    <span class="keyword">case</span> someThing =&gt; <span class="string">&quot;something else &quot;</span> + someThing</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Int</span></span><br><span class="line"><span class="comment">List</span></span><br><span class="line"><span class="comment">Array[Int]</span></span><br><span class="line"><span class="comment">something else [Ljava.lang.String;@6debcae2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p>模式匹配的用法很多，但大致使用都一样，就不一一列举了。</p><h2 id="5-BUG点-5">5.BUG点</h2><p>自己写扩展练习的时候，报错了，因为自己对Scala中元组的._这用法不是很熟悉，都是边看笔记边敲出来，看提示信息，是16行类型出现的问题，我先把前面声明类型删除了，让系统自己去匹配类型，结果后面又会有一条报错，来回检查发现x._2是Map变成的list，而我要做的的是统计次数，因此后面应该是x._2的size或者length方法，统计出list的长度。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220723111125032.png" alt="image-20220723111125032"></p><h2 id="6-扩展学习部分-5">6.扩展学习部分</h2><h3 id="记数排序">记数排序</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test07_subject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 单词计数：将集合中出现的相同的单词，进行计数，取计数排名前三的结果</span></span><br><span class="line">    <span class="keyword">val</span> stringList = <span class="type">List</span>(<span class="string">&quot;Hello Scala Hbase kafka&quot;</span>, <span class="string">&quot;Hello Scala Hbase&quot;</span>, <span class="string">&quot;Hello Scala&quot;</span>, <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1) 将每一个字符串转换成一个一个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordList: <span class="type">List</span>[<span class="type">String</span>] = stringList.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">        println(wordList)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2) 将相同的单词放置在一起</span></span><br><span class="line">    <span class="keyword">val</span> wordToMap: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">List</span>[<span class="type">String</span>]] = wordList.groupBy(a =&gt; a)</span><br><span class="line">        println(wordToMap)</span><br><span class="line">    <span class="comment">// 3) 对相同的单词进行计数</span></span><br><span class="line">    <span class="keyword">val</span> wordToMapCount: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">Int</span>] = wordToMap.map(x =&gt; (x._1, x._2.size))</span><br><span class="line">    println(wordToMapCount)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4) 对计数完成后的结果进行排序（降序）</span></span><br><span class="line">    <span class="keyword">val</span> wordListToCount : <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)]= wordToMapCount.toList</span><br><span class="line">    <span class="keyword">val</span> sortList =wordListToCount.sortWith &#123;</span><br><span class="line">      (x, y) =&gt; &#123;</span><br><span class="line">        x._2 &gt; y._2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    println(sortList)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5) 对排序后的结果取前 3 名</span></span><br><span class="line">    println(sortList.take(<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-6">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习状态非常不错，已经熟练掌握了看文档的技能了，一天看了将近视频的70集。Scala后面的面向对象和集合方面都是以代码为主，逻辑性的问题，在Java早就牢记于心了，看文档的案例，复制到IDEA，自己基本就能分析出来方法的作用，以及使用场景。难点和Scala独特的点是同一点，就是元组的._使用，<code>._</code>能很大程度上优化Scala的代码长度，让代码更简洁，而且<code>._</code>匿名调用集合中的元素，以及列表中嵌元组，Map集合中嵌列表，二维列表中是偶元组，这种场景下，就显得非常好用，在for循环遍历也是如此。元组还是Scala比较重要，实用的点。今日算超额完成任务了，进入了Spark的学习，配置好了基本环境，将快速上手小案例做了出来，有前面Hadoop的铺垫，Spark理解应该会稍微容易点的，希望明天正式进入Spark的学习状态能和今天一样吧。</p><h1 id="7-21-Spark入门">7.21 Spark入门</h1><h2 id="1-头：日期、所学内容出处-11">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-11">2.标题</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">P1001</span>.尚硅谷_Spark框架 - 简介<span class="number">4</span>:<span class="number">54</span></span><br><span class="line"><span class="attribute">P2002</span>.尚硅谷_Spark框架 - Vs Hadoop<span class="number">7</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P3003</span>.尚硅谷_Spark框架 - 核心模块 - 介绍<span class="number">2</span>:<span class="number">24</span></span><br><span class="line"><span class="attribute">P4004</span>.尚硅谷_Spark框架 - 快速上手 - 开发环境准备<span class="number">5</span>:<span class="number">46</span></span><br><span class="line"><span class="attribute">P5005</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 案例分析<span class="number">7</span>:<span class="number">57</span></span><br><span class="line"><span class="attribute">P6006</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - Spark环境<span class="number">7</span>:<span class="number">07</span></span><br><span class="line"><span class="attribute">P7007</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 功能实现<span class="number">11</span>:<span class="number">56</span></span><br><span class="line"><span class="attribute">P8008</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 不同的实现<span class="number">8</span>:<span class="number">31</span></span><br><span class="line"><span class="attribute">P9009</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - Spark的实现<span class="number">4</span>:<span class="number">24</span></span><br><span class="line"><span class="attribute">P10010</span>.尚硅谷_Spark框架 - 快速上手 - WordCount - 日志和错误<span class="number">3</span>:<span class="number">50</span></span><br><span class="line"><span class="attribute">P11011</span>.尚硅谷_Spark框架 - 运行环境 - 本地环境 - 基本配置和操作<span class="number">8</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">P12012</span>.尚硅谷_Spark框架 - 运行环境 - 本地环境 - 提交应用程序<span class="number">3</span>:<span class="number">10</span></span><br><span class="line"><span class="attribute">P13013</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 基本配置和操作<span class="number">6</span>:<span class="number">13</span></span><br><span class="line"><span class="attribute">P14014</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 提交参数解析<span class="number">3</span>:<span class="number">08</span></span><br><span class="line"><span class="attribute">P15015</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 配置历史服务<span class="number">4</span>:<span class="number">08</span></span><br><span class="line"><span class="attribute">P16016</span>.尚硅谷_Spark框架 - 运行环境 - 独立部署环境 - 配置高可用<span class="number">5</span>:<span class="number">51</span></span><br><span class="line"><span class="attribute">P17017</span>.尚硅谷_Spark框架 - 运行环境 - Yarn环境 - 基本配置 &amp; 历史服务<span class="number">6</span>:<span class="number">42</span></span><br><span class="line"><span class="attribute">P18018</span>.尚硅谷_Spark框架 - 运行环境 - Windows环境 &amp; 总结<span class="number">11</span>:<span class="number">06</span></span><br><span class="line"><span class="attribute">P19019</span>.尚硅谷_Spark框架 - 核心组件 - 介绍<span class="number">3</span>:<span class="number">33</span></span><br><span class="line"><span class="attribute">P20020</span>.尚硅谷_Spark框架 - 核心概念 - Executor &amp; Core &amp; 并行度<span class="number">3</span>:<span class="number">31</span></span><br><span class="line"><span class="attribute">P21021</span>.尚硅谷_Spark框架 - 核心概念 - DAG &amp; 提交流程 &amp; Yarn两种部署模式<span class="number">7</span>:<span class="number">00</span></span><br><span class="line"><span class="attribute">P22022</span>.尚硅谷_SparkCore - 分布式计算模拟 - 搭建基础的架子<span class="number">12</span>:<span class="number">48</span></span><br><span class="line"><span class="attribute">P23023</span>.尚硅谷_SparkCore - 分布式计算模拟 - 客户端向服务器发送计算任务<span class="number">10</span>:<span class="number">50</span></span><br><span class="line"><span class="attribute">P24024</span>.尚硅谷_SparkCore - 分布式计算模拟 - 数据结构和分布式计算<span class="number">11</span>:<span class="number">39</span></span><br><span class="line"><span class="attribute">P25025</span>.尚硅谷_SparkCore - 核心编程 - RDD - 概念介绍<span class="number">5</span>:<span class="number">31</span></span><br><span class="line"><span class="attribute">P26026</span>.尚硅谷_SparkCore - 核心编程 - RDD - IO基本实现原理 - <span class="number">1</span><span class="number">10</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">P27027</span>.尚硅谷_SparkCore - 核心编程 - RDD - IO基本实现原理 - <span class="number">2</span><span class="number">8</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P28028</span>.尚硅谷_SparkCore - 核心编程 - RDD - RDD和IO之间的关系<span class="number">12</span>:<span class="number">24</span></span><br><span class="line"><span class="attribute">P29029</span>.尚硅谷_SparkCore - 核心编程 - RDD - 特点<span class="number">13</span>:<span class="number">34</span></span><br><span class="line"><span class="attribute">P30030</span>.尚硅谷_SparkCore - 核心编程 - RDD - 五大主要配置<span class="number">11</span>:<span class="number">19</span></span><br><span class="line"><span class="attribute">P31031</span>.尚硅谷_SparkCore - 核心编程 - RDD - 执行原理<span class="number">3</span>:<span class="number">05</span></span><br><span class="line"><span class="attribute">P32032</span>.尚硅谷_SparkCore - 核心编程 - RDD - 创建 - 内存<span class="number">11</span>:<span class="number">02</span></span><br><span class="line"><span class="attribute">P33033</span>.尚硅谷_SparkCore - 核心编程 - RDD - 创建 - 文件<span class="number">6</span>:<span class="number">28</span></span><br><span class="line"><span class="attribute">P34034</span>.尚硅谷_SparkCore - 核心编程 - RDD - 创建 - 文件<span class="number">1</span><span class="number">4</span>:<span class="number">42</span></span><br><span class="line"><span class="attribute">P35035</span>.尚硅谷_SparkCore - 核心编程 - RDD - 集合数据源 - 分区的设定<span class="number">11</span>:<span class="number">41</span></span><br><span class="line"><span class="attribute">P36036</span>.尚硅谷_SparkCore - 核心编程 - RDD - 集合数据源 - 分区数据的分配<span class="number">13</span>:<span class="number">54</span></span><br><span class="line"><span class="attribute">P37037</span>.尚硅谷_SparkCore - 核心编程 - RDD - 文件数据源 - 分区的设定<span class="number">11</span>:<span class="number">33</span></span><br><span class="line"><span class="attribute">P38038</span>.尚硅谷_SparkCore - 核心编程 - RDD - 文件数据源 - 分区数据的分配<span class="number">8</span>:<span class="number">21</span></span><br><span class="line"><span class="attribute">P39039</span>.尚硅谷_SparkCore - 核心编程 - RDD - 文件数据源 - 分区数据的分配 - 案例分析<span class="number">6</span>:<span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-11">3.所学内容概述</h2><h3 id="Spark的快速上手">Spark的快速上手</h3><h4 id="Spark在Linux的部署配置">Spark在Linux的部署配置</h4><h4 id="RDD简介-和-逻辑以及执行过程-原理">RDD简介 和 逻辑以及执行过程 原理</h4><h2 id="4-根据概述分章节描述-9">4.根据概述分章节描述</h2><h3 id="Spark的快速上手-2">Spark的快速上手</h3><p>Spark 由 Scala 语言开发的，所以本课件接下来的开发所使用的语言也为 Scala</p><p>在IDEA中创建Maven项目</p><p>增加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="WorldCount案例">WorldCount案例</h4><p>这个案例昨天拿scala刚做过  基本逻辑是一样的，但是在Spark框架有更简单的方法，作者已经提供，不同的是要先建立和框架的连接 再去执行操作，看得出来，底层源码都是Scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_wordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Application</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spark框架</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 建立和Spark框架的连接</span></span><br><span class="line">    <span class="comment">//JDBC:Connection</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line">    <span class="comment">// 创建 Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"><span class="comment">//    sc.textFile(&quot;data/word.txt&quot;).flatMap(_.split(&quot; &quot;)).map((_,1)).reduceByKey(_+_).collect()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行业务操作</span></span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">&quot;../bigdata/datas&quot;</span>)</span><br><span class="line">    <span class="comment">// 将文件中的数据进行分词</span></span><br><span class="line">    <span class="keyword">val</span> wordRDD: <span class="type">RDD</span>[<span class="type">String</span>] = fileRDD.flatMap( _.split(<span class="string">&quot; &quot;</span>) )</span><br><span class="line">    <span class="comment">// 转换数据结构 word =&gt; (word, 1)</span></span><br><span class="line">    <span class="keyword">val</span> <span class="type">WorldToOne</span>:<span class="type">RDD</span>[(<span class="type">String</span>,<span class="type">Int</span>)] = wordRDD.map((_, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">// 将转换结构后的数据按照相同的单词进行分组聚合</span></span><br><span class="line"><span class="comment">//    val WordGroup:RDD[(String,Iterable[(String,Int)])] = WorldToOne.groupBy(</span></span><br><span class="line"><span class="comment">//      t =&gt; t._1</span></span><br><span class="line"><span class="comment">//    )</span></span><br><span class="line"><span class="comment">//    val wordCount = WordGroup.map &#123;</span></span><br><span class="line"><span class="comment">//      case (_, y) =&gt;</span></span><br><span class="line"><span class="comment">//        y.reduce(</span></span><br><span class="line"><span class="comment">//          (y1, y2) =&gt; (y1._1, y1._2 + y2._2)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        )</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">val</span> wordCount = <span class="type">WorldToOne</span>.reduceByKey(_ + _)</span><br><span class="line">    <span class="comment">// 将数据聚合结果采集到内存中</span></span><br><span class="line">    <span class="keyword">val</span> word2Count = wordCount.collect()</span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    word2Count.foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD简介">RDD简介</h3><p>弹性分布式数据集，是 Spark 中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的<strong>集合</strong></p><p>自己理解：RDD的弹性安全性比较好，高容错，适合开发。它是一个集合，但并不保存数据，而且封装了计算逻辑，同时也是一个抽象类，需要其他的子类来具体实现。</p><h4 id="执行原理">执行原理</h4><p>RDD先申请资源，然后将应用程序的数据处理逻辑分解成一个一个的计算任务。然后将任务发到已经分配资源的计算节点上, 按照指定的计算模型进行数据计算。最后得到计算结果。</p><p>在Yarn中的执行原理</p><h5 id="1-启动环境">1.启动环境</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141756608.png" alt="image-20220722141756608"></p><h5 id="2-Spark通过申请资源创建节点">2.Spark通过申请资源创建节点</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141829718.png" alt="image-20220722141829718"></p><h5 id="3-根据需求根据分区划分任务">3.根据需求根据分区划分任务</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141903056.png" alt="image-20220722141903056"></p><h5 id="4-调度节点将任务根据计算节点状态发送到对应的计算节点进行计算">4.调度节点将任务根据计算节点状态发送到对应的计算节点进行计算</h5><p>如下图</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722141944559.png" alt="image-20220722141944559"></p><p>根据这四幅图，便能看出来RDD的 流程中的作用主要就是将逻辑封装，生成Task也就是任务点，发送给Executor节点</p><h3 id="RDD创建">RDD创建</h3><p>在 Spark 中创建 RDD 的创建方式可以分为四种：</p><p>在文件中创建RDD 用<code>makeRDD</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SPark02_RDD_Memory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//准备环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;RDD&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建RDD</span></span><br><span class="line">    <span class="comment">//从内存中创建RDD，将内存中集合的数据作为处理的数据源</span></span><br><span class="line">    <span class="keyword">val</span> seq = <span class="type">Seq</span>[<span class="type">Int</span>](<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//parallelize 并行</span></span><br><span class="line"><span class="comment">//    val rdd : RDD[Int]= sc.parallelize(seq)</span></span><br><span class="line">    <span class="comment">//makeRDD方法在底层实现时其实就是调用了rdd对象的parallelize方法 以后都用sc.makeRDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(seq)</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    rdd.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下三种暂时说是用不到</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722142947372.png" alt="image-20220722142947372"></p><h4 id="RDD读取文件-路径问题">RDD读取文件 路径问题</h4><p>代码注解中已经解释</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SPark03_RDD_File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备文件环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;RDD&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建RDD</span></span><br><span class="line">    <span class="comment">//从文件中创建RDD，将内存中集合的数据作为处理的数据源</span></span><br><span class="line">    <span class="comment">//path路径默认以当前环境的根路径为基准 可以写绝对路径也可以写相对路径</span></span><br><span class="line"><span class="comment">//    val rdd = sc.textFile(&quot;datas/1.txt&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    val rdd:RDD[String] = sc.textFile(&quot;datas&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//也可以在HDFS在外部 读取</span></span><br><span class="line">    <span class="comment">//    sc.textFile(&quot;hdfs://hadoop86/test.txt&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//textFile:以行为单位来读取数据 读取是字符串</span></span><br><span class="line">    <span class="comment">//wholeTextFiles:以文件为单位来读取数据 读取的数据是元组 第一个数据是路径</span></span><br><span class="line">    <span class="keyword">val</span> rdd:<span class="type">RDD</span>[(<span class="type">String</span>,<span class="type">String</span>)] = sc.wholeTextFiles(<span class="string">&quot;datas&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    rdd.collect().foreach(println)</span><br><span class="line">    <span class="comment">//关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>RDD的使用在IDEA中，大致分为三步 准备环境 创建RDD 关闭环境</p><p>准备环境的代码基本很固定  而创建RDD 就要看是读取文件 还是直接在IDEA中配置</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BigDataSparkDay1</span>.wc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SPark02_RDD_Memory2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;RDD&quot;</span>)</span><br><span class="line">    sparkConf.set(<span class="string">&quot;spark.default.parallelism&quot;</span>,<span class="string">&quot;5&quot;</span>)  <span class="comment">//修改默认并行核数 为5 ‘0-4’</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 创建RDD</span></span><br><span class="line">    <span class="comment">//RDD的并行度 &amp; 分区</span></span><br><span class="line">    <span class="comment">//makeRDD方法可以传递第二个参数,这个参数表示分区的数量</span></span><br><span class="line">    <span class="comment">// 第二个参数 numSlices可以不传递 有默认并行度 带了*所以是电脑CPU的并行核数 我是16个</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(</span><br><span class="line">      <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将处理的数据保存成分区文件</span></span><br><span class="line">    rdd.saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-6">5.BUG点</h2><p>跟老师一模一样的代码报错，刚进入也不知道什么原因就按报错信息去CSDN搜，发现有人有一样的问题，在resources中配置一个log4j文件就好了，<strong>也不是刚开始怀疑的版本问题</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220723111109882.png" alt="image-20220723111109882"></p><h2 id="6-扩展学习部分-6">6.扩展学习部分</h2><h3 id="Linux中Spark部署">Linux中Spark部署</h3><p>步骤  克隆三台虚拟机</p><p>修改IP地址 主机名 和 映射</p><p>配置无密  创建xsync文件并配置信息 给其增加执行权限</p><p>下载rsync yum</p><p>分发命令<code>sbin/start -all.sh</code></p><h2 id="7-总结-7">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>昨天配置了spark在IDEA中的环境，并没有入门，今天对Spark进行一个上手入门，发现Spark框架，都是使用scala代码进行功能实现的，然后就是Linux系统中，Spark的环境部署，和框架搭建，因为不是自己负责的板块，听听作用就过去了，后面弄懂了什么是Spark以及执行原理和流程。今天难度还是有的，都是概念性的东西，要一个一个去记住和理解，明天就是转子算法的学习，就会有代码量了。</p><h1 id="7-22-Spark-RDD转换算子">7.22 Spark-RDD转换算子</h1><h2 id="1-头：日期、所学内容出处-12">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-12">2.标题</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">P40040</span>.尚硅谷_SparkCore - 核心编程 - RDD - 算子介绍<span class="number">7</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P41041</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - map<span class="number">7</span>:<span class="number">46</span></span><br><span class="line"><span class="attribute">P42042</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - map - 小功能<span class="number">5</span>:<span class="number">12</span></span><br><span class="line"><span class="attribute">P43043</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - map - 并行计算效果演示<span class="number">8</span>:<span class="number">54</span></span><br><span class="line"><span class="attribute">P44044</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitions<span class="number">6</span>:<span class="number">12</span></span><br><span class="line"><span class="attribute">P45045</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitions - 小练习<span class="number">3</span>:<span class="number">49</span></span><br><span class="line"><span class="attribute">P46046</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitions &amp; map的区别 - 完成比完美更重要</span><br><span class="line"><span class="attribute">P47047</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - mapPartitionsWithIndex<span class="number">6</span>:<span class="number">30</span></span><br><span class="line"><span class="attribute">P48048</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - flatMap<span class="number">5</span>:<span class="number">07</span></span><br><span class="line"><span class="attribute">P49049</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - flatMap - 小练习<span class="number">2</span>:<span class="number">41</span></span><br><span class="line"><span class="attribute">P50050</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - glom<span class="number">6</span>:<span class="number">33</span></span><br><span class="line"><span class="attribute">P51051</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - 理解分区不变的含义<span class="number">6</span>:<span class="number">48</span></span><br><span class="line"><span class="attribute">P52052</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - groupBy<span class="number">5</span>:<span class="number">25</span></span><br><span class="line"><span class="attribute">P53053</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - groupBy - shuffle来袭<span class="number">6</span>:<span class="number">01</span></span><br><span class="line"><span class="attribute">P54054</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - groupBy - 小练习<span class="number">7</span>:<span class="number">51</span></span><br><span class="line"><span class="attribute">P55055</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - filter - 数据倾斜<span class="number">7</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">P56056</span>.尚硅谷_SparkCore - 核心编程 - RDD - 转换算子 - sample - 抽奖喽<span class="number">16</span>:<span class="number">11</span></span><br><span class="line"><span class="attribute">057Core</span> - 核心编程 - RDD - 转换算子 - distinct</span><br><span class="line"><span class="attribute">058Core</span> - 核心编程 - RDD - 转换算子 - coalesce</span><br><span class="line"><span class="attribute">059Core</span> - 核心编程 - RDD - 转换算子 - repartition</span><br><span class="line"><span class="attribute">060Core</span> - 核心编程 - RDD - 转换算子 - sortBy</span><br><span class="line"><span class="attribute">061Core</span> - 核心编程 - RDD - 转换算子 - 交集&amp;并集&amp;差集&amp;拉链</span><br><span class="line"><span class="attribute">062Core</span> - 核心编程 - RDD - 转换算子 - 交集&amp;并集&amp;差集&amp;拉链 - 注意事项</span><br><span class="line"><span class="attribute">063Core</span> - 核心编程 - RDD - 转换算子 - partitionBy（前面有吸气，中间有等待）</span><br><span class="line"><span class="attribute">064Core</span> - 核心编程 - RDD - 转换算子 - partitionBy - 思考的问题</span><br><span class="line"><span class="attribute">065Core</span> - 核心编程 - RDD - 转换算子 - reduceByKey</span><br><span class="line"><span class="attribute">066Core</span> - 核心编程 - RDD - 转换算子 - groupByKey</span><br><span class="line"><span class="attribute">067Core</span> - 核心编程 - RDD - 转换算子 - groupByKey &amp; reduceByKey的区别</span><br><span class="line"><span class="attribute">068Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey</span><br><span class="line"><span class="attribute">069Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey - 图解</span><br><span class="line"><span class="attribute">070Core</span> - 核心编程 - RDD - 转换算子 - foldByKey</span><br><span class="line"><span class="attribute">071Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey - 小练习</span><br><span class="line"><span class="attribute">072Core</span> - 核心编程 - RDD - 转换算子 - aggregateByKey - 小练习 - 图解</span><br><span class="line"><span class="attribute">073Core</span> - 核心编程 - RDD - 转换算子 - combineByKey</span><br><span class="line"><span class="attribute">074Core</span> - 核心编程 - RDD - 转换算子 - 聚合算子的区别</span><br><span class="line"><span class="attribute">075Core</span> - 核心编程 - RDD - 转换算子 - join</span><br><span class="line"><span class="attribute">076Core</span> - 核心编程 - RDD - 转换算子 - leftOuterJoin &amp; rightOuterJoin</span><br><span class="line"><span class="attribute">077Core</span> - 核心编程 - RDD - 转换算子 - cogroup</span><br><span class="line"><span class="attribute">078Core</span> - 核心编程 - RDD - 案例实操 - 需求介绍 &amp; 分析</span><br><span class="line"><span class="attribute">079Core</span> - 核心编程 - RDD - 案例实操 - 需求设计</span><br><span class="line"><span class="attribute">080Core</span> - 核心编程 - RDD - 案例实操 - 功能实现</span><br><span class="line"><span class="attribute">081Core</span> - 核心编程 - RDD - 行动算子 - 介绍</span><br><span class="line"><span class="attribute">082Core</span> - 核心编程 - RDD - 行动算子 - 算子演示</span><br><span class="line"><span class="attribute">083Core</span> - 核心编程 - RDD - 行动算子 - aggregate</span><br><span class="line"><span class="attribute">084Core</span> - 核心编程 - RDD - 行动算子 - countByKey &amp; countByValue</span><br><span class="line"><span class="attribute">085Core</span> - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">1</span>-<span class="number">8</span>)</span><br><span class="line"><span class="attribute">086Core</span> - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">9</span>-<span class="number">11</span>)</span><br><span class="line"><span class="attribute">087Core</span> - 核心编程 - RDD - 行动算子 - save的方法</span><br><span class="line"><span class="attribute">088Core</span> - 核心编程 - RDD - 行动算子 - foreach</span><br><span class="line"><span class="attribute">089Core</span> - 核心编程 - RDD - 序列化 - 闭包检测</span><br><span class="line"><span class="attribute">090Core</span> - 核心编程 - RDD - 序列化 - 实际执行时的问题</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-12">3.所学内容概述</h2><h2 id="4-根据概述分章节描述-10">4.根据概述分章节描述</h2><h3 id="RDD单Value转换算子">RDD单Value转换算子</h3><p>RDD根据处理方式的不同分为了Value类型 双Value 和Key-Value类型</p><p>代码都是在昨天三大步骤的基础上进行，改变点在创建RDD中，</p><p>看得出 如下代码是将List集合中每个值都*2  然后打印出来 用map方法转换 映射转换 在Scala的高级算法中有说明</p><h4 id="map">map</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="comment">//2 4 6 8</span></span><br><span class="line">    <span class="comment">//转换函数</span></span><br><span class="line"><span class="comment">//    def mapFunction(num:Int)=&#123;num * 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    val mapRDD = rdd.map(mapFunction)</span></span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd.map((_: <span class="type">Int</span>) * <span class="number">2</span>) <span class="comment">//匿名函数至简原则</span></span><br><span class="line"></span><br><span class="line">    mapRDD.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上map方法的执行效率会很低，因为是读一个执行一次，这样需要执行多次，就像IO中对文件的处理一样，IO流解决办法是使用缓冲流Buffer，在Spark也有一种方法类似，</p><h4 id="mapPartitions">mapPartitions</h4><p>将待处理的数据以分区为单位发送到计算节点进行处理</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_partitions</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*mapPartitions:</span></span><br><span class="line"><span class="comment">                   算子是以分区为单位进行批处理操作</span></span><br><span class="line"><span class="comment">                   算子会长时间占用内存，那么这样会导致内存可能</span></span><br><span class="line"><span class="comment">                   不够用，出现内存溢出的错误。所以在内存有限的情况下，不推荐使用。使用 map 操作。 */</span></span><br><span class="line">    <span class="keyword">val</span> rddMapPartitions = rdd.mapPartitions(</span><br><span class="line">      iter =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        iter.map(_ * <span class="number">2</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    rddMapPartitions.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">8</span></span><br></pre></td></tr></table></figure><p>看案例的执行结果，能分析出来mapPartitions是分区操作的，比如案例两个分区，就先执行一个分区，再是另外一个，性能是比map高的，<strong>缺点</strong>写在代码里面了</p><h4 id="mapPartitionsWithIndex">mapPartitionsWithIndex</h4><p>将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据，在处理时同时可以<strong>获取当前分区索引</strong>。</p><p>小案例 获取数据分区的数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_partitionsWithIndex_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="comment">//显示分区号</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> rddMap:<span class="type">RDD</span>[(<span class="type">Int</span>,<span class="type">Int</span>)] = rdd.mapPartitionsWithIndex(</span><br><span class="line">      (index: <span class="type">Int</span>, iter: <span class="type">Iterator</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        iter.map(</span><br><span class="line">          (num: <span class="type">Int</span>) =&gt; &#123; <span class="comment">//将原本返回一个数据map 改成返回元组</span></span><br><span class="line">            (index, num) <span class="comment">//index是分区号 num是分区内的数据</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    rddMap.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flatMap">flatMap</h4><p>将处理的数据进行扁平化后再进行映射处理，所以算子也称之为扁平映射</p><p>将 List(List(1,2),3,List(4,5))进行扁平化操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Operator_Transform_TestFlat2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --flatMap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Any</span>] = sc.makeRDD(<span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="number">3</span>,<span class="type">List</span>(<span class="number">4</span>,<span class="number">5</span>))) <span class="comment">//创建RDD集合</span></span><br><span class="line">    <span class="keyword">val</span> rddMap: <span class="type">RDD</span>[<span class="type">Any</span>] = rdd.flatMap &#123; <span class="comment">//读取</span></span><br><span class="line">      <span class="keyword">case</span> list1: <span class="type">List</span>[_] =&gt; list1 <span class="comment">//模式匹配 如果是List集合 直接返回</span></span><br><span class="line">      <span class="keyword">case</span> dat =&gt; <span class="type">List</span>(dat) <span class="comment">// 如果是其他值 转换成List集合后返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rddMap.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="glom">glom</h4><p>将同一个分区的数据直接转换为相同类型的内存数组进行处理  <strong>看代码执行过后是返回一个数组类型的</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Operator_Transform_Glom</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --flatMap</span></span><br><span class="line">    <span class="comment">//返回两个分区的数据的最大值相加</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> glom: <span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = rdd.glom()</span><br><span class="line">    <span class="comment">//取出两个分区的数据 用map进行数据执行</span></span><br><span class="line">    <span class="keyword">val</span> glomRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = glom.map(</span><br><span class="line">      (array: <span class="type">Array</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        array.max <span class="comment">//2 4</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    println(glomRDD.collect().foreach((data: <span class="type">Int</span>) =&gt; print(data + <span class="string">&quot;,&quot;</span>)))</span><br><span class="line">    println(glomRDD.sum())</span><br><span class="line">    </span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="groupBy">groupBy</h4><p>将数据源中的每个数据进行分组判断  根据返回的分组key 进行分组 相同的key值会放在一个组中</p><p><strong>注意分组和分区没有必然的关系</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_RDD_Operator_Transform_GlomBy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --flatMap</span></span><br><span class="line"><span class="comment">//  首字母一样的放一个组中</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(<span class="type">List</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;Spark&quot;</span>,<span class="string">&quot;Scala&quot;</span>,<span class="string">&quot;Hadoop&quot;</span>),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> groupRDD: <span class="type">RDD</span>[(<span class="type">Char</span>, <span class="type">Iterable</span>[<span class="type">String</span>])] = rdd.groupBy((_: <span class="type">String</span>)(<span class="number">0</span>))</span><br><span class="line">    groupRDD.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(H,CompactBuffer(Hello, Hadoop))</span></span><br><span class="line"><span class="comment">(S,CompactBuffer(Spark, Scala))</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>groupBy会把不同区的数据打乱，重新组合，这个操作我们称为shuffle</p><h4 id="filter">filter</h4><p>当数据进行筛选过滤后，分区不变，但是分区内的数据可能不均衡，生产环境下，可能会出现数据倾斜 <strong>了解</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_RDD_Operator_Transform_filter_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --filter</span></span><br><span class="line">    <span class="comment">//将数据根据指定的规则进行筛选过滤，符合规则的数据保留，不符合规则的数据丢弃。</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.textFile(<span class="string">&quot;datas/apache.log&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> rddFilter: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.filter(</span><br><span class="line">      line =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> time = line.split(<span class="string">&quot; &quot;</span>)(<span class="number">3</span>)</span><br><span class="line">        time.startsWith(<span class="string">&quot;17/05/2015&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    rddFilter.collect().foreach(println)</span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sample">sample</h4><p>根据指定的规则从数据集中抽取数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark06_RDD_Operator_Transform_sample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --filter</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>))</span><br><span class="line">    <span class="comment">// 抽取数据不放回（伯努利算法）</span></span><br><span class="line">    <span class="comment">// 伯努利算法：又叫 0、1 分布。例如扔硬币，要么正面，要么反面。</span></span><br><span class="line">    <span class="comment">// 具体实现：根据种子和随机算法算出一个数和第二个参数设置几率比较，小于第二个参数要，大于不 要</span></span><br><span class="line">    <span class="comment">// 第一个参数：抽取的数据是否放回，false：不放回</span></span><br><span class="line">    <span class="comment">// 第二个参数：抽取的几率，范围在[0,1]之间,0：全不取；1：全取；</span></span><br><span class="line">    <span class="comment">// 第三个参数：随机数种子</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.sample(withReplacement = <span class="literal">false</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">// 抽取数据放回（泊松算法）</span></span><br><span class="line">    <span class="comment">// 第一个参数：抽取的数据是否放回，true：放回；false：不放回</span></span><br><span class="line">    <span class="comment">// 第二个参数：重复数据的几率，范围大于等于 0.表示每一个元素被期望抽取到的次数</span></span><br><span class="line">    <span class="comment">// 第三个参数：随机数种子</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.sample(withReplacement = <span class="literal">true</span>, <span class="number">2</span>)</span><br><span class="line">    println(<span class="string">&quot;不放回&quot;</span>)</span><br><span class="line">    println(dataRDD1.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    println(<span class="string">&quot;放回&quot;</span>)</span><br><span class="line">    println(dataRDD2.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="distinct">distinct</h4><p>将数据集中重复的数据去重</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark07_RDD_Operator_Transform_distinct</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --distinct</span></span><br><span class="line">    <span class="comment">//将数据集中重复的数据去重</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">21</span>,<span class="number">6</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.distinct() <span class="comment">//去重</span></span><br><span class="line">    <span class="keyword">val</span> value1: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.distinct(<span class="number">2</span>) <span class="comment">//先将2的倍数放前面去重</span></span><br><span class="line">    println(value.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    println(value1.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="coaleses-可增大-可减小">coaleses(可增大 可减小)</h4><p>对增减分区的操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark08_RDD_Operator_Transform_coalesce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --coalesce</span></span><br><span class="line">    <span class="comment">//根据数据量缩减分区，用于大数据集过滤后，提高小数据集的执行效率</span></span><br><span class="line">    <span class="comment">//当 spark 程序中，存在过多的小任务的时候，可以通过 coalesce 方法，收缩合并分区，减少</span></span><br><span class="line">    <span class="comment">//分区的个数，减小任务调度成本</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>),<span class="number">6</span>) <span class="comment">//6个分区</span></span><br><span class="line">    <span class="comment">//变两个分区 第二个参数默认是false改成true就会随机打乱 就是groupBy那里提到的shuffle</span></span><br><span class="line">    <span class="comment">//如果设置shuffle为true coalesce就可以扩大分区</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.coalesce(<span class="number">2</span>,<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">val</span> dataRDD1Index = dataRDD1.mapPartitionsWithIndex(</span><br><span class="line">      (index: <span class="type">Int</span>, group: <span class="type">Iterator</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        group.map(</span><br><span class="line">          (num:<span class="type">Int</span>) =&gt; (index,num)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    dataRDD1Index.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="repartition">repartition</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark09_RDD_Operator_Transform_repartition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --repartition</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>),<span class="number">2</span>) <span class="comment">//2个分区</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD.repartition(<span class="number">4</span>) <span class="comment">//变4个分区 默认shuffle是false</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD2Index: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = dataRDD2.mapPartitionsWithIndex(</span><br><span class="line">      (index: <span class="type">Int</span>, group: <span class="type">Iterator</span>[<span class="type">Int</span>]) =&gt; &#123;</span><br><span class="line">        group.map(</span><br><span class="line">          (num:<span class="type">Int</span>) =&gt; (index,num)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    dataRDD2Index.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="coalesce-和-repartition-区别">coalesce 和 repartition 区别</h4><p>repartition 一定会发生 shuffle，coalesce 根据传进来的参数来判断是否发生 shuffle。<br>一般情况下<strong>增大rdd的partition数量</strong>使用<strong>repartition</strong>，<strong>减少partition数量时</strong>使用<strong>coalesce</strong></p><h4 id="sortBy">sortBy</h4><p>该操作用于排序数据。在排序之前，可以将数据通过 f 函数进行处理，之后按照 f 函数处理的结果进行排序</p><p>排序是不管多少分区的，所以sortBy执行过程一定存在shuffle打乱的过程</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark10_RDD_Operator_Transform_sortBy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --repartition</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;1&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;11&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;2&quot;</span>,<span class="number">3</span>))) <span class="comment">//2个分区</span></span><br><span class="line">    <span class="comment">//默认是true是升序 false是降序</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = dataRDD.sortBy((t: (<span class="type">String</span>, <span class="type">Int</span>)) =&gt; t._1.toInt,ascending = <span class="literal">false</span>)</span><br><span class="line">    println(dataRDD1.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD双Value转换算子">RDD双Value转换算子</h3><p>两个数据源之间的关联操作</p><h4 id="集合基本操作">集合基本操作</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark11_RDD_Operator_Transform_DoubleValue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- 双Value基本集合操作</span></span><br><span class="line">    <span class="comment">//注意 交集 差集 并集 类型都要一致</span></span><br><span class="line">    <span class="keyword">val</span> dataRDD1 = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">val</span> dataRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">    <span class="keyword">val</span> dataRDDIn = dataRDD1.intersection(dataRDD2) <span class="comment">//3,4 交集</span></span><br><span class="line">    <span class="keyword">val</span> dataRDDUn = dataRDD1.union(dataRDD2) <span class="comment">//1,2,3,4,3,4,5,6 并集</span></span><br><span class="line">    <span class="keyword">val</span> dataRDDSu: <span class="type">RDD</span>[<span class="type">Int</span>] = dataRDD1.subtract(dataRDD2) <span class="comment">// 1,2 差集 .前面集合为主 和后面不交的</span></span><br><span class="line">    <span class="keyword">val</span> dataRDDZip = dataRDD1.zip(dataRDD2) <span class="comment">// 拉链 将两个 RDD 中的元素，以键值对的形式进行合并 对应的 .zip前面的是key</span></span><br><span class="line">    println(dataRDDZip.collect().mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="partitionBy">partitionBy</h4><p>Spark的分区器</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark12_RDD_Operator_Transform_partitionBy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- keys-value</span></span><br><span class="line">    <span class="comment">//将数据按照指定 Partitioner 重新进行分区。Spark 默认的分区器是 HashPartitioner</span></span><br><span class="line">    <span class="comment">//就是通过partitionBy方法改变数据的分区</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = sc.makeRDD(<span class="type">Array</span>((<span class="number">1</span>,<span class="string">&quot;aaa&quot;</span>),(<span class="number">2</span>,<span class="string">&quot;bbb&quot;</span>),(<span class="number">3</span>,<span class="string">&quot;ccc&quot;</span>),(<span class="number">4</span>,<span class="string">&quot;DDD&quot;</span>)),<span class="number">2</span>) <span class="comment">//hash是默认取余</span></span><br><span class="line"><span class="comment">//    可以模仿HashPartitioner自己写自己的分区器</span></span><br><span class="line">    rdd.partitionBy(<span class="keyword">new</span> <span class="type">HashPartitioner</span>(<span class="number">2</span>)).saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>reduceByKey</strong></p><p>最开始在WordCount就有用到，元组聚合 相同key聚合</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark13_RDD_Operator_Transform_reduceByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- keys-value</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rddKey: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = rdd.reduceByKey((_: <span class="type">Int</span>) + (_: <span class="type">Int</span>))</span><br><span class="line">    println(rddKey.collect().mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//(a,6)(b,3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>groupByKey</strong></p><p>分组将数据源的数据根据 key 对 value 进行分组</p><p>返回值第一个是key 第二个是元组,元组内是相同key的值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark14_RDD_Operator_Transform_groupByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 -- keys-value</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">    (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">val</span> rddKey1 = rdd.groupBy(_._1)</span><br><span class="line">    <span class="keyword">val</span> rddKey = rdd.groupByKey()</span><br><span class="line">    println(rddKey.collect().mkString(<span class="string">&quot; ,&quot;</span>)) <span class="comment">//(a,CompactBuffer(1, 2, 3)),(b,CompactBuffer(3))</span></span><br><span class="line">    println(rddKey1.collect().mkString(<span class="string">&quot; ,&quot;</span>)) <span class="comment">// (a,CompactBuffer((a,1), (a,2), (a,3))),(b,CompactBuffer((b,3)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduceByKey 和 groupByKey 的区别</p><p>reduceByKey 其实包含分组和聚合的功能。GroupByKey 只能分组，不能聚合，所以在分组聚合的场合下，推荐使用 reduceByKey，如果仅仅是分组而不需要聚合。那么还是只能使用 groupByKey</p><h4 id="aggregateByKey">aggregateByKey</h4><p>将数据根据不同的规则进行分区内计算和分区间计算</p><p>两个分区先取最大值 (a,2)(c,3) + (a,5)(c,6)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark15_RDD_Operator_Transform_aggregateByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  取出每个分区内相同 key 的最大值然后分区间相加</span></span><br><span class="line">    <span class="comment">// aggregateByKey 算子是函数柯里化，存在两个参数列表</span></span><br><span class="line">    <span class="comment">// 1. 第一个参数列表中的参数表示初始值</span></span><br><span class="line">    <span class="comment">//主要用于当碰见第一个key 的时候 和value进行分区计算</span></span><br><span class="line">    <span class="comment">// 2. 第二个参数列表中含有两个参数</span></span><br><span class="line">    <span class="comment">// 2.1 第一个参数表示分区内的计算规则</span></span><br><span class="line">    <span class="comment">// 2.2 第二个参数表示分区间的计算规则</span></span><br><span class="line">    <span class="keyword">val</span> rdd = &#123;</span><br><span class="line">      sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">        (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&quot;c&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">6</span>)</span><br><span class="line">      ),<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    rdd.aggregateByKey(<span class="number">0</span>)(</span><br><span class="line">      (x, y) =&gt; math.max(x, y),</span><br><span class="line">      (x, y) =&gt; x + y</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line">      <span class="comment">//(a,7)</span></span><br><span class="line">      <span class="comment">//(c,9)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>foldByKey</strong></p><p>当分区内计算规则和分区间计算规则相同时，aggregateByKey 就可以简化为 foldByKey</p><p>两边分区相同key先加 加完分区间key加</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> dataRDD1 = sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="keyword">val</span> dataRDD2 = dataRDD1.foldByKey(<span class="number">0</span>)(_+_)</span><br></pre></td></tr></table></figure><p><strong>combineByKey</strong></p><p>最通用的对 key-value 型 rdd 进行聚集操作的聚集函数</p><p>允许用户返回值的类型与输入不一致。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark16_RDD_Operator_Transform_combineByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  combineByKey</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd = &#123;</span><br><span class="line">      sc.makeRDD(<span class="type">List</span>(</span><br><span class="line">        (<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">3</span>),</span><br><span class="line">        (<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">6</span>)</span><br><span class="line">      ),<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法需要三个参数</span></span><br><span class="line">    <span class="comment">//第一个 将相同key的第一个数据进行结构的转换 实现操作</span></span><br><span class="line">    <span class="comment">//第二个 分区内运算</span></span><br><span class="line">    <span class="comment">//第三个 分区间运算</span></span><br><span class="line">    <span class="keyword">val</span> newRDD: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd.combineByKey(</span><br><span class="line">      (v: <span class="type">Int</span>) =&gt; (v, <span class="number">1</span>),</span><br><span class="line">      (x: (<span class="type">Int</span>, <span class="type">Int</span>), y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">        (x._1 + y, x._2 + <span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      (t1: (<span class="type">Int</span>, <span class="type">Int</span>), t2: (<span class="type">Int</span>, <span class="type">Int</span>)) =&gt; &#123;</span><br><span class="line">        (t1._1 + t2._1, t1._2 + t2._2)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> resultRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = newRDD.mapValues &#123; <span class="comment">//元组内int /</span></span><br><span class="line">      <span class="keyword">case</span> (num, count) =&gt; num / count</span><br><span class="line">    &#125;</span><br><span class="line">    println(newRDD.collect().mkString(<span class="string">&quot; ,&quot;</span>))  <span class="comment">//(b,(12,3)),(a,(9,3))</span></span><br><span class="line">    println(resultRDD.collect().mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">// (b,4),(a,3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sortByKey</strong></p><p>在一个(K,V)的 RDD 上调用，K 必须实现 Ordered 接口(特质)，返回一个按照 key 进行排序</p><p>上限比较高 可以自定义类 当作key</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> dataRDD1 = sparkContext.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="keyword">val</span> sortRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = dataRDD1.sortByKey(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> sortRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = dataRDD1.sortByKey(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><strong>join</strong></p><p>在类型为(K,V)和(K,W)的 RDD 上调用，返回一个相同 key 对应的所有元素连接在一起的(K,(V,W))的 RDD</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark17_RDD_Operator_Transform_join</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  join</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> joinRDD: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd.join(rdd1)</span><br><span class="line">    <span class="comment">/*join两个相同的key的value会连接在一起形成元组 不同的key 不会返回</span></span><br><span class="line"><span class="comment">            (a,(1,5))</span></span><br><span class="line"><span class="comment">            (b,(2,4))</span></span><br><span class="line"><span class="comment">            (c,(3,3))</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    joinRDD.mapValues&#123; <span class="keyword">case</span> (x,y) =&gt; x+y &#125;.collect().foreach(println)</span><br><span class="line">    joinRDD.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cogroup</strong></p><p>在类型为(K,V)和(K,W)的 RDD 上调用，返回一个(K,(Iterable<V>,Iterable<W>))类型的 RDD</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark18_RDD_Operator_Transform_cogroup</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  join</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">6</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;c&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;e&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">6</span>)))</span><br><span class="line">    <span class="comment">//cogroup = connect + group  分区完了 分组</span></span><br><span class="line">    rdd.cogroup(rdd1,rdd2).collect().foreach(println)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    (a,(CompactBuffer(1),CompactBuffer(5),CompactBuffer(3, 6)))</span></span><br><span class="line"><span class="comment">    (b,(CompactBuffer(2),CompactBuffer(4),CompactBuffer()))</span></span><br><span class="line"><span class="comment">    (c,(CompactBuffer(),CompactBuffer(3, 6),CompactBuffer(4)))</span></span><br><span class="line"><span class="comment">    (e,(CompactBuffer(),CompactBuffer(),CompactBuffer(5)))</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>leftOuterJoin</strong></p><p>类似于 SQL 语句的左外连接</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span>.rddToPairRDDFunctions</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark19_RDD_Operator_Transform_leftOuterJoin</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 准备SPark 环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --  join</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">5</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;b&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">6</span>)))</span><br><span class="line">    rdd1.leftOuterJoin(rdd2).collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-7">5.BUG点</h2><p>在RDD操作中有一项拉链操作，就是将两组集合变成key-Vlaue类型的，在Scala中，如果两组数据不一样长，Vlaue会变成默认值，但是在RDD中我就出现了报错，报错信息说两组RDD值长度要一样。</p><p><img src="https://docimg4.docs.qq.com/image/5NktxWQQgO1OFMYZkNdtfg.png?w=1820&amp;h=479" alt="img"></p><h2 id="6-扩展学习部分-7">6.扩展学习部分</h2><p>用Spark读取文件 一行一行 并用map读取路径</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Transform_Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 算子 --map</span></span><br><span class="line">    <span class="keyword">val</span> text = sc.textFile(<span class="string">&quot;datas/apache.log&quot;</span>) <span class="comment">//读取文件</span></span><br><span class="line">    <span class="keyword">val</span> value = text.map(</span><br><span class="line">      (line: <span class="type">String</span>) =&gt;&#123;<span class="comment">//获取行</span></span><br><span class="line">        <span class="keyword">val</span> strings: <span class="type">Array</span>[<span class="type">String</span>] = line.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        strings(<span class="number">6</span>)<span class="comment">//以空格切割成数组并取第6个数据</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    value.collect().foreach(println)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220722145042216.png" alt="image-20220722145042216"></p><h2 id="7-总结-8">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容是算法方面的，Spark独有的，转换算子，将scala中的优秀特质结合，把RDD中的数据做各种各样的处理，有25个左右的方法，单Value和双Value的都有，难度是很大的，偏向算法，比之前的scala集合的高阶还难不少，想搞定这个还得在去看一下scala集合的高阶方法，元组方面用的比较多，这样能让代码很简洁，自己去CSDN搜了scala的自动类型补全，这样理解起来比之前好了很多。掌握程度70%，因为在赶进度，有些小案例没去敲，更多是自己的理解，结合文档的讲解。方法太多了，也不是很能记住，还是得等案例的时候，能上场使用一下，这样对自己理解有很大的帮助。</p><h1 id="7-23-Spark-RDD完结">7.23 Spark-RDD完结</h1><h2 id="1-头：日期、所学内容出处-13">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-13">2.标题</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">081</span>Core - 核心编程 - RDD - 行动算子 - 介绍</span><br><span class="line"><span class="number">082</span>Core - 核心编程 - RDD - 行动算子 - 算子演示</span><br><span class="line"><span class="number">083</span>Core - 核心编程 - RDD - 行动算子 - aggregate</span><br><span class="line"><span class="number">084</span>Core - 核心编程 - RDD - 行动算子 - countByKey <span class="meta">&amp; countByValue</span></span><br><span class="line"><span class="number">085</span>Core - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">1</span>-<span class="number">8</span>)</span><br><span class="line"><span class="number">086</span>Core - 核心编程 - RDD - WordCount不同的实现方式 - (<span class="number">9</span>-<span class="number">11</span>)</span><br><span class="line"><span class="number">087</span>Core - 核心编程 - RDD - 行动算子 - save的方法</span><br><span class="line"><span class="number">088</span>Core - 核心编程 - RDD - 行动算子 - foreach</span><br><span class="line"><span class="number">089</span>Core - 核心编程 - RDD - 序列化 - 闭包检测</span><br><span class="line"><span class="number">090</span>Core - 核心编程 - RDD - 序列化 - 实际执行时的问题</span><br><span class="line"><span class="number">091</span>Core - 核心编程 - RDD - 序列化 - Kryo序列化Core介绍</span><br><span class="line"><span class="number">092</span>Core - 核心编程 - RDD - 依赖关系 - 依赖 <span class="meta">&amp; 血缘关系介绍</span></span><br><span class="line"><span class="number">093</span>Core - 核心编程 - RDD - 依赖关系 - 血缘关系 - 演示</span><br><span class="line"><span class="number">094</span>Core - 核心编程 - RDD - 依赖关系 - 宽窄依赖</span><br><span class="line"><span class="number">095</span>Core - 核心编程 - RDD - 依赖关系 - 阶段<span class="meta">&amp;分区&amp;任务 - 概念解析 - 秋游了</span></span><br><span class="line"><span class="number">096</span>Core - 核心编程 - RDD - 依赖关系 - 阶段划分源码解读</span><br><span class="line"><span class="number">097</span>Core - 核心编程 - RDD - 依赖关系 - 任务划分源码解读</span><br><span class="line"><span class="number">098</span>Core - 核心编程 - RDD - 依赖关系 - 任务分类</span><br><span class="line"><span class="number">099</span>Core - 核心编程 - RDD - 持久化 - cache <span class="meta">&amp; persist基本原理和演示</span></span><br><span class="line"><span class="number">100</span>Core - 核心编程 - RDD - 持久化 - 作用</span><br><span class="line"><span class="number">101</span>Core - 核心编程 - RDD - 持久化 - 检查点</span><br><span class="line"><span class="number">102</span>Core - 核心编程 - RDD - 持久化 - 区别</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-13">3.所学内容概述</h2><h3 id="行动算子">行动算子</h3><h4 id="序列化">序列化</h4><h4 id="依赖关系">依赖关系</h4><h4 id="持久化">持久化</h4><h2 id="4-根据概述分章节描述-11">4.根据概述分章节描述</h2><h3 id="RDD行动算子">RDD行动算子</h3><p>行动算子就是触发作业(job)执行的方法<br>底层代码调用的是环境对象的runJob</p><h4 id="reduce">reduce</h4><p>以及基本简单方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Operator_reduce</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//reduce</span></span><br><span class="line">    <span class="keyword">val</span> i: <span class="type">Int</span> = rdd.reduce((_: <span class="type">Int</span>) + (_: <span class="type">Int</span>))</span><br><span class="line">    println(i) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//collect 采集 方法会将不同分区的数据按照分区顺序采集到Driver端内存中，形成数组</span></span><br><span class="line">    <span class="keyword">val</span> ints: <span class="type">Array</span>[<span class="type">Int</span>] = rdd.collect()</span><br><span class="line">    println(ints.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">// 1,4,3,2</span></span><br><span class="line">    <span class="comment">// count返回 RDD 中元素的个数</span></span><br><span class="line">    <span class="keyword">val</span> countResult: <span class="type">Long</span> = rdd.count()</span><br><span class="line">    println(countResult) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// first 返回RDD第一个元素</span></span><br><span class="line">    println(rdd.first())</span><br><span class="line">    <span class="comment">//take 返回一个由 RDD 的前 n 个元素组成的数组</span></span><br><span class="line">    <span class="keyword">val</span> ints1: <span class="type">Array</span>[<span class="type">Int</span>] = rdd.take(<span class="number">3</span>)</span><br><span class="line">    println(ints1.mkString(<span class="string">&quot;,&quot;</span>)) <span class="comment">//1,4,3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//takeOrdered 返回该 RDD 排序后的前 n 个元素组成的数组</span></span><br><span class="line">    <span class="keyword">val</span> ints2: <span class="type">Array</span>[<span class="type">Int</span>] = rdd.takeOrdered(<span class="number">3</span>) <span class="comment">//1,2,3</span></span><br><span class="line">    println(ints2.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="collect">collect</h4><p>在驱动程序中，以数组 Array 的形式返回数据集的所有元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Operator_Action</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//行动算子就是触发作业(job)执行的方法</span></span><br><span class="line">    <span class="comment">//底层代码调用的是环境对象的runJob</span></span><br><span class="line">    rdd.collect() <span class="comment">//collect就是行动算子</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="aggregate-fold">aggregate &amp; fold</h4><p>分区的数据通过初始值和分区内的数据进行聚合，然后再和初始值进行分区间的数据聚合</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_RDD_Operator_aggregate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">// 将该 RDD 所有元素相加得到结果</span></span><br><span class="line">    <span class="comment">//初始值参与分区内的计算 分区间计算也有</span></span><br><span class="line">    <span class="keyword">val</span> result1: <span class="type">Int</span> = rdd.aggregate(<span class="number">0</span>)(_ + _, _ + _)</span><br><span class="line">    <span class="keyword">val</span> result2: <span class="type">Int</span> = rdd.aggregate(<span class="number">10</span>)(_ + _, _ + _) <span class="comment">//初始值看分区间</span></span><br><span class="line">    println(result1)<span class="comment">//10</span></span><br><span class="line">    println(result2)<span class="comment">//40 1+4+10 + 3+2+10 + 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//fold aggregate的简化操作</span></span><br><span class="line">    <span class="keyword">val</span> foldResult1: <span class="type">Int</span> = rdd.fold(<span class="number">0</span>)(_+_) <span class="comment">//分区内和分区间一样的操作</span></span><br><span class="line">    <span class="keyword">val</span> foldResult2: <span class="type">Int</span> = rdd.fold(<span class="number">10</span>)(_+_) <span class="comment">//分区内和分区间一样的操作</span></span><br><span class="line">    println(foldResult1) <span class="comment">//10</span></span><br><span class="line">    println(foldResult2) <span class="comment">//40 15 + 15 +10</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="countByKey-countByValue">countByKey &amp; countByValue</h4><p>统计每种 key 的个数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_RDD_Operator_countByKey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计每种key的个数</span></span><br><span class="line">    <span class="keyword">val</span> resultKey: collection.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Long</span>] = rdd.countByKey()</span><br><span class="line">    <span class="keyword">val</span> resultValue: collection.<span class="type">Map</span>[(<span class="type">Int</span>, <span class="type">String</span>), <span class="type">Long</span>] = rdd.countByValue()</span><br><span class="line">    println(resultKey) <span class="comment">//key出现了几次</span></span><br><span class="line">    println(resultValue) <span class="comment">// RDD内的元素出现了几次</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="save相关算子">save相关算子</h4><p>保存文件</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark05_RDD_Operator_Save</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//save 将RDD数据保存到不同格式的文件中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">1</span>, <span class="string">&quot;a&quot;</span>), (<span class="number">2</span>, <span class="string">&quot;b&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>), (<span class="number">3</span>, <span class="string">&quot;c&quot;</span>)))</span><br><span class="line">    <span class="comment">// 保存成 Text 文件</span></span><br><span class="line">    rdd.saveAsTextFile(<span class="string">&quot;output&quot;</span>) <span class="comment">//比较常用</span></span><br><span class="line">    <span class="comment">// 序列化成对象保存到文件</span></span><br><span class="line">    rdd.saveAsObjectFile(<span class="string">&quot;output1&quot;</span>)</span><br><span class="line">    <span class="comment">// 保存成 Sequencefile 文件 要求数据格式必须是key-Value类型</span></span><br><span class="line">    rdd.saveAsSequenceFile(<span class="string">&quot;output2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="foreach">foreach</h4><p>分布式遍历 RDD 中的每一个元素，调用指定函数  下文有行动算子的执行原理解释</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.action</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark06_RDD_Operator_Foreach</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建连接</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Operator&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 行动算子</span></span><br><span class="line">    <span class="comment">//算子： Operator（操作）</span></span><br><span class="line">    <span class="comment">//  RDD的方法和Scala集合对象的方法不一样</span></span><br><span class="line"><span class="comment">//    集合对象的方法都是在同一个节点的内存中完成的</span></span><br><span class="line"><span class="comment">//    RDD的方法可以将计算逻辑发送到Executor端执行</span></span><br><span class="line"><span class="comment">//    为了区分不同的处理效果，所以将RDD的方法称之为算子</span></span><br><span class="line"><span class="comment">//    RDD的方法的操作都是在Driver端执行的，而方法内部的逻辑代码是在Executor端执行。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="comment">//foreach 其实是Driver端内存集合的循环遍历方法</span></span><br><span class="line">    <span class="comment">// 收集后打印</span></span><br><span class="line">    rdd.collect().foreach(println) <span class="comment">// 有顺序</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;****************&quot;</span>)</span><br><span class="line">    <span class="comment">// 分布式打印</span></span><br><span class="line">    <span class="comment">// Executor端内存数据打印</span></span><br><span class="line">    rdd.foreach(println) <span class="comment">// 无序</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD序列化">RDD序列化</h3><p><code>算子以外的代码都是在 Driver 端执行, 算子里面的代码都是在 Executor端执行</code></p><p>要清晰上面这句话，Scala是函数式编程，，就会导致算子内经常会用到算子外的数据，这样就形成了闭包的效果，如果使用的算子外的数据无法序列化，就意味着无法传值给 Executor端执行，就会发生错误。所以要解决算子使用算子外数据的问题，就需要数据序列化。</p><p><code>java中序列化是继承Serializable，在scala中称之为混入</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.serial</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Serial</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 建立和Spark框架的连接</span></span><br><span class="line">    <span class="comment">//JDBC:Connection</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line">    <span class="comment">// 创建 Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行业务操作</span></span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(<span class="type">Array</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello spark&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;atguigu&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> search = <span class="keyword">new</span> <span class="type">Search</span>(<span class="string">&quot;h&quot;</span>) <span class="comment">//算子使用算子外的数据</span></span><br><span class="line"><span class="comment">//    search.getMatch1(rdd).collect().foreach(println)</span></span><br><span class="line">    search.getMatch2(rdd).collect().foreach(println)</span><br><span class="line">    <span class="comment">//TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Search</span>(<span class="params">query:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">//混入Serializable</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">      s.contains(query)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span> </span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter(isMatch)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter((x: <span class="type">String</span>) =&gt; x.contains(query))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD依赖关系">RDD依赖关系</h3><p>依赖关系，其实就是两个相邻 RDD 之间的关系 和java中的子类父类差不多吧</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220723165704674.png" alt="image-20220723165704674"></p><h3 id="RDD的持久化">RDD的持久化</h3><p>RDD代码，很长一些是重复的，如果使用不同是行动算子，会重新调用一遍之前的代码，这样效率太低了。</p><p>持久化可以将之前的依赖和代码保存在临时文件或者磁盘中。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.persist</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SPARK_BRANCH</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_Persist</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// TODO  Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;Persist&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="string">&quot;Hello Scala&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd:<span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatRDD: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap((_:<span class="type">String</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatRDD.map(</span><br><span class="line">      (word: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;@@@@@@@@@@@@@@@@@&quot;</span>)</span><br><span class="line">        (word,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cache默认保存咋在内存中</span></span><br><span class="line"><span class="comment">//    mapRDD.cache() //放内存中持久化了 数据这样只会一遍</span></span><br><span class="line">    <span class="comment">//可以放磁盘</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//持久化操作必须在行动算子执行时完成</span></span><br><span class="line">    mapRDD.persist(<span class="type">StorageLevel</span>.<span class="type">DISK_ONLY</span>) <span class="comment">//保存的是临时文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> reduceRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = mapRDD.reduceByKey((_:<span class="type">Int</span>) + (_:<span class="type">Int</span>))</span><br><span class="line">    <span class="keyword">val</span> reduceRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = mapRDD.groupByKey()</span><br><span class="line"></span><br><span class="line">    reduceRDD.collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;————————————————————————————————————&quot;</span>)</span><br><span class="line">    reduceRDD1.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="checkpoint的使用">checkpoint的使用</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.persist</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_Persist</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// TODO  Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;Persist&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    sc.setCheckpointDir(<span class="string">&quot;cp&quot;</span>) <span class="comment">//设置保存路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="string">&quot;Hello Scala&quot;</span>, <span class="string">&quot;Hello Spark&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd:<span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flatRDD: <span class="type">RDD</span>[<span class="type">String</span>] = rdd.flatMap((_:<span class="type">String</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = flatRDD.map(</span><br><span class="line">      (word: <span class="type">String</span>) =&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;@@@@@@@@@@@@@@@@@&quot;</span>)</span><br><span class="line">        (word,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//需要落盘 需要指定检查点的保存路径</span></span><br><span class="line">    <span class="comment">//检查点路径保存的文件 当作业执行完毕后 不会被删除</span></span><br><span class="line">    <span class="comment">//一般保存路径都是在分布式存储系统 HDFS 在13行</span></span><br><span class="line">    mapRDD.cache()</span><br><span class="line">    mapRDD.checkpoint()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> reduceRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = mapRDD.reduceByKey((_:<span class="type">Int</span>) + (_:<span class="type">Int</span>))</span><br><span class="line">    <span class="keyword">val</span> reduceRDD1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = mapRDD.groupByKey()</span><br><span class="line"></span><br><span class="line">    reduceRDD.collect().foreach(println)</span><br><span class="line">    println(<span class="string">&quot;————————————————————————————————————&quot;</span>)</span><br><span class="line">    reduceRDD1.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久化几种方式的区别</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cache : 将数据临时存储在内存中进行数据重用</span></span><br><span class="line"><span class="comment">//persist : 将数据临时存储在磁盘文件中进行数据重用</span></span><br><span class="line">            <span class="comment">//涉及到磁盘IO，性能较低，但是数据安全</span></span><br><span class="line">            <span class="comment">//如果作业执行完毕，临时保存的数据文件就会丢失</span></span><br><span class="line"><span class="comment">//checkpoint：将数据长久地保存在磁盘文件中进行数据的重用</span></span><br><span class="line">            <span class="comment">//为了保证数据安全，所以一般情况下，会独立执行作业</span></span><br><span class="line">            <span class="comment">//为了能够提高效率，一般情况下，是需要和cache联合使用</span></span><br></pre></td></tr></table></figure><h3 id="分区器">分区器</h3><p>➢ 只有 Key-Value 类型的 RDD 才有分区器，非 Key-Value 类型的 RDD 分区的值是 None</p><p>之前使用过repartition 是hash分区 现在可以自定义分区</p><p>分区类 要继承 Partitioner</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">WordCount</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">Partitioner</span>, <span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark03_RDD_repartition</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// TODO  Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;Persist&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">&quot;NBA&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;CBA&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;WNBA&quot;</span>,<span class="number">3</span>),(<span class="string">&quot;CUBA&quot;</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(list, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = rdd.partitionBy(<span class="keyword">new</span> <span class="type">MyPartitioner</span>)</span><br><span class="line"></span><br><span class="line">    value.saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span></span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">      key <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;NBA&quot;</span> =&gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;CBA&quot;</span> =&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt; <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="累加器">累加器</h3><p>累加器用来把 Executor 端变量信息聚合到 Driver 端。在 Driver 程序中定义的变量，在Executor 端的每个 Task 都会得到这个变量的一份新的副本，每个 task 更新这些副本的值后，传回 Driver 端进行 merge。</p><p>像Range使用的时候就不会传回到Driver端 Driver传到Executor端以后，在Executor端做任务，不会传回Driver端</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.add</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.util.<span class="type">LongAccumulator</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_RDD_add</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;add&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="comment">// 声明累加器</span></span><br><span class="line">    <span class="keyword">val</span> sum: <span class="type">LongAccumulator</span> = sc.longAccumulator(<span class="string">&quot;sum2&quot;</span>)</span><br><span class="line">    rdd.foreach(</span><br><span class="line">      (num: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 使用累加器</span></span><br><span class="line">        sum.add(num)</span><br><span class="line">      &#125; )</span><br><span class="line">    <span class="comment">// 获取累加器的值</span></span><br><span class="line">    println(<span class="string">&quot;sum = &quot;</span> + sum.value)</span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-8">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>执行自定义分区器的时候，报了一大串的错误，一个一个翻译过来，有一个错误是指向了自己自定义类的case表达式，检查过后发现，自己有四个Key-value,3个分区，按照索引下标 0 1 2 ，所以后面自己自定义match类应该返回三个值，而且key值得都有返回值。所以按自己的写法，会有一个键值对没有返回值，也就没有分区导致报错。把最后一个改成        <code>case _ =&gt; 2</code>表示除了前两个之外，返回值都是分区2</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220724143959415.png" alt="image-20220724143959415"></p><h2 id="6-扩展学习部分-8">6.扩展学习部分</h2><h3 id="Kryo-序列化框架">Kryo 序列化框架</h3><p>scala所独有的，java中序列化的升级版，性能大大提高。</p><p>Kryo 速度是 Serializable 的 10 倍。当 RDD 在 Shuffle 数据的时候，简单数据类型、数组和字符串类型已经在 Spark 内部使用 Kryo 来序列化。</p><p><code>注意：即使使用 Kryo 序列化，也要继承 Serializable 接口。</code>代码量会增加一点，但是效率大大提高</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">BIgDataSparkDay3</span>.serial</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_RDD_SerialKryo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Application</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spark框架</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 建立和Spark框架的连接</span></span><br><span class="line">    <span class="comment">//JDBC:Connection</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)<span class="comment">// 替换默认的序列化机制</span></span><br><span class="line">      .set(<span class="string">&quot;spark.serializer&quot;</span>, <span class="string">&quot;org.apache.spark.serializer.KryoSerializer&quot;</span>)</span><br><span class="line">      <span class="comment">// 注册需要使用 kryo 序列化的自定义类</span></span><br><span class="line">      .registerKryoClasses(<span class="type">Array</span>(classOf[<span class="type">Search</span>]))</span><br><span class="line">    <span class="comment">// 创建 Spark 上下文环境对象（连接对象）</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行业务操作</span></span><br><span class="line">    <span class="comment">// 读取文件数据</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(<span class="type">Array</span>(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;hello spark&quot;</span>, <span class="string">&quot;hive&quot;</span>, <span class="string">&quot;atguigu&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> search = <span class="keyword">new</span> <span class="type">Search</span>(<span class="string">&quot;h&quot;</span>) <span class="comment">//使用算子外的数据</span></span><br><span class="line"><span class="comment">//    search.getMatch1(rdd).collect().foreach(println)</span></span><br><span class="line">    search.getMatch2(rdd).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span>  <span class="class"><span class="keyword">class</span> <span class="title">Search</span>(<span class="params">query:<span class="type">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">      s.contains(query)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch1</span> </span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter(isMatch)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性序列化案例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMatch2</span></span>(rdd: <span class="type">RDD</span>[<span class="type">String</span>]): <span class="type">RDD</span>[<span class="type">String</span>] = &#123;</span><br><span class="line">      rdd.filter((x: <span class="type">String</span>) =&gt; x.contains(query))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RDD-任务划分"><strong>RDD</strong> <strong>任务划分</strong></h3><p>RDD 任务切分中间分为：Application、Job、Stage 和 Task</p><p>Application：初始化一个 SparkContext 即生成一个 Application；</p><p>Job：一个 Action 算子就会生成一个 Job；</p><p>Stage：Stage 等于宽依赖(ShuffleDependency)的个数加 1；</p><p>Task：一个 Stage 阶段中，最后一个 RDD 的分区个数就是 Task 的个数。</p><p><strong>注意：Application-&gt;Job-&gt;Stage-&gt;Task 每一层都是 1 对 n 的关系。</strong></p><h2 id="7-总结-9">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容和难度都是有点大的，前面先学的行动算子，比较简单，和昨天的转换算子差不多，比转换算子的算法还简单不少，但是代码比较多的，也是今天学习的重点，敲了一上午才结束行动算子，做了小案例。后面下午，精神状态还不错，看到序列化  依赖 持久之类的，在Java中都有点类似的东西，加上老师的画图理解，自己结合案例，也是弄得明白个八九十了。学习步骤，因为文档没有讲解，就看了视频，案例自己敲，没什么问题就跳着看老师的运行，看和自己有什么不一样，明天就是SQL的学习了。代码应该也比较多，还要记SQL语句的。</p><h1 id="7-24-Spark-SQL">7.24 Spark SQL</h1><h2 id="1-头：日期、所学内容出处-14">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-14">2.标题</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span>SQL - 介绍</span><br><span class="line"><span class="number">154</span>SQL - 特点</span><br><span class="line"><span class="number">155</span>SQL - 数据模型 - DataFrame &amp; DataSet</span><br><span class="line"><span class="number">156</span>SQL - 核心编程 - DataFrame - 简单演示</span><br><span class="line"><span class="number">157</span>SQL - 核心编程 - DataFrame - SQL的基本使用</span><br><span class="line"><span class="number">158</span>SQL - 核心编程 - DataFrame - DSL语法的基本使用</span><br><span class="line"><span class="number">159</span>SQL - 核心编程 - DataFrame - RDD之间的转换</span><br><span class="line"><span class="number">160</span>SQL - 核心编程 - DataSet - 介绍</span><br><span class="line"><span class="number">161</span>SQL - 核心编程 - DataSet - DataFrame的转换</span><br><span class="line"><span class="number">162</span>SQL - 核心编程 - DataSet - RDD的转换</span><br><span class="line"><span class="number">163</span>SQL - 核心编程 - DataSet &amp; DataFrame &amp; RDD之间的关系</span><br><span class="line"><span class="number">164</span>SQL - 核心编程 - IDEA创建SparkSQL环境对象</span><br><span class="line"><span class="number">165</span>SQL - 核心编程 - IDEA - DataFrame基本操作</span><br><span class="line"><span class="number">166</span>SQL - 核心编程 - IDEA - DataSet基本操作</span><br><span class="line"><span class="number">167</span>SQL - 核心编程 - IDEA - RDD &amp; DataFrame &amp; DataSet互相转换</span><br><span class="line"><span class="number">168</span>SQL - 核心编程 - IDEA - UDF函数</span><br><span class="line"><span class="number">169</span>SQL - 核心编程 - IDEA - UDAF函数 - 实现原理</span><br><span class="line"><span class="number">170</span>SQL - 核心编程 - IDEA - UDAF函数 - 弱类型函数实现</span><br><span class="line"><span class="number">171</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - IDEA - UDAF函数 - 强类型函数实现</span><br><span class="line"><span class="number">172</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - IDEA - UDAF函数 - 早期强类型函数实现</span><br><span class="line"><span class="number">173</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - IDEA - UDAF函数 - 课件梳理</span><br><span class="line"><span class="number">174</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 通用方法</span><br><span class="line"><span class="number">175</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作JSON &amp; CSV</span><br><span class="line"><span class="number">176</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作MySQL</span><br><span class="line"><span class="number">177</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作内置Hive</span><br><span class="line"><span class="number">178</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 操作外置Hive</span><br><span class="line"><span class="number">179</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - 代码操作外置Hive</span><br><span class="line"><span class="number">180</span>.尚硅谷<span class="variable">_SparkSQL</span> - 核心编程 - 数据读取和保存 - beeline操作Hive</span><br><span class="line"><span class="number">181</span>.尚硅谷<span class="variable">_SparkSQL</span> - 案例实操 - 数据准备</span><br><span class="line"><span class="number">182</span>.尚硅谷<span class="variable">_SparkSQL</span> - 案例实操 - 需求部分实现</span><br><span class="line"><span class="number">183</span>.尚硅谷<span class="variable">_SparkSQL</span> - 案例实操 - 需求完整实现</span><br><span class="line"><span class="number">184</span>.尚硅谷<span class="variable">_SparkSQL</span> - 总结 - 课件梳理 </span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-14">3.所学内容概述</h2><h2 id="4-根据概述分章节描述-12">4.根据概述分章节描述</h2><h3 id="SparkSQL概述">SparkSQL概述</h3><p><code>Spark SQL 是 Spark 用于结构化数据(structured data)处理的 Spark 模块。</code></p><p>对于开发人员来讲，SparkSQL 可以简化 RDD 的开发，提高开发效率，且执行效率非常快，所以实际工作中，基本上采的就是 SparkSQL。Spark SQL 为了简化 RDD 的开发，提高开发效率，提供了 2 个编程抽象，类似 Spark Core 中的 RDD</p><p>➢ DataFrame</p><p>➢ DataSet</p><h4 id="SparkSQL-特点"><strong>SparkSQL</strong> 特点</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">易整合：无缝的整合了 <span class="keyword">SQL</span> 查询和 Spark 编程</span><br><span class="line">统一的数据访问：使用相同的方式。连接不同的数据源</span><br><span class="line">兼容Hive：在已有的仓库上直接运行<span class="keyword">SQL</span> 或者 HIveQL.</span><br><span class="line">标准数据连接：通过JDBC或者ODBC来连接</span><br></pre></td></tr></table></figure><h4 id="DataFrame是什么">DataFrame是什么</h4><p>在 Spark 中，DataFrame 是一种以 RDD 为基础的分布式数据集，类似于传统数据库中的二维表格。</p><p>下图直观地体现了 DataFrame 和 RDD 的区别。 DataFrame<strong>每一列都带有名称和类型</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220725095120995.png" alt="image-20220725095120995"></p><p><strong>DataSet</strong> <strong>是什么</strong></p><p>DataSet 是分布式数据集合。DataSet 是 Spark 1.6 中添加的一个新抽象，是 DataFrame的一个扩展。</p><p>用编程的话说就是DataSet是DataFrame的子类，升级版。DataFrame拥有的功能DataSet都有。</p><h3 id="SparkSQL的核心编程">SparkSQL的核心编程</h3><h4 id="DataFrame">DataFrame</h4><p><code>Spark SQL 的 DataFrame API 允许我们使用 DataFrame 而不用必须去注册临时表或者生成 SQL 表达式。DataFrame API 既有 transformation 操作也有 action 操作。</code></p><h5 id="创建DataFrame">创建DataFrame</h5><h5 id="1-从Spark数据源进行创建">1.从Spark数据源进行创建</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scala &gt; spark.read.</span><br><span class="line"><span class="comment">//下面都是支持创建文件的数据源格式</span></span><br><span class="line">csv format jdbc json load option options orc parquet schema table text textFile</span><br></pre></td></tr></table></figure><p>读取json创建DataFrame</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint， username: string] <span class="comment">//bigint是数据类型 因为不知道什么类型 所以用bigint接收 bigint可以和Long类型转换，但是和Int不能进行转换</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure><h5 id="2-用SQL语法">2.用SQL语法</h5><p>对 DataFrame 创建一个临时表</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">&quot;people&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过 SQL 语句实现查询全表</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val sqlDF = spark.sql(&quot;SELECT * FROM people&quot;)</span><br><span class="line"><span class="function">sqlDF: <span class="title">org.apache.spark.sql.DataFrame</span> = [<span class="title">age</span>: <span class="title">bigint</span>， <span class="title">name</span>: <span class="title">string</span>]</span></span><br></pre></td></tr></table></figure><p><code>show</code>进行一个输出</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; sqlDF.show</span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">30</span>| lisi|</span><br><span class="line">| <span class="number">40</span>| wangwu|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure><h4 id="DSL语法">DSL语法</h4><p>DataFrame 提供一个特定领域语言去管理结构化的数据。可以在 Scala, Java, Python 和 R 中使用 DSL，使用 DSL 语法风格不必去创建临时视图了。</p><p>只查看&quot;username&quot;列数据</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select(&quot;username&quot;).show()</span><br><span class="line">+--------+</span><br><span class="line">|username|</span><br><span class="line">+--------+</span><br><span class="line">|zhangsan|</span><br><span class="line">| lisi|</span><br><span class="line">| wangwu|</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><p>查看&quot;username&quot;列数据以及&quot;age+1&quot;数据</p><p><code>注意:涉及到运算的时候, 每列都必须使用$, 或者采用引号表达式：单引号+字段名</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.select($<span class="string">&quot;username&quot;</span>,$<span class="string">&quot;age&quot;</span> + <span class="number">1</span>).show</span><br><span class="line">scala&gt; df.select(&#x27;username, &#x27;age + <span class="number">1</span>).show() <span class="comment">//推荐这种 比较简单而且可读性好</span></span><br></pre></td></tr></table></figure><p>DataFrame可以用很多RDD的方法 filter  group等</p><h3 id="IDEA开发SparkSQL">IDEA开发SparkSQL</h3><p>实际开发中，都是使用 IDEA 进行开发的。</p><p>要添加XML依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-yarn_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前CMD敲的代码在IDEA实现</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_SparkSQL_Basic</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._  <span class="comment">//导入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="comment">//DataFrame</span></span><br><span class="line"><span class="comment">//    val df: DataFrame = spark.read.json(&quot;data/user.json&quot;)</span></span><br><span class="line">    <span class="comment">//    df.show()</span></span><br><span class="line">    <span class="comment">//TODO RDD=&gt;DataFrame=&gt;DataSet 转换需要引入隐式转换规则，否则无法转换</span></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; SQL</span></span><br><span class="line"><span class="comment">//    df.createOrReplaceTempView(&quot;user&quot;)</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select * from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select age from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select username from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select avg(age) from user&quot;).show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; DSL</span></span><br><span class="line">    <span class="comment">// 在使用DataFrame时，如果涉及到转换操作，需要引入转换规则</span></span><br><span class="line">    <span class="comment">//    df.select(&quot;age&quot;,&quot;username&quot;).show()</span></span><br><span class="line">    <span class="comment">//    df.select($&quot;age&quot; + 1).show</span></span><br><span class="line">    <span class="comment">//    df.select(&#x27;age + 1).show</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet</span></span><br><span class="line">    <span class="comment">// DataFrame其实是特定泛型的DataSet 是类型只能是Row的DataSet</span></span><br><span class="line">    <span class="comment">// 所以DataFrame的东西DataSet也都有都能用</span></span><br><span class="line"><span class="comment">//    val ints = Seq(1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">//    val ds: Dataset[Int] = ints.toDS()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> context: <span class="type">SparkContext</span> = spark.sparkContext</span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>)] = context.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>), (<span class="number">2</span>, <span class="string">&quot;lisa&quot;</span>, <span class="number">40</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = rdd.toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>) <span class="comment">//DataFrame</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rowRDD: <span class="type">RDD</span>[<span class="type">Row</span>] = df.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">User</span>] = df.as[<span class="type">User</span>]</span><br><span class="line">    <span class="keyword">val</span> df1: <span class="type">DataFrame</span> = ds.toDF()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataSet</span></span><br><span class="line">    <span class="keyword">val</span> ds1: <span class="type">Dataset</span>[<span class="type">User</span>] = rdd.map &#123;</span><br><span class="line">      <span class="keyword">case</span> (id, name, age) =&gt; <span class="type">User</span>(id, name, age)</span><br><span class="line">    &#125;.toDS() <span class="comment">//DataSet</span></span><br><span class="line">    <span class="keyword">val</span> userRDD: <span class="type">RDD</span>[<span class="type">User</span>] = ds1.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户自定义函数">用户自定义函数</h4><p>用户可以通过 spark.udf 功能添加自定义函数，实现自定义功能。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_SparkSQL_UDF</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    df.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="comment">//udf 用户可以通过 spark.udf 功能添加自定义函数，实现自定义功能</span></span><br><span class="line"><span class="comment">//注册UDF</span></span><br><span class="line">    spark.udf.register(<span class="string">&quot;prefixName&quot;</span>,(name:<span class="type">String</span>) =&gt; <span class="string">&quot;姓名: &quot;</span> + name)</span><br><span class="line">    <span class="comment">//应用UDF</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select * from user&quot;</span>).show()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UDAF">UDAF</h4><p>是Spark3.0后面出现的自定义强类型聚合函数Aggreg 代替原来的弱类型的聚合函数UserDefinedAggregateFunction</p><p>计算平均工资</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.<span class="type">Aggregator</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark04_SparkSQL_UDAF1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    df.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="comment">//udf 用户可以通过 spark.udf 功能添加自定义函数，实现自定义功能</span></span><br><span class="line"></span><br><span class="line">    spark.udf.register(<span class="string">&quot;ageAvg&quot;</span>,functions.udaf(<span class="keyword">new</span> <span class="type">MyAvgUDAF</span>()))</span><br><span class="line"></span><br><span class="line">    spark.sql(<span class="string">&quot;select ageAvg(age) from user&quot;</span>).show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  自定义聚合函数类：计算年龄的平均值</span></span><br><span class="line"><span class="comment">  1. 继承org.apache.spark.sql.expressions.Aggregator, 定义泛型</span></span><br><span class="line"><span class="comment">      IN : 输入的数据类型 Long</span></span><br><span class="line"><span class="comment">      BUF : 缓冲区的数据类型 Buff</span></span><br><span class="line"><span class="comment">      OUT : 输出的数据类型 Long</span></span><br><span class="line"><span class="comment">  2. 重写方法(6)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">ByMyBuff</span>(<span class="params">var total: <span class="type">Long</span>,var count: <span class="type">Long</span></span>)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyAvgUDAF</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">Long</span>,<span class="type">ByMyBuff</span>,<span class="type">Long</span>]</span>&#123;</span><br><span class="line">    <span class="comment">// z &amp; zero : 初始值或零值</span></span><br><span class="line">    <span class="comment">// 缓冲区的初始化</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">ByMyBuff</span> = &#123;</span><br><span class="line">      <span class="type">ByMyBuff</span>(<span class="number">0</span>L,<span class="number">0</span>L)<span class="comment">//Long默认初始0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据输入的数据更新缓冲区的数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(b: <span class="type">ByMyBuff</span>, a: <span class="type">Long</span>): <span class="type">ByMyBuff</span> = &#123;</span><br><span class="line">      b.total = b.total + a <span class="comment">//ByMyBuff的total和下一行的数据中的total相加</span></span><br><span class="line">      b.count = b.count + <span class="number">1</span> <span class="comment">//加一次算一个 用户</span></span><br><span class="line">      b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 合并缓冲区</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(b1: <span class="type">ByMyBuff</span>, b2: <span class="type">ByMyBuff</span>): <span class="type">ByMyBuff</span> = &#123;</span><br><span class="line">      b1.total = b1.total + b2.total <span class="comment">//整合一体</span></span><br><span class="line">      b1.count = b1.count + b2.count</span><br><span class="line">      b1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(reduction: <span class="type">ByMyBuff</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">      reduction.total / reduction.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">ByMyBuff</span>] = <span class="type">Encoders</span>.product</span><br><span class="line">    <span class="comment">// 输出区的编码操作</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Long</span>] = <span class="type">Encoders</span>.scalaLong</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据的加载和保存</strong></p><p>SparkSQL 提供了通用的保存数据和数据加载的方式。这里的通用指的是使用相同的API，根据不同的参数读取和保存不同格式的数据，SparkSQL 默认读取和保存的文件格式为 <strong>parquet</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spark.read.load 是加载数据的通用方法</span><br><span class="line">scala&gt; spark.read.<span class="built_in">format</span>(&quot;…&quot;)[.option(&quot;…&quot;)].load(&quot;…&quot;)</span><br><span class="line">df.write.save 是保存数据的通用方法</span><br><span class="line">scala&gt;df.write.<span class="built_in">format</span>(&quot;…&quot;)[.option(&quot;…&quot;)].save(&quot;…&quot;)</span><br></pre></td></tr></table></figure><p>➢ format(“…”)：指定加载的数据类型，包括&quot;csv&quot;、“jdbc”、“json”、“orc”、“parquet&quot;和&quot;textFile”。</p><p>➢ load(“…”)：在&quot;csv&quot;、“jdbc”、“json”、“orc”、&quot;parquet&quot;和&quot;textFile&quot;格式下需要传入加载数据的路径。</p><p>➢ option(“…”)：在&quot;jdbc&quot;格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable</p><h4 id="加载MySQL数据">加载MySQL数据</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span>.<span class="type">MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_SparkSQL_MySQL</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    spark.read</span><br><span class="line">      .format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      <span class="comment">//localhost主机 3306端口号(SQL8.0)_atguigudb数据库名 </span></span><br><span class="line">      .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/atguigudb?rewriteBatchedStatements=true&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;driverClass&quot;</span>, <span class="string">&quot;com.mysql.cj.jdbc.Drive&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      <span class="comment">//表名</span></span><br><span class="line">      .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;employees&quot;</span>)</span><br><span class="line">      .load().show</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-BUG点-9">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>错误点如图，显而易见又是路径问题，同样的代我之前是在Spark下载文件直接打开Spark-shell使用的，之前是好的，因为太麻烦，所以设置了环境变量，在任何地方输入spark-shell都能打开spark，但是这样我输之前的路径就不行了，必须要绝对路径，不知道原因</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220725101816366.png" alt="image-20220725101816366"></p><h2 id=""></h2><h3 id="RDD、DataFrame、DataSet-三者的关系">RDD、DataFrame、DataSet 三者的关系</h3><p><code>因为是在文档中看的 基本都是文字性的描述</code></p><p>版本出现的时间</p><p>➢ Spark1.0 =&gt; RDD</p><p>➢ Spark1.3 =&gt; DataFrame</p><p>➢ Spark1.6 =&gt; Dataset</p><p>时代是在进步的，所以看出现版本就知道哪个更加强大，所以DataSet也是现在的主流</p><p><code>在后期的 Spark 版本中，DataSet 有可能会逐步取代 RDD和 DataFrame 成为唯一的 API 接口。</code></p><p><strong>三者的共性</strong></p><p>➢ RDD、DataFrame、DataSet 全都是 spark 平台下的分布式弹性数据集，为处理超大型数据提供便利;</p><p>➢ 三者都有惰性机制，在进行创建、转换，如 map 方法时，不会立即执行，只有在遇到Action 如 foreach 时，三者才会开始遍历运算;</p><p>➢ 三者有许多共同的函数，如 filter，排序等;</p><p>➢ 在对 DataFrame 和 Dataset 进行操作许多操作都需要这个包:import spark.implicits._（在创建好 SparkSession 对象后尽量直接导入）</p><p>➢ 三者都会根据 Spark 的内存情况自动缓存运算，这样即使数据量很大，也不用担心会内存溢出</p><p>➢ 三者都有 partition 的概念</p><p>➢ DataFrame 和 DataSet 均可使用模式匹配获取各个字段的值和类型</p><h4 id="DataSet">DataSet</h4><p>DataSet</p><p>➢ Dataset 和 DataFrame 拥有完全相同的成员函数，区别只是每一行的数据类型不同。DataFrame 其实就是 DataSet 的一个特例 type DataFrame = Dataset[Row]</p><p>➢ DataFrame 也可以叫 Dataset[Row],每一行的类型是 Row，不解析，每一行究竟有哪些字段，各个字段又是什么类型都无从得知，只能用上面提到的 getAS 方法或者共性中的第七条提到的模式匹配拿出特定字段。而 Dataset 中，每一行是什么类型是不一定的，在自定义了 case class 之后可以很自由的获得每一行的信息</p><p>三者是可以互相转换的 通过特定方式</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220725101311213.png" alt="image-20220725101311213"></p><p>具体代码如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark01_SparkSQL_Basic</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//TODO 创建SparkSQL的运行环境</span></span><br><span class="line">    <span class="keyword">val</span> sparkSQL: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;SparkSQL&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(sparkSQL).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行逻辑操作</span></span><br><span class="line">    <span class="comment">//DataFrame</span></span><br><span class="line"><span class="comment">//    val df: DataFrame = spark.read.json(&quot;data/user.json&quot;)</span></span><br><span class="line">    <span class="comment">//    df.show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; SQL</span></span><br><span class="line"><span class="comment">//    df.createOrReplaceTempView(&quot;user&quot;)</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select * from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select age from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select username from user&quot;).show()</span></span><br><span class="line">    <span class="comment">//    spark.sql(&quot;select avg(age) from user&quot;).show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataFrame =&gt; DSL</span></span><br><span class="line">    <span class="comment">// 在使用DataFrame时，如果涉及到转换操作，需要引入转换规则</span></span><br><span class="line">    <span class="comment">//    df.select(&quot;age&quot;,&quot;username&quot;).show()</span></span><br><span class="line">    <span class="comment">//    df.select($&quot;age&quot; + 1).show</span></span><br><span class="line">    <span class="comment">//    df.select(&#x27;age + 1).show</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet</span></span><br><span class="line">    <span class="comment">// DataFrame其实是特定泛型的DataSet 是类型只能是Row的DataSet</span></span><br><span class="line">    <span class="comment">// 所以DataFrame的东西DataSet也都有都能用</span></span><br><span class="line"><span class="comment">//    val ints = Seq(1, 2, 3, 4)</span></span><br><span class="line"><span class="comment">//    val ds: Dataset[Int] = ints.toDS()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> context: <span class="type">SparkContext</span> = spark.sparkContext</span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>)] = context.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">30</span>), (<span class="number">2</span>, <span class="string">&quot;lisa&quot;</span>, <span class="number">40</span>)))</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = rdd.toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>) <span class="comment">//DataFrame</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rowRDD: <span class="type">RDD</span>[<span class="type">Row</span>] = df.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO DataSet &lt;=&gt; DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">User</span>] = df.as[<span class="type">User</span>]</span><br><span class="line">    <span class="keyword">val</span> df1: <span class="type">DataFrame</span> = ds.toDF()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO RDD &lt;=&gt; DataSet</span></span><br><span class="line">    <span class="keyword">val</span> ds1: <span class="type">Dataset</span>[<span class="type">User</span>] = rdd.map &#123;</span><br><span class="line">      <span class="keyword">case</span> (id, name, age) =&gt; <span class="type">User</span>(id, name, age)</span><br><span class="line">    &#125;.toDS() <span class="comment">//DataSet</span></span><br><span class="line">    <span class="keyword">val</span> userRDD: <span class="type">RDD</span>[<span class="type">User</span>] = ds1.rdd <span class="comment">//RDD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 关闭环境</span></span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,username:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-10">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容还是很重的，把SparkSQL看完，内容概念性的太多了，花费了很多时间去理解，弄懂，像搞懂RDD，DataFrame和DataSet三者就花费了2个多小时，比较麻烦，前面cmd执行出了点问题，好在解决了，但是没弄懂原因。重点在DataSet的使用和几个自定义方法吧，DataSet应该是现在开发最常用的，这部分我也花重点时间去掌握了，其他一些抽象的概念简单过了一下，有些是对Hive的操作，因为Hive还没写，就没看，明天学Hive了，后面再回来把对Hive操作的这几集看了。</p><h1 id="7-27-Hive-配置以及DDL语句">7.27 Hive 配置以及DDL语句</h1><h2 id="1-头：日期、所学内容出处-15">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-15">2.标题</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">P1001-尚硅谷-Hive-课程介绍</span><br><span class="line">P2002-尚硅谷-Hive-概念介绍-</span><br><span class="line">P3003-尚硅谷-Hive-优缺点</span><br><span class="line">P4004-尚硅谷-Hive-架构</span><br><span class="line">P5005-尚硅谷-Hive-与数据库比较</span><br><span class="line">P6006-尚硅谷-Hive-安装<span class="meta">&amp;启动</span></span><br><span class="line">P7007-尚硅谷-Hive-简单使用<span class="meta">&amp;Derby存储元数据的问题</span></span><br><span class="line">P8008-尚硅谷-Hive-MySQL的安装<span class="meta">&amp;启动</span></span><br><span class="line">P9009-尚硅谷-Hive-配置Hive元数据存储为MySQL<span class="meta">&amp;再次启动测试</span></span><br><span class="line">P10010-尚硅谷-Hive-使用元数据服务的方式访问Hive</span><br><span class="line">P11011-尚硅谷-Hive-使用JDBC的方式访问Hive</span><br><span class="line">P12012-尚硅谷-Hive-元数据服务<span class="meta">&amp;Hiveserver2脚本封装</span></span><br><span class="line">P13013-尚硅谷-Hive-修改配置文件使用直连方式访问Hive</span><br><span class="line">P14014-尚硅谷-Hive-其他交互方式</span><br><span class="line">P15015-尚硅谷-Hive-配置日志文件位置<span class="meta">&amp;打印当前库名&amp;表头信息</span></span><br><span class="line">P16016-尚硅谷-Hive-配置信息位置<span class="meta">&amp;优先级</span></span><br><span class="line">P17017-尚硅谷-Hive-课程回顾</span><br><span class="line">P18018-尚硅谷-Hive-关于count star不执行MR任务的说明</span><br><span class="line">P19019-尚硅谷-Hive-Hive中数据类型 一</span><br><span class="line">P20020-尚硅谷-Hive-Hive中数据类型 二</span><br><span class="line">P21021-尚硅谷-Hive-DDL 创建数据库</span><br><span class="line">P22022-尚硅谷-Hive-DDL 查询<span class="meta">&amp;切换数据库</span></span><br><span class="line">P23023-尚硅谷-Hive-DDL 修改<span class="meta">&amp;删除数据库</span></span><br><span class="line">P24024-尚硅谷-Hive-DDL 建表语句分析</span><br><span class="line">P25025-尚硅谷-Hive-DDL 内外部创建<span class="meta">&amp;区别</span></span><br><span class="line">P26026-尚硅谷-Hive-DDL 内外部互相转换</span><br><span class="line">P27027-尚硅谷-Hive-DDL 建表时指定字段分隔符</span><br><span class="line">P28028-尚硅谷-Hive-DDL 修改<span class="meta">&amp;删除表</span></span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-15">3.所学内容概述</h2><h3 id="1-18配置Hive在Centos7">1-18配置Hive在Centos7</h3><h4 id="Hive数据类型">Hive数据类型</h4><h4 id="DDL操作">DDL操作</h4><h2 id="4-根据概述分章节描述-13">4.根据概述分章节描述</h2><h3 id="Hive数据类型-2">Hive数据类型</h3><p>注意一点 时间类型 可以直接String类型yyyy-mm-dd，这样用。</p><p><code>对于 Hive 的 String 类型相当于数据库的 varchar 类型，该类型是一个可变的字符串，不过它不能声明其中最多能存储多少个字符，理论上它可以存储 2GB 的字符数。</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220727205745194.png" alt="image-20220727205745194"></p><h3 id="集合数据类型">集合数据类型</h3><p>Hive 有三种复杂数据类型 ARRAY、MAP 和 STRUCT。ARRAY 和 MAP 与 Java 中的 Array和 Map 类似，而 STRUCT 与 C 语言中的 Struct 类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220727205903414.png" alt="image-20220727205903414"></p><p>案例实操</p><p>创建本地测试文件 test.txt</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">songsong,bingbing_lili,xiao song:<span class="number">18</span>_xiaoxiao song:<span class="number">19</span>,hui long guan_beijing</span><br><span class="line">yangyang,caicai_susu,xiao yang:<span class="number">18</span>_xiaoxiao yang:<span class="number">19</span>,chao yang_beijing</span><br></pre></td></tr></table></figure><p>Hive 上创建测试表 test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table test(</span><br><span class="line">name string,</span><br><span class="line">friends array&lt;string&gt;,</span><br><span class="line">children map&lt;string, int&gt;,</span><br><span class="line">address struct&lt;street:string, city:string&gt; )</span><br><span class="line">row format delimited fields terminated by &#x27;,&#x27;</span><br><span class="line">collection items terminated by &#x27;_&#x27;</span><br><span class="line">map keys terminated by &#x27;:&#x27;</span><br><span class="line">lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><p>后面四个字段的解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row format delimited fields terminated by &#x27;,&#x27; -- 列分隔符</span><br><span class="line">collection items terminated by &#x27;_&#x27; --MAP STRUCT 和 ARRAY 的分隔符(数据分割符号)</span><br><span class="line">map keys terminated by &#x27;:&#x27; -- MAP 中的 key 与 value 的分隔符</span><br><span class="line">lines terminated by &#x27;\n&#x27;; -- 行分隔符</span><br></pre></td></tr></table></figure><h3 id="DDL数据定义">DDL数据定义</h3><h4 id="创建数据库"><strong>创建数据库</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> db_hive; #增加 if <span class="keyword">not</span> <span class="keyword">exists</span>判断</span><br></pre></td></tr></table></figure><p><strong>指定数据库在</strong> <strong>HDFS</strong> <strong>上存放的位置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db_hive2 location <span class="string">&#x27;/db_hive2.db&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="查询数据库"><strong>查询数据库</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p><strong>切换当前数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; use db_hive;</span><br></pre></td></tr></table></figure><p>修改数据库</p><p>用户可以使用 ALTER DATABASE 命令为某个数据库的 DBPROPERTIES 设置键-值对属性值，来描述这个数据库的属性信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; alter database db_hive </span><br><span class="line">set dbproperties(&#x27;createtime&#x27;=&#x27;20170830&#x27;);</span><br></pre></td></tr></table></figure><p><strong>删除数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hvie&gt;drop database db_hive2; //删除空的数据库</span><br><span class="line">hive&gt; drop database if exists db_hive2; //判断数据库是否存在</span><br><span class="line">hive&gt; drop database db_hive cascade; //强制删除数据库 不管是否为空</span><br></pre></td></tr></table></figure><h3 id="创建表"><strong>创建表</strong></h3><p><strong>建表语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name</span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line">[COMMENT table_comment]</span><br><span class="line">[PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line">[CLUSTERED BY (col_name, col_name, ...)</span><br><span class="line">[SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</span><br><span class="line">[ROW FORMAT row_format]</span><br><span class="line">[STORED AS file_format]</span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[TBLPROPERTIES (property_name=property_value, ...)]</span><br><span class="line">[AS select_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</span><br><span class="line">（2）EXTERNAL 关键字可以让用户创建一个外部表，在建表的同时可以指定一个指向实际数据的路径（LOCATION），在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。 </span><br><span class="line">（3）COMMENT：为表和列添加注释。</span><br><span class="line">（4）PARTITIONED BY 创建分区表</span><br><span class="line">（5）CLUSTERED BY 创建分桶表</span><br><span class="line">（6）SORTED BY 不常用，对桶中的一个或多个列另外排序</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220727211124456.png" alt="image-20220727211124456"></p><p><strong>实操案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">（1）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br><span class="line">（2）添加列</span><br><span class="line">hive (default)&gt; alter table dept add columns(deptdesc string);</span><br><span class="line">（3）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br><span class="line">（4）更新列</span><br><span class="line">hive (default)&gt; alter table dept change column deptdesc desc string; （5）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br><span class="line">（6）替换列</span><br><span class="line">hive (default)&gt; alter table dept replace columns(deptno string, dname</span><br><span class="line">string, loc string);</span><br><span class="line">（7）查询表结构</span><br><span class="line">hive&gt; desc dept;</span><br></pre></td></tr></table></figure><h2 id="7-总结-11">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>前天和昨天基本配置了一天的hive,第一天自己配置和yzg帮我一起弄的，后面jar包找不到了，第二天自己又建了一组克隆机，然而配置到JDBC的时候又出现了问题，等了20分钟都没启动起来。后面干脆不管了，就跳过去了，JDBC的部分，因为后面都是直连使用的，就直接看过去了。等部署的同学搞好帮我配一台，Hive的数据类型和Java基本一样就是Long变成了BIGINT,DDL的操作也和MySQL差不多，创建表稍微有点繁琐。语法有很多的字段代码不太好记，DDL似乎不太重要，后面用到的时候，语法敲着敲着就熟悉了，明天学DML了。</p><h1 id="7-28-DML操作">7.28 DML操作</h1><h2 id="1-头：日期、所学内容出处-16">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-16">2.标题</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">P29029-尚硅谷-Hive-DML 加载数据 <span class="keyword">load</span></span><br><span class="line">P30030-尚硅谷-Hive-DML 加载数据 <span class="keyword">insert</span></span><br><span class="line">P31031-尚硅谷-Hive-DML 加载数据 <span class="keyword">as</span> <span class="keyword">select</span></span><br><span class="line">P32032-尚硅谷-Hive-DML 加载数据 <span class="keyword">location</span></span><br><span class="line">P33033-尚硅谷-Hive-DML 加载数据 <span class="keyword">import</span> 未完待续</span><br><span class="line">P34034-尚硅谷-Hive-DML 导出数据 <span class="keyword">insert</span></span><br><span class="line">P35035-尚硅谷-Hive-DML 导出数据 hadoop命令&amp;Hive shell</span><br><span class="line">P36036-尚硅谷-Hive-DML 导出数据 export&amp;sqoop说明 <span class="keyword">import</span>补充</span><br><span class="line">P37037-尚硅谷-Hive-DML 清空全表</span><br><span class="line">P38038-尚硅谷-Hive-DML 查询 准备数据</span><br><span class="line">P39039-尚硅谷-Hive-DML 查询 查询全表&amp;指定列 注意事项</span><br><span class="line">P40040-尚硅谷-Hive-DML 查询 列别名&amp;运算符</span><br><span class="line">P41041-尚硅谷-Hive-DML 查询 聚合函数&amp;<span class="keyword">Limit</span>&amp;<span class="keyword">Where</span></span><br><span class="line">P42042-尚硅谷-Hive-DML 查询 比较运算符&amp;逻辑运算符</span><br><span class="line">P43043-尚硅谷-Hive-DML 查询 GroupBy &amp; <span class="keyword">Having</span></span><br><span class="line">P44044-尚硅谷-Hive-课程回顾</span><br><span class="line">P45045-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 内连接</span><br><span class="line">P46046-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 左外连接</span><br><span class="line">P47047-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 右外连接</span><br><span class="line">P48048-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 满外连接</span><br><span class="line">P49049-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 取左表独有数据</span><br><span class="line">P50050-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 取右表独有数据</span><br><span class="line">P51051-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 取左右两表独有数据</span><br><span class="line">P52052-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 多表连接</span><br><span class="line">P53053-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN</span> 笛卡尔积</span><br><span class="line">P54054-尚硅谷-Hive-DML 查询 排序 <span class="keyword">Order</span> <span class="keyword">By</span></span><br><span class="line">P55055-尚硅谷-Hive-DML 查询 排序 Sort <span class="keyword">By</span></span><br><span class="line">P56056-尚硅谷-Hive-DML 查询 排序 Distribute <span class="keyword">By</span> &amp; <span class="keyword">Cluster</span> <span class="keyword">By</span></span><br><span class="line">P57057-尚硅谷-Hive-DML 查询 排序 <span class="number">4</span>个<span class="keyword">By</span>总结</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-16">3.所学内容概述</h2><h3 id="数据导入">数据导入</h3><h3 id="数据导出">数据导出</h3><h3 id="查询！">查询！</h3><h2 id="4-根据概述分章节描述-14">4.根据概述分章节描述</h2><h3 id="数据导入-2">数据导入</h3><h4 id="向表中装载数据-Load">向表中装载数据(Load)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; load data [local] inpath &#x27;数据的 path&#x27; [overwrite] into table </span><br><span class="line">student [partit555555</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create table student(id string, name string) row format </span><br><span class="line">delimited fields terminated by &#x27;,&#x27;;  //创建一张表</span><br><span class="line">hive(default)&gt; lcoal data local inpath &#x27;./student.txt&#x27; into table default.student;</span><br></pre></td></tr></table></figure><h4 id="通过查询语句向表中插入数据（Insert）"><strong>通过查询语句向表中插入数据（Insert</strong>）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive(default)&gt; insert overwrite table student1</span><br><span class="line"> &gt; select * from student;</span><br></pre></td></tr></table></figure><h4 id="查询语句中创建表并加载数据As-Select">查询语句中创建表并加载数据As Select</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists student3</span><br><span class="line">as select id, name from student;</span><br></pre></td></tr></table></figure><h4 id="创建表时通过Location指定加载数据路径">创建表时通过Location指定加载数据路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create external table if not exists student5(</span><br><span class="line"> id int, name string)</span><br><span class="line"> row format delimited fields terminated by &#x27;,&#x27;</span><br><span class="line"> location &#x27;/student;</span><br></pre></td></tr></table></figure><h4 id="Import-数据到指定-Hive-表中"><strong>Import</strong> <strong>数据到指定</strong> <strong>Hive</strong> 表中</h4><p>注意：先用 export 导出后，再将数据导入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; import table student2</span><br><span class="line">from &#x27;/user/hive/warehouse/export/student&#x27;;</span><br></pre></td></tr></table></figure><h3 id="数据导出-2">数据导出</h3><h4 id="将查询的结果导出到本地">将查询的结果导出到本地</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; insert overwrite local directory &#x27;./student&#x27; //到hive/student文件夹</span><br><span class="line">    &gt; row format delimited fields terminated by &#x27;,&#x27;  //格式化导出 分隔符为，</span><br><span class="line">    &gt; select * from student5; </span><br></pre></td></tr></table></figure><p>如果导出到HDFS 就把local 去掉 后面指定 HDFS的路径 可以直接CP 所以不常用</p><h4 id="hadoop命令导出到本地">hadoop命令导出到本地</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs -get /文件路径 /导出路径</span><br></pre></td></tr></table></figure><p>这个比上面的常用</p><h4 id="Hive-Shell-命令导出"><strong>Hive Shell</strong> <strong>命令导出</strong></h4><p>基本语法：（hive -f/-e 执行语句或者脚本 &gt; file）</p><p>缺点：打印出来有表头信息 所以不常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hive]$ bin/hive -e &#x27;select * from default.student;&#x27; &gt;&gt;</span><br><span class="line">/opt/module/hive/data/export/student4.txt;</span><br></pre></td></tr></table></figure><p>**清除表中数据（**Truncate）</p><p>只能清除内部表中的数据 外部表不行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; truncate table student;</span><br></pre></td></tr></table></figure><h3 id="基本查询">基本查询</h3><p>和MySQL语句一样</p><p>全表和特定列查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from emp;</span><br><span class="line">select empno, ename from emp;</span><br></pre></td></tr></table></figure><p>注意:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意： （<span class="number">1</span>）<span class="keyword">SQL</span> 语言大小写不敏感。</span><br><span class="line">（<span class="number">2</span>）<span class="keyword">SQL</span> 可以写在一行或者多行</span><br><span class="line">（<span class="number">3</span>）关键字不能被缩写也不能分行</span><br><span class="line">（<span class="number">4</span>）各子句一般要分行写。</span><br><span class="line">（<span class="number">5</span>）使用缩进提高语句的可读性。</span><br></pre></td></tr></table></figure><h4 id="列别名">列别名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename AS name, deptno dn from emp;</span><br></pre></td></tr></table></figure><p>AS可以不加 改成空格</p><h4 id="算数运算符">算数运算符</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220728164250522.png" alt="image-20220728164250522"></p><h4 id="常用函数">常用函数</h4><p>要通过MR 运行很慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1）求总行数（count）</span><br><span class="line">hive (default)&gt; select count(*) cnt from emp;</span><br><span class="line">2）求工资的最大值（max）</span><br><span class="line">hive (default)&gt; select max(sal) max_sal from emp;</span><br><span class="line">3）求工资的最小值（min）</span><br><span class="line">hive (default)&gt; select min(sal) min_sal from emp;</span><br><span class="line">4）求工资的总和（sum）</span><br><span class="line">hive (default)&gt; select sum(sal) sum_sal from emp; </span><br><span class="line">5）求工资的平均值（avg）</span><br><span class="line">hive (default)&gt; select avg(sal) avg_sal from emp;</span><br></pre></td></tr></table></figure><h4 id="Limit-语句"><strong>Limit</strong> <strong>语句</strong></h4><p>限制返回的行数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp limit 5; //查询EMP表 返回前5行</span><br></pre></td></tr></table></figure><h4 id="Where-语句"><strong>Where</strong> <strong>语句</strong></h4><p><strong>使用</strong> <strong>WHERE</strong> <strong>子句，将不满足条件的行过滤掉</strong></p><p><strong>WHERE</strong> <strong>子句紧随</strong> <strong>FROM</strong> <strong>子句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp where sal &gt;1000;</span><br><span class="line">--where子句不能用字段别名</span><br><span class="line">--查询出薪水大于1000的所有员工</span><br></pre></td></tr></table></figure><h4 id="比较运算符（Between-In-Is-Null）"><strong>比较运算符（<strong><strong>Between/In/ Is Null</strong></strong>）</strong></h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220728164848185.png" alt="image-20220728164848185"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220728164905841.png" alt="image-20220728164905841"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--（1）查询出薪水等于 5000 的所有员工</span><br><span class="line">hive (default)&gt; select * from emp where sal =5000;</span><br><span class="line">--（2）查询工资在 500 到 1000 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where sal between 500 and 1000;</span><br><span class="line">--（3）查询 comm 为空的所有员工信息</span><br><span class="line">hive (default)&gt; select * from emp where comm is null;</span><br><span class="line">--（4）查询工资是 1500 或 5000 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where sal IN (1500, 5000);</span><br></pre></td></tr></table></figure><h4 id="Like-和-RLike"><strong>Like</strong> <strong>和</strong> <strong>RLike</strong></h4><p>Like和mysql中Like匹配一样，%代表零个或者多个字符(任意个字符)  _代表一个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--（1）查找名字以 A 开头的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where ename LIKE &#x27;A%&#x27;;</span><br><span class="line">--（2）查找名字中第二个字母为 A 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where ename LIKE &#x27;_A%&#x27;;</span><br></pre></td></tr></table></figure><p>Rlike</p><p>RLIKE 子句是 Hive 中这个功能的一个扩展，其可以通过 Java 的正则表达式这个更强大的语言来指定匹配条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（3）查找名字中带有 A 的员工信息</span><br><span class="line">hive (default)&gt; select * from emp where ename RLIKE &#x27;[A]&#x27;;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符-And-Or-Not">逻辑运算符(And/Or/Not)</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">AND </span> 逻辑并</span><br><span class="line"><span class="keyword">OR </span>  逻辑或</span><br><span class="line">NOT  逻辑否</span><br></pre></td></tr></table></figure><h3 id="分组函数">分组函数</h3><p>分组函数的语句顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1 SELECT</span><br><span class="line"> ...</span><br><span class="line">2 FROM</span><br><span class="line">...</span><br><span class="line">3 WHERE</span><br><span class="line">...</span><br><span class="line">4 GROUP BY</span><br><span class="line">...</span><br><span class="line">5 HAVING</span><br><span class="line">...</span><br><span class="line">6 ORDER BY</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Group-By语句">Group By语句</h4><p>计算 emp 表每个部门的平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select t.deptno, avg(t.sal) avg_sal from emp t group by t.deptno;</span><br></pre></td></tr></table></figure><h4 id="Hiving语句">Hiving语句</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">having</span> 与 <span class="keyword">where</span> 不同点</span><br><span class="line">（<span class="number">1</span>）<span class="keyword">where</span> 后面不能写分组函数，而 <span class="keyword">having</span> 后面可以使用分组函数。</span><br><span class="line">（<span class="number">2</span>）<span class="keyword">having</span> 只用于 <span class="keyword">group</span> <span class="keyword">by</span> 分组统计语句。</span><br></pre></td></tr></table></figure><p>案例实操</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">求每个部门的平均薪水大于 2000 的部门</span><br><span class="line">hive (default)&gt; select deptno, avg(sal) avg_sal from emp group by deptno having avg_sal &gt; 2000;</span><br></pre></td></tr></table></figure><h2 id="7-总结-12">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的DML的基本操作部分，查询语句，分组语句和SQL语句基本差不多，前面是有数据的导入和导出，是结合Hadoop以及hive自己的一些功能，可以实现本地文件或者HDFS的上传加载，导入导出。总体来说今天的学习任务不难，之前有SQL的基础，分组这边的语句，之前没学，不是很好理解，算今天的难点吧，今天学习状态还可以，敲了很多SQL语句，也都记住了，算唤醒之前SQL的记忆吧。</p><h1 id="7-29-Join语句">7.29 Join语句</h1><h2 id="1-头：日期、所学内容出处-17">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-17">2.标题</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">P44044-尚硅谷-Hive-课程回顾</span><br><span class="line">P45045-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>内连接</span><br><span class="line">P46046-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>左外连接</span><br><span class="line">P47047-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>右外连接</span><br><span class="line">P48048-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>满外连接</span><br><span class="line">P49049-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>取左表独有数据</span><br><span class="line">P50050-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>取右表独有数据</span><br><span class="line">P51051-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>取左右两表独有数据</span><br><span class="line">P52052-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>多表连接</span><br><span class="line">P53053-尚硅谷-Hive-DML 查询 <span class="keyword">JOIN </span>笛卡尔积</span><br><span class="line">P54054-尚硅谷-Hive-DML 查询 排序 <span class="keyword">Order </span><span class="keyword">By</span></span><br><span class="line"><span class="keyword"></span>P55055-尚硅谷-Hive-DML 查询 排序 Sort <span class="keyword">By</span></span><br><span class="line"><span class="keyword"></span>P56056-尚硅谷-Hive-DML 查询 排序 <span class="keyword">Distribute </span><span class="keyword">By </span>&amp; Cluster <span class="keyword">By</span></span><br><span class="line"><span class="keyword"></span>P57057-尚硅谷-Hive-DML 查询 排序 <span class="number">4</span>个<span class="keyword">By总结</span></span><br><span class="line"><span class="keyword"></span>P58058-尚硅谷-Hive-分区表 说明</span><br><span class="line">P59059-尚硅谷-Hive-分区表 创建&amp;简单使用</span><br><span class="line">P60060-尚硅谷-Hive-分区表 分区的增删查</span><br><span class="line">P61061-尚硅谷-Hive-分区表 二级分区</span><br><span class="line">P62062-尚硅谷-Hive-分区表 使HDFS数据与分区表产生联系的方式</span><br><span class="line">P63063-尚硅谷-Hive-分区表 load加载数据不指定分区 演示</span><br><span class="line">P64064-尚硅谷-Hive-分区表 动态分区 演示</span><br><span class="line">P65065-尚硅谷-Hive-分区表 动态分区 <span class="number">3</span>.<span class="number">0</span>新特性</span><br><span class="line">P66066-尚硅谷-Hive-分桶表</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-17">3.所学内容概述</h2><h3 id="Join语句">Join语句</h3><h4 id="查询多表">查询多表</h4><h4 id="排序">排序</h4><h2 id="4-根据概述分章节描述-15">4.根据概述分章节描述</h2><h3 id="等值于SQL-join">等值于SQL join</h3><p>Hive 支持通常的 SQL JOIN 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> emp;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>清除emp表所有行 防止用本地文件往表格内添加信息的时候 变成追加</span><br></pre></td></tr></table></figure><h4 id="表的别名">表的别名</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）好处</span><br><span class="line">（1）使用别名可以简化查询。</span><br><span class="line">（2）使用表名前缀可以提高执行效率。</span><br></pre></td></tr></table></figure><h5 id="合并员工表和部门表">合并员工表和部门表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e join dept d </span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h3 id="SQL-Joins">SQL Joins</h3><p>join有很多种连接方式 都如图了 类似于集合中的交集 并集 差集</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FTRDExODUyNDA1MTE=,size_16,color_FFFFFF,t_70-16590607630123.png" alt="img"></p><h4 id="内连接"><strong>内连接</strong></h4><p>内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。 交集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e inner join dept d </span><br><span class="line">on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="左外连接"><strong>左外连接</strong></h4><p>左外连接：JOIN 操作符左边表中符合 WHERE 子句的所有记录将会被返回。 返回join左边的表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e left join </span><br><span class="line">dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="右外连接"><strong>右外连接</strong></h4><p>右外连接：JOIN 操作符右边表中符合 WHERE 子句的所有记录将会被返回。 返回join右边的表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e right join </span><br><span class="line">dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="满外连接"><strong>满外连接</strong></h4><p>满外连接：将会返回所有表中符合 WHERE 语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值替代。 并集！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, d.deptno from emp e full join </span><br><span class="line">dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="左连接">左连接</h4><p>取左边特有的部分 就是左外连接除去公共部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, e.deptno,d.dname from emp e left join </span><br><span class="line">              &gt; dept d on e.deptno = d.deptno</span><br><span class="line">              &gt; where d.deptno is null;</span><br></pre></td></tr></table></figure><p>右连接和外连接类似</p><h4 id="外连接">外连接</h4><p>取两边的数据。 两表独有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select e.empno, e.ename, e.deptno,d.dname from emp e full join </span><br><span class="line">              &gt; dept d on e.deptno = d.deptno</span><br><span class="line">              &gt; where d.deptno is null or e.deptno is null;</span><br></pre></td></tr></table></figure><h3 id="查询多表-2">查询多表</h3><p>查询员工姓名(e)、部门名称(d)以及部门所在城市(l)名称；</p><p>hive运行总是从左往右</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; SELECT e.ename, d.dname, l.loc_name</span><br><span class="line">              &gt; FROM emp e </span><br><span class="line">              &gt; JOIN dept d</span><br><span class="line">              &gt; ON d.deptno = e.deptno </span><br><span class="line">              &gt; JOIN location l</span><br><span class="line">              &gt; ON d.loc = l.loc;</span><br></pre></td></tr></table></figure><h4 id="笛卡尔积">笛卡尔积</h4><p>出来的行数相当于两边表格相乘</p><p>笛卡尔集会在下面条件下产生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）省略连接条件</span><br><span class="line">（2）连接条件无效</span><br><span class="line">（3）所有表中的所有行互相连接</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select empno, dname from emp,dept;</span><br></pre></td></tr></table></figure><h3 id="排序-2">排序</h3><h4 id="全局排序（order-by）">全局排序（order by）</h4><p>Order By：全局排序，只有一个 Reducer</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ASC</span>（ascend）: 升序（默认）</span><br><span class="line"><span class="keyword">DESC</span>（descend）: 降序</span><br></pre></td></tr></table></figure><p>案例实操</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）查询员工信息按工资升序排列</span><br><span class="line">hive (default)&gt; select * from emp order by sal;</span><br><span class="line">（2）查询员工信息按工资降序排列</span><br><span class="line">hive (default)&gt; select * from emp order by sal desc;</span><br></pre></td></tr></table></figure><h4 id="多个列排序">多个列排序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt;  select ename, deptno,sal from emp order by deptno,sal;</span><br></pre></td></tr></table></figure><p><strong>每个</strong> <strong>Reduce</strong> **内部排序（**Sort By）</p><p><code>Sort By：对于大规模的数据集 order by 的效率非常低。在很多情况下，并不需要全局排序，此时可以使用 **sort by**。</code></p><p><code>Sort by 为每个 reducer 产生一个排序文件。每个 Reducer 内部进行排序，对全局结果集来说不是排序</code> 区内有序</p><p><strong>设置</strong> <strong>reduce</strong> <strong>个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; set mapreduce.job.reduces=3;</span><br></pre></td></tr></table></figure><p>根据部门编号降序查看员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp sort by deptno desc;</span><br></pre></td></tr></table></figure><h4 id="分区-（-Distribute-By）">分区**（**Distribute By）</h4><p>一般和sort by一起排序</p><p>Distribute By：</p><p>在有些情况下，我们需要控制某个特定行应该到哪个 reducer，通常是为了进行后续的聚集操作。<strong>distribute by</strong> 子句可以做这件事。<strong>distribute by</strong> 类似 MR 中 partition（自定义分区），进行分区，结合 sort by 使用。</p><p>在CSDN中有特别讲分区排序</p><p><a href="http://t.csdn.cn/HhwIw">http://t.csdn.cn/HhwIw</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> select * from emp distribute by </span><br><span class="line">deptno sort by empno desc;</span><br></pre></td></tr></table></figure><p>部门编号分区 员工编号排序</p><p>当 distribute by 和 sorts by 字段相同时，可以使用 cluster by 方式。</p><p><code>cluster by 除了具有 distribute by 的功能外还兼具 sort by 的功能。但是排序只能是升序排序，不能指定排序规则为 ASC 或者 DESC</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; select * from emp cluster by deptno;</span><br><span class="line">hive (default)&gt; select * from emp distribute by deptno sort by deptno;</span><br></pre></td></tr></table></figure><h4 id="分区表">分区表</h4><h2 id="5-BUG点-10">5. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>左连接的时候，deptno这列我很多null，但是检查数据源文件这列是有的</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729094359004.png" alt="image-20220729094359004"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729094431338.png" alt="image-20220729094431338"></p><p>先是怀疑hive建表的时候是不是出现了问题 又建了一遍表格发现还是有问题，查询的时候，最后一行只有null有问题</p><p>只能显示30看了自己的源文件，发现30的信息是最全的，每一列都有，就怀疑是源文件内的问题:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建表格的时候分了<span class="number">8</span>列 以空格切割，但是源文件有几行 只有 <span class="number">6</span>列 <span class="number">7</span>列 那它空格切出来 也是<span class="number">6</span>列 <span class="number">7</span>列而且是按顺序。像第四列我是<span class="built_in">int</span>类的 但是有几行没有这一列的数据 就自动算后面的data 类型不统一 就显示了<span class="literal">null</span> 后面数据没有也自然显示<span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p>查询hiredate的时候，发现有一行显示的5000 而这一行恰好是没有mgr的那一行。那就是长度问题 导致分隔符切错了。</p><p>把源文件emp.txt没数据的地方 输入两个空格 作为分隔就解决了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729102024370.png" alt="image-20220729102024370"></p><h3 id="JVM报错">JVM报错</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220729150136194.png" alt="image-20220729150136194"></p><p>在CSDN解决</p><p>Hive命令调用MR任务报错</p><p>将 hive 设置成本地模式来执行任务试试,命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set hive.exec.mode.local.auto=true;</span><br></pre></td></tr></table></figure><p>问题解决，但是只有一次性，hive退出就不行了，把他写到配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题永久解决</p><h2 id="7-总结-13">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的内容主要是Join语句和排序以及分区方面的一小部分内容，join语句和排序比较简单的也容易掌握，今天建表切割方面的原理方面的知识出现了缺陷，解决BUG,补充了知识点。今天的重点和难点在分区，分区能让效率提高很多，还是很重要的，能避免全局扫描，导致运行速度很慢，在公司甚至运行不起来，效率太低了。内容比较多，这部分的原理，只是一知半解，明天再好好回顾一下分区方面的内容。</p><h1 id="7-31-函数">7.31 函数</h1><h2 id="1-头：日期、所学内容出处-18">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web">https://www.bilibili.com/video/BV1WY4y1H7d3?p=28&amp;share_source=copy_web</a></p><h2 id="2-标题-18">2.标题</h2><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">P</span><span class="number">67067</span>-尚硅谷-Hive-DML 函数 查询系统函数</span><br><span class="line"><span class="keyword">P</span><span class="number">68068</span>-尚硅谷-Hive-DML 函数 NVL</span><br><span class="line"><span class="keyword">P</span><span class="number">69069</span>-尚硅谷-Hive-DML 函数 CASE WHEN THEN <span class="keyword">ELSE</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">P</span><span class="number">70070</span>-尚硅谷-Hive-课程回顾</span><br><span class="line"><span class="keyword">P</span><span class="number">71071</span>-尚硅谷-Hive-DML 函数 拼接字符串 函数说明</span><br><span class="line"><span class="keyword">P</span><span class="number">72072</span>-尚硅谷-Hive-DML 函数 拼接字符串 函数使用</span><br><span class="line"><span class="keyword">P</span><span class="number">73073</span>-尚硅谷-Hive-DML 函数 Explode</span><br><span class="line"><span class="keyword">P</span><span class="number">74074</span>-尚硅谷-Hive-DML 函数 行转列&amp;列转行说明</span><br><span class="line"><span class="keyword">P</span><span class="number">75075</span>-尚硅谷-Hive-DML 函数 窗口函数 初体验</span><br><span class="line"><span class="keyword">P</span><span class="number">76076</span>-尚硅谷-Hive-DML 函数 窗口函数 需求二</span><br><span class="line"><span class="keyword">P</span><span class="number">77077</span>-尚硅谷-Hive-DML 函数 窗口函数 需求三</span><br><span class="line"><span class="keyword">P</span><span class="number">78078</span>-尚硅谷-Hive-DML 函数 窗口函数 排序值相同时说明</span><br><span class="line"><span class="keyword">P</span><span class="number">79079</span>-尚硅谷-Hive-DML 函数 窗口函数 需求四</span><br><span class="line"><span class="keyword">P</span><span class="number">80080</span>-尚硅谷-Hive-DML 函数 窗口函数 需求五</span><br><span class="line"><span class="keyword">P</span><span class="number">81081</span>-尚硅谷-Hive-DML 函数 窗口函数 Rank</span><br><span class="line"><span class="keyword">P</span><span class="number">82082</span>-尚硅谷-Hive-DML 函数 其他常用函数 日期函数</span><br><span class="line"><span class="keyword">P</span><span class="number">83083</span>-尚硅谷-Hive-DML 函数 其他常用函数 数据取整函数</span><br><span class="line"><span class="keyword">P</span><span class="number">84084</span>-尚硅谷-Hive-DML 函数 其他常用函数 字符串相关函数</span><br><span class="line"><span class="keyword">P</span><span class="number">85085</span>-尚硅谷-Hive-DML 函数 其他常用函数 集合函数</span><br></pre></td></tr></table></figure><h2 id="3-所学内容概述-18">3.所学内容概述</h2><h3 id="查询系统函数">查询系统函数</h3><h3 id="各种系统函数">各种系统函数</h3><h3 id="行转列-列转行">行转列 列转行</h3><h3 id="窗口函数">窗口函数</h3><h2 id="4-根据概述分章节描述-16">4.根据概述分章节描述</h2><h3 id="系统内置函数"><strong>系统内置函数</strong></h3><p>Hive中系统自带的函数有很多 有条命令相当于API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show funcations; //查看系统自带的函数</span><br><span class="line">desc function uppper;//显示自带函数的用发 可以翻译中文</span><br><span class="line">desc function extended lower; //详细显示用法 这个好用些</span><br></pre></td></tr></table></figure><h3 id="常用内置函数">常用内置函数</h3><h4 id="空字符串赋值">空字符串赋值</h4><p>NVL：给值为 NULL 的数据赋值，它的格式是 NVL( value，default_value)。它的功能是如果 value 为 NULL，则 NVL 函数返回 default_value 的值，否则返回 value 的值。第二个参数可以不填，这样value如果是NULL，返回值也是NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select comm,nvl(comm, -1) from emp; //如果comm为NULL -1代替 </span><br></pre></td></tr></table></figure><h3 id="行转列">行转列</h3><p>大白话其实就是一列转换为多列</p><p>用的到三个函数变形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONCAT(string A/col, string B/col…)：返回输入字符串连接后的结果，支持任意个输入字符串;</span><br><span class="line">CONCAT_WS(separator, str1, str2,...)：它是一个特殊形式的 CONCAT()。第一个参数是合并参数间的分隔符。</span><br><span class="line">COLLECT_SET(col)：函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生 Array 类型字段。</span><br></pre></td></tr></table></figure><p>实例代码不太好懂 都标上注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT t1.c_b, CONCAT_WS(&quot;|&quot;,collect_set(t1.name)) --名字去重 并用|分割</span><br><span class="line">FROM (SELECT NAME, --用c_b结果</span><br><span class="line">CONCAT_WS(&#x27;,&#x27;,constellation,blood_type) c_b --合并两条数据并用,隔开 别名c_b</span><br><span class="line">FROM person_info</span><br><span class="line">)t1 --别名t1</span><br><span class="line">GROUP BY t1.c_b --按照t1的c_b查询结果分组</span><br></pre></td></tr></table></figure><h3 id="列转行">列转行</h3><p>一行转多行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLODE(col)：将 hive 一列中复杂的 Array 或者 Map 结构拆分成多行。</span><br><span class="line">LATERAL VIEW</span><br><span class="line">用法：LATERAL VIEW udtf(expression) tableAlias AS columnAlias</span><br></pre></td></tr></table></figure><p>案例用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">movie,</span><br><span class="line">category_name</span><br><span class="line">FROM</span><br><span class="line">movie_info</span><br><span class="line">lateral VIEW --使用函数</span><br><span class="line">explode(split(category,&quot;,&quot;)) movie_info_tmp --别名 </span><br><span class="line">AS category_name; --作为category_name 可给上面返回查询</span><br></pre></td></tr></table></figure><h3 id="窗口函数-2">窗口函数</h3><p>一般情况窗口函数都会搭配over使用 以四个案例来大致了解窗口函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">OVER</span><span class="params">()</span></span>：指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变</span><br></pre></td></tr></table></figure><h4 id="查询在-2017-年-4-月份购买过的顾客及总人数">查询在 2017 年 4 月份购买过的顾客及总人数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select name,count(*) over () </span><br><span class="line">from business</span><br><span class="line">where substring(orderdate,1,7) = &#x27;2017-04&#x27; --筛选orderdate这一列前1-7的字符串为2017-04的</span><br><span class="line">group by name; --按照name分组</span><br></pre></td></tr></table></figure><h4 id="查询顾客的购买明细及月购买总额">查询顾客的购买明细及月购买总额</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select name,orderdate,cost,sum(cost) --分区内cost的和</span><br><span class="line">over(partition by month(orderdate)) --按照orderdate月份分区</span><br><span class="line">from business;</span><br></pre></td></tr></table></figure><h4 id="查看顾客上次的购买时间或者下次购买时间">查看顾客上次的购买时间或者下次购买时间</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select name,orderdate,cost,</span><br><span class="line">lag(orderdate,1,&#x27;1900-01-01&#x27;) over(partition by name order by orderdate ) as time1 --上次购买时间 lag第三个参数是如果 为null 改成1900 01 01</span><br><span class="line">from business;</span><br></pre></td></tr></table></figure><h3 id="Rank"><strong>Rank</strong></h3><p>案例直观的感受三者的区别</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">RANK</span><span class="params">()</span></span> 排序相同时会重复，总数不会变</span><br><span class="line"><span class="function"><span class="title">DENSE_RANK</span><span class="params">()</span></span> 排序相同时会重复，总数会减少</span><br><span class="line"><span class="function"><span class="title">ROW_NUMBER</span><span class="params">()</span></span> 会根据顺序计算</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rank</span><br><span class="line">宋宋英语841</span><br><span class="line">大海英语841</span><br><span class="line">婷婷英语783</span><br><span class="line">孙悟空英语684</span><br><span class="line">dense<span class="emphasis">_rank</span></span><br><span class="line"><span class="emphasis">宋宋英语841</span></span><br><span class="line"><span class="emphasis">大海英语841</span></span><br><span class="line"><span class="emphasis">婷婷英语782</span></span><br><span class="line"><span class="emphasis">孙悟空英语683</span></span><br><span class="line"><span class="emphasis">row_</span>Number</span><br><span class="line">宋宋英语841</span><br><span class="line">大海英语842</span><br><span class="line">婷婷英语783</span><br><span class="line">孙悟空英语684</span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-9">6.扩展学习部分</h2><p>Hive常用的日期 字符串 集合的方法 以及案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">常用日期函数</span><br><span class="line">unix_timestamp:返回当前或指定时间的时间戳</span><br><span class="line">select unix_timestamp();</span><br><span class="line">select unix_timestamp(&quot;2020-10-28&quot;,&#x27;yyyy-MM-dd&#x27;);</span><br><span class="line"></span><br><span class="line">from_unixtime：将时间戳转为日期格式</span><br><span class="line">select from_unixtime(1603843200);</span><br><span class="line"></span><br><span class="line">current_date：当前日期</span><br><span class="line">select current_date;</span><br><span class="line"></span><br><span class="line">current_timestamp：当前的日期加时间</span><br><span class="line">select current_timestamp;</span><br><span class="line"></span><br><span class="line">to_date：抽取日期部分</span><br><span class="line">select to_date(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">year：获取年</span><br><span class="line">select year(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">month：获取月</span><br><span class="line">select month(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">day：获取日</span><br><span class="line">select day(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">hour：获取时</span><br><span class="line">select hour(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">minute：获取分</span><br><span class="line">select minute(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">second：获取秒</span><br><span class="line">select second(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">weekofyear：当前时间是一年中的第几周</span><br><span class="line">select weekofyear(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">dayofmonth：当前时间是一个月中的第几天</span><br><span class="line">select dayofmonth(&#x27;2020-10-28 12:12:12&#x27;);</span><br><span class="line"></span><br><span class="line">months_between： 两个日期间的月份</span><br><span class="line">select months_between(&#x27;2020-04-01&#x27;,&#x27;2020-10-28&#x27;);</span><br><span class="line"></span><br><span class="line">add_months：日期加减月</span><br><span class="line">select add_months(&#x27;2020-10-28&#x27;,-3);</span><br><span class="line"></span><br><span class="line">datediff：两个日期相差的天数</span><br><span class="line">select datediff(&#x27;2020-11-04&#x27;,&#x27;2020-10-28&#x27;);</span><br><span class="line"></span><br><span class="line">date_add：日期加天数</span><br><span class="line">select date_add(&#x27;2020-10-28&#x27;,4);</span><br><span class="line"></span><br><span class="line">date_sub：日期减天数</span><br><span class="line">select date_sub(&#x27;2020-10-28&#x27;,-4);</span><br><span class="line"></span><br><span class="line">last_day：日期的当月的最后一天</span><br><span class="line">select last_day(&#x27;2020-02-30&#x27;);</span><br><span class="line"></span><br><span class="line">date_format(): 格式化日期</span><br><span class="line">select date_format(&#x27;2020-10-28 12:12:12&#x27;,&#x27;yyyy/MM/dd HH:mm:ss&#x27;);</span><br><span class="line"></span><br><span class="line">常用取整函数</span><br><span class="line">round： 四舍五入</span><br><span class="line">select round(3.14);</span><br><span class="line">select round(3.54);</span><br><span class="line"></span><br><span class="line">ceil：  向上取整</span><br><span class="line">select ceil(3.14);</span><br><span class="line">select ceil(3.54);</span><br><span class="line"></span><br><span class="line">floor： 向下取整</span><br><span class="line">select floor(3.14);</span><br><span class="line">select floor(3.54);</span><br><span class="line"></span><br><span class="line">常用字符串操作函数</span><br><span class="line">upper： 转大写</span><br><span class="line">select upper(&#x27;low&#x27;);</span><br><span class="line"></span><br><span class="line">lower： 转小写</span><br><span class="line">select lower(&#x27;low&#x27;);</span><br><span class="line"></span><br><span class="line">length： 长度</span><br><span class="line">select length(&quot;atguigu&quot;);</span><br><span class="line"></span><br><span class="line">trim：  前后去空格</span><br><span class="line">select trim(&quot; atguigu &quot;);</span><br><span class="line"></span><br><span class="line">lpad： 向左补齐，到指定长度</span><br><span class="line">select lpad(&#x27;atguigu&#x27;,9,&#x27;g&#x27;);</span><br><span class="line"></span><br><span class="line">rpad：  向右补齐，到指定长度</span><br><span class="line">select rpad(&#x27;atguigu&#x27;,9,&#x27;g&#x27;);</span><br><span class="line"></span><br><span class="line">regexp_replace：使用正则表达式匹配目标字符串，匹配成功后替换！</span><br><span class="line">SELECT regexp_replace(&#x27;2020/10/25&#x27;, &#x27;/&#x27;, &#x27;-&#x27;);</span><br><span class="line"></span><br><span class="line">集合操作</span><br><span class="line">size： 集合中元素的个数</span><br><span class="line">select size(friends) from test3;</span><br><span class="line"></span><br><span class="line">map_keys： 返回map中的key</span><br><span class="line">select map_keys(children) from test3;</span><br><span class="line"></span><br><span class="line">map_values: 返回map中的value</span><br><span class="line">select map_values(children) from test3;</span><br><span class="line"></span><br><span class="line">array_contains: 判断array中是否包含某个元素</span><br><span class="line">select array_contains(friends,&#x27;bingbing&#x27;) from test3;</span><br><span class="line"></span><br><span class="line">sort_array： 将array中的元素排序</span><br><span class="line">select sort_array(friends) from test3;</span><br><span class="line"></span><br><span class="line">grouping_set:多维分析</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-总结-14">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习任务是Hive的函数部分，其实就是了解Hive中对数据处理的各种方式，有一些处理方式，有点像Java中的几个函数，改了名字。实际作用是差不多的，合理使用函数，对数据处理的效率能提高不少。这些函数对数据的筛选和过滤，利用好分区和分组加排序，能很灵活的对数据处理。今天难度简单吧，基本全部掌握了，列转行这里有些函数没有去尝试过，也没出BUG，学习状态也不错。</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 月笔记 </tag>
            
            <tag> Scala </tag>
            
            <tag> Spark </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-5月笔记</title>
      <link href="/posts/22biji04.html"/>
      <url>/posts/22biji04.html</url>
      
        <content type="html"><![CDATA[<h1 id="4-1继承">4.1继承</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要">2.今天所学内容摘要**</h2><h3 id="继承">继承</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401151957747.png" alt="image-20220401151957747"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401152052168.png" alt="image-20220401152052168"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401152120684.png" alt="image-20220401152120684"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401152132497.png" alt="image-20220401152132497"></p><p>理解继承代码</p><p>Creature  ------- person---------Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Creature</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;gggggggg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Creature</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String major;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String major)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.setAge(age);</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public void eat()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;要吃饭&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public void sleep()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;要睡觉&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.setAge(<span class="number">28</span>);</span><br><span class="line">        p1.name = <span class="string">&quot;汪大东&quot;</span>;</span><br><span class="line">        p1.eat();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(student.getAge());</span><br><span class="line">        student.name = <span class="string">&quot;金宝三&quot;</span>;</span><br><span class="line">        student.major = <span class="string">&quot;电工&quot;</span>;</span><br><span class="line">        student.eat();</span><br><span class="line">        student.study();</span><br><span class="line"></span><br><span class="line">        student.breath();</span><br><span class="line">        <span class="type">Creature</span> <span class="variable">creature</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Creature</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承圆和圆柱">继承圆和圆柱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius*radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cylinder</span> <span class="keyword">extends</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cylinder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length =<span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findVolume</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用 父类的方法</span></span><br><span class="line">        <span class="keyword">return</span> findArea()*length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CylinderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cylinder</span> <span class="variable">cylinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cylinder</span>();</span><br><span class="line">        cylinder.setRadius(<span class="number">2.1</span>);</span><br><span class="line">        cylinder.setLength(<span class="number">3.4</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">volume</span>  <span class="operator">=</span> cylinder.findVolume();</span><br><span class="line">        System.out.println(<span class="string">&quot;半径是：&quot;</span> + cylinder.getRadius());</span><br><span class="line">        System.out.println(<span class="string">&quot;圆柱的体积是：&quot;</span> + String.format(<span class="string">&quot;%.2f&quot;</span>,volume));</span><br><span class="line">        <span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> cylinder.findArea();</span><br><span class="line">        System.out.println(<span class="string">&quot;圆柱的底面积是：&quot;</span> + String.format(<span class="string">&quot;%.2f&quot;</span>,area));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写"><strong>重写</strong></h3><p>返回值是父类的子类 子类的权限要大于父类</p><p>重写就是将父类的方法，同名同参数的修改</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401164551789.png" alt="image-20220401164551789"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401164911699.png" alt="image-20220401164911699"></p><p>重写练习题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;要吃饭&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">(<span class="type">int</span> distance)</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;走路走了&quot;</span> + distance +<span class="string">&quot;公里&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        String major;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String major)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.major = major;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">majors</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;专业是&quot;</span> + major);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学生吃饭10分钟&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KidsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Kids</span> <span class="variable">someKid</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kids</span>(<span class="number">13</span>);</span><br><span class="line">        someKid.printAge();</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        someKid.setSalary(<span class="number">0</span>);</span><br><span class="line">        someKid.setSex(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        someKid.employed();</span><br><span class="line">        someKid.manOrWoman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四种访问权限">四种访问权限</h3><p>private和public 常用</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401182416540.png" alt="image-20220401182416540"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>Person是我student的父类，调用方法时候，说没找到，看了一会，发现extends后面的Person的java2里面的不是一个包，名字一样。 Student在java5里面 父类Person 在java里，写继承的时候，import是java2中的perso。</p><p><img src="https://docimg8.docs.qq.com/image/W3u65-dM-fZssYXo1Ssc0g.png?w=1110&amp;h=997" alt="img"></p><p><img src="https://docimg6.docs.qq.com/image/m0bulfQxDifnrHtRWiZE1g.png?w=596&amp;h=296" alt="img"></p><h2 id="4-扩展学习部分">**4.扩展学习部分</h2><p>无</p><h2 id="总结">总结</h2><p>今天学习了方法的重写，了解了方法的重写和重构的区别，还有继承，基本和python中一模一样，学起来也相对简单，今天只有下午的学习时间，没有去做项目，做了下练习，把昨天的项目二巩固了一下，学习状态不错，晚自习自己试着敲了一下项目二。今天的学习状态满意了。</p><h1 id="4-2super-多态">4.2super 多态</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-2">2.今天所学内容摘要**</h2><h3 id="super的使用">super的使用</h3><p>重写父类的方法</p><p>重写父类的变量</p><p>在子类的构造方法中</p><p>super和this差不多，this指该类 super是父类</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401193102413.png" alt="image-20220401193102413"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220402085200335.png" alt="image-20220402085200335"></p><p>super练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.superTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">411024</span>; <span class="comment">// 身份证</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person我还是在的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.superTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String major;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1002</span>; <span class="comment">//学号</span></span><br><span class="line">    <span class="comment">//  默认调用了父类空参的构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String major)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String major, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生要吃营养餐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;学生学习知识&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; age = &quot;</span> + age + <span class="string">&quot; id = &quot;</span> + <span class="built_in">super</span>.id);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; age = &quot;</span> + age + <span class="string">&quot; id = &quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; age = &quot;</span> + age + <span class="string">&quot; id = &quot;</span> + <span class="built_in">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.superTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">superTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;物联网&quot;</span>);</span><br><span class="line">        student.name = <span class="string">&quot;汪大东&quot;</span>;</span><br><span class="line">        student.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;****************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        student.study();</span><br><span class="line">        student.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;****************************************&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;汪大东&quot;</span>,<span class="number">28</span>,<span class="string">&quot;终极一班&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        student1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220402105403954.png" alt="image-20220402105403954"></p><h3 id="多态">多态</h3><p><strong>编译看左边，运行看右边</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220402105122306.png" alt="image-20220402105122306"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220402110826354.png" alt="image-20220402110826354"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> isSmoking;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">earnMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人负责养家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人吃得多&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路 霸气侧漏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Women</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> isBeauty;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goShopping</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女人喜欢购物&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女人吃得少减肥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女人走路拽&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.eat();</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        man.eat();</span><br><span class="line">        man.age = <span class="number">25</span>;</span><br><span class="line">        man.earnMoney();</span><br><span class="line">        <span class="comment">//***************************</span></span><br><span class="line">        <span class="comment">//对象的多态性： 父类的引用指向子类的对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="comment">//多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写的方法 -- 虚拟方法调用</span></span><br><span class="line">        p2.eat();</span><br><span class="line">        p2.walk();</span><br><span class="line"><span class="comment">//        p2.earnMoney();  子类和父类的方法都有才可以调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-2">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>无</p><h2 id="4-扩展学习部分-2">**4.扩展学习部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/4/2 20:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">subject</span> &#123;</span><br><span class="line"><span class="comment">//    题目：求1+2!+3!+…+20!的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cc;i++)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">Sum</span> <span class="operator">=</span> factorialSum(i);</span><br><span class="line">            sum += Sum;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">factorialSum</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> factorialSum(num-<span class="number">1</span>)*num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-2">总结</h2><p>今天学习了多态和super的方法的使用等，理解了java面向对象继承的基本方法，今天学了一下午，主要是需要理解方法的使用和调用和概念才是重要的，代码比较简单，敲的出来，也理解。今天学习状态不错。</p><h1 id="4-6-向下转型-和多态性">4.6 向下转型 和多态性</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-3">2.今天所学内容摘要**</h2><h3 id="向下转型和instanceof的使用">向下转型和instanceof的使用</h3><p>向下转型的理解</p><p>CSDN：</p><p><a href="https://blog.csdn.net/weixin_28680865/article/details/114051478?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164984614616782184649911%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164984614616782184649911&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-114051478.142">https://blog.csdn.net/weixin_28680865/article/details/114051478?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164984614616782184649911%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164984614616782184649911&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-114051478.142</a></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220405190044531.png" alt="image-20220405190044531"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day14.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.eat();</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        man.eat();</span><br><span class="line">        man.age = <span class="number">25</span>;</span><br><span class="line">        man.earnMoney();</span><br><span class="line">        <span class="comment">//***************************</span></span><br><span class="line">        <span class="comment">//对象的多态性： 父类的引用指向子类的对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="comment">//多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写的方法 -- 虚拟方法调用</span></span><br><span class="line">        p2.eat();</span><br><span class="line">        p2.walk();</span><br><span class="line">        p2.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"><span class="comment">//        p2.earnMoney();  子类和父类的方法都有才可以调用</span></span><br><span class="line">        <span class="comment">//向下转型:强制类型转换</span></span><br><span class="line">        <span class="comment">//如何才能调用子类特有的属性和方法</span></span><br><span class="line">        <span class="type">Man</span> <span class="variable">m1</span> <span class="operator">=</span> (Man)p2;</span><br><span class="line">        m1.earnMoney();</span><br><span class="line">        m1.age = <span class="number">18</span>;</span><br><span class="line">        m1.isSmoking = <span class="literal">true</span>;</span><br><span class="line">        m1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用强转时候，可能出现ClassCastException的异常</span></span><br><span class="line"><span class="comment">//        Women w1 = (Women) p2;</span></span><br><span class="line"><span class="comment">//        w1.goShopping();</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        instanceof关键字的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        a instanceof A 判断对象a是否是类A的实例。如果是，返回true 如果不是 返回false。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (p2 <span class="keyword">instanceof</span> Women)&#123;</span><br><span class="line">            <span class="type">Women</span> <span class="variable">w1</span> <span class="operator">=</span> (Women) p2;</span><br><span class="line">            w1.goShopping();</span><br><span class="line">            System.out.println(<span class="string">&quot;Women&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p2 <span class="keyword">instanceof</span> Man)&#123;</span><br><span class="line">            <span class="type">Man</span> <span class="variable">w2</span> <span class="operator">=</span> (Man) p2;</span><br><span class="line">            w2.earnMoney();</span><br><span class="line">            System.out.println(<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向下转型的问题</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220405191149668.png" alt="image-20220405191149668"></p><h3 id="调用方法和属性练习">调用方法和属性练习</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220405191939912.png" alt="image-20220405191939912"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220405192040386.png" alt="image-20220405192040386"></p><h3 id="object">object</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220405195318555.png" alt="image-20220405195318555"></p><h3 id="回顾-的使用">回顾==的使用</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220406180659487.png" alt="image-20220406180659487"></p><h3 id="equals的使用">equals的使用</h3><p><strong>使用需要重写</strong></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220406183243142.png" alt="image-20220406183243142"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day15.equal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDateTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyDate</span> <span class="variable">myDate1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">14</span>,<span class="number">3</span>,<span class="number">1976</span>);</span><br><span class="line">        <span class="type">MyDate</span> <span class="variable">myDate2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">14</span>,<span class="number">3</span>,<span class="number">1976</span>);</span><br><span class="line">        <span class="keyword">if</span> (myDate1.equals(myDate2))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;myDate1 is equal to myDate2&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;myDate1 is not equal to myDate2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (myDate1 == myDate2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;myDate1 == myDate2&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;myDate1 != myDate2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDate</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>  == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> MyDate)&#123;</span><br><span class="line">            <span class="type">MyDate</span> <span class="variable">myDate</span> <span class="operator">=</span> (MyDate) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.day == myDate.day &amp;&amp; <span class="built_in">this</span>.month == myDate.month &amp;&amp; <span class="built_in">this</span>.year == myDate.year;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习">练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day15.equal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> day15.equal.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line">        System.out.println(i == j);</span><br><span class="line">        System.out.println(j == d);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(i == c);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ada&quot;</span>);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用类型</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(customer1 == customer2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cust1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ada&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cust2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ada&quot;</span>);</span><br><span class="line">        System.out.println(cust1== cust2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        System.out.println(customer1.equals(customer2)); <span class="comment">//false------true</span></span><br><span class="line">        System.out.println(cust1.equals(cust2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day15.equal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> (Customer) o;</span><br><span class="line">        <span class="keyword">return</span> age == customer.age &amp;&amp; Objects.equals(name, customer.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tostring">tostring</h3><p>使用时候也会重写</p><p>IDEA会自动帮你重写，父类Object 的toString 出来的是所有的属性</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220406193139785.png" alt="image-20220406193139785"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day15.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeometricObject</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> weight;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">GeometricObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.weight = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeometricObject</span><span class="params">(String color, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day15.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> day14.java2.Man;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">GeometricObject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.radius = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius,String color,<span class="type">double</span> weight  )</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color, weight);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius *radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Circle)&#123;</span><br><span class="line">            <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) obj;</span><br><span class="line">            <span class="keyword">return</span> circle.findArea() == <span class="built_in">this</span>.findArea();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;圆的面积：&quot;</span> + findArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day15.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2.3</span>);</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2.3</span>, <span class="string">&quot;white&quot;</span>,<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;颜色是否相等 ：&quot;</span> + circle1.getColor().equals(circle2.getColor()));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;面积是否相等： &quot;</span> + circle1.equals(circle2));</span><br><span class="line">        System.out.println(circle1);</span><br><span class="line">        System.out.println(circle2.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-3">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-3">**4.扩展学习部分</h2><h3 id="final-finally-finalize-的区别"><strong>final finally finalize 的区别</strong></h3><ul><li>final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</li><li>finally是异常处理语句结构的一部分，表示总是执行。</li><li>finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</li></ul><p>final：java中的关键字，修饰符。<br>A).如果一个类被声明为final，就意味着它不能再派生出新的子类，不能作为父类被继承。因此，一个类不能同时被声明为abstract抽象类的和final的类。<br>B).如果将变量或者方法声明为final，可以保证它们在使用中不被改变.<br>　　1)被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。<br>　　2)被声明final的方法只能使用，不能重载。<br>finally：java的一种异常处理机制。</p><p>finally是对Java异常处理模型的最佳补充。finally结构使代码总会执行，而不管无异常发生。使用finally可以维护对象的内部状态，并可以清理非内存资源。特别是在关闭数据库连接这方面，如果程序员把数据库连接的close()方法放到finally中，就会大大降低程序出错的几率。</p><p>finalize：Java中的一个方法名。<br>Java技术使用finalize()方法在垃圾收集器将对象从内存中清除出去前，做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没被引用时对这个对象调用的。它是在Object类中定义的，因此所的类都继承了它。子类覆盖finalize()方法以整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的。</p><h2 id="总结-3">总结</h2><p>今天学习学习难度一般，学习难点在多态的练习和向下转型，重写equals和toString方法比较容易。今天只掌握了80%，学习步骤：先看视频，向下转型是有点难度的，又去看了博客，敲了几遍代码，再去理解。今天只学了晚自习，所以今天敲了7个代码左右吧。学习状态良好，晚自习安静，静的下心来打代码。</p><h1 id="4-7单元测试-包装类">4.7单元测试 包装类</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-4">2.今天所学内容摘要**</h2><h3 id="单元测试">单元测试</h3><p>@Test方便自己的测试，不需要再创建一个main测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JUnitTest</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textEquals</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AAAA&quot;</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本数据类型转换为包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span></span></span><br><span class="line"><span class="comment"> * WrapperTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/7 19:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        System.out.println(num.toString());</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(num);</span><br><span class="line">        System.out.println(integer.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(integer2.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Integer integer3 = new Integer(&quot;132abc&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(integer3.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.3f</span>);</span><br><span class="line">        <span class="type">Float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;12.3f&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动装箱自动拆箱">自动装箱自动拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span></span></span><br><span class="line"><span class="comment"> * WrapperTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/7 19:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperTest</span> &#123;</span><br><span class="line">    <span class="comment">//基本数据 -----包装类</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        System.out.println(num.toString());</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(num);</span><br><span class="line">        System.out.println(integer.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(integer2.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Integer integer3 = new Integer(&quot;132abc&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(integer3.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.3f</span>);</span><br><span class="line">        <span class="type">Float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;12.3f&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true123&quot;</span>);<span class="comment">//false 不报错</span></span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***************&quot;</span>);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        System.out.println(order.isFemale);</span><br><span class="line">        System.out.println(order.isMale);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//包装类 -------- 基本数据类型</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">text2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> in1.intValue();</span><br><span class="line">        System.out.println(i1 + <span class="number">85</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">text3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        int num1 = 30;</span></span><br><span class="line"><span class="comment">//        method(num1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动装箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">in2</span> <span class="operator">=</span> num2;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> b1;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拆箱</span></span><br><span class="line">        System.out.println(in2.toString());</span><br><span class="line">        <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> in2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> isMale;</span><br><span class="line">    Boolean isFemale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基本类和包装类对String转换">基本类和包装类对String转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本类型和引用类型转换为String</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">text4</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//方式一连接运算</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> num1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">    <span class="comment">//方式二 调用String的valueOf</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">12.3f</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> String.valueOf(f1);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line"></span><br><span class="line">    <span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">12.4</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(d1);</span><br><span class="line">    System.out.println(str3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-4">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>转什么类型里面要是什么结构的，Integer 里面要是数字才可以转换。我&quot;&quot;里面是一个字符型.</p><p><img src="https://docimg8.docs.qq.com/image/vgMwEHVTZTqbPziofic3vQ.png?w=1432&amp;h=801" alt="img"></p><h2 id="4-扩展学习部分-4">**4.扩展学习部分</h2><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220407195309108.png" alt="image-20220407195309108"></p><h2 id="总结-4">总结</h2><p>今天只学了一个晚自习的时间学习难点在包装类之前的转换写法，后面发现有自动的方法 就简单理解很多,会使用了单元测试 就不用每次写一个main的主程序去测试代码了，很方便。今天掌握了90%，学习步骤：先看视频，，敲了几遍代码，再去理解。今天敲了5个代码左右吧，基本类型 包装类 String转换都会了。今天的学习任务比较轻松。</p><h1 id="4-8面向对象下">4.8面向对象下</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-5">2.今天所学内容摘要**</h2><h3 id="静态static">静态static</h3><p>静态 类.方法调用方法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220408150319709.png" alt="image-20220408150319709"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220408150303257.png" alt="image-20220408150303257"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220408155345136.png" alt="image-20220408155345136"></p><h4 id="静态属性和静态方法的基本使用">静态属性和静态方法的基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">staticTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Chinese.nation = <span class="string">&quot;中国人&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Chinese</span> <span class="variable">chinese1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">        chinese1.name = <span class="string">&quot;汪大东&quot;</span>;</span><br><span class="line">        chinese1.age = <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Chinese</span> <span class="variable">chinese2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">        chinese2.name = <span class="string">&quot;金宝三&quot;</span>;</span><br><span class="line">        chinese2.age = <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Chinese</span> <span class="variable">chinese3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">        chinese3.name = <span class="string">&quot;林丹&quot;</span>;</span><br><span class="line">        chinese3.age = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">        Chinese.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String nation;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个中国人！&quot;</span>);</span><br><span class="line">        <span class="comment">//不能调用非静态结构</span></span><br><span class="line"><span class="comment">//        eat();</span></span><br><span class="line"><span class="comment">//        name = &quot;Tom&quot;;</span></span><br><span class="line">        System.out.println(Chinese.nation);</span><br><span class="line">        walk();</span><br><span class="line">        System.out.println(<span class="string">&quot;nation :　&quot;</span>+ nation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot; age = &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态的使用场景">静态的使用场景</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220408160045147.png" alt="image-20220408160045147"></p><h4 id="练习-2">练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day17;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> circleTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/8 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">circleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;c1 的 id 是 &quot;</span> + c1.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;c2 的 id 是 &quot;</span> + c2.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;c3 的 id 是 &quot;</span> + c3.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;c3 的面积是 : &quot;</span> +c3.findArea());</span><br><span class="line">        System.out.println(<span class="string">&quot;创建圆的个数&quot;</span> + Circle.getTotal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">        id = ++init;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> total; <span class="comment">//记录圆的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">init</span> <span class="operator">=</span> <span class="number">1000</span>; <span class="comment">//static声明的属性被所有对象共有</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%.2f&quot;</span>,Math.PI * radius * radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态练习">静态练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;qwerty&quot;</span>,<span class="number">2000</span>);</span><br><span class="line">        account2.setBalance(<span class="number">500</span>);</span><br><span class="line">        account2.setBalance(<span class="number">0.1</span>);</span><br><span class="line">        Account.setInterestRate(<span class="number">0.035</span>);</span><br><span class="line">        account2.setId(<span class="number">1119</span>);</span><br><span class="line">        account2.setPassword(<span class="string">&quot;sjh0802&quot;</span>);</span><br><span class="line">        System.out.println(account1);</span><br><span class="line">        System.out.println(account2);</span><br><span class="line">        System.out.println(account2.show());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; <span class="comment">//账号</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;000000&quot;</span>; <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance; <span class="comment">//账户余额</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> interestRate;  <span class="comment">//利率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">minMoney</span> <span class="operator">=</span> <span class="number">1.0</span>;  <span class="comment">// 最小余额</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">init</span> <span class="operator">=</span> <span class="number">1001</span>; <span class="comment">// 自动生成id</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;账户 :　&quot;</span>+ getId() + <span class="string">&quot; 账户余额 :　&quot;</span>+ getBalance() + <span class="string">&quot;  利率 : &quot;</span> + getInterestRate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = init++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String password,<span class="type">int</span> balance)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getInterestRate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> interestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改账户为&quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改密码&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setInterestRate</span><span class="params">(<span class="type">double</span> interestRate)</span> &#123;</span><br><span class="line">        Account.interestRate = interestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (balance &gt;= minMoney) &#123;</span><br><span class="line">            <span class="built_in">this</span>.balance += balance;</span><br><span class="line">            System.out.println(<span class="string">&quot;存钱成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;最小余额是:　&quot;</span>+ minMoney + <span class="string">&quot;---------请重新输入!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, balance=&quot;</span> + balance +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类变量-静态变量内存解析">类变量 静态变量内存解析</h3><p>静态属性共用，对象修改会变</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220408151153196.png" alt="image-20220408151153196"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-5">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-5">**4.扩展学习部分</h2><h3 id="成绩计算">成绩计算</h3><p>Vector变化数组使用 包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1.实例化Scanner 键盘获取成绩</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.实例化Vector对象 相当于长度可变的数组 Vector v = new vector();</span></span><br><span class="line">        Vector&lt;Integer&gt; v  = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.循环的方式 给Vector中添加数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生的成绩 （负数结束)&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (score &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;结束输入.............&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.2当输入负数跳出循环</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入数据非法重新输入&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//3.1添加操作 v.addElement(Object obj)</span></span><br><span class="line">                v.addElement(score);</span><br><span class="line">                <span class="comment">//4.获取成绩最大值</span></span><br><span class="line">                <span class="keyword">if</span> (score &gt;= maxNum) &#123;</span><br><span class="line">                    maxNum = score;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.遍历Vector 得到每个学生的成绩，并与最大成绩比较，得到每个学生的等级。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; v.size();i++)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> v.elementAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score1</span> <span class="operator">=</span> (<span class="type">int</span>) object;</span><br><span class="line">            String level;</span><br><span class="line">            <span class="keyword">if</span> (maxNum-<span class="number">10</span> &lt;= score1)&#123;</span><br><span class="line">                level = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (maxNum-<span class="number">20</span> &lt;= score1)&#123;</span><br><span class="line">                level = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>  <span class="keyword">if</span> (maxNum-<span class="number">30</span> &lt;= score1)&#123;</span><br><span class="line">                level = <span class="string">&quot;C&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                level = <span class="string">&quot;D&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Student &quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;  score is &quot;</span> + score1 + <span class="string">&quot;, level : &quot;</span> + level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-5">总结</h2><p>今天主要是开始了面向对象下的内容，学习了静态。今天是学的一下午的时间，将所有静态的知识看完了，还是蛮容易理解的，静态变量内存搞懂，静态这方面就没什么问题了，学习状态还不错。</p><h1 id="4-10单例设计模式">4.10单例设计模式</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-6">2.今天所学内容摘要**</h2><h3 id="单例设计模式">单例设计模式</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220409110845965.png" alt="image-20220409110845965"></p><h4 id="优点">优点</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220409120534141.png" alt="image-20220409120534141"></p><h4 id="懒汉式VS饿汉式">懒汉式VS饿汉式</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220409120157206.png" alt="image-20220409120157206"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank1</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank2</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        System.out.println(bank1 == bank2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.创建类的对象</span></span><br><span class="line">    <span class="comment">//要求此对象也必须是静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供公共的方法，返回类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> Order.getInstance();</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> Order.getInstance();</span><br><span class="line">        System.out.println(order1 == order2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Order</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明当前类的对象 没有初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Order</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明 返回当前类的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span>  <span class="title class_">Order</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码块">代码块</h3><p>“不太常用”</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220409130209685.png" alt="image-20220409130209685"></p><p>代码块优先级高</p><p>先于构造器</p><p>由父及子，静态先行</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220409133905281.png" alt="image-20220409133905281"></p><p>属性赋值</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220409134328636.png" alt="image-20220409134328636"></p><h3 id="final方法">final方法</h3><p>比较简单</p><p>被final修饰的类不可以被继承；<br>被final修饰的方法不可以被重写；<br>被final修饰的变量不可以改变，是常量</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220410192243094.png" alt="image-20220410192243094"></p><h3 id="abstract抽象类的使用">abstract抽象类的使用</h3><p>自己理解的抽象类 修饰类和方法和结构</p><p>但是不能实例化，所以需要子类继承它，然后子类必须要重写父类抽象类的方法，否则就会报错。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220410193622984.png" alt="image-20220410193622984"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王小明&quot;</span>,<span class="number">28</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Creature</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Creature</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生要吃有营养的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生应该呼吸新鲜空气&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态的应用：抽象类</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220410230723936.png" alt="image-20220410230723936"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-6">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-6">**4.扩展学习部分</h2><p>抽象类练习</p><p>测试代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayrollSystem</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//        Scanner input = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;请输入当前月份: &quot;);</span></span><br><span class="line"><span class="comment">//        int month2 = input.nextInt();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二 输入月份</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH);</span><br><span class="line">        System.out.println(<span class="string">&quot;这个月是&quot;</span>+(month+<span class="number">1</span>) +<span class="string">&quot;月&quot;</span>);</span><br><span class="line">        Employee[] employees = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">3</span>];</span><br><span class="line">        employees[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">SalariedEmployee</span>(<span class="string">&quot;汪大东&quot;</span>,<span class="number">1001</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1991</span>,<span class="number">8</span>,<span class="number">2</span>),<span class="number">10000</span>);</span><br><span class="line">        employees[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">HourlyEmployee</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">1002</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1988</span>,<span class="number">11</span>,<span class="number">19</span>),<span class="number">24</span>,<span class="number">240</span>);</span><br><span class="line">        employees[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">HourlyEmployee</span>(<span class="string">&quot;辜战&quot;</span>,<span class="number">1003</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2002</span>,<span class="number">4</span>,<span class="number">22</span>),<span class="number">30</span>,<span class="number">240</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">            <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> employee.earning();</span><br><span class="line">            <span class="comment">//month+1才是当月</span></span><br><span class="line">            <span class="keyword">if</span> ((month + <span class="number">1</span>) == employee.getBirthday().getMonth()) &#123;</span><br><span class="line">                System.out.println(employee.getName()+<span class="string">&quot;生日快乐! 奖励100元&quot;</span>);</span><br><span class="line">                money += <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;工资是&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220411090537334.png" alt="image-20220411090537334"></p><h2 id="总结-6">总结</h2><p>周天早上在图书馆学习的，晚自习在工作室，今天学习的内容比较多，单例 代码块 final abstract这些java的使用，学习状态不错，边看视频，边敲代码，对于代码块和final不太常用的东西，敲两边理解了就过了，重要的都敲了6 7 遍的代码，实践出真章，在abstract中在最后一个比较大的练习，才理解真正的用法，和适用场景，真的就是编程学习是在敲代码中成长的。</p><h1 id="4-11结构-成员内部">4.11结构 成员内部</h1><h2 id="1-头：日期、所学内容出处-7">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-7">2.今天所学内容摘要**</h2><h3 id="接口">接口</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220411094009819.png" alt="image-20220411094009819"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220411093858342.png" alt="image-20220411093858342"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Flyable.MAX_SPEED);</span><br><span class="line">        System.out.println(Flyable.min_speed);</span><br><span class="line"><span class="comment">//        min_speed += 2; //静态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line">    <span class="comment">//全局常量</span></span><br><span class="line">    <span class="comment">//接口默认全局常量 static final</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SPEED</span> <span class="operator">=</span> <span class="number">7900</span>; <span class="comment">//第一宇宙速度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">min_speed</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//省略了 public abstract</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口不能定义构造器 接口不可以实例化</span></span><br><span class="line">    <span class="comment">//    public Flyable()&#123;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">attackAble</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">plane</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">plane</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞机起飞&quot;</span>);</span><br><span class="line">        System.out.println(MAX_SPEED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;驾驶员减速停机&quot;</span>);</span><br><span class="line">        System.out.println(min_speed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">boeing</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;波音747飞的快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span> <span class="keyword">extends</span> <span class="title class_">plane</span> <span class="keyword">implements</span> <span class="title class_">CC</span>,Flyable,attackAble&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ***************************************</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BB</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">AA</span>,BB&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的4种实现类">接口的4种实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">USBTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">computer</span>();</span><br><span class="line">        <span class="comment">//1.创建了非匿名实现类的非匿名对象</span></span><br><span class="line">        <span class="type">Flash</span> <span class="variable">flash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flash</span>();</span><br><span class="line">        computer.transferData(flash);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建了非匿名实现类的匿名对象</span></span><br><span class="line">        computer.transferData(<span class="keyword">new</span> <span class="title class_">Flash</span>());</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line">        <span class="comment">//3.创建了匿名实现类的非匿名对象</span></span><br><span class="line">        <span class="type">USB</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">USB</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机结束工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        computer.transferData(phone);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line">        <span class="comment">//4.创建了匿名实现类的匿名对象</span></span><br><span class="line">        computer.transferData(<span class="keyword">new</span> <span class="title class_">USB</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mp3工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mp3结束工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">computer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferData</span><span class="params">(USB usb)</span>&#123;</span><br><span class="line">        usb.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;传输中--------------&quot;</span>);</span><br><span class="line">        usb.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">    <span class="comment">//常量:定义了长宽最大最小的传输速度等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flash</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘开始工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘结束工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开始工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机停止工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220413192220484.png" alt="image-20220413192220484"></p><h4 id="接口练习">接口练习</h4><p>比较对象大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day18.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CompareObject</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span>; <span class="comment">//若返回值是0 代表相等 若正数 代表当前对象大 负数代表当前对象小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">comparableCircleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">comparableCircle</span> <span class="variable">comparableCircle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">comparableCircle</span>(<span class="number">1.9</span>);</span><br><span class="line">        <span class="type">comparableCircle</span> <span class="variable">comparableCircle2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">comparableCircle</span>(<span class="number">8.2</span>);</span><br><span class="line">        <span class="type">comparableCircle</span> <span class="variable">comparableCircle3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">comparableCircle</span>(<span class="number">8.2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> comparableCircle1.compareTo(comparableCircle2);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;一样大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前面大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;后面大&quot;</span>);</span><br><span class="line">        <span class="comment">//******************************</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> comparableCircle3.compareTo(comparableCircle2);</span><br><span class="line">        <span class="keyword">if</span> (num1 == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;一样大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (num1 &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前面大&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;后面大&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">comparableCircle</span> <span class="keyword">extends</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">CompareObject</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">comparableCircle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">comparableCircle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(radius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>  == o)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> comparableCircle)&#123;</span><br><span class="line">            <span class="type">comparableCircle</span> <span class="variable">obj</span> <span class="operator">=</span> (comparableCircle) o;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(<span class="built_in">this</span>.getRadius(), obj.getRadius());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">12138</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java8-0接口新特性">java8.0接口新特性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day18.java4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SubClassTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/11 18:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SubClass</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line"><span class="comment">//        s.method1();</span></span><br><span class="line">        <span class="comment">//1.接口的静态方法 只能接口来调用</span></span><br><span class="line">        CompareA.method1();</span><br><span class="line">        <span class="comment">//通过实现类的对象可以调用接口中的默认方法</span></span><br><span class="line">        <span class="comment">//2.如果实现类重写了接口中的默认方法，调用时，任然钓鱼用的是重写以后的方法。</span></span><br><span class="line">        s.method2();</span><br><span class="line">        <span class="comment">// 3.如果子类或实现类继承的父类和实现的接口中声明了同名同参数的方法</span></span><br><span class="line">        <span class="comment">//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法 --&gt;类优先原则</span></span><br><span class="line">        <span class="comment">// 4.如果实习类实现了多个接口 而这多个接口中定义了同名同参数的默认方法</span></span><br><span class="line">        <span class="comment">//如果实现了没有重写此方法的情况下，报错--接口冲突</span></span><br><span class="line">        <span class="comment">// 我们必须在实现类重写此方法</span></span><br><span class="line"></span><br><span class="line">        s.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span>  <span class="keyword">extends</span> <span class="title class_">SuperClass</span> <span class="keyword">implements</span> <span class="title class_">CompareA</span>,CompareB&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;subclass 上海&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;subclass 深圳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.在子类中调用接口中重写过的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>&#123;</span><br><span class="line">            method3(); <span class="comment">//调用自己的方法</span></span><br><span class="line">            <span class="built_in">super</span>.method3();<span class="comment">//调用父类的方法</span></span><br><span class="line">        <span class="comment">//调用接口中的默认方法</span></span><br><span class="line">        CompareA.<span class="built_in">super</span>.method3();</span><br><span class="line">        CompareB.<span class="built_in">super</span>.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类">内部类</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220411195232603.png" alt="image-20220411195232603"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-7">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-7">**4.扩展学习部分</h2><h3 id="static-final-abstract总结">static final abstract总结</h3><p>static 通过对象调用静态方法</p><p><strong>一句话概述：final修饰的东西不能被修改，不能被继承。</strong></p><p><strong>一句话概述：抽象类的目的就是为了让其子类实现它本身的方法！</strong></p><p>抽象的使用前提 ： 继承性</p><p><a href="https://blog.csdn.net/xieyunc/article/details/102643543?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164972197816780271911803%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164972197816780271911803&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102643543.142">https://blog.csdn.net/xieyunc/article/details/102643543?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164972197816780271911803%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164972197816780271911803&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-102643543.142</a></p><h2 id="总结-7">总结</h2><p>今天学习了一个上午的时间，将java面对象的最后一些内容-----接口 通关了，知道了接口的使用，并做了几个小练习，还是比较容易理解的，java中的接口主要是弥补java只有单继承的局限性的，还是很适用的，今天的学习状态不错，学的内容也很充实。</p><h1 id="4-12-异常处理">4.12 异常处理</h1><h2 id="1-头：日期、所学内容出处-8">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-8">2.今天所学内容摘要**</h2><h3 id="异常">异常</h3><p>Exception比较重要</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412085726084.png" alt="image-20220412085726084"></p><h4 id="常见的异常">常见的异常</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412091454828.png" alt="image-20220412091454828"></p><p>常见的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest</span> &#123;</span><br><span class="line">    <span class="comment">//编译时报错</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        File file = new File(&quot;hello.txt&quot;);</span></span><br><span class="line"><span class="comment">//        FileInputStream fileInputStream  = new FileInputStream(file);</span></span><br><span class="line"><span class="comment">//        int data = fileInputStream.read();</span></span><br><span class="line"><span class="comment">//        while (data != -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println((char) data);</span></span><br><span class="line"><span class="comment">//            data = fileInputStream.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        fileInputStream.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//**************************</span></span><br><span class="line">    <span class="comment">//下面是运行时报错</span></span><br><span class="line">    <span class="comment">//ArithmeticException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(a/b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//InputMismatchException 输入不匹配</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NullPointerException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123s&quot;</span>;</span><br><span class="line">        Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ClassCastException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NullPointerException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常的处理">异常的处理</h4><p>分为抓和抛</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412100852150.png" alt="image-20220412100852150"></p><h4 id="try-catch-finally的使用">try - catch - finally的使用</h4><p>注意：编译时候异常 try就是改成运行时异常</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412101029282.png" alt="image-20220412101029282"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> fileInputStream.read();</span><br><span class="line">            <span class="keyword">while</span> (data != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="type">char</span>) data);</span><br><span class="line">                data = fileInputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123s&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            num = Integer.parseInt(str);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现数值转换异常了 不要着急.....&quot;</span>);</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现空指针异常了 不要着急.......&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally哪里都U我&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello------1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="说明">说明</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412104234672.png" alt="image-20220412104234672"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA\\src\\day19\\java2\\hello.txt&quot;</span>);</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> fileInputStream.read();</span><br><span class="line">            <span class="keyword">while</span> (data != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">                data = fileInputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>)&#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>体会</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412132923317.png" alt="image-20220412132923317"></p><h3 id="throws">throws</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412135620351.png" alt="image-20220412135620351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day19.java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">            e.getCause();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> fileInputStream.read();</span><br><span class="line">        <span class="keyword">while</span> (data != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            data = fileInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动抛出异常对象">手动抛出异常对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day19.java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            student.regist(-<span class="number">1001</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="number">1000</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;您输入的数据非法啦(要大于1000)&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412143804563.png" alt="image-20220412143804563"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-8">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>创建了文件，但是还是一直报错，改了很多次还是报错，在main里面也试过也报错<br>上csdn有人说要绝对路径 就加上了 &quot;D:\CC\IDEA\src\day19\java2\hello&quot;运行才成功<br>后面又尝试将txt直接放到IDEA下面也成功了，应该是src里面的文件是需要写绝对路径的，放IDEA写相对路径就OK</p><p><img src="https://docimg9.docs.qq.com/image/5eN0lLyMe97u7HkH1hD6Aw.png?w=1228&amp;h=1017" alt="img"></p><p><img src="https://docimg9.docs.qq.com/image/Ko6f4p4x7u2LL5CXStDywA.png?w=1006&amp;h=587" alt="img"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412133133116.png" alt="image-20220412133133116"></p><h3 id="综合练习">综合练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day19.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EcmDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            Scanner input = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//            int i = input.nextInt();</span></span><br><span class="line"><span class="comment">//            int j = input.nextInt();</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> ecm(i,j);</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类型不一致&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;缺少命令行参数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不能输入非0数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (EcDef e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ecm</span><span class="params">(<span class="type">int</span> i , <span class="type">int</span> j)</span> <span class="keyword">throws</span> EcDef &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EcDef</span>(<span class="string">&quot;您输入的值有负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i / j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EcDef</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EcDef</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EcDef</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扩展学习部分-8">**4.扩展学习部分</h2><p>IDEA给main中args赋值</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220412153500828.png" alt="image-20220412153500828"></p><p><a href="https://blog.csdn.net/Ye_mulin/article/details/104561301?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164974865416782094898594%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164974865416782094898594&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-104561301.142">https://blog.csdn.net/Ye_mulin/article/details/104561301?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164974865416782094898594%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164974865416782094898594&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-104561301.142</a></p><h3 id="自动处理异常">自动处理异常</h3><p>ALT + enter</p><h3 id="文件打印">文件打印</h3><p>应该是通过ascii码打印的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinallyTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA\\src\\day19\\java2\\hello.txt&quot;</span>);</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> fileInputStream.read();</span><br><span class="line">            <span class="keyword">while</span> (data != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">                data = fileInputStream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>)&#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法重写的规则">方法重写的规则</h3><p>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day19.java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> OverrideTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/12 14:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverrideTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OverrideTest</span> <span class="variable">overrideTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverrideTest</span>();</span><br><span class="line">        overrideTest.display(<span class="keyword">new</span> <span class="title class_">SubClass</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(SuperClass s)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-8">总结</h2><p>根据视频的进度马上到java高级了，所以今天有干劲，把异常学习完了，基础部分也结束了，先复习了这段时间的学习内容，结束了java的面向对象，看博客理解关键字的区别和适用场景等，然后再进入异常的学习，多敲代码，异常好理解，代码熟练就好了,python中也有异常处理的方法，学java的时候也是顺水推舟，比较容易理解，今天也彻底明白了为什么java是面向对象的语言，所有的都逃不开面向对象，看源代码都是面向对象，继承什么的，今天学习状态不错，代码敲的比较多。</p><h1 id="4-13-对接口和抽象类的理解">4.13 对接口和抽象类的理解</h1><h2 id="1-头：日期、所学内容出处-9">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-9">2.今天所学内容摘要**</h2><h3 id="抽象类-abstract"><strong>抽象类(abstract )</strong></h3><p><strong>子类继承必须要重写该方法</strong></p><p>1、定义抽象类和抽象方法使用的关键字是“abstract&quot;</p><p>2、抽象类被叫做一个不完整的类因为它有自己的构造方法，但是却不能直接实例化对象，他的抽象方法没有方法体。</p><p>3、如果子类不是一个抽象类那么必须覆写父类的所有抽象方法</p><h3 id="接口（interface）">接口（<strong>interface</strong>）</h3><p>从这个两个网站加入自己的理解</p><p><a href="https://blog.csdn.net/wei_zhi/article/details/52738471">https://blog.csdn.net/wei_zhi/article/details/52738471</a></p><p><a href="https://blog.csdn.net/sun_shine56/article/details/86621481?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164984761616782248510008%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164984761616782248510008&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-86621481.142">https://blog.csdn.net/sun_shine56/article/details/86621481?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164984761616782248510008%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164984761616782248510008&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-86621481.142</a></p><p>有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</p><p><strong>接口是抽象方法   和常量值的定义的集合。</strong></p><p>从本质上讲，接口只包含常量和方法的定义，而没有变量和方法的实现。</p><p>由于接口里面存在抽象方法，所以接口对象不能直接使用关键字new进行实例化。接口的使用原则如下：<br>（1）接口必须要有子类，但此时一个子类可以使用implements关键字实现多个接口；<br>（2）接口的子类（如果不是抽象类），那么必须要覆写接口中的全部抽象方法；<br>（3）接口的对象可以利用子类对象的向上转型进行实例化。</p><p>在Java中，一个抽象类只能继承一个抽象类，但一个接口却可以使用extends关键字同时继承多个接口（但接口不能继承抽象类）。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">funA</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">funB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//C接口同时继承了A和B两个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>,B&#123;<span class="comment">//使用的是extends</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">funC</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">implements</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">funA</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">funB</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">funC</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见，从继承关系来说接口的限制比抽象类少：<br>（1）一个抽象类只能继承一个抽象父类，而接口可以继承多个接口；<br>（2）一个子类只能继承一个抽象类，却可以实现多个接口（在Java中，接口的主要功能是解决单继承局限问题）</p><h4 id="接口的特点：">接口的特点：</h4><p>1.用 interface 来定义。</p><p>2.接口中的所有成员变量都默认是由public static final修饰的。</p><p>3.接口中的所有方法都默认是由public abstract修饰的。</p><p>4.接口没有构造方法。构造方法用于创建对象</p><p>5.实现接口的类中必须提供接口中所有方法的具体实现内容。</p><p>6.多个无关的类可以实现同一个接口</p><p>7.一个类可以实现多个无关的接口</p><p>8.与继承关系类似，接口与实现类之间存在多态性</p><p><strong>9.接口也可以继承另一个接口，使用extends关键字。</strong></p><p>10.实现接口的类中必须提供接口中所有方法的具体实现内容。</p><p>11.多个无关的类可以实现同一个接口</p><p>12.一个类可以实现多个无关的接口</p><p>13.与继承关系类似，接口与实现类之间存在多态性</p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-9">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-9">**4.扩展学习部分</h2><h3 id="抽象类和接口的异同">抽象类和接口的异同</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220413192337165.png" alt="image-20220413192337165"></p><h3 id="面试题">面试题:</h3><p>1、抽象类中可以没有抽象方法吗?</p><p>答:可以的</p><p>2、如抽象类没有抽象方法，那么可以直接实例化对象吗?</p><p>答:不可以，因为没有抽象方法它依然是-一个抽象类</p><p>3、抽象类的方法必须被子类覆写吗?</p><p>答:不一定，如果子类是一个普通类则必须全部覆写，如果子类是一个抽象类则不强制要求全部覆写父类的抽象方法。</p><p>5、抽象类中的抽象方法的abstract关键字可以被省略吗?</p><p>答:不可以(但是在后面的接口中可以省略)</p><h2 id="总结-9">总结</h2><p>今天只学了晚自习，这星期学习的内容量有点大，所以想自己抽个空把内容梳理一下，今天把比较容易搞混的，抽象类和接口这两个比较难理解和以后比较常用的两个重点复习了一下，结合博客和自己的理解，将内容梳理了一下，然后看了一下项目三的软件架构和实例演示，今天主要是当这段时间的缓冲，明天把项目三完成，进入java的第二阶段。</p><h1 id="4-15-对接口和抽象类的理解">4.15 对接口和抽象类的理解</h1><h2 id="1-头：日期、所学内容出处-10">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-10">2.今天所学内容摘要**</h2><p>做了项目三的基本类</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220418093242079.png" alt="image-20220418093242079"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-10">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-10">**4.扩展学习部分</h2><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220418093329135.png" alt="image-20220418093329135"></p><h3 id="动物类">动物类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day20;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;橘黄色&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        cat.Myself();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;黑色&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        dog.Myself();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String hair;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String hair, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hair = hair;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHair</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hair;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自我介绍</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Myself</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String hair, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(hair, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Myself</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是猫,我的毛发是&quot;</span> + getHair() + <span class="string">&quot;   我今年&quot;</span> + getAge()+ <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String hair, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(hair, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Myself</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是狗,我的毛发是&quot;</span> + getHair() + <span class="string">&quot;   我今年&quot;</span> + getAge() + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="形状">形状</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day20;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1:球型 2：正方形 3.长方形 4.圆柱形&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你要计算的图形类型：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//创建一个球类</span></span><br><span class="line">                <span class="type">Sphere</span> <span class="variable">sphere</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sphere</span>();</span><br><span class="line">                sphere.input();</span><br><span class="line">                System.out.println(sphere.display());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">//创建一个正方体</span></span><br><span class="line">                <span class="type">Square</span> <span class="variable">square</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">                square.input();</span><br><span class="line">                System.out.println(square.display());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">//创建一个长方体</span></span><br><span class="line">                <span class="type">Cuboid</span> <span class="variable">cuboid</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cuboid</span>();</span><br><span class="line">                cuboid.input();</span><br><span class="line">                System.out.println(cuboid.display());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="comment">//创建一个圆柱体</span></span><br><span class="line">                <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">                circle.input();</span><br><span class="line">                System.out.println(circle.display());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入错误，重新输入&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//形状抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">shape</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">input</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> String  <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">volume</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//球类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sphere</span> <span class="keyword">extends</span> <span class="title class_">shape</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入球的半径&quot;</span>);</span><br><span class="line">        radius = scanner.nextDouble();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;球形&quot;</span> + <span class="string">&quot;的表面积是:&quot;</span> + area() + <span class="string">&quot;,体积是:&quot;</span> + volume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>*Math.PI*radius*radius;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">volume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>*Math.PI*radius*radius*radius/<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正方类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">shape</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sideLength;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入正方形的边长&quot;</span>);</span><br><span class="line">        sideLength = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;正方形&quot;</span>+ <span class="string">&quot;的表面积是:&quot;</span> + area() + <span class="string">&quot;,体积是:&quot;</span> + volume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sideLength*sideLength * <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">volume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> area()*sideLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长方体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cuboid</span> <span class="keyword">extends</span> <span class="title class_">shape</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width; <span class="comment">//宽</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length; <span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> highly; <span class="comment">//高度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入长方形的长度&quot;</span>);</span><br><span class="line">        length = scanner.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入长方形的宽度&quot;</span>);</span><br><span class="line">        width = scanner.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入长方形的高度&quot;</span>);</span><br><span class="line">        highly = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;长方形&quot;</span>+ <span class="string">&quot;的表面积是:&quot;</span> + area() + <span class="string">&quot;,体积是:&quot;</span> + volume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length*width *<span class="number">2</span> + length * highly*<span class="number">2</span> + highly * width * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">volume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length * width * highly;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//圆柱类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">shape</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> highly;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入圆柱的半径&quot;</span>);</span><br><span class="line">        radius = scanner.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入圆柱的高度&quot;</span>);</span><br><span class="line">        highly = scanner.nextDouble();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;圆柱体&quot;</span>+ <span class="string">&quot;的表面积是:&quot;</span> + area() + <span class="string">&quot;,体积是:&quot;</span> + volume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*Math.PI*radius*radius + <span class="number">2</span> * Math.PI * radius * highly;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">volume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI *radius *radius *highly;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220418095222014.png" alt="image-20220418095222014"></p><h3 id="车类">车类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day20;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Test3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/15 17:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奔驰&quot;</span>,<span class="string">&quot;黑色&quot;</span>,<span class="number">4</span>,<span class="number">5000</span>,<span class="number">5</span>);</span><br><span class="line">        car.run();</span><br><span class="line">        car.showCar();</span><br><span class="line">        <span class="type">Truck</span> <span class="variable">truck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Truck</span>(<span class="string">&quot;本田&quot;</span>,<span class="string">&quot;红色&quot;</span>,<span class="number">8</span>,<span class="number">300000</span>,<span class="number">200000</span>);</span><br><span class="line">        truck.run();</span><br><span class="line">        truck.showTruck();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicles</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 商标</span></span><br><span class="line">    <span class="keyword">private</span> String color; <span class="comment">// 颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> wheelsNum; <span class="comment">// 轮子个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> wheelsWight; <span class="comment">// 轮子重量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Vehicles</span><span class="params">(String brand, String color, <span class="type">int</span> wheelsNum, <span class="type">double</span> wheelsWight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.wheelsNum = wheelsNum;</span><br><span class="line">        <span class="built_in">this</span>.wheelsWight = wheelsWight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我已经开动啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, wheelsNum=&quot;</span> + wheelsNum +</span><br><span class="line">                <span class="string">&quot;, wheelsWight=&quot;</span> + wheelsWight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_">Vehicles</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seats; <span class="comment">// 座位个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String brand, String color, <span class="type">int</span> wheelsNum, <span class="type">double</span> wheelsWight,<span class="type">int</span> seats)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand, color, wheelsNum, wheelsWight);</span><br><span class="line">        <span class="built_in">this</span>.seats = seats;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showCar</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>   <span class="string">&quot;Car&#123; &quot;</span> +<span class="built_in">super</span>.toString() +</span><br><span class="line">                <span class="string">&quot;seats=&quot;</span> + seats +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Truck</span> <span class="keyword">extends</span> <span class="title class_">Vehicles</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> load; <span class="comment">// 载重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Truck</span><span class="params">(String brand, String color, <span class="type">int</span> wheelsNum, <span class="type">double</span> wheelsWight,<span class="type">int</span> load)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand, color, wheelsNum, wheelsWight);</span><br><span class="line">        <span class="built_in">this</span>.load = load;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTruck</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>   <span class="string">&quot;Truck&#123;&quot;</span> + <span class="built_in">super</span>.toString() +</span><br><span class="line">                <span class="string">&quot;load=&quot;</span> + load +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220418094052455.png" alt="image-20220418094052455"></p><h2 id="总结-10">总结</h2><p>下午学习了40分钟左右，由赖琳同学和王静老师讲接口和抽象类，王静老师提问问题，一些问题专业名词，在java中不一样，一下子回答不上来，知道作用就知道是什么了，老师问了些陷阱的问题，对多态对抽象类，也告诉我们演讲应该怎么演讲，出了一些抽象类的题目，告知我们代码能力的重要性。这样讨论下来，知道了未来的学习步骤，变得系统化高效。</p><h1 id="4-18-4-19项目三完成">4.18 - 4.19项目三完成</h1><h2 id="1-头：日期、所学内容出处-11">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题">2.标题</h2><h3 id="项目三开发团队调度软件">项目三开发团队调度软件</h3><p>IDEA的基本使用</p><h2 id="3-所学内容概述">3.所学内容概述</h2><p>项目三</p><p>IDEA</p><p>考察的东西很多(基础向)：多态、封装、继承等都有体现、以及基本语法和数组的使用，异常处理等知识点。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220420123909423.png" alt="image-20220420123909423"></p><h2 id="4、根据概述分章节描述">4、根据概述分章节描述</h2><p>内容分为4个包，domain基本是程序中的信息，service中是信息数组，view中一个工具类，一个主程序main。</p><p>domain的包比较简单，基本利用抽象类，重写方法就行。service中就用到的对象数组和多态比较多，调用其他类中的对象信息，比较麻烦，容易搞混，主程序main也比较简单基本用是switch就好。根据选择调用不同的对象的方法就好。</p><h2 id="5-章节内容-难点">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="章节内容"><strong>章节内容</strong></h3><p>重点：项目三的完成</p><p>IDEA的基本使用</p><h3 id="难点"><strong>难点</strong></h3><p>对团队添加成员的操作</p><p>用到了强转和多次的异常处理equals的用法等</p><p>类创造的对象 对象的继承点 调用的属性容易搞混，单词不太熟悉，来回翻看，英语单词很重要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMember</span><span class="params">(Employee e)</span> <span class="keyword">throws</span> TeamException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        成员已经满了 无法添加</span></span><br><span class="line">        <span class="keyword">if</span> (total &gt;= MAX_MEMBER)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;成员已满，无法添加&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        该成员不是开放人员 无法添加</span></span><br><span class="line">        <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> programmer))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;该成员不是开放人员，无法添加&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        该员工已经在本开发团队</span></span><br><span class="line">        <span class="keyword">if</span> (isExist(e))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;该员工已经在本开发团队&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        该员工已经是某团队成员</span></span><br><span class="line">        <span class="type">programmer</span> <span class="variable">p</span> <span class="operator">=</span> (programmer) e;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;BUSY&quot;</span>.equals(p.getStatus().getNAME())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;该员工已经是某团队的成员&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//        该员工正在休假</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;VOCATION&quot;</span>.equals(p.getStatus().getNAME()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;该员工正在休假&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取团队中已经有的程序员 设计师 架构师 的数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">programmerNum</span> <span class="operator">=</span> <span class="number">0</span>,designerNum = <span class="number">0</span>,architectNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//架构师</span></span><br><span class="line">        <span class="keyword">for</span> (programmer teams : team)&#123;</span><br><span class="line">            <span class="keyword">if</span> (teams <span class="keyword">instanceof</span> Architect)&#123;</span><br><span class="line">                architectNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (teams <span class="keyword">instanceof</span> Designer)&#123;</span><br><span class="line">                designerNum++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(teams != <span class="literal">null</span>)&#123;</span><br><span class="line">                programmerNum++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        团队至多只能有一名架构师</span></span><br><span class="line">        <span class="comment">//        团队至多只能有两名设计师</span></span><br><span class="line">        <span class="comment">//        团队至多只能有三名程序员</span></span><br><span class="line">        <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Architect)&#123;</span><br><span class="line">            <span class="keyword">if</span> (architectNum &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;团队至多只能有一名架构师&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Designer)&#123;</span><br><span class="line">            <span class="keyword">if</span> (designerNum &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;团队至多只能有两名设计师&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (programmerNum &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TeamException</span>(<span class="string">&quot;团队至多只能有三名程序员&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 属性修改赋值</span></span><br><span class="line"></span><br><span class="line">        p.setStatus(Status.BUSY); <span class="comment">//工作状态</span></span><br><span class="line">        p.setMemberId(counter++); <span class="comment">//团队ID</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将e添加在现有的team中</span></span><br><span class="line">        team[total++] = p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的BUG"><strong>遇到的BUG</strong></h3><p>自己写添加用户成员这里的时候，一直报错，看报错的异常，添加失败，寻找源头，addMember中有一个isExist这里的问题，和老师的代码对应，发现是自己的对对象数组的遍历有些许不一样，修改后成功了，我想原因是在团队成员中从来没有对象的时候，遍历的时候是空指针，所有会报错，没有正常的处理方式.</p><p><img src="https://docimg3.docs.qq.com/image/orhGhw3hjF3hFR9aAa_D3g.png?w=954&amp;h=982" alt="img"></p><p><img src="https://docimg2.docs.qq.com/image/N2cckENY63ucRlY_ka3NoA.png?w=660&amp;h=300" alt="img"></p><h2 id="6-扩展学习部分">6.扩展学习部分</h2><h3 id="无">无</h3><h2 id="7-总结">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点。</p><p>今天早上把项目三复习巩固了一下，试着自己敲出来，结果还是有点难度的，有些调用类的时候，尤其是在添加成员和查看团队成员的时候，搞不清楚，不太好掌握，考察的东西很多(基础向)：多态、封装、继承等都有体现、以及基本语法和数组的使用，异常处理等知识点，明天可以再尝试一下，下午学习了系统学习了IDEA使用，一直再用IDEA随便过过就好了。</p><h1 id="4-21-多线程">4.21 多线程</h1><h2 id="1-头：日期、所学内容出处-12">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-2">2.标题</h2><h3 id="多线程">多线程</h3><h2 id="3-所学内容概述-2">3.所学内容概述</h2><p>多线程-章节概述_程序进程线程的概念<br>多线程-单核与多核CPU的任务执行_并行与并发<br>多线程-多线程的优点等<br>多线程-创建多线程方式一：继承Thread类<br>多线程-创建过程中两个问题的说明<br>多线程-继承方式的课后练习<br>多线程-线程的常用方法</p><h2 id="4、根据概述分章节描述-2">4、根据概述分章节描述</h2><h3 id="程序进程线程的概念">程序进程线程的概念</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220421135821845.png" alt="image-20220421135821845"></p><p>优点：和所有语言一样</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220422081331907.png" alt="image-20220422081331907"></p><p>多线程中的常用方法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220421171515081.png" alt="image-20220421171515081"></p><p>代码演示</p><p><strong>过程中出现了点小问题，isAlive方法刚开始在start前面，执行出来是false 放到 start后面就是正常的true线程存在</strong></p><p>isAlive() 方法的作用是判断当前的线程是否处于活动状态。什么是活动状态呢？活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为线程是“存活”的。</p><h2 id="5-章节内容-难点-2">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="重点">重点</h3><p>10常用方法的使用</p><p>难点 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">HelloThread1</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloThread1</span>(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line"><span class="comment">//        h1.setName(&quot;Hello1&quot;);</span></span><br><span class="line">        System.out.println(h1.isAlive());</span><br><span class="line"></span><br><span class="line">        h1.start();</span><br><span class="line">        System.out.println(h1.isAlive());</span><br><span class="line"></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  :　　&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            if (i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    h1.join();</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloThread1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  :　　&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            if (i % 20 == 0)&#123;</span></span><br><span class="line"><span class="comment">//                yield();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BUG-失误">BUG(失误)</h3><p>过程中出现了点小问题，isAlive方法刚开始在start前面，执行出来是false 放到 start后面就是正常的true线程存在</p><p>isAlice方法在实行线程时候和没执行结果不同</p><p>isAlive() 方法的作用是判断当前的线程是否处于活动状态。什么是活动状态呢？活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为线程是“存活”的。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220422081450814.png" alt="image-20220422081450814"></p><h2 id="6-扩展学习部分-2">6.扩展学习部分</h2><h3 id="交替执行">交替执行</h3><p>失败</p><p>突发奇想 想两个线程交替执行 ，上面线程打印完一个下面打印一个再上面，利用所学知识，想用时间差，进行一个完成，结果失败，应该是线程处理时候，的时间差不足，线程同时执行，完成的时间也不是固定的，才会失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day21;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> subjectTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/22 8:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">subjectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">test1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test1</span>(<span class="string">&quot;偶线程&quot;</span>);</span><br><span class="line">        <span class="type">test2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test2</span>(<span class="string">&quot;奇线程&quot;</span>);</span><br><span class="line">        test1.start();</span><br><span class="line">        test2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">101</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">101</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot; : &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220422083648354.png" alt="image-20220422083648354"></p><p>CSDN搜到的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">subjectTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SSS</span> <span class="variable">sss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSS</span>();</span><br><span class="line">        sss.turning();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SSS</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turning</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">even</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="comment">// 只处理偶数</span></span><br><span class="line">                    <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + count++);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;偶数&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">odd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="comment">// 只处理奇数</span></span><br><span class="line">                    <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + count++);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">        even.start();</span><br><span class="line">        odd.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220422084258274.png" alt="image-20220422084258274"></p><p>是利用一个输出的时候判断一下当前需要输出的数是不是自己要负责打印的值，如果是就输出，不是就直接释放锁。</p><p>因为自己还没学到，等到学完锁，再回来写一次</p><h2 id="7-总结-2">7.总结</h2><p>重点是理解多线程的好处，以及原理，难点暂时没有很难，理解多线程，前段时间，学了python中的多线程，大差不大，就是代码不太一样，用一些方法的时候是需要加上try 来处理异常的。多线程也是java高级的第一部分，需要熟练掌握，知道多进程的使用和场景，就知道以后开发，应该都是多任务执行，大大提高了效率，一些自己想实现的程序，利用多线程，是可以做到的。</p><h1 id="4-25多线程-线程安全问题">4.25多线程 线程安全问题</h1><h2 id="1-头：日期、所学内容出处-13">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-3">2.标题</h2><p>P431 429.尚硅谷_多线程-理解线程的安全问题<br>P432 430.尚硅谷_多线程-线程安全问题的举例和解决措施<br>P433 431.尚硅谷_多线程-同步代码块处理实现Runnable的线程安全问题<br>P434 432.尚硅谷_多线程-同步代码块处理继承Thread类的线程安全问题<br>P435 433.尚硅谷_多线程-同步方法处理实现Runnable的线程安全问题<br>P436 434.尚硅谷_多线程-同步方法处理继承Thread类的线程安全问题<br>P437 435.尚硅谷_多线程-线程安全的单例模式之懒汉式<br>P438 436.尚硅谷_多线程-死锁的问题<br>P439 437.尚硅谷_多线程-Lock锁方式解决线程安全问题<br>P440 438.尚硅谷_多线程-同步机制的课后练习<br>P441 439.尚硅谷_多线程-线程通信的例题</p><h2 id="3-所学内容概述-3">3.所学内容概述</h2><p>多线程线程安全问题以及处理方法</p><p>lock解决死锁问题</p><p>完成线程间通讯</p><h2 id="4、根据概述分章节描述-3">4、根据概述分章节描述</h2><h3 id="解决方法">解决方法</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220425093807313.png" alt="image-20220425093807313"></p><h4 id="Runnable接口线程安全问题-解决方法-可用this">Runnable接口线程安全问题 解决方法 可用this</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1);</span><br><span class="line">        t1.setName(<span class="string">&quot;电脑一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;电脑二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;电脑三&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 卖票 : 票号为  &quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承线程安全问题-同步代码块">继承线程安全问题 同步代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">windowsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">windows</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">windows</span>();</span><br><span class="line">        <span class="type">windows</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">windows</span>();</span><br><span class="line">        <span class="type">windows</span> <span class="variable">w3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">windows</span>();</span><br><span class="line">        w1.setName(<span class="string">&quot;电脑一&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;电脑二&quot;</span>);</span><br><span class="line">        w3.setName(<span class="string">&quot;电脑三&quot;</span>);</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">windows</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//            synchronized (object) &#123;</span></span><br><span class="line">           <span class="keyword">synchronized</span> (windows.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot; : 卖票 : 票号为  &quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步方法解决继承线程安全问题">同步方法解决继承线程安全问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">windowsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">windows</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">windows</span>();</span><br><span class="line">        <span class="type">windows</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">windows</span>();</span><br><span class="line">        <span class="type">windows</span> <span class="variable">w3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">windows</span>();</span><br><span class="line">        w1.setName(<span class="string">&quot;电脑一&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;电脑二&quot;</span>);</span><br><span class="line">        w3.setName(<span class="string">&quot;电脑三&quot;</span>);</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">windows</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//            synchronized (object) &#123;</span></span><br><span class="line">             show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 卖票 : 票号为  &quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步方法解决接口问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1,<span class="string">&quot;电脑一&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1);</span><br><span class="line">        t2.setName(<span class="string">&quot;电脑二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;电脑三&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 卖票 : 票号为  &quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程同步-锁">线程同步 锁</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220425231622951.png" alt="image-20220425231622951"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//true交替</span></span><br></pre></td></tr></table></figure><h3 id="同步机制">同步机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  存钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amt)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (amt &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                balance += amt;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +<span class="string">&quot;存钱成功 账户余额 ： &quot;</span> + balance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Account account;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                account.deposit(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(account);</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(account);</span><br><span class="line">        c1.setName(<span class="string">&quot;甲&quot;</span>);</span><br><span class="line">        c2.setName(<span class="string">&quot;乙&quot;</span>);</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程通讯">线程通讯</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220425231746643.png" alt="image-20220425231746643"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">waitTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">wait</span> <span class="variable">wait</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">wait</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(wait,<span class="string">&quot;奇线程&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(wait,<span class="string">&quot;偶线程&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wait</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    notify();</span><br><span class="line">                    <span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot; : &quot;</span> + num);</span><br><span class="line">                    num--;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-章节内容-难点-3">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="章节内容-2">章节内容</h3><p>总结在一个案例中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clerk</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produceProduct</span><span class="params">()</span> &#123; <span class="comment">//生产</span></span><br><span class="line">        <span class="keyword">if</span> (product &lt; <span class="number">20</span>)&#123;</span><br><span class="line">            product++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 开始生产第 &quot;</span> + product + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">printProduct</span><span class="params">()</span> &#123; <span class="comment">//消费</span></span><br><span class="line">        <span class="keyword">if</span> (product &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">19</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (product &gt; num)&#123;</span><br><span class="line">                product -= num;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 消费了 &quot;</span> + num + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">                notify();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123; <span class="comment">//消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; : 开始消费产品........&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.printProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123; <span class="comment">// 生产者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; : 开始生产产品........&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Clerk</span> <span class="variable">clerk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clerk</span>();</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(clerk);</span><br><span class="line">        p1.setName(<span class="string">&quot;消费者[11]&quot;</span>);</span><br><span class="line">        <span class="type">Producer</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(clerk);</span><br><span class="line">        p2.setName(<span class="string">&quot;生产者[1]&quot;</span>);</span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-3">6.扩展学习部分</h2><h3 id="synchronized和Lock的异同">synchronized和Lock的异同</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220425103544527.png" alt="image-20220425103544527"></p><p>开发中Lock &gt; 同步代码块 &gt; 同步方法</p><h3 id="Lock奇偶交替">Lock奇偶交替</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(lock,<span class="string">&quot;奇线程&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(lock,<span class="string">&quot;偶线程&quot;</span>);</span><br><span class="line">        lock1.start();</span><br><span class="line">        lock2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : &quot;</span> + num);</span><br><span class="line">                    num--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wait notify交替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> waitTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/25 14:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">waitTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">wait</span> <span class="variable">wait</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">wait</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(wait,<span class="string">&quot;奇线程&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(wait,<span class="string">&quot;偶线程&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wait</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    notify();</span><br><span class="line">                    <span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot; : &quot;</span> + num);</span><br><span class="line">                    num--;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-3">7.总结</h2><p>今天写了11个的代码，今天的多线程安全问题是很重要的，必要彻底弄懂 ，难点在于寻找存在安全性的代码行，加入 synchronized和lock等方法解决，在做了最后一个综合性很强的练习后，有很大的提升，基本可以解决简单的安全问题了。CSDN的文章，有些能讲述的很明白。</p><h1 id="4-26-线程池-常用类">4.26 线程池 常用类</h1><h2 id="1-头：日期、所学内容出处-14">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-4">2.标题</h2><p>P444 442.尚硅谷_多线程-创建多线程的方式三：实现Callable接口<br>P445 443.尚硅谷_多线程-使用线程池的好处<br>P446 444.尚硅谷_多线程-创建多线程的方式四：使用线程池<br>P447 445.尚硅谷_常用类-每天一考<br>P448 446.尚硅谷_常用类-复习：生命周期与同步机制<br>P449 447.尚硅谷_常用类-复习：线程通信和新的线程创建方式等<br>P450 448.尚硅谷_常用类-Java常用类的概述<br>P451 449.尚硅谷_常用类-String类的概述<br>P452 450.尚硅谷_常用类-理解String的不可变性<br>P453 451.尚硅谷_常用类-String不同实例化方式的对比<br>P454 452.尚硅谷_常用类-String不同拼接操作的对比<br>P455 453.尚硅谷_常用类-String的一道面试题<br>P456 454.尚硅谷_常用类-JVM中涉及字符串的内存结构<br>P457 455.尚硅谷_常用类-String的常用方法1<br>P458 456.尚硅谷_常用类-String的常用方法2<br>P459 457.尚硅谷_常用类-String的常用方法3<br>P460 458.尚硅谷_常用类-回顾String与基本数据类型包装类的转换<br>P461 459.尚硅谷_常用类-String与char[]之间的转换<br>P462 460.尚硅谷_常用类-String与byte[]之间的转换<br>P463 461.尚硅谷_常用类-解决一个拼接问题<br>P464 462.尚硅谷_常用类-面试中String算法考查的说明<br>P465 463.尚硅谷_常用类-StringBuffer和StringBuilder的介绍<br>P466 464.尚硅谷_常用类-StringBuffer的源码分析<br>P467 465.尚硅谷_常用类-StringBuffer中的常用方法<br>P468 466.尚硅谷_常用类-String、StringBuffer、StringBuilder效率对比<br>P469 467.尚硅谷_常用类-System类中获取时间戳的方法<br>P470 468.尚硅谷_常用类-Java中两个Date类的使用</p><h2 id="3-所学内容概述-4">3.所学内容概述</h2><p>使用用更加强大的Callable接口创建多线程</p><p>利用线程池创建线程，并明白其优点。</p><p>复习线程内容 String类的使用</p><p>StringBuffer、StringBuilder的进阶方法</p><p>Data类的使用</p><h2 id="4、根据概述分章节描述-4">4、根据概述分章节描述</h2><h3 id="callable的好处">callable的好处</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426094503725.png" alt="image-20220426094503725"></p><h3 id="callable接口的创建线程">callable接口的创建线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CallableTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/26 8:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();</span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(p1);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;总和 ： &quot;</span>+o);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池的好处">线程池的好处</h3><p>1、线程池的优势与结构<br>（1）降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗；</p><p>（2）提高系统响应速度，当有任务到达时，通过复用已存在的线程，任务可以不需要等待新线程的创建便能立即执行；</p><p>（3）提高线程的可管理性。方便线程并发数的管控。如果线程无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，可能也会导致内存占用过多而产生OOM。</p><p>（4）提供更强大的功能，延时定时线程池。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426094339909.png" alt="image-20220426094339909"></p><h3 id="创建线程池">创建线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> poolTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/26 9:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">runPoll</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;runPoll-----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">callPool</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;callPoll-----------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poolTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        System.out.println(service.getClass());</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">service1</span> <span class="operator">=</span> (ThreadPoolExecutor) service; <span class="comment">//强转 父类用子类方法</span></span><br><span class="line">        service1.setCorePoolSize(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">runPoll</span>()); <span class="comment">//Runnable</span></span><br><span class="line">        <span class="type">callPool</span> <span class="variable">callPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">callPool</span>();</span><br><span class="line"></span><br><span class="line">        service.submit(callPool); <span class="comment">//callable pool</span></span><br><span class="line"></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String常用方法">String常用方法</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426103843405.png" alt="image-20220426103843405"></p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> StringMethodTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/26 10:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringMethodTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;helloWorld&quot;</span>;</span><br><span class="line">        System.out.println(s1.length()); <span class="comment">// 10 字符串长度</span></span><br><span class="line">        System.out.println(s1.charAt(<span class="number">0</span>)); <span class="comment">// h //返回索引处字符</span></span><br><span class="line">        System.out.println(s1.charAt(s1.length()-<span class="number">1</span>)); <span class="comment">//d</span></span><br><span class="line">        System.out.println(s1.isEmpty());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s2.isEmpty()); <span class="comment">//判断是否为空字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1.toUpperCase();</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">        System.out.println(s1.toLowerCase()); <span class="comment">//全部小写</span></span><br><span class="line">        System.out.println(s1.toUpperCase()); <span class="comment">//全部大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;    he   llo    world   &quot;</span>;</span><br><span class="line">        System.out.println(s4);</span><br><span class="line">        System.out.println(s4.trim()); <span class="comment">//去除出前后空格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        boolean equals(String s)           是否完全相同</span></span><br><span class="line"><span class="comment">//        boolean equalsIgnoreCase(String s)  忽略大小写进行比较</span></span><br><span class="line"><span class="comment">//        boolean startsWith(String s)    判断字符串是否以某字符串开头</span></span><br><span class="line"><span class="comment">//        boolean endsWith(String s)          判断字符串是否以某字符串结尾</span></span><br><span class="line"><span class="comment">//        int compareTo(String s)           比较大小，返回正数（大于）、负数（小于）、0（相等）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abe&quot;</span>;</span><br><span class="line">        System.out.println(s1.compareTo(s2));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;无敌暴龙神之飞之呼吸&quot;</span>;</span><br><span class="line">        System.out.println(s3.substring(<span class="number">3</span>)); <span class="comment">//从 3 开始截取新字符串</span></span><br><span class="line">        System.out.println(s3.substring(<span class="number">0</span>, <span class="number">2</span>)); <span class="comment">//切片 左闭右开</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;hello|world|java&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : s4.split(<span class="string">&quot;\\|&quot;</span>)) &#123;</span><br><span class="line">            System.out.print(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(s4.replace(<span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;,&#x27;</span>));<span class="comment">//创建新的 |替换 ，</span></span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方法二</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426105716108.png" alt="image-20220426105716108"></p><p>常用方法三</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426110725502.png" alt="image-20220426110725502"></p><h3 id="java常用类">java常用类</h3><p><a href="https://blog.csdn.net/u013343114/article/details/112599438?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165093765816781432998816%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165093765816781432998816&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112599438.142%5E">https://blog.csdn.net/u013343114/article/details/112599438?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165093765816781432998816%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165093765816781432998816&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112599438.142^</a></p><h3 id="String-和-char-转换">String 和 char[ ]转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc1234&quot;</span>; <span class="comment">// a321cb4</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : str1.toCharArray()) &#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] arr = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;abc1234&quot;</span>; <span class="comment">// a321cb4</span></span><br><span class="line">    <span class="type">char</span>[] chars = str3.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">5</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[j];</span><br><span class="line">        chars[j] = chars[i];</span><br><span class="line">        chars[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String-和-byte-的相互转换">String 和 byte[ ]的相互转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc123我爱中国&quot;</span>;</span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = str1.getBytes();</span><br><span class="line">    System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(gbks));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">    System.out.println(s);<span class="comment">//默认UTF-8</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">gbk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gbks);</span><br><span class="line">    System.out.println(gbk);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">gbk1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gbks,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    System.out.println(gbk1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> s4 + <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    System.out.println(s7 == s6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-章节内容-难点-4">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="String拼接-内存解析">String拼接 内存解析</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426102458518.png" alt="image-20220426102458518"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426103529621.png" alt="image-20220426103529621"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>注意如果变量加final就是常量了，在常量池中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> s4 + <span class="string">&quot;world&quot;</span>;</span><br><span class="line">System.out.println(s7 == s6);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="String-Buffer常用方法">String Buffer常用方法</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426144158658.png" alt="image-20220426144158658"></p><h3 id="三者效率对比">三者效率对比</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426144411138.png" alt="image-20220426144411138"></p><h3 id="两个Date类的使用">两个Date类的使用</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426151233672.png" alt="image-20220426151233672"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220426151351714.png" alt="image-20220426151351714"></p><h2 id="6-扩展学习部分-4">6.扩展学习部分</h2><h3 id="数组反转">数组反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//字符串反转</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;小白兔爱吃大白菜&quot;</span>;</span><br><span class="line">       System.out.println(s1.length());</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s1.length()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">           s2.append(s1.charAt(i));</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(s2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="数据局部反转">数据局部反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;abc1234&quot;</span>; <span class="comment">// a321cb4</span></span><br><span class="line">        <span class="type">char</span>[] chars = str3.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">5</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[j];</span><br><span class="line">            chars[j] = chars[i];</span><br><span class="line">            chars[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(chars);</span><br></pre></td></tr></table></figure><h2 id="7-总结-4">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>线程池的创建应该是很重要的，感觉也不简单，老师只是粗略的过了一遍，自己又去CSDN看了，有很多创建方法，想掌握也是有难度的，今天的学习劲头很好，一下看了40级，6个多小时的视频，博客和视频结合的方法，是很能增加自己的进度，String Buffe的方法和python的列表差不多，有删除 添加 查找 替换 ，String因为是一个final的类所以无法修改。这是源代码告知的。</p><h1 id="4-28比较器">4.28比较器</h1><h2 id="1-头：日期、所学内容出处-15">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-5">2.标题</h2><p>比较器(重要) 常用其他类</p><h2 id="3-所学内容概述-5">3.所学内容概述</h2><p>P485 483.尚硅谷_常用类-LocalDate、LocalTime、LocalDateTime的使用<br>P486 484.尚硅谷_常用类-Instant类的使用<br>P487 485.尚硅谷_常用类-DateTimeFormatter的使用<br>P488 486.尚硅谷_常用类-其它日期时间相关API的使用<br>P489 487.尚硅谷_常用类-IDEA的使用：导入Module<br>P490 488.尚硅谷_常用类-Java比较器概述<br>P491 489.尚硅谷_常用类-Comparable自然排序举例<br>P492 490.尚硅谷_常用类-自定义类实现Comparable自然排序<br>P493 491.尚硅谷_常用类-使用Comparator实现定制排序<br>P494 492.尚硅谷_常用类-System、Math、BigInteger、BigDecimal的使用</p><h2 id="4、根据概述分章节描述-5">4、根据概述分章节描述</h2><h3 id="System类">System类</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220428194835482.png" alt="image-20220428194835482"></p><h3 id="Math类">Math类</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220428194643960.png" alt="image-20220428194643960"></p><h3 id="BigInteger类">BigInteger类</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220428194739441.png" alt="image-20220428194739441"></p><h3 id="BigDecimal类">BigDecimal类</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220428194800368.png" alt="image-20220428194800368"></p><h2 id="5-章节内容-难点-5">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="比较器"><strong>比较器</strong></h3><p>博客</p><p><a href="https://blog.csdn.net/qq_43518425/article/details/113148547?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165114186516781818766465%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165114186516781818766465&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113148547.142">https://blog.csdn.net/qq_43518425/article/details/113148547?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165114186516781818766465%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165114186516781818766465&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113148547.142</a></p><h4 id="1-比较器使用背景">1.比较器使用背景</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的</span><br><span class="line">但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。</span><br><span class="line">如何实现？使用两个接口中的任何一个：<span class="built_in">Comparable</span> 或 Comparator</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-自然排序：使用Comparable接口">2.自然排序：使用Comparable接口</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.像String、包装类等实现了Comparable接口，重写了<span class="built_in">compareTo</span>(obj)方法，给出了比较两个对象大小的方式。</span><br><span class="line"><span class="number">2</span>.像String、包装类重写<span class="built_in">compareTo</span>()方法以后，进行了从小到大的排列</span><br><span class="line"><span class="number">3</span>. 重写<span class="built_in">compareTo</span>(obj)的规则：</span><br><span class="line">    如果当前对象this大于形参对象obj，则返回正整数，</span><br><span class="line">    如果当前对象this小于形参对象obj，则返回负整数，</span><br><span class="line">    如果当前对象this等于形参对象obj，则返回零。</span><br><span class="line"><span class="number">4</span>. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写<span class="built_in">compareTo</span>(obj)方法。在<span class="built_in">compareTo</span>(obj)方法中指明如何排序</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-定制排序：使用Comparator接口">3.定制排序：使用Comparator接口</h4><ol start="3"><li><pre><code>3. 说明   1.背景：   当元素的类型没实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> day26;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CompareTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/28 18:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;DD&quot;</span>,<span class="string">&quot;JJ&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Good[] arr = <span class="keyword">new</span> <span class="title class_">Good</span>[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;mi&quot;</span>,<span class="number">15</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;dell&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;ROG&quot;</span>,<span class="number">36</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;huawei&quot;</span>,<span class="number">46</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;mic&quot;</span>,<span class="number">46</span>);</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        Good[] arr = <span class="keyword">new</span> <span class="title class_">Good</span>[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;mi&quot;</span>,<span class="number">15</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;dell&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;ROG&quot;</span>,<span class="number">36</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;huawei&quot;</span>,<span class="number">46</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;mic&quot;</span>,<span class="number">46</span>);</span><br><span class="line">        <span class="comment">// 价格从高到低 名词从低到高</span></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Good &amp;&amp; o2 <span class="keyword">instanceof</span> Good)&#123;</span><br><span class="line">                    <span class="type">Good</span> <span class="variable">g1</span> <span class="operator">=</span> (Good) o1;</span><br><span class="line">                    <span class="type">Good</span> <span class="variable">g2</span> <span class="operator">=</span> (Good) o2;</span><br><span class="line">                    <span class="comment">//价格从高到低</span></span><br><span class="line">                    <span class="keyword">if</span> (g1.getName().equals(g2.getName()))&#123;</span><br><span class="line">                        <span class="keyword">return</span> -Double.compare(g1.getAge(),g2.getAge());</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//名字从低到高</span></span><br><span class="line">                        <span class="keyword">return</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入数据类型不一样&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;DD&quot;</span>,<span class="string">&quot;JJ&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> (String) o1;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> (String) o2;</span><br><span class="line">                    <span class="keyword">return</span> -s1.compareTo(s2);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入数据类型不一样&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day26;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Good</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/28 18:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Good</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Good</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Good</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Good) &#123;</span><br><span class="line">            <span class="type">Good</span> <span class="variable">goods</span> <span class="operator">=</span> (Good)o;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(<span class="built_in">this</span>.age, goods.age);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入数据类型不一样&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BUG">BUG</h3><p>equals是比较属性的，这里想加条件语句，用equals判断是否相等，但是报错了，提示不可以用int。<br>CSDN搜到这样一句话：equals方法是针对引用类型比较的，基本数据类型没有equals方法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/cIOpyrPKHnYPWHB12wBjpw.png" alt="img"></p><h2 id="6-扩展学习部分-5">6.扩展学习部分</h2><p>暂无</p><h2 id="7-总结-5">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习任务比较简单，重点在比较器，其次是其他类，其他类不是很重要，比较器中的comparator可以自定义排序，功能十分强大，可以安装什么数据排序，再按照什么排序。comparable是要有实现类，通过重写compare方法来实现，comparator的功能比较强大。今天学习时间较短，没有扩展学习部分。</p><h1 id="4-29枚举类-注解-集合">4.29枚举类 注解 集合</h1><h2 id="1-头：日期、所学内容出处-16">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-6">2.标题</h2><p>枚举类的学习任务</p><h2 id="3-所学内容概述-6">3.所学内容概述</h2><p>P495 493.尚硅谷_枚举类与注解-每天一考<br>P496 494.尚硅谷_枚举类与注解-复习：日期时间API<br>P497 495.尚硅谷_枚举类与注解-复习：Java比较器等<br>P498 496.尚硅谷_枚举类与注解-枚举类的理解<br>P499 497.尚硅谷_枚举类与注解-自定义枚举类<br>P500 498.尚硅谷_枚举类与注解-使用enum关键字定义枚举类<br>P501 499.尚硅谷_枚举类与注解-Enum类中的常用方法<br>P502 500.尚硅谷_枚举类与注解-使用enum关键字定义的枚举类实现接口<br>P503 501.尚硅谷_枚举类与注解-IDEA中导入Eclipse项目三修改Status为enum的定义<br>P504 502.尚硅谷_枚举类与注解-注解的理解<br>P505 503.尚硅谷_枚举类与注解-Annotation的使用示例<br>P506 504.尚硅谷_枚举类与注解-JDK内置的三个基本注解<br>P507 505.尚硅谷_枚举类与注解-如何自定义注解<br>P508 506.尚硅谷_枚举类与注解-jdk中4个基本的元注解的使用1<br>P509 507.尚硅谷_枚举类与注解-jdk中4个基本的元注解的使用2<br>P510 508.尚硅谷_枚举类与注解-jdk8新特性：可重复注解<br>P511 509.尚硅谷_枚举类与注解-jdk8新特性：类型注解<br>P512 510.尚硅谷_枚举类与注解-可重复注解中元注解不一致的问题解决<br>P513 511.尚硅谷_枚举类与注解-集合框架与项目的对比及概述<br>P514 512.尚硅谷_枚举类与注解-集合框架涉及到的API<br>P515 513.尚硅谷_枚举类与注解-Collection接口中的常用方法1</p><h2 id="4、根据概述分章节描述-6">4、根据概述分章节描述</h2><h3 id="枚举类的使用">枚举类的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一组常量时，强烈建议使用枚举类</span></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429082801683.png" alt="image-20220429082801683"></p><h4 id="定义枚举类使用enum关键字">定义枚举类使用<code>enum</code>关键字</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    RED,BLACK,YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举类的好处">枚举类的好处</h4><p>常用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="string">&quot;black&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLUE</span> <span class="operator">=</span> <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Color 定义的值范围 <code>red</code>、<code>black</code>、<code>blue</code> 并没有包括 <code>java</code> ，编译器无法检查不在枚举中的值；</li><li>定义的常量仍可与其他常量比较，但其用途并非是枚举星期值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;</span><br><span class="line">   <span class="keyword">if</span> (Color.RED.equals(color)) &#123;</span><br><span class="line">       <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>枚举类的Color</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    RED,BLACK,GREEN;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">        <span class="keyword">if</span> (Color.RED == color)&#123; </span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和<code>String</code>定义的常量相比，使用<code>enum</code>定义枚举有如下好处：</p><ul><li><code>enum</code>常量本身带有类型信息，即<code>Color.RED</code>类型是<code>Color</code>，编译器会自动检查出类型错误。例如，下面的语句不可能编译通过：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (Color.RED == color)&#123; <span class="comment">// Operator &#x27;==&#x27; cannot be applied to &#x27;Color&#x27;,&#x27;java.lang.String&#x27;</span></span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>不可能引用到非枚举的值，因为无法通过编译。</p></li><li><p>不同类型的枚举不能互相比较或者赋值，因为类型不符。例如，不能给一个<code>Weekday</code>枚举类型的变量赋值为<code>Color</code>枚举类型的值</p></li><li><p><strong>这就使得编译器可以在编译期自动检查出所有可能的潜在错误</strong>。、</p></li></ul><h4 id="枚举类基本使用">枚举类基本使用</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429090942555.png" alt="image-20220429090942555"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day27;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@ClassName</span> enumTest</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@DATE</span> 2022/4/29 8:36</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">enumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">summer</span> <span class="operator">=</span> Season.SUMMER;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">        <span class="type">Season</span> <span class="variable">winter</span> <span class="operator">=</span> Season.WINTER;</span><br><span class="line">        <span class="comment">//toString</span></span><br><span class="line">        System.out.println(summer);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//values 所有枚举值的toString</span></span><br><span class="line">        Season[] values = Season.values();</span><br><span class="line">        <span class="keyword">for</span> (Season value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//valueOf(String objName):返回枚举类中对象名是objName的对象</span></span><br><span class="line">        <span class="type">Season</span> <span class="variable">autumn</span> <span class="operator">=</span> Season.valueOf(<span class="string">&quot;AUTUMN&quot;</span>);</span><br><span class="line">        System.out.println(autumn);</span><br><span class="line">        autumn.show(); <span class="comment">//秋天的show</span></span><br><span class="line">        spring.show(); <span class="comment">//春天的show</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(Season.class.getSuperclass());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举类实现接口</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在哪里&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁静的夏天&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;就让秋风带走我的思念&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冬泳怪鸽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;雪花飘飘&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    Season(String seasonName, String seasonDesc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个季节&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="集合"><strong>集合</strong></h3><h4 id="数组的缺点">数组的缺点</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429103442303.png" alt="image-20220429103442303"></p><p><strong>java集合分collection和Map体系</strong></p><p>3.常用集合的分类：<br>Collection 接口的接口 对象的集合（单列集合）<br>├——-List 接口：元素按进入先后有序保存，可重复<br>│—————-├ LinkedList 接口实现类， 链表， 插入删除， 没有同步， 线程不安全<br>│—————-├ ArrayList 接口实现类， 数组， 随机访问， 没有同步， 线程不安全<br>│—————-└ Vector 接口实现类 数组， 同步， 线程安全<br>│ ———————-└ Stack 是Vector类的实现类<br>└——-Set 接口： 仅接收一次，不可重复，并做内部排序<br>├—————-└HashSet 使用hash表（数组）存储元素<br>│————————└ LinkedHashSet 链表维护元素的插入次序<br>└ —————-TreeSet 底层实现为二叉树，元素排好序 自然排序</p><p>Map 接口 键值对的集合 （双列集合）<br>├———Hashtable 接口实现类， 同步， 线程安全<br>├———HashMap 接口实现类 ，没有同步， 线程不安全-<br>│—————–├ LinkedHashMap 双向链表和哈希表实现<br>│—————–└ WeakHashMap<br>├ ——–TreeMap 红黑树对所有的key进行排序<br>└———IdentifyHashMap</p><h3 id="Collection接口的常用方法">Collection接口的常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> CollectionTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/4/29 10:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//  add(object e) 将e添加到集合collection中</span></span><br><span class="line">        collection.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(collection);</span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection1.add(<span class="number">123456</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        <span class="comment">// 将 collection1中的元素添加到集合中</span></span><br><span class="line">        collection.addAll(collection1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// addAll():</span></span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line">        <span class="comment">//清除元素</span></span><br><span class="line">        collection.clear();</span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429143153065.png" alt="image-20220429143153065"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">//        集合---数组</span></span><br><span class="line">        Object[] objects = collection.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object as : objects)&#123;</span><br><span class="line">            System.out.println(as);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        数组 ---- 集合</span></span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>&#125;);</span><br><span class="line">        System.out.println(strings);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; ints = Arrays.asList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">123</span>, <span class="number">4566</span>&#125;);</span><br><span class="line">        System.out.println(ints);</span><br><span class="line">        <span class="type">List</span> <span class="variable">ints1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>, <span class="number">4566</span>);</span><br><span class="line">        System.out.println(ints1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="iterator方法">iterator方法</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429144009619.png" alt="image-20220429144009619"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">       collection.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">       collection.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">       collection.add(<span class="number">123</span>);</span><br><span class="line">       collection.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//hasNext到最后了 要重新生成iterator</span></span><br><span class="line">       iterator = collection.iterator();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">           <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;AA&quot;</span>.equals(o))&#123;</span><br><span class="line">               iterator.remove();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">       iterator = collection.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="List接口的使用">List接口的使用</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429151807168.png" alt="image-20220429151807168"></p><p>List常用方法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429162840246.png" alt="image-20220429162840246"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">       list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">       list.add(<span class="number">123</span>);</span><br><span class="line">       list.add(<span class="number">456</span>);</span><br><span class="line">       list.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">       list.add(<span class="number">456</span>);</span><br><span class="line">       list.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">       System.out.println(list);</span><br><span class="line">       list.add(<span class="number">1</span>,<span class="string">&quot;爱&quot;</span>);</span><br><span class="line">       System.out.println(list);</span><br><span class="line">       list.set(<span class="number">1</span>,<span class="string">&quot;不爱&quot;</span>);</span><br><span class="line">       System.out.println(list);</span><br><span class="line">       System.out.println(list.subList(<span class="number">1</span>,<span class="number">5</span>));</span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Object as : list)&#123;</span><br><span class="line">           System.out.println(as);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="5-章节内容-难点-6">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="注解概述">注解概述</h3><p>‘<img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429093303639.png" alt="image-20220429093303639">’</p><h3 id="注解重要的基本常用-https-zhuanlan-zhihu-com-p-158054068">注解重要的基本常用 <a href="https://zhuanlan.zhihu.com/p/158054068">https://zhuanlan.zhihu.com/p/158054068</a></h3><p><code>@Override，@FunctionalInterface，@SuppressWarnings，@SafeVarargs，和@Deprecated。</code></p><p>它们都不会直接影响到程序的语义，只是作为注解（标识）存在  理解:类似于平常的便签纸</p><h4 id="自定义注解">自定义注解</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">MyAnnotation</span> &#123;</span><br><span class="line">    <span class="comment">//自定义注解</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429095957764.png" alt="image-20220429095957764"></p><h4 id="元注解">元注解</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220429100540460.png" alt="image-20220429100540460"></p><h2 id="6-扩展学习部分-6">6.扩展学习部分</h2><p>ArrayList，效率高 线程不安全</p><p>LinkedList, 对于频繁的插入 删除操作 使用此类效率比ArrayList高，底层使用双向链表存储</p><p>Vector 效率低 线程安全 古老实现类</p><p>三者的异同点</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">同:三个类都是实现了list接口，储存的特点相同 储存有序的，可重复的数据</span></span><br></pre></td></tr></table></figure><h2 id="7-总结-6">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学习的东西有点多，需要消化，学习了枚举类的使用和应用，枚举类如果引用非枚举类中的值，编译器会无法通过，就使得编译器可以在编译期自动检查出所有可能的潜在错误。然后浅浅的看了一下注解，因为暂时用不到，看博客就过了，重点的集合，像是python中的list列表，是数组的优化性，功能比较强大，先学了Collection接口 然后是子接口list，添 删 补 查 都很方便。</p><h1 id="5-2-Set和Map">5.2 Set和Map</h1><h2 id="1-头：日期、所学内容出处-17">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-7">2.标题</h2><p>P535 533.尚硅谷_集合-Set接口实现类的对比<br>P536 534.尚硅谷_集合-Set的无序性与不可重复性的理解<br>P537 535.尚硅谷_集合-HashSet中元素的添加过程<br>P538 536.尚硅谷_集合-关于hashCode()和equals()的重写<br>P539 537.尚硅谷_集合-LinkedHashSet的使用<br>P540 538.尚硅谷_集合-TreeSet的自然排序<br>P541 539.尚硅谷_集合-TreeSet的定制排序<br>P542 540.尚硅谷_集合-每天一考<br>P543 541.尚硅谷_集合-复习：Collection及Collection的遍历<br>P544 542.尚硅谷_集合-复习：List接口<br>P545 543.尚硅谷_集合-复习：Set接口<br>P546 544.尚硅谷_集合-TreeSet的课后练习<br>P547 545.尚硅谷_集合-Set课后两道面试题<br>P548 546.尚硅谷_集合-Map接口及其多个实现类的对比<br>P549 547.尚硅谷_集合-Map中存储的key-value的特点</p><h2 id="3-所学内容概述-7">3.所学内容概述</h2><p>Set接口的框架 对Set的理解</p><p>添加元素和哈希值的关系</p><p>重写equals和hashcode方法</p><p>P539 537.尚硅谷_集合-LinkedHashSet的使用</p><p>TreeSet的自然排序 和自定义排序</p><p>复习 课后练习</p><h2 id="4、根据概述分章节描述-7">4、根据概述分章节描述</h2><h3 id="set接口的框架">set接口的框架</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502101815638.png" alt="image-20220502101815638"></p><h3 id="Set添加元素">Set<strong>添加元素</strong></h3><h4 id="hashSet接口">hashSet接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    set.add(<span class="number">456</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    set.add(<span class="number">129</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">39</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">39</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    System.out.println(set.size());</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedHashSet接口">LinkedHashSet接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">    set.add(<span class="number">456</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    set.add(<span class="number">129</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">39</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">39</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    System.out.println(set.size());</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map接口">Map接口</h3><h4 id="Map的框架">Map的框架</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502150434741.png" alt="image-20220502150434741"></p><h4 id="Map的结构">Map的结构</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502151342333.png" alt="image-20220502151342333"></p><h4 id="Map的使用方法">Map的使用方法</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502152530191.png" alt="image-20220502152530191"></p><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    map.put(<span class="number">45</span>,<span class="number">62</span>);</span><br><span class="line">    map.put(<span class="string">&quot;CC&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    map.put(<span class="string">&quot;DD&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">    System.out.println(set);   </span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;====&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">    <span class="keyword">for</span> (Object obj : values)&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历所有的key-value</span></span><br><span class="line">    <span class="comment">//entrySet();</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Object o: entrySet)&#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)o;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;------&gt;&quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeMap自然排序-定制排序">TreeMap自然排序 定制排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">32</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Bali&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    map.put(u1,<span class="number">98</span>);</span><br><span class="line">    map.put(u2,<span class="number">123</span>);</span><br><span class="line">    map.put(u4,<span class="number">88</span>);</span><br><span class="line">    map.put(u3,<span class="number">98</span>);</span><br><span class="line">    map.put(u5,<span class="number">250</span>);</span><br><span class="line">    <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Object o: entrySet)&#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)o;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;------&gt;&quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> (User)o1;</span><br><span class="line">                <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User)o2;</span><br><span class="line">                <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> u1.getName().compareTo(u2.getName());</span><br><span class="line">                <span class="keyword">if</span> (compare!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> compare;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类型不匹配&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">32</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">u5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Bali&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    map.put(u1,<span class="number">98</span>);</span><br><span class="line">    map.put(u2,<span class="number">123</span>);</span><br><span class="line">    map.put(u4,<span class="number">88</span>);</span><br><span class="line">    map.put(u3,<span class="number">98</span>);</span><br><span class="line">    map.put(u5,<span class="number">250</span>);</span><br><span class="line">    <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Object o: entrySet)&#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)o;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;------&gt;&quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Collections工具类的常用方法">Collections工具类的常用方法</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502160019291.png" alt="image-20220502160019291"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502155954389.png" alt="image-20220502155954389"></p><h2 id="5-章节内容-难点-7">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="添加元素（难点）">添加元素（难点）</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502101546347.png" alt="image-20220502101546347"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">39</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">39</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        System.out.println(set.size());</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp; Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写hashcode和equals方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502101648772.png" alt="image-20220502101648772"></p><h3 id="TreeSet自然排序和定制排序">TreeSet自然排序和定制排序</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502105240689.png" alt="image-20220502105240689"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line">        <span class="comment">//不能添加不同类</span></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(&quot;AA&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add(-42);</span></span><br><span class="line"><span class="comment">//        set.add(0);</span></span><br><span class="line"><span class="comment">//        Iterator iterator = set.iterator();</span></span><br><span class="line"><span class="comment">//        while (iterator.hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">37</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">39</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;smith&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Carry&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> (User)o1;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User)o2;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> u1.getName().compareTo(u2.getName());</span><br><span class="line">                    <span class="keyword">if</span> (compare!=<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> compare;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类型不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(com);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">37</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">39</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;smith&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Carry&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Mary&quot;</span>,<span class="number">33</span>));</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220502105314711.png" alt="image-20220502105314711"></p><h2 id="6-扩展学习部分-7">6.扩展学习部分</h2><h3 id="自然排序-定制排序-Date">自然排序 定制排序 Date</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> age, MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Employee)&#123;</span><br><span class="line">            <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name.compareTo(e1.name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year + <span class="string">&quot;年&quot;</span> + month +<span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Employee &amp;&amp; o2 <span class="keyword">instanceof</span> Employee)&#123;</span><br><span class="line">                    <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> (Employee) o1;</span><br><span class="line">                    <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> (Employee) o2;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> Integer.compare(e1.getBirthday().getYear(),e2.getBirthday().getYear());</span><br><span class="line">                    <span class="comment">//先年</span></span><br><span class="line">                    <span class="keyword">if</span> (compare != <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> compare;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//月</span></span><br><span class="line">                        <span class="type">int</span> <span class="variable">compare1</span> <span class="operator">=</span> Integer.compare(e1.getBirthday().getMonth(),e2.getBirthday().getMonth());</span><br><span class="line">                        <span class="keyword">if</span> (compare1 != <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> compare1;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//日</span></span><br><span class="line">                            <span class="keyword">return</span> Integer.compare(e1.getBirthday().getDay(),e2.getBirthday().getDay());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类型不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(com);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jane&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2002</span>,<span class="number">11</span>,<span class="number">19</span>)));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">19</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2003</span>,<span class="number">8</span>,<span class="number">2</span>)));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Smith&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2003</span>,<span class="number">3</span>,<span class="number">28</span>)));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2002</span>,<span class="number">10</span>,<span class="number">1</span>)));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Carry&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2003</span>,<span class="number">3</span>,<span class="number">21</span>)));</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-7">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习内容很多，学习难度一般，集合已经完成，主要是Set接口和Map的方法是重点，源码解析等有点难度，也没执着于理解，今天的学习相对比较简单，底层结构除外，掌握程度90%，代码敲了十几个，熟能生巧，学习步骤：两个案例，在老师敲之前截图，自己做。方法也是看博客，做完再看老师最后的代码和实现，明天将泛型攻克。</p><h1 id="5-3-File-和-泛型">5.3 File 和 泛型</h1><h2 id="1-头：日期、所学内容出处-18">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-8">2.标题</h2><p>P562 560.尚硅谷_泛型与File-每天一考<br>P563 561.尚硅谷_泛型与File-复习1：Map<br>P564 562.尚硅谷_泛型与File-复习2：Collections和数据结构<br>P565 563.尚硅谷_泛型与File-为什么要使用泛型<br>P566 564.尚硅谷_泛型与File-泛型与File中使用泛型举例<br>P567 565.尚硅谷_泛型与File-泛型与File中使用泛型的练习<br>P568 566.尚硅谷_泛型与File-自定义泛型类举例<br>P569 567.尚硅谷_泛型与File-自定义泛型类泛型接口的注意点<br>P570 568.尚硅谷_泛型与File-自定义泛型方法举例<br>P571 569.尚硅谷_泛型与File-举例泛型类和泛型方法的使用情境<br>P572 570.尚硅谷_泛型与File-泛型在继承方面的体现<br>P573 571.尚硅谷_泛型与File-通配符的使用<br>P574 572.尚硅谷_泛型与File-使用通配符后数据的读取和写入要求<br>P575 573.尚硅谷_泛型与File-有限制条件的通配符的使用<br>P576 574.尚硅谷_泛型与File-自定义泛型类练习<br>P577 575.尚硅谷_泛型与File-File类的实例化<br>P578 576.尚硅谷_泛型与File-File类的常用方法1<br>P579 577.尚硅谷_泛型与File-File类的常用方法2<br>P580 578.尚硅谷_泛型与File-File类的课后练习</p><h2 id="3-所学内容概述-8">3.所学内容概述</h2><p>泛型的好处 如何使用 自定义泛型 泛型的使用情景 继承中的泛型 泛型中通配符的使用 FIle文件的方法和实例化 以及课后练习</p><h2 id="4、根据概述分章节描述-8">4、根据概述分章节描述</h2><h3 id="泛型继承">泛型继承</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503085505877.png" alt="image-20220503085505877"></p><h3 id="泛型通配符">泛型通配符</h3><p>如图 在showketvalue1中定义泛型为Number 但是integer 是number的子类 却无法使用， 这时候就需要用到我们的通配符</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503143539036.png" alt="image-20220503143539036"></p><p>修改以后</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503143715881.png" alt="image-20220503143715881"></p><p>此处？是类型实参，而不是类型形参 ！意思就是，此处的？和Number、String、Integer一样都是一种实际的类型，可以把？看成所有类型的父类Object。是一种真实的类型。可以解决当具体类型不确定的时候，这个通配符就是 ?  ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。那么可以用 ? 通配符来表未知类型。</p><h4 id="泛型的上下界">泛型的上下界</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503144111160.png" alt="image-20220503144111160"></p><p>编译会报错因为String不是Number的子类</p><p>extends相当于[-无穷,Number]</p><p>super相当于[Number,+无穷]</p><h3 id="File的创建方式">File的创建方式</h3><p>四种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA\\day29\\hello.txt&quot;</span>);</span><br><span class="line">    System.out.println(file);</span><br><span class="line">    System.out.println(file1);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA&quot;</span>,<span class="string">&quot;day29&quot;</span>);</span><br><span class="line">    System.out.println(file2.isFile());</span><br><span class="line">    <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file2,<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    System.out.println(file3.isFile());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>File的方法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503144348807.png" alt="image-20220503144348807"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA\\day29\\hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA&quot;</span>,<span class="string">&quot;day29&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file2,<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(file1.getAbsolutePath());</span><br><span class="line">    System.out.println(file1.getPath());</span><br><span class="line">    System.out.println(file1.getName());</span><br><span class="line">    System.out.println(file1.getParent());</span><br><span class="line">    System.out.println(file1.length());</span><br><span class="line">    <span class="comment">//毫秒数</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(file1.lastModified());</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">    System.out.println(file3.getAbsolutePath());</span><br><span class="line">    System.out.println(file3.getPath());</span><br><span class="line">    System.out.println(file3.getName());</span><br><span class="line">    System.out.println(file3.getParent());</span><br><span class="line">    System.out.println(file3.length());</span><br><span class="line">    <span class="comment">//毫秒数</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>(file3.lastModified()));</span><br><span class="line">    System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA&quot;</span>);</span><br><span class="line">    String[] list = file.list();</span><br><span class="line">    <span class="keyword">for</span> (String s : list)&#123;</span><br><span class="line">        System.out.println (s);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line"></span><br><span class="line">    File[] list1 = file.listFiles();</span><br><span class="line">    <span class="keyword">for</span> (File f : list1)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\IO\\hi.txt&quot;</span>);</span><br><span class="line">    System.out.println(file2.renameTo(file1));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="File类的判断">File类的判断</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503150808314.png" alt="image-20220503150808314"></p><h3 id="IO流">IO流</h3><h4 id="IO流的分类">IO流的分类</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503165255640.png" alt="image-20220503165255640"></p><h2 id="5-章节内容-难点-8">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><p>File的创建和删除</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503151720613.png" alt="image-20220503151720613"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())&#123;<span class="comment">//文件存在</span></span><br><span class="line">        file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        file.delete();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-8">6.扩展学习部分</h2><h3 id="打印出目录下所有的文件">打印出目录下所有的文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CC\\IDEA\\scr&quot;</span>);</span><br><span class="line">    printSubFile(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">printSubFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line">    File[] files = file.listFiles();</span><br><span class="line">    <span class="keyword">assert</span> files != <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (File f : files)&#123;</span><br><span class="line">        <span class="keyword">if</span> (f.isDirectory())&#123;</span><br><span class="line">            printSubFile(f);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220503155735768.png" alt="image-20220503155735768"></p><h2 id="7-总结-8">7.总结</h2><p>学习难度一般，主要是方法的使用比较枯燥，掌握了90% ，刚开始对于泛型的&lt;？&gt;通配符不太理解，还有继承这块，去看了博客，逐渐明白?是解决泛型无法继承的东西，在jdk1.2出来的，然后就是对文件的处理，自己早在之前就看过对文件的处理，掌握起来也比较容易，今天学习内容还是蛮多的，泛型和File的处理，然后初见IO流，做了几个练习题，代码测试的方法比较多。</p><h1 id="5-5-IO流">5.5 IO流</h1><h2 id="1-头：日期、所学内容出处-19">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-9">2.标题</h2><p>P581 579.尚硅谷_IO流-每天一考<br>P582 580.尚硅谷_IO流-复习：IO流中使用泛型<br>P583 581.尚硅谷_IO流-复习：自定义泛型结构与通配符<br>P584 582.尚硅谷_IO流-复习：File类的使用<br>P585 583.尚硅谷_IO流-IO流概述与流的分类<br>P586 584.尚硅谷_IO流-IO流的体系结构<br>P587 585.尚硅谷_IO流-FileReader读入数据的基本操作<br>P588 586.尚硅谷_IO流-FileReader中使用read(char[] cbuf)读入数据<br>P589 587.尚硅谷_IO流-FileWriter写出数据的操作<br>P590 588.尚硅谷_IO流-使用FileReader和FileWriter实现文本文件的复制<br>P591 589.尚硅谷_IO流-字符流不能处理图片文件的测试<br>P592 590.尚硅谷_IO流-使用FileInputStream不能读取文本文件的测试<br>P593 591.尚硅谷_IO流-使用FileInputStream和FileOutputStream读写非文本文件<br>P594 592.尚硅谷_IO流-使用FileInputStream和FileOutputStream复制文件的方法测试</p><h2 id="3-所学内容概述-9">3.所学内容概述</h2><p>IO的介绍</p><p>IO字符流的写入和读取</p><p>IO字节流的写入和读取</p><p>IO字符流和字节流的适用场景</p><h2 id="4、根据概述分章节描述-9">4、根据概述分章节描述</h2><h3 id="IO流的介绍">IO流的介绍</h3><h4 id="原理">原理</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220505201000170.png" alt="image-20220505201000170"></p><h4 id="IO流的分类-2">IO流的分类</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220505203243307.png" alt="image-20220505203243307"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220505201047511.png" alt="image-20220505201047511"></p><h4 id="IO的体系">IO的体系</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220505202059232.png" alt="image-20220505202059232"></p><p><strong><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220506081437053.png" alt="image-20220506081437053"></strong></p><h3 id="文本文件读取"><strong>文本文件读取</strong></h3><p>使用FileReader类 read(数组)方法读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.file类的实例化</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">             fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">            <span class="comment">//3.读取</span></span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];<span class="comment">//5个5个读取</span></span><br><span class="line">            <span class="type">int</span> num;</span><br><span class="line">            <span class="keyword">while</span> ((num =fileReader.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,num);</span><br><span class="line">                System.out.print(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                System.out.print(String.valueOf(chars));</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="文件的写入">文件的写入</h3><p>用FileWriter 中的writer写入</p><p>FileWriter构造器后面加true是添加 默认是false 覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file,<span class="literal">true</span>);</span><br><span class="line">    writer.write(<span class="string">&quot;hello java\n&quot;</span>);</span><br><span class="line">    writer.write(<span class="string">&quot;hello python\n&quot;</span>);</span><br><span class="line">    writer.write(<span class="string">&quot;hfa\n&quot;</span>);</span><br><span class="line">    writer.write(<span class="string">&quot;cxy\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    writer.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意 FileWriter和FileReader都属于字符流 无法读和写非文本文件，非文本文件需要用字节流</code></p><h3 id="字节流">字节流</h3><h4 id="image-20220505201935633"><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220505201935633.png" alt="image-20220505201935633"></h4><h4 id="文件的写入-2">文件的写入</h4><p>会造成中文的乱码 详细见扩展学习部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello31.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//造流</span></span><br><span class="line">        fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">38</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fis != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-章节内容-难点-9">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><p>重点</p><h3 id="个人理解">个人理解</h3><p>字符流是对于文本文件有很好的读取，字节流因为中文的占位不一样，容易读取一半造成乱码，但是普通的复制 只要将数组调的大一点就好了。</p><h3 id="文本文件的copy用字符流">文本文件的copy用字符流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FileReaderFileWriter</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建File类的对象,指明 读入和写出的文件</span></span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">fileRead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">fileWrite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;helloCopy.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创造输入流和输出流的对象</span></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(fileRead);</span><br><span class="line">        fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(fileWrite);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.数据的读入和写入操作</span></span><br><span class="line">        <span class="comment">//读数据</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((num = fr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写入</span></span><br><span class="line">            fw.write(chars,<span class="number">0</span>,num);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Copy成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.关闭流资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="literal">null</span> &amp;&amp; fw != <span class="literal">null</span>)&#123;</span><br><span class="line">                fr.close();</span><br><span class="line">                fw.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非文本文件的copy字节流">非文本文件的copy字节流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> copyInfile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/5/5 19:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">copyInfile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入要复制的文件&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入复制过来的文件重命名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String s1 = &quot;D://CC//Videos//douyin.mp4&quot;;</span></span><br><span class="line"><span class="comment">//        String s2 = &quot;D://Desktop//java2.mp4&quot;;</span></span><br><span class="line"></span><br><span class="line">        copyPicture(s1,s2);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为 : &quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyPicture</span><span class="params">(String Filename1,String Filename2)</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创造文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Filename1);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Filename2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//造流</span></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file); <span class="comment">//存在的图片</span></span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file1);<span class="comment">//复制的地方</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//数组储存</span></span><br><span class="line">            <span class="type">int</span> len; <span class="comment">//记长度</span></span><br><span class="line">            <span class="comment">//读文件 写入</span></span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,len);<span class="comment">//写入</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BUG-2">BUG</h3><p>说找不到路径，但是我文件是在同一个模块下面的，后面查CSDN 说在IDEA中在main主程序里面输入相对路径，读取的IDEA大模块包下，所以不可以，如果是在单元测试中就是读取的同一个模块，在main的下需要把文件移动到IDEA中创建文件也是在IDEA模块中，或者写绝对路径</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/W9cIYM4k_6jWXMypOVcISw.png" alt="img"></p><h2 id="6-扩展学习部分-9">6.扩展学习部分</h2><h3 id="中文的读取">中文的读取</h3><p>假设文件file1.txt，采用字节流的话是这样读的：<br>a中国bc张三fe<br>第一次读：一个字节，正好读到’a’<br>第二次读：一个字节，正好读到’中’字符的一半。<br>第三次读：一个字节，正好读到’中’字符的另外一半。</p><p>按照 字符 的方式读取数据的，一次读取一个字符.<br>这种流是为了方便读取 普通文本文件 而存在的，这种流不能读取：图片、声音、视频等文件。只能读取 纯文本文件，连word文件都无法读取。</p><p>注意：<br>纯文本文件，不单单是.txt文件，还包括 .java、.ini、.py 。总之只要 能用记事本打开 的文件都是普通文本文件。</p><p>eg.<br>假设文件file1.txt，采用字符流的话是这样读的：<br>a中国bc张三fe<br>第一次读：'a’字符（'a’字符在windows系统中占用1个字节。）<br>第二次读：'中’字符（'中’字符在windows系统中占用2个字节。）</p><h2 id="7-总结-9">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习比较容易，主要是先认识IO流，然后实现对文本的读取和写入，全部掌握了，自己也可以独立完成文本文件和非文本文件的复制，这里的方法和python中的文件处理类似，所以学习比较容易，IO的类和方法比较多，还是得多加掌握，多敲代码，做了两个文件的copy 视频 图片都可以，对文件的处理还是很有兴趣的。</p><h1 id="5-6-缓冲流和网络编程入门">5.6 缓冲流和网络编程入门</h1><h2 id="1-头：日期、所学内容出处-20">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-10">2.标题</h2><p>P595 593.尚硅谷_IO流-缓冲流(字节型)实现非文本文件的复制<br>P596 594.尚硅谷_IO流-缓冲流与节点流读写速度对比<br>P597 595.尚硅谷_IO流-缓冲流(字符型)实现文本文件的复制<br>P598 596.尚硅谷_IO流-缓冲流课后练习1<br>P599 597.尚硅谷_IO流-缓冲流课后练习2<br>P600 598.尚硅谷_IO流-转换流概述与InputStreamReader的使用<br>P601 599.尚硅谷_IO流-转换流实现文件的读入和写出<br>P602 600.尚硅谷_IO流-多种字符编码集的说明<br>P603 601.尚硅谷_IO流-标准的输入、输出流<br>P604 602.尚硅谷_IO流-打印流的使用<br>P605 603.尚硅谷_IO流-数据流的使用<br>P606 604.尚硅谷_IO流与网络编程-每天一考<br>P607 605.尚硅谷_IO流与网络编程-复习：IO流概述<br>P608 606.尚硅谷_IO流与网络编程-复习：节点流<br>P609 607.尚硅谷_IO流与网络编程-复习：缓冲流与转换流<br>P610 608.尚硅谷_IO流与网络编程-复习：其它几个处理流<br>P611 609.尚硅谷_IO流与网络编程-对象序列化机制的理解<br>P612 610.尚硅谷_IO流与网络编程-对象流序列化与反序列化字符串操作<br>P613 611.尚硅谷_IO流与网络编程-自定义类实现序列化与反序列化操作<br>P614 612.尚硅谷_IO流与网络编程-serialVersionUID的理解<br>P615 613.尚硅谷_IO流与网络编程-自定义类可序列化的其它要求<br>P616 614.尚硅谷_IO流与网络编程-RandomAccessFile实现数据的读写操作<br>P617 615.尚硅谷_IO流与网络编程-RandomAccessFile实现数据的插入<br>P618 616.尚硅谷_IO流与网络编程-NIO介绍及NIO2中Path、Paths、Files的介绍</p><h2 id="3-所学内容概述-10">3.所学内容概述</h2><p>了解缓冲流  实现复制文本 和字节型和字符流比较读写速度</p><p>转换流概述和实现键盘输入输出</p><p>打印流和数据流的使用 对象的序列化理解操作</p><p>serialVersionUID的使用 自定义可序列化的要求</p><p>RandomAccessFile实现数据的读写操作 NIO理解</p><h2 id="4、根据概述分章节描述-10">4、根据概述分章节描述</h2><h3 id="缓冲流">缓冲流</h3><p>利用缓冲流能大大缩短程序的运行时间</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220507235313841.png" alt="image-20220507235313841"></p><h4 id="缓冲字节流">缓冲字节流</h4><p>图片</p><p><code>**BufferedInputStream、BufferedOutputStream**</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220507230615077.png" alt="image-20220507230615077"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BufferedCopyMp4Secret</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//造缓存流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cxy1.jpg&quot;</span>));</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cxy2.jpg&quot;</span>));</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len;i++)&#123;</span><br><span class="line">                    bytes[i] = (<span class="type">byte</span>) (bytes[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> bis != <span class="literal">null</span>;</span><br><span class="line">                bis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> bos != <span class="literal">null</span>;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>缓冲字节流是为高效率而设计的，真正的读写操作还是靠<code>FileOutputStream</code>和<code>FileInputStream</code>，所以其构造方法入参是这两个类的对象也就不奇怪了。</p><h4 id="缓冲字符流">缓冲字符流</h4><p><strong>字符流适用于文本文件的读写</strong>，<code>OutputStreamWriter</code>类其实也是借助<code>FileOutputStream</code>类实现的，故其构造方法是<code>FileOutputStream</code>的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BufferedCopyTxt</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;hello2.txt&quot;</span>));</span><br><span class="line">            <span class="comment">//老方式一</span></span><br><span class="line"><span class="comment">//            char[] chars = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = br.read(chars)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(chars,0,len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            String data; <span class="comment">//字符型 方式二</span></span><br><span class="line">            <span class="keyword">while</span> ((data = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                bw.write(data); <span class="comment">//data没有换行符</span></span><br><span class="line">                bw.newLine(); <span class="comment">//换行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> br != <span class="literal">null</span>;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> bw != <span class="literal">null</span>;</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="转换流">转换流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InOutStreamReaderTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//将UTF-8编码文件复制 并转换为gbk</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;hello_gbk.txt&quot;</span>),<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">isw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;hello_utf.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(chars)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            isw.write(chars,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isr.close();</span><br><span class="line">        isw.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象流">对象流</h3><h4 id="对象输出流（写）">对象输出流（写）</h4><h5 id="1-ObjectOutputStream">1.ObjectOutputStream</h5><p>提供了writeObject(object obj)；oos将对象转换为字节后 将这组字节交给fos写入文本等于写到硬盘， 这个过程称之为“数据持久化”； oos将给定的对象pdd转为一组字节，这个过image-20220508001715638程称之为“对象序列化”；简单来讲“对象序列化”就是将对象写入文本中，称之为对象&quot;序列化&quot;.</p><h5 id="2-serializable接口">2.serializable接口:</h5><p>objectOutputstream在对象进行序列化时有个要求：需要序列化对象所属的类。必须是实现serializable接口,实现该接口不需要重写任何方法，目的是可序化的一种标识。</p><h4 id="每一个类序列化都要实例化接口">每一个类序列化都要实例化接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2314124125L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Acct id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name, <span class="type">int</span> age, Acct id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/5/6 14:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2314124125L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Acct id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name, <span class="type">int</span> age, Acct id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Acct</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2314124125L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Acct</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Acct</span><span class="params">(<span class="type">double</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Acct&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化一个需要序列化的Person对象</span></span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我是无敌的&quot;</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;汪大东&quot;</span>,<span class="number">28</span>);</span><br><span class="line">            oos.writeObject(p);</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;金宝三&quot;</span>,<span class="number">34</span>,<span class="keyword">new</span> <span class="title class_">Acct</span>(<span class="number">153</span>)));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> oos != <span class="literal">null</span>;</span><br><span class="line">                oos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)obj;</span><br><span class="line"></span><br><span class="line">            <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> (person) ois.readObject();</span><br><span class="line">            <span class="type">person</span> <span class="variable">p2</span> <span class="operator">=</span> (person) ois.readObject();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            System.out.println(p1);</span><br><span class="line">            System.out.println(p2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> ois != <span class="literal">null</span>;</span><br><span class="line">                ois.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RandomAccessFilee类">RandomAccessFilee类</h3><p>既可以做输入流也看可以做输出流</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220508001715638.png" alt="image-20220508001715638"></p><h2 id="5-章节内容-难点-10">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="重点-2">重点</h3><p>IO流重点类</p><p>InputStream：InputStream是所有字节输入流的抽象基类，前面说过抽象类不能被实例化，实际上是作为模板而存在的，为所有实现类定义了处理输入流的方法。<br>FileInputSream：文件输入流，一个非常重要的字节输入流，用于对文件进行读取操作。<br>PipedInputStream：管道字节输入流，能实现多线程间的管道通信。<br>ByteArrayInputStream：字节数组输入流，从字节数组(byte[])中进行以字节为单位的读取，也就是将资源文件都以字节的形式存入到该类中的字节数组中去。<br>FilterInputStream：装饰者类，具体的装饰者继承该类，这些类都是处理类，作用是对节点类进行封装，实现一些特殊功能。<br>DataInputStream：数据输入流，它是用来装饰其它输入流，作用是“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”。<br>BufferedInputStream：缓冲流，对节点流进行装饰，内部会有一个缓存区，用来存放字节，每次都是将缓存区存满然后发送，而不是一个字节或两个字节这样发送，效率更高。<br>ObjectInputStream：对象输入流，用来提供对基本数据或对象的持久存储。通俗点说，也就是能直接传输对象，通常应用在反序列化中。它也是一种处理流，构造器的入参是一个InputStream的实例对象。</p><h3 id="BUG1">BUG1</h3><p>空指针异常，提醒在34行，反复检查代码，发现，刚开始是集合没有key值的，所以调用getValue也就是会得到一个null，将0改成null，代码就没事情了</p><p><img src="https://docimg9.docs.qq.com/image/tQH2Ll6R9zGVqcitWIosHA.png?w=1648&amp;h=1066" alt="img"></p><h3 id="BUG2">BUG2</h3><p>一直显示无法转换，不知道什么原因，把文件删除以后，再次创造，再获取就没异常了，不知道什么原因</p><h3 id="img"><img src="https://docimg1.docs.qq.com/image/Q0Wp2l8oekFRTE8ox60pYA.png?w=1364&amp;h=1004" alt="img"></h3><h2 id="6-扩展学习部分-10">6.扩展学习部分</h2><h3 id="统计文本文件的每个字符的次数"><strong>统计文本文件的每个字符的次数</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//统计每个文字出现的次数 ，map</span></span><br><span class="line">        <span class="comment">//缓存流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;hello.txt&quot;</span>));</span><br><span class="line">            <span class="comment">//创建map集合</span></span><br><span class="line">            Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((len = br.read()) != -<span class="number">1</span>)&#123;            <span class="comment">//读取数据</span></span><br><span class="line"></span><br><span class="line">                <span class="type">char</span> <span class="variable">char1</span> <span class="operator">=</span> (<span class="type">char</span>) len;<span class="comment">//转换</span></span><br><span class="line">                <span class="comment">//放入map</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(char1) == <span class="literal">null</span>) &#123;<span class="comment">//刚开始是没有的 返回的是null</span></span><br><span class="line">                    map.put(char1, <span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(char1,map.get(char1) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把map的数据都方法哦文件count.txt中</span></span><br><span class="line">            <span class="comment">//创建写入缓存流</span></span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;helloCount.txt&quot;</span>));</span><br><span class="line">            Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet)&#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.getKey())&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                        bw.write(<span class="string">&quot;空格 = &quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">                        bw.write(<span class="string">&quot;tab键 = &quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>:</span><br><span class="line">                        bw.write(<span class="string">&quot;回车 = &quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                        bw.write(<span class="string">&quot;换行 = &quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        bw.write(entry.getKey() + <span class="string">&quot; = &quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解密-加密">解密 加密</h3><p>在创建的时候名字换过来、 就是解密</p><p>将加密文件为输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BufferedCopyMp4Secret2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//造缓存流</span></span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cxy2.jpg&quot;</span>));</span><br><span class="line">        bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cxy4.jpg&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len;i++)&#123;</span><br><span class="line">                bytes[i] = (<span class="type">byte</span>) (bytes[i] ^ <span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> bis != <span class="literal">null</span>;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> bos != <span class="literal">null</span>;</span><br><span class="line">            bos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符转换流">字符转换流</h3><p>打印单词 大写输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InUp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test1();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入你要转换的单词 : &quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;e&quot;</span>.equalsIgnoreCase(data) || <span class="string">&quot;exit&quot;</span>.equalsIgnoreCase(data))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(data.toUpperCase());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> br != <span class="literal">null</span>;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-10">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>学习难度较难，今天的学习内容比较多，IO流的案例大多都是copy，先学了缓冲流，能大大提高字节流的效率，这应该也是以后比较常用的流，然后转换流和对象流，转换流可以键盘输入输出，主要用于编码的修改，对象流有点难度，序列化的类中的seversionUID不太好理解，周末再看看博客。了解用处，和适用场景。今天的代码量比较多，然后出了两个不太严重的BUG，学习效率不错。</p><h1 id="5-9-网络编程-反射">5.9 网络编程 反射</h1><h2 id="1-头：日期、所学内容出处-21">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-11">2.标题</h2><p>P620 618.尚硅谷_IO流与网络编程-网络编程概述<br>P621 619.尚硅谷_IO流与网络编程-IP的理解与InetAddress类的实例化<br>P622 620.尚硅谷_IO流与网络编程-端口号的理解<br>P623 621.尚硅谷_IO流与网络编程-TCP和UDP网络通信协议的对比<br>P624 622.尚硅谷_IO流与网络编程-TCP网络编程例题1<br>P625 623.尚硅谷_IO流与网络编程-TCP网络编程例题2<br>P626 624.尚硅谷_IO流与网络编程-TCP网络编程例题3<br>P627 625.尚硅谷_IO流与网络编程-浏览器访问Tomcat服务器资源操作<br>P628 626.尚硅谷_IO流与网络编程-UDP网络编程举例<br>P629 627.尚硅谷_IO流与网络编程-URL类的理解与实例化<br>P630 628.尚硅谷_IO流与网络编程-URL网络编程实现Tomcat服务端数据下载<br>P631 629.尚硅谷_反射-每天一考</p><h2 id="3-所学内容概述-11">3.所学内容概述</h2><p>InetAddree类的实例化和基本方法</p><p>网络通讯TCP和UDP ip 端口号理解</p><p>TCP通讯 传文件</p><p>UDP通讯</p><p>URL浏览器 下载服务器</p><h2 id="4、根据概述分章节描述-11">4、根据概述分章节描述</h2><h3 id="通讯的要素">通讯的要素</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220509082517251.png" alt="image-20220509082517251"></p><h3 id="InetAddress的实例化方法">InetAddress的实例化方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InetAddresseeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;192.168.10.14&quot;</span>);</span><br><span class="line">        System.out.println(ip);</span><br><span class="line">        System.out.print(<span class="string">&quot;本机ip地址 : &quot;</span>);</span><br><span class="line">        System.out.println(InetAddress.getLocalHost());</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(ip1);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">inetSocketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8082</span>);</span><br><span class="line">        System.out.println(inetSocketAddress);</span><br><span class="line">        <span class="comment">//返回主机名</span></span><br><span class="line">        System.out.println(inetSocketAddress.getHostName());</span><br><span class="line">        <span class="comment">//获得InetSocketAddress的端口</span></span><br><span class="line">        System.out.println(inetSocketAddress.getPort());</span><br><span class="line">        <span class="comment">//返回一个InetAddress对象（IP对象）</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> inetSocketAddress.getAddress();</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地ip和端口  设置IP端口</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220509082135570.png" alt="image-20220509082135570"></p><h3 id="TCP和UDP协议">TCP和UDP协议</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220509112537988.png" alt="image-20220509112537988"></p><h3 id="UDP网络编程">UDP网络编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">byte</span>[] bytes = scanner.next().getBytes();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length, InetAddress.getByName(<span class="string">&quot;192.168.56.1&quot;</span>),<span class="number">8081</span>);</span><br><span class="line">        socket.send(packet);</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sender</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="string">&quot;我是无敌暴龙兽&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = scanner.getBytes();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">8081</span>);</span><br><span class="line">        socket.send(packet);</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8081</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URL网页下载图片">URL网页下载图片</h3><p>URL实现Tomcat网络下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://i2.hdslb.com/bfs/archive/9c1780a14371ae4866e5f62d2b73d563a971e198.jpg@672w_378h_1c.webp&quot;</span>);</span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        urlConnection.connect();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;day33\\person.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fileOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        urlConnection.disconnect();</span><br><span class="line">        is.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220509110756799.png" alt="image-20220509110756799"></p><h2 id="5-章节内容-难点-11">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="TCP网络编程">TCP网络编程</h3><p>tcp发送文件 并保存 服务器反馈给客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">subject3Test</span> &#123;</span><br><span class="line">    <span class="comment">//客户端发送文件给服务器 服务器保存到本地 并返回 发送成功 给客户端 关闭连接</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">client</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">8081</span>);</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 3.</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cxy1.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//5.接受来自服务器端的数据 显示在控制台上</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> len1;</span><br><span class="line">        <span class="keyword">while</span> ((len1 = inputStream.read(bytes1)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes1,<span class="number">0</span>,len1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(bos);</span><br><span class="line">        System.out.println(<span class="string">&quot;收到来自服务器 : &quot;</span> + socket.getInetAddress().getHostAddress());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">server</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8081</span>);</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cxyCopy2.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//5.</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fis.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.服务器给予客户端反馈</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好客户端 cxy照片已经收到&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.close</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-11">6.扩展学习部分</h2><p>服务器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpTalkServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//创建服务器对象</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待服务器响应&quot;</span>);</span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">listen</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器连接成功!&quot;</span>);</span><br><span class="line">        <span class="comment">//死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//创建数据报</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> listen.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(bytes);</span><br><span class="line">            <span class="comment">//接收消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">recv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len);</span><br><span class="line">            <span class="comment">//打印消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;客户端: &quot;</span> + recv);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> listen.getOutputStream();</span><br><span class="line">            System.out.print(<span class="string">&quot;服务器: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">send</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            out.write(send.getBytes());</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">          <span class="comment">/*  out.close();</span></span><br><span class="line"><span class="comment">            in.close();</span></span><br><span class="line"><span class="comment">            ss.close();*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpTalkClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//创建客户端对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//发送数据</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> client.getOutputStream();</span><br><span class="line">            System.out.print(<span class="string">&quot;客户端: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">send</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="comment">//out.write(&quot;Hello Server!!&quot;.getBytes());</span></span><br><span class="line">            out.write(send.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建数据报</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> client.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(bytes);</span><br><span class="line">            <span class="comment">//接受消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">recv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len);</span><br><span class="line">            <span class="comment">//打印数据/消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;服务器: &quot;</span> + recv);</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">           <span class="comment">/* in.close();</span></span><br><span class="line"><span class="comment">            out.close();</span></span><br><span class="line"><span class="comment">            client.close();*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图</p><p><img src="http://10.2.51.165:4869/d69494532e7a521ae227d8a444986252" alt="img"></p><p><img src="http://10.2.51.165:4869/d9bdc5d8e6f057b9132250eb39a362bc" alt="img"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缺点其实很显而易见，无法关闭通讯，而且只能一对一聊天，在<span class="keyword">python</span>中有加入多任务的聊天，java肯定也可以，有空自己需要再 </span><br></pre></td></tr></table></figure><h2 id="7-总结-11">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天的学习任务不是很重，目标就是把IO流结束，并初步进入反射，网络编程比较简单，就是基础的TCP和UDP实现网络通信，基本都掌握了，TCP比较重要，自己也是敲了好几个不同作用的TCP聊天，自己做了一个实时聊天器，但是比较简单，只能实现一发一收，今天学习状态不错，也没出什么BUG。</p><h1 id="5-10反射">5.10反射</h1><h2 id="1-头：日期、所学内容出处-22">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-12">2.标题</h2><p>P636 634.尚硅谷_反射-反射的概述<br>P637 635.尚硅谷_反射-反射之前，类的实例化等操作<br>P638 636.尚硅谷_反射-使用反射，实现同上的操作<br>P639 637.尚硅谷_反射-反射的强大：调用类的私有结构<br>P640 638.尚硅谷_反射-如何看待反射和封装性两个技术<br>P641 639.尚硅谷_反射-Class类的理解<br>P642 640.尚硅谷_反射-获取Class实例的4种方式<br>P643 641.尚硅谷_反射-Class实例对应的结构的说明<br>P644 642.尚硅谷_反射-理解类的加载过程<br>P645 643.尚硅谷_反射-ClassLoader的理解<br>P646 644.尚硅谷_反射-使用ClassLoader加载配置文件<br>P647 645.尚硅谷_反射-通过反射，创建运行时类的对象<br>P648 646.尚硅谷_反射-举例体会反射的动态性<br>P649 647.尚硅谷_反射-提供结构丰富Person类<br>P650 648.尚硅谷_反射-获取运行时类的属性结构及其内部结构<br>P651 649.尚硅谷_反射-获取运行时类的方法结构<br>P652 650.尚硅谷_反射-获取运行时类的方法的内部结构<br>P653 651.尚硅谷_反射-获取运行时类的构造器结构<br>P654 652.尚硅谷_反射-获取运行时类的父类及父类的泛型<br>P655 653.尚硅谷_反射-获取运行时类的接口、所在包、注解等<br>P656 654.尚硅谷_反射-调用运行时类中的指定属性<br>P657 655.尚硅谷_反射-调用运行时类中的指定方法<br>P658 656.尚硅谷_反射-调用运行时类中的指定构造器<br>P659 657.尚硅谷_动态代理与Java8新特性-每天一考<br>P660 658.尚硅谷_动态代理与Java8新特性-复习：反射与Class<br>P661 659.尚硅谷_动态代理与Java8新特性-复习：ClassLoader与反射的应用<br>P662 660.尚硅谷_动态代理与Java8新特性-代理模式与动态代理<br>P663 660.尚硅谷_动态代理与Java8新特性-代理模式与动态代理<br>P664 662.尚硅谷_动态代理与Java8新特性-动态代理举例<br>P665 663.尚硅谷_动态代理与Java8新特性-AOP与动态代理的举例</p><h2 id="3-所学内容概述-12">3.所学内容概述</h2><h3 id="1-java反射机制概述">1.java反射机制概述</h3><h3 id="2-理解class类并获取class实例">2.理解class类并获取class实例</h3><h3 id="3-类的加载与ClassLoader的理解">3.类的加载与ClassLoader的理解</h3><h3 id="4-创建运行时类的对象">4.创建运行时类的对象</h3><h3 id="5-获取运行时类的完整结构">5.获取运行时类的完整结构</h3><h3 id="6-调用运行时类的指定结构">6.调用运行时类的指定结构</h3><h3 id="7-反射的应用动态代理">7.反射的应用动态代理</h3><h2 id="4、根据概述分章节描述-12">4、根据概述分章节描述</h2><h3 id="反射机制的概述">反射机制的概述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</span><br><span class="line">要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</span><br></pre></td></tr></table></figure><h3 id="获取Class实例"><strong>获取Class实例</strong></h3><h5 id="利用反射调用类">利用反射调用类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Class&lt;person&gt; clazz = person.class;</span><br><span class="line">    <span class="comment">//1.通过反射创造person类的对象</span></span><br><span class="line">    Constructor&lt;person&gt; constructor = clazz.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">    <span class="type">person</span> <span class="variable">person</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">    <span class="comment">//2.通过反射 调用对象指定的属性和方法</span></span><br><span class="line">    <span class="comment">//调用属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    age.set(person,<span class="number">10</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    show.invoke(person);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射 可以调用person类的私有的结构 私有的构造器 方法 属性</span></span><br><span class="line">    <span class="comment">//调用私有构造器</span></span><br><span class="line">    Constructor&lt;person&gt; constructor1 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">    constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">person</span> <span class="variable">person1</span> <span class="operator">=</span> constructor1.newInstance(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    System.out.println(person1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用私有属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    name.set(person1,<span class="string">&quot;LiHua&quot;</span>);</span><br><span class="line">    System.out.println(person1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用私有方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">showNation</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;showNation&quot;</span>, String.class);</span><br><span class="line">    showNation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">nation</span> <span class="operator">=</span> (String) showNation.invoke(person1, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">    System.out.println(nation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="class实例化四种方式">class实例化四种方式</h4><p><code>第三种最重要</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取class实例化的方式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//方式一 调用运行时类的属性</span></span><br><span class="line">    Class&lt;person&gt; personClass = person.class;</span><br><span class="line">    System.out.println(personClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二 通过运行时类的对象，调用getClass()</span></span><br><span class="line">    <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">person</span>&gt; personClass1 = p1.getClass();</span><br><span class="line">    System.out.println(personClass1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式三 调用Class的静态方法 forName(Sering classpath) 常用</span></span><br><span class="line">    Class&lt;?&gt; personClass2 = Class.forName(<span class="string">&quot;java1.person&quot;</span>);</span><br><span class="line">    System.out.println(personClass2);</span><br><span class="line"></span><br><span class="line">    System.out.println(personClass == personClass2);</span><br><span class="line">    System.out.println(personClass2 == personClass1);</span><br><span class="line">    <span class="comment">//方式四</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Reflection.class.getClassLoader();</span><br><span class="line">    Class&lt;?&gt; personClass3 = classLoader.loadClass(<span class="string">&quot;java1.person&quot;</span>);</span><br><span class="line">    System.out.println(personClass3);</span><br><span class="line">    System.out.println(personClass3 == personClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组元素维度一样 就是同一个class</span></span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">    System.out.println(a.getClass() == b.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对class的理解">对class的理解</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220510172236894.png" alt="image-20220510172236894"></p><h3 id="ClassLoader的理解">ClassLoader的理解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义类 系统类加载</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">    System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取扩展类加载器 系统类加载器的getParent()</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> classLoader.getParent();</span><br><span class="line">    System.out.println(parent);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展类加载器的getParent() 无法获取引导类加载器</span></span><br><span class="line">    <span class="comment">//引导类加载器 主要负责加载java的核心类库 无法加载自定义类</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">    System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">    System.out.println(classLoader1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用ClassLoader配置文件">利用ClassLoader配置文件</h4><p><strong>注意两种方式路径是不一样的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时的文件默认在当前的module下</span></span><br><span class="line">        <span class="comment">//读取配置文件 方式一</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="comment">//        pos.load(fis);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>((Objects.requireNonNull(classLoader.getResourceAsStream(<span class="string">&quot;java1/jdbc1.properties&quot;</span>))), StandardCharsets.UTF_8);</span><br><span class="line">        pos.load(is);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pos.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pos.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="创建运行时类的对象"><strong>创建运行时类的对象</strong></h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">调用<span class="keyword">new</span><span class="type">Instance</span>()此方法 创建对应的运行时类的对象</span><br><span class="line">调用空参构造器</span><br><span class="line">要是想侧方法正常地创建运行时类的对象 要求</span><br><span class="line"><span class="number">1.</span>运行时类必须提供空参的构造器</span><br><span class="line"><span class="number">2.</span>空参的构造器的访问权限得够 通常设置为Public</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Class&lt;person&gt; personClass = person.class;</span><br><span class="line">    <span class="type">person</span> <span class="variable">person</span> <span class="operator">=</span> personClass.newInstance();</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="体会反射的动态性">体会反射的动态性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>); <span class="comment">// 0 1 2</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            s = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            s = <span class="string">&quot;java1.person&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            s = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(getInstance(s));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个指定类的对象</span></span><br><span class="line"><span class="comment">classpath ： 指定类的全类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Class&lt;?&gt; objectClass = Class.forName(classPath);</span><br><span class="line">    <span class="keyword">return</span> objectClass.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取运行时类完整的结构">获取运行时类完整的结构</h3><p>博客 <a href="https://blog.csdn.net/qq_42653576/article/details/105335902?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=java%E5%8F%8D%E5%B0%84%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-105335902.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_42653576/article/details/105335902?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=java反射运行时类&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-105335902.142^v9^pc_search_result_control_group,157^v4^control&amp;spm=1018.2226.3001.4187</a></p><p>获取运行时类的方法和属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java2.person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ClassPersonTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/5/10 12:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPersonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1、取得类中的属性</span></span><br><span class="line"><span class="comment">        public Field[] getFields()</span></span><br><span class="line"><span class="comment">        返回此Class对象所表示的类或接口的public的Field。</span></span><br><span class="line"><span class="comment">        public Field[] getDeclaredFields()</span></span><br><span class="line"><span class="comment">        返回此Class对象所表示的类或接口的全部Field。</span></span><br><span class="line"><span class="comment">     Field方法中：</span></span><br><span class="line"><span class="comment">        public int getModifiers() 以整数形式返回此Field的修饰符</span></span><br><span class="line"><span class="comment">        public Class&lt;?&gt; getType() 得到Field的属性类型</span></span><br><span class="line"><span class="comment">        public String getName() 返回Field的名称。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class&lt;person&gt; clazz = person.class;</span><br><span class="line">        Field[] f1 = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : f1) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Field[] f2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : f2) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field f : f2) &#123;</span><br><span class="line">            <span class="comment">//权限修饰符</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">modifier</span> <span class="operator">=</span> f.getModifiers();</span><br><span class="line">            System.out.println(Modifier.toString(modifier));</span><br><span class="line">            <span class="comment">//数据类型</span></span><br><span class="line">            Class&lt;?&gt; type = f.getType();</span><br><span class="line">            System.out.println(type.getName());</span><br><span class="line">            <span class="comment">//变量名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fName</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            System.out.println(fName);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = person.class;</span><br><span class="line">        Method[] method = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : method) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line">            <span class="comment">//1.获取方法声明中的注解</span></span><br><span class="line">            Annotation[] annotations = m.getAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (Annotation a : annotations) &#123;</span><br><span class="line">                System.out.print(a + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.方法的权限修饰符</span></span><br><span class="line">            System.out.print(Modifier.toString(m.getModifiers()) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.方法的返回值类型</span></span><br><span class="line">            System.out.print(m.getReturnType() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.方法的方法名</span></span><br><span class="line">            System.out.print(m.getName() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.方法的参数</span></span><br><span class="line">            System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            Class&lt;?&gt;[] p = m.getParameterTypes();</span><br><span class="line">            <span class="keyword">if</span> (p.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; p.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == p.length - <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.print(p[i].getName());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(p[i].getName() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6.异常</span></span><br><span class="line">            System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">            Class&lt;?&gt;[] e = m.getExceptionTypes();</span><br><span class="line">            <span class="keyword">if</span> (e.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; e.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == e.length - <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.print(e[i].getName());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.print(e[i].getName() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何调用静态方法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220510152612168.png" alt="image-20220510152612168"></p><h2 id="5-章节内容-难点-12">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="重点-3">重点</h3><h3 id="调用运行时类的指定结构">调用运行时类的指定结构</h3><h4 id="属性">属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;person&gt; clazz = person.class;</span><br><span class="line"><span class="comment">//创建运行时类对象</span></span><br><span class="line"><span class="type">person</span> <span class="variable">person</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"><span class="comment">//获取指定的属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">id.set(person,<span class="number">1001</span>);</span><br><span class="line">System.out.println(id.get(person));</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">name.set(person,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">System.out.println(name.get(person));</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;person&gt; clazz = person.class;</span><br><span class="line">       <span class="comment">//创建运行时类对象</span></span><br><span class="line">       <span class="type">person</span> <span class="variable">person</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">       <span class="comment">//获取指定方法</span></span><br><span class="line">       <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">       show.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> show.invoke(person, <span class="string">&quot;中国&quot;</span>, <span class="number">32</span>);</span><br><span class="line">       System.out.println(invoke);</span><br></pre></td></tr></table></figure><p>构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line">Class&lt;person&gt; clazz = person.class;</span><br><span class="line">Constructor&lt;person&gt; declaredConstructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"><span class="comment">//保证可访问的</span></span><br><span class="line">declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建运行时类的对象</span></span><br><span class="line"><span class="type">person</span> <span class="variable">person</span> <span class="operator">=</span> declaredConstructor.newInstance(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">System.out.println(person);</span><br></pre></td></tr></table></figure><h3 id="BUG-3">BUG</h3><p><strong>读取配置文件的时候报错，空指针异常，查看博客，发现如果用ClassLoader的路径是本包下，应该在src或者src中的包中，不然找不到文件，和FileInputStream输入流不一样。</strong></p><p><img src="https://docimg7.docs.qq.com/image/4hYz5eC4EPXAvU5Oy_esMg.png?w=1545&amp;h=883" alt="img"></p><h2 id="6-扩展学习部分-12">6.扩展学习部分</h2><h3 id="中文乱码问题-输入流调编码格式"><strong>中文乱码问题</strong> <strong>输入流调编码格式</strong></h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220510102150119.png" alt="image-20220510102150119"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">冷静下来后，突然想起来，还是初学java时看过，java.io包中 Reader/Writer和Stream的区别。</span><br><span class="line">（年代久远，具体细节忘记了，大概是：Reader/Write是处理编码文本的，而InputStream/OutputStream只把数据当作<span class="number">2</span>进制流 ）</span><br><span class="line"></span><br><span class="line">正确解决方案</span><br><span class="line"></span><br><span class="line">Properties prop=<span class="keyword">new</span> <span class="title class_">Properties</span>();         </span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Client.class.getClassLoader().getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>));     </span><br><span class="line"></span><br><span class="line">其中“UTF-<span class="number">8</span>”，用于明确指定.properties文件的编码格式（不指定则默认使用OS的，这会造成同一份配置文件同一份代码，在linux和windows上、英文windows和中文windows之间的表现都不一致），这个参数应该和具体读取的properties文件的格式匹配。</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220510102511677.png" alt="image-20220510102511677"></p><h3 id="反射的问题"><strong>反射的问题</strong></h3><p>关于反射的一些问题：<br>说了这么多，那么通过直接new的方式或反射的方式都可以调用公共的结构，开发中用哪个？<br>这里建议是用new的方法的。</p><p>那么如何看待反射机制和面向对象中的封装性？<br>首先，封装，是将具体的实现细节隐藏，而把功能作为整体提供给类的外部使用，也就是说，公有方法能够完成类所具有的功能。当别人使用这个类时，如果通过反射直接调用私有方法，可能根本实现不了类的功能，甚至可能会出错，因此通过反射调用私有方法可以说是没有任何用处的，开发人员没有必要故意去破坏封装好的类。从这点上看，封装性并没有被破坏。</p><h2 id="7-总结-12">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>​今天学习了反射的知识，花了一天的时间，将反射过掉了，学习内容比较多，而且反射中概念的问题比较难以理解，掌握程度80%，代码基本都会使用了，概念还是有点模糊，等到后面使用到反射，再回头熟悉熟悉。今天敲的代码不是很多，也比较简单，多敲几遍，加上IDEA的联想功能，使用起来也方便。很大的BUG没有，有一个路径问题，一个编码的问题。</p><h1 id="5-13-java8新特性和动态代理">5.13 java8新特性和动态代理</h1><h2 id="1-头：日期、所学内容出处-23">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=405">https://www.bilibili.com/video/BV1Kb411W75N?p=405</a></p><h2 id="2-标题-13">2.标题</h2><p>P666 664.尚硅谷_动态代理与Java8新特性-Java8新特性内容概述<br>P667 665.尚硅谷_动态代理与Java8新特性-Java8新特性的好处<br>P668 666.尚硅谷_动态代理与Java8新特性-Lambda表达式使用举例<br>P669 667.尚硅谷_动态代理与Java8新特性-Lambda表达式语法的使用1<br>P670 668.尚硅谷_动态代理与Java8新特性-Lambda表达式语法的使用2<br>P671 669.尚硅谷_动态代理与Java8新特性-函数式接口的介绍<br>P672 670.尚硅谷_动态代理与Java8新特性-Java内置的函数式接口介绍及使用举例P673 671.尚硅谷_动态代理与Java8新特性-方法引用的使用情况1<br>P674 672.尚硅谷_动态代理与Java8新特性-方法引用的使用情况2<br>P675 673.尚硅谷_动态代理与Java8新特性-方法引用的使用情况3<br>P676 674.尚硅谷_动态代理与Java8新特性-构造器引用与项目引用的使用<br>P677 675.尚硅谷_动态代理与Java8新特性-Stream API的概述<br>P678 676.尚硅谷_动态代理与Java8新特性-Stream的实例化<br>P679 677.尚硅谷_动态代理与Java8新特性-Stream的中间操作：筛选与切片<br>P680 678.尚硅谷_动态代理与Java8新特性-Stream的中间操作：映射<br>P681 679.尚硅谷_动态代理与Java8新特性-Stream的中间操作：排序<br>P682 680.尚硅谷_动态代理与Java8新特性-Stream的终止操作：匹配与查找<br>P683 681.尚硅谷_动态代理与Java8新特性-Stream的终止操作：归约<br>P684 682.尚硅谷_动态代理与Java8新特性-Stream的终止操作：收集<br>P685 683.尚硅谷_动态代理与Java8新特性-Optional类的介绍<br>P686 684.尚硅谷_动态代理与Java8新特性-Optional类的使用举例</p><h2 id="3-所学内容概述-13">3.所学内容概述</h2><p>反射的动态代理</p><p>java8新特性</p><p>lambda表达式</p><p>函数Functional接口</p><p>方法引用与构造器引用</p><p>强大的Stream　API</p><p>Optional类</p><h2 id="4、根据概述分章节描述-13">4、根据概述分章节描述</h2><h3 id="反射的动态代理">反射的动态代理</h3><p>博客地址http://t.csdn.cn/0XKew</p><p>讲动态代理之前，首先用静态代理做个铺垫。<br>假设有一个Boy<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E7%BB%A7%E6%89%BF&amp;spm=1001.2101.3001.7020">类继承</a>自Person接口，接口里有一个方法print，现在有一个需求是不改变Boy类的情况下，在每次调用Boy的print方法前后各输出一句话。</p><h4 id="静态代理">静态代理</h4><p>使用静态代理解决这个问题：<br>首先定义一个代理类BProxy也继承Person接口，并且在代理类中添加一个Person属性。实现print方法时，我们需要调用person对象的print方法，并且在调用前后各输出一句话，这样需要调用Boy的print方法时，只需要new一个BProxy代理类来调用print方法就可以间接的调用到了。</p><h4 id="动态代理实现">动态代理实现</h4><p>还是用之前举例的Boy对象和Person接口，需要通过动态代理获取一个Boy的代理对象。<br>首先介绍需要用到的jdk提供的Proxy类和InvocationHandler接口。<br>Proxy可以帮我构造任何类（但是这个类必须是实现了某个接口）的代理类。<br>Proxy提供了一个newProxyInstance的静态方法，通过此方法可以返回任意对象的代理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方法有三个参数，第一个为需要被代理类的类加载器，这个可以通过反射获取，第二个参数是被代理类实现的接口数组，这个也可以通过反射获取，所以jdk动态代理前提是被代理类必须实现了某些接口。第三个参数为InvocationHandler对象，他相当于是被代理对象的一个封装类。下面详细介绍InvocationHandler这个接口类。<br>我们定义一个WanNengProxy类来实现这个接口类，需要实现一个invoke方法，当我们调用万能代理类的所有方法时，万能代理类都会通过调用invoke方法来调用被代理类的方法。在invoke方法中可以通过反射来调用我们实际需要调用的方法，然后就在调用前后就可以输出一句话了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> boyProxyTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/5/13 8:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">person</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">boyTest</span> <span class="keyword">implements</span> <span class="title class_">person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个小男孩&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">proxyBoy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object obj; <span class="comment">//赋值时 需要使被代理类的对象赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">proxyBoy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---before&quot;</span>);</span><br><span class="line">        <span class="comment">//实际调用方法 反射实现的</span></span><br><span class="line">        <span class="comment">//将被代理类要执行的方法a的功能声明在invoke中</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(obj,args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;<span class="comment">//返回被代理类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">boyProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boyTest</span> <span class="variable">boyTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">boyTest</span>(); <span class="comment">//boyTest被代理类对象</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">proxyBoy</span>(boyTest); <span class="comment">//代理类对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">person</span> <span class="variable">boyProxy</span> <span class="operator">=</span> (person) Proxy.newProxyInstance(boyTest.class.getClassLoader(),boyTest.class.getInterfaces(),handler);</span><br><span class="line"></span><br><span class="line">        boyProxy.print(); <span class="comment">//代理类对象执行的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-8的新特性">java 8的新特性</h3><p>java 8是java 5一来最具革命性的版本 java 8给java语言、编译器、类库、开发工具与JVM带来了大量的新特性.</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220513102142786.png" alt="image-20220513102142786"></p><h4 id="lambda表达式的使用">lambda表达式的使用</h4><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lambda表达式的写法</span></span><br><span class="line">       Comparator&lt;Integer&gt; comparator = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">       System.out.println(comparator.compare(<span class="number">32</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 方法引用</span></span><br><span class="line">       Comparator&lt;Integer&gt; comparator1 = Integer :: compare;</span><br><span class="line">       System.out.println(comparator1.compare(<span class="number">19</span>,<span class="number">29</span>));</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line">  -&gt; ： lambda操作符 或 箭头操作符</span><br><span class="line">  -&gt;左边 : lambda形参列表<span class="function"><span class="params">(其实就是接口中的抽象方法的形参列表)</span></span></span><br><span class="line"><span class="function">  -&gt;</span>右边 : lambda体(其实就是重写的抽象方法的方法体)</span><br></pre></td></tr></table></figure><p><code>lambda表达式的实例 接口的对象</code></p><h5 id="lambda表达式的使用-分六种情况介绍">lambda表达式的使用(分六种情况介绍)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lambdaTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LambdaTest1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> CC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span> 2022/5/13 10:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest1</span> &#123;</span><br><span class="line">    <span class="comment">//语法格式一 : 无参,无返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我就是终极一班&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r1.run();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Lambda：我就是终极一班&quot;</span>);</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式二 lambda需要一个参数 但是没有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">&quot;谎言真的都是坏的吗?&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        Consumer&lt;String&gt; consumer1 = (String s) -&gt; System.out.println(s);</span><br><span class="line">        consumer1.accept(<span class="string">&quot;不一定 也有善意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式三 数据类型可以省略 因为可由编译器推断得去 称为 &quot;类型推断”</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer1 = (s) -&gt; System.out.println(s);</span><br><span class="line">        consumer1.accept(<span class="string">&quot;不一定 也有善意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 语法格式四 lambda只有一个参数 参数小括号可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer1 = s -&gt; System.out.println(s);</span><br><span class="line">        consumer1.accept(<span class="string">&quot;不一定 也有善意的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式五 lambda需要两个或以上的参数  多条执行语句 并且可以有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                System.out.println(o1);</span><br><span class="line">                System.out.println(o2);</span><br><span class="line">                <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(comparator.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line">        Comparator&lt;Integer&gt; comparator2 = (o1, o2) -&gt; &#123;System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(comparator2.compare(<span class="number">3</span>,<span class="number">56</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//语法格式六 当lambda提只有一条执行语句 return和大括号若有 省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = (o1,o2) -&gt; o1.compareTo(o2);</span><br><span class="line">        System.out.println(comparator.compare(<span class="number">23</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220513150936602.png" alt="image-20220513150936602"></p><h4 id="函数式接口">函数式接口</h4><p>如果一个接口 只声明了一个抽象方法 就是函数式接口</p><h5 id="如何理解">如何理解</h5><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220513151356455.png" alt="image-20220513151356455"></p><h3 id="方法引用的使用情况">方法引用的使用情况</h3><p><a href="http://t.csdn.cn/Pf5Zh%E8%AF%A6%E7%BB%86%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80">http://t.csdn.cn/Pf5Zh详细博客地址</a></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220514124130616.png" alt="image-20220514124130616"></p><p>好处代码更加简洁，但是我觉得可读性会变差。</p><h2 id="5-章节内容-难点-13">5.章节内容 难点</h2><p>章节内容(节标题，重点)，难点(比较难理解的内容和较容易出错部分，关键代码或关键配置，BUG截图+解决方案)</p><h3 id="强大的Stream-API">强大的Stream API</h3><h3 id="Optional类">Optional类</h3><p>解决空指针问题</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220514184716265.png" alt="image-20220514184716265"></p><h4 id="Optional容器类的常用方法">Optional容器类的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Optional容器类的常用方法：</span></span><br><span class="line"><span class="comment">     * Optional.of(T t)：创建一个Optional实例</span></span><br><span class="line"><span class="comment">     * Optional.empty()：创建一个空的Optional实例</span></span><br><span class="line"><span class="comment">     * Optional.ofNullable(T t)：若t不为null,创建Optional实列，否则创建空实例</span></span><br><span class="line"><span class="comment">     * isPresent()：判断是否包含值</span></span><br><span class="line"><span class="comment">     * orElse(T t)：如果调用对象包含值，返回该值，否则返回t</span></span><br><span class="line"><span class="comment">     * orElseGet(Supplier s)：如果调用对象包含值，返回该值，否则返回s获取的值</span></span><br><span class="line"><span class="comment">     * map(Function f)：如果有值对其处理，并返回处理后的Optional，否则返回Optional.empty()</span></span><br><span class="line"><span class="comment">     * flatMap(Function mapper)：与map类似，要求返回值必须是Optional</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;Employee&gt; op = Optional.of(<span class="keyword">new</span> <span class="title class_">Employee</span>());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> op.get();</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;Employee&gt; op = Optional.empty();</span><br><span class="line">        System.out.println(op.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        Optional&lt;Employee&gt; op = Optional.ofNullable(new Employee());</span></span><br><span class="line">        Optional&lt;Employee&gt; op = Optional.ofNullable(<span class="literal">null</span>); <span class="comment">//不能传null</span></span><br><span class="line">        <span class="keyword">if</span> (op.isPresent()) &#123;</span><br><span class="line">            System.out.println(op.get());</span><br><span class="line"><span class="comment">//            System.out.println(op1.get());</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> op.orElse(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="number">888.88</span>, Employee.Status.FREE));</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp1</span> <span class="operator">=</span> op.orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>());</span><br><span class="line">        System.out.println(emp1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;Employee&gt; op = Optional.ofNullable(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="number">888.88</span>, Employee.Status.FREE));</span><br><span class="line"><span class="comment">//        Optional&lt;String&gt; s = op.map((e) -&gt; e.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(s.get());</span></span><br><span class="line">        <span class="comment">//多一步判空</span></span><br><span class="line">        Optional&lt;String&gt; s = op.flatMap((e) -&gt; Optional.of(e.getName()));</span><br><span class="line">        System.out.println(s.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getGodnessName(man);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求：获取男生心中女神的名字</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGodnessName</span><span class="params">(Man man)</span> &#123;</span><br><span class="line"><span class="comment">//        return man.getGoddness().getName();</span></span><br><span class="line">        <span class="keyword">if</span> (man != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Godness</span> <span class="variable">gn</span> <span class="operator">=</span> man.getGoddness();</span><br><span class="line">            <span class="keyword">if</span> (gn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> gn.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGodnessName2</span><span class="params">(Optional&lt;NewMan&gt; man)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> man.orElse(<span class="keyword">new</span> <span class="title class_">NewMan</span>())</span><br><span class="line">                .getGodness()</span><br><span class="line">                .orElse(<span class="keyword">new</span> <span class="title class_">Godness</span>(<span class="string">&quot;小花花&quot;</span>))</span><br><span class="line">                .getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;Godness&gt; gn = Optional.ofNullable(<span class="keyword">new</span> <span class="title class_">Godness</span>(<span class="string">&quot;小红&quot;</span>));</span><br><span class="line">        Optional&lt;NewMan&gt; op = Optional.ofNullable(<span class="keyword">new</span> <span class="title class_">NewMan</span>(gn));</span><br><span class="line"><span class="comment">//        Optional&lt;Godness&gt; gn = Optional.ofNullable(null);</span></span><br><span class="line"><span class="comment">//        Optional&lt;NewMan&gt; op = Optional.ofNullable(null);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> getGodnessName2(op);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-扩展学习部分-13">6.扩展学习部分</h2><h3 id="Python随机杯的排序">Python随机杯的排序</h3><p>按名字排序 然后是年龄 学号</p><p>放在一个二维数组中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="string">&#x27;Tom&#x27;</span>,<span class="number">19</span>,<span class="number">80</span>)</span><br><span class="line">t2 = (<span class="string">&#x27;John&#x27;</span>,<span class="number">20</span>,<span class="number">90</span>)</span><br><span class="line">t3 = (<span class="string">&#x27;Jony&#x27;</span>,<span class="number">17</span>,<span class="number">91</span>)</span><br><span class="line">t4 = (<span class="string">&#x27;Jony&#x27;</span>,<span class="number">17</span>,<span class="number">93</span>)</span><br><span class="line">t5 = (<span class="string">&#x27;Json&#x27;</span>,<span class="number">21</span>,<span class="number">85</span>)</span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="built_in">list</span>.append(t1)</span><br><span class="line"><span class="built_in">list</span>.append(t2)</span><br><span class="line"><span class="built_in">list</span>.append(t3)</span><br><span class="line"><span class="built_in">list</span>.append(t4)</span><br><span class="line"><span class="built_in">list</span>.append(t5)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">list</span>[i][z] &gt; <span class="built_in">list</span>[j][z]:</span><br><span class="line">                <span class="built_in">list</span>[i],<span class="built_in">list</span>[j] = <span class="built_in">list</span>[j],<span class="built_in">list</span>[i]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">list</span>[i][z]&lt;<span class="built_in">list</span>[j][z]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h4 id="利用java写出来">利用java写出来</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + name +<span class="string">&quot;, &quot;</span> + age +<span class="string">&quot;, &quot;</span> + id +<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    Comparator&lt;User&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> (User)o1;</span><br><span class="line">                <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User)o2;</span><br><span class="line">                <span class="type">int</span> <span class="variable">com</span> <span class="operator">=</span> u1.getName().compareTo(u2.getName());</span><br><span class="line">                <span class="keyword">if</span> (com != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> com;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">intcom</span> <span class="operator">=</span> Integer.compare(u1.getAge(), u2.getAge());</span><br><span class="line">                    <span class="keyword">if</span> (intcom != <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> intcom;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Integer.compare(u1.getId(), u2.getId());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类型不匹配&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    TreeSet&lt;User&gt; List1 = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparator);</span><br><span class="line">    List1.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">19</span>,<span class="number">80</span>));</span><br><span class="line">    List1.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;John&quot;</span>,<span class="number">20</span>,<span class="number">90</span>));</span><br><span class="line">    List1.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jony&quot;</span>,<span class="number">17</span>,<span class="number">91</span>));</span><br><span class="line">    List1.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jony&quot;</span>,<span class="number">17</span>,<span class="number">93</span>));</span><br><span class="line">    List1.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Json&quot;</span>,<span class="number">21</span>,<span class="number">85</span>));</span><br><span class="line">    System.out.println(List1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结-13">7.总结</h2><p>重点是哪些知识比较重要，难点是你在学习过程中觉得比较繁琐,掌握起来有一点</p><p>今天学了java8的新特性，因为目前开发主流的还是java8，所以就只看到了java8的新特性，java高级也学完了。今天的学习内容有点难度，lambda和方法引用，两个简写代码量的方式，但是不太好理解，实际使用还没有那么成熟，代码敲了八九遍，想要顺便使用还是有点不熟练的，看博客有多点的心理体会，今天学了一上午，下午因为精神不太好，基本没看进去，学习状态一般吧。</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 月笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/posts/suanfa.html"/>
      <url>/posts/suanfa.html</url>
      
        <content type="html"><![CDATA[<h1 id="力扣算法刷题——备战蓝桥杯">力扣算法刷题——备战蓝桥杯</h1><h2 id="1月9号之前的算法题">1月9号之前的算法题</h2><blockquote><p>之前做了很多算法题，但是因为没有写笔记的原因，效果不太好，先把之前写的算法题的代码都放上来。以后写的算法题，要做好笔记。因为力扣做题都是给你一个函数的模版让你写题目，一般都是有返回值的，所以都可以放一个代码中去。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> December;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.rmi.CORBA.Util;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        runningSum(arr);</span><br><span class="line">        canConstruct(<span class="string">&quot;aab&quot;</span>,<span class="string">&quot;baa&quot;</span>);</span><br><span class="line">        solution.minOperations(<span class="string">&quot;110&quot;</span>);</span><br><span class="line">        System.out.println(solution.secondHighest(<span class="string">&quot;ck077&quot;</span>));</span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">22</span>,<span class="number">27</span>,<span class="number">33</span>,<span class="number">57</span>,<span class="number">66</span>,<span class="number">77</span>&#125;;</span><br><span class="line"><span class="comment">//        int[] arr = new int[]&#123;-1,0,3,9,11,13,22,27,33,57,66,77&#125;;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> searchInsert(arr1, <span class="number">1</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="type">int</span>[] nums  = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        solution.twoSum(nums,<span class="number">8</span>);</span><br><span class="line">        solution.maxSubArray(nums);</span><br><span class="line">        solution.lengthOfLongestSubstring(<span class="string">&quot;pwwkep&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;123456789&quot;</span>.substring(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>,s2 = <span class="string">&quot;eidboaoo&quot;</span>;</span><br><span class="line">        solution.checkInclusion(s1, s2);</span><br><span class="line">        solution.mostCompetitive(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>&#125;,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    力扣P1673贪心算法 自己半暴力做出来的 题解都用了数据栈 所以88个点只过了86个 后面学数据栈回头再来做一下</span></span><br><span class="line"><span class="comment">//    public int[] mostCompetitive(int[] nums, int k) &#123;</span></span><br><span class="line"><span class="comment">//        int len  = nums.length;</span></span><br><span class="line"><span class="comment">//        int[] ints = new int[k];</span></span><br><span class="line"><span class="comment">//        int min=0;</span></span><br><span class="line"><span class="comment">//        int start = 0;</span></span><br><span class="line"><span class="comment">//        for (int x = 0;x&lt;k;x++)&#123;</span></span><br><span class="line"><span class="comment">//            for (int n = start; n &lt; len-k+x;n++)&#123;</span></span><br><span class="line"><span class="comment">//                if (nums[min] &gt; nums[n+1])&#123;</span></span><br><span class="line"><span class="comment">//                    min = n+1;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            ints[x] = nums[min];</span></span><br><span class="line"><span class="comment">//            start = min;</span></span><br><span class="line"><span class="comment">//            min +=1 ;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return ints;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//正确解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> n-k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.size()&gt;<span class="number">0</span> &amp;&amp; last&gt;<span class="number">0</span> &amp;&amp; stack.get(stack.size()-<span class="number">1</span>)&gt;nums[i]) &#123;</span><br><span class="line">                stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">                last --;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = stack.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//P567 字符串排序优解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkInclusion</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=s1.length(),n2=s2.length();</span><br><span class="line">        <span class="keyword">if</span> (n1&gt;n2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;n1;x++)&#123;</span><br><span class="line">            cnt[s1.charAt(x) - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">str</span> <span class="operator">=</span> s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            cnt[str] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (cnt[str] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                cnt[s2.charAt(left) - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i-left+<span class="number">1</span> == n1)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1480</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] runningSum(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] += nums[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public boolean checkInclusion(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//        int n = s1.length(), m = s2.length();</span></span><br><span class="line"><span class="comment">//        if (n &gt; m) &#123;</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int[] cnt = new int[26];</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line"><span class="comment">//            --cnt[s1.charAt(i) - &#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int left = 0;</span></span><br><span class="line"><span class="comment">//        for (int right = 0; right &lt; m; ++right) &#123;</span></span><br><span class="line"><span class="comment">//            int x = s2.charAt(right) - &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">//            ++cnt[x];</span></span><br><span class="line"><span class="comment">//            while (cnt[x] &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//                --cnt[s2.charAt(left) - &#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">//                ++left;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (right - left + 1 == n) &#123;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//力扣P383</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ransomNote.length() &gt; magazine.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray()) &#123;</span><br><span class="line">            cnt[c - <span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : ransomNote.toCharArray()) &#123;</span><br><span class="line">            cnt[c - <span class="string">&#x27;a&#x27;</span>] --;</span><br><span class="line">            <span class="keyword">if</span>(cnt[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P412</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fizzBuzz</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;FizzBuzz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arrayList.add(<span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arrayList.add(String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P876 链表中间节点</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P1769</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] minOperations(String boxes) &#123;</span><br><span class="line">        String[] split = boxes.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[split.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;split.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">0</span>;x&lt;split.length;x++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (split[x].equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">                    count += Math.abs(x-i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ints[i] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//力扣P1796</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">secondHighest</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; ay = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">47</span> &amp;&amp; i &lt;  <span class="number">58</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!ay.contains(i - <span class="number">48</span>))&#123;</span><br><span class="line">                    ay.add(i-<span class="number">48</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(ay);</span><br><span class="line">        <span class="keyword">if</span> (ay.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ay.get(ay.size()-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P35优解 双指针</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)&#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P704二分查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">            <span class="keyword">if</span> (num == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P977 输入一个升序的数组，然后返回一个数据各位置平方，也是升序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">//第一种 自己就是直接每位平方再重新排序 执行时间5ms</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line">        <span class="comment">//    nums[i] = nums[i]*nums[i];</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//Arrays.parallelSort(nums);</span></span><br><span class="line">        <span class="comment">//return nums;</span></span><br><span class="line">        <span class="comment">//下面是双指针</span></span><br><span class="line">        <span class="comment">//思路 因为是升序，所以数的平方的最大值一定是两边,把这个大的数 放新数组右边 然后两界限往内夹</span></span><br><span class="line">        <span class="type">int</span>[] result  = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//给result倒着插入的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> result.length-<span class="number">1</span>; <span class="comment">//右界限</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//左界限</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123; <span class="comment">//当左边等于右边 停止</span></span><br><span class="line">            <span class="keyword">if</span> (nums[left]*nums[left] &lt; nums[right]*nums[right])&#123; <span class="comment">//两边判断大小 右边大</span></span><br><span class="line">                result[k--] = nums[right]*nums[right]; <span class="comment">//大的插入最新数组右边 右边下标-1</span></span><br><span class="line">                right--; <span class="comment">//右界限往内移1</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//左边大</span></span><br><span class="line">                result[k--] = nums[left]*nums[left]; <span class="comment">//大的插入最新数组右边 左边下标-1</span></span><br><span class="line">                left++; <span class="comment">//左界限往内移1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P189 轮转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//int count = nums.length;</span></span><br><span class="line">        <span class="comment">//int newNums[] = new int[count];</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; count; i++) &#123;</span></span><br><span class="line">        <span class="comment">//    newNums[(i+k) % count] = nums[i];</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//System.arraycopy(newNums, 0, nums, 0, count); //打印</span></span><br><span class="line">        reversal(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        reversal(nums,<span class="number">0</span>,k-<span class="number">1</span>);</span><br><span class="line">        reversal(nums,k,nums.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转 下标为start 和 end 间的反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversal(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)&#123;</span><br><span class="line">        <span class="keyword">while</span> (start&lt;end)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P283移动〇</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length,left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] != <span class="number">0</span>)&#123;</span><br><span class="line">                res(nums,left,right);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">res</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[x];</span><br><span class="line">        nums[x] = nums[y];</span><br><span class="line">        nums[y] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p344 反转字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = s.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1832 全字母句</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkIfPangram</span><span class="params">(String sentence)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] booleans = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sentence.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> sentence.charAt(i);</span><br><span class="line">            booleans[c - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">boolean</span> x : booleans)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!x)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣217</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p1 两数之和优解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123; <span class="comment">//是否有该key</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P3 无重复字符的最长子串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(ch))&#123;</span><br><span class="line">                start = Math.max(map.get(ch)+<span class="number">1</span>,start);</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max,end - start + <span class="number">1</span>);</span><br><span class="line">            map.put(ch,end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//p53最大数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> nums[<span class="number">0</span>], previous = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i :nums)&#123;</span><br><span class="line">            previous = Math.max(previous+i, i);</span><br><span class="line">            ans = Math.max(previous, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p88</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> m -<span class="number">1</span>,p2 = n -<span class="number">1</span>,length = m + n -<span class="number">1</span>,i;</span><br><span class="line">        <span class="keyword">while</span> (p1&gt;=<span class="number">0</span> || p2 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == -<span class="number">1</span>)&#123;</span><br><span class="line">                i = nums2[p2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p2 == -<span class="number">1</span>)&#123;</span><br><span class="line">                i = nums1[p1--];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2])&#123;</span><br><span class="line">                i = nums2[p2--];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                i = nums1[p1--];</span><br><span class="line">            &#125;</span><br><span class="line">            nums1[length--] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String x)</span> &#123;</span><br><span class="line">        String[] s = x.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s[i]);</span><br><span class="line">            s[i] = stringBuffer.reverse().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//P19 删除链表倒数第N个结点</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">second</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line">        second.next = second.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//力扣P1672</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumWealth</span><span class="params">(<span class="type">int</span>[][] accounts)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] i: accounts)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k : i)&#123;</span><br><span class="line">                max1 += k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max1 &gt; max)&#123;</span><br><span class="line">                max = max1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还没怎么学习的链表题目中也有几道，后面学数据结构的时候再巩固一下 自定义链表代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> December;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val, ListNode next) &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="力扣题记">力扣题记</h2><h3 id="力扣P1673贪心算法">力扣P1673贪心算法</h3><ul><li>自己半暴力做出来的 题解都用了数据栈 所以88个点只过了86个 后面学数据栈回头再来做一下</li></ul><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230109223549100.png" alt="image-20230109223549100"></p><ul><li>没过的原因自己也知道，因为自己空间复杂度是k*nums.length也就是所需要的数组长度和原数组的长度的循环次数 下面是自己的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span>  <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="type">int</span> min=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//思路:从倒数k之前先找最小值(防止k取不够) 然后从该索引再开始 取的位置可以往后移一格 以此类推</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;k;x++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> start; n &lt; len-k+x;n++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[min] &gt; nums[n+<span class="number">1</span>])&#123;</span><br><span class="line">                min = n+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ints[x] = nums[min];</span><br><span class="line">        start = min;</span><br><span class="line">        min +=<span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是python中似乎比较简单，因为可以从尾部删除，我用java模仿的话，模仿出来需要新建一个arrayList</li><li>题解原理：看了很久才明白题解代码的巧妙之处先把数组中值加一个到列表，然后如果该值不满足三个任何条件中一个(代码中有)，就再往列表加入一个数组的值，再把新加入的值和后面的数组的值比，如果比后面的大就删除。如此一直，直到删除的数够了(比如数组长度是10，我需要数组长度为3的最具竞争力的，那我需要把原数组的值删除7次，只要3个值)，需要的最具竞争力的数组也够了。</li></ul><blockquote><p>下面是python和java对该题使用单调栈的代码对比</p></blockquote><div class="tabs" id="contrast"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#contrast-1">python代码</button></li><li class="tab"><button type="button" data-href="#contrast-2">java代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="contrast-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mostCompetitive</span>(<span class="params">self, nums, k</span>):</span><br><span class="line">        stack = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        last = n-k</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> last <span class="keyword">and</span> stack[-<span class="number">1</span>] &gt; nums[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">                last -= <span class="number">1</span></span><br><span class="line">            stack.append(nums[i])</span><br><span class="line">        <span class="keyword">return</span> stack[:k]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="contrast-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> n-k;</span><br><span class="line">        <span class="comment">//核心代码是下面的循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (stack.size()&gt;<span class="number">0</span> &amp;&amp; last&gt;<span class="number">0</span> &amp;&amp; stack.get(stack.size()-<span class="number">1</span>)&gt;nums[i]) &#123;</span><br><span class="line">                stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">                last --;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            res[i] = stack.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="力扣P136-异或算法">力扣P136 异或算法</h3><blockquote><p>题目不难 简单来说就是找出数组中只存在一个的数 其他的数字都是出现过两次 找只出现过一次的那个数                      利用到了  异或中的交换律 数组中所有的数都异或 有两个的 都会变成0 最后只会剩下出现过一次的数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">              nums[<span class="number">0</span>] ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="力扣P15-双指针">力扣P15 双指针</h3><blockquote><p>题目为给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p>难点在防止重复的地方  代码讲解点都在代码中了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums); <span class="comment">//先排序</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//创建一个list里面好添加需要的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; nums.length - <span class="number">2</span>; x++) &#123; <span class="comment">//循环直到倒数第三个</span></span><br><span class="line">        <span class="keyword">if</span> (nums[x] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//如果第一位大于0 总和就永远不会小于0</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; nums[x] == nums[x - <span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">//如果该数和前一位相同 暂停本次循环 防止重复数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x + <span class="number">1</span>, z = nums.length - <span class="number">1</span>;  <span class="comment">//设置左和右指针</span></span><br><span class="line">        <span class="keyword">while</span> (y &lt; z) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[x] + nums[y] + nums[z]; <span class="comment">//相加的总和值</span></span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123; <span class="comment">//小于0 左指针 向右</span></span><br><span class="line">                y++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123; <span class="comment">//大于0 右指针向左</span></span><br><span class="line">                z--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(nums[x], nums[y], nums[z])));</span><br><span class="line">                <span class="keyword">while</span> (y &lt; z &amp;&amp; nums[y] == nums[++y]) ; <span class="comment">//当条件满足时 为满足不重复的三元组 左右指针的值就不能跟原来一样了 加入while循环 直到指针区间的两边 跟满足条件的时候不同</span></span><br><span class="line">                <span class="keyword">while</span> (y &lt; z &amp;&amp; nums[z] == nums[--z]) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蓝桥杯题库">蓝桥杯题库</h2><h3 id="编号2120">编号2120</h3><p>题目不难，找到规律就行了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230315093825402.png" alt="image-20230315093825402"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//在此输入您的代码...</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">Ax</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(Ax.substring(<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>]; <span class="comment">//A9超出 所以设置6个</span></span><br><span class="line">    <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">aNumOne</span> <span class="operator">=</span> <span class="number">1189</span>; <span class="comment">//定义初始值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">bNumOne</span> <span class="operator">=</span> <span class="number">841</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        a[i] = aNumOne;</span><br><span class="line">        aNumOne = aNumOne / <span class="number">2</span>; <span class="comment">//取整添加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">        b[j] = bNumOne;</span><br><span class="line">        bNumOne = bNumOne / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(a[num/<span class="number">2</span>]);<span class="comment">//偶数按索引取数组</span></span><br><span class="line">        System.out.println(b[num/<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(b[(num-<span class="number">1</span>)/<span class="number">2</span>]);<span class="comment">//奇数数前后取头</span></span><br><span class="line">        System.out.println(a[(num+<span class="number">1</span>)/<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    scan.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编号468">编号468</h3><p>回文日期</p><blockquote><p>题目很清晰明了，但是需要讨论的特殊条件比较多。就是日期规范性，每个月每个天数不一样，还有日期开头不为0，学份12月以内，不可为0，等等。在我最初的版本都是有一条一条if规范出来的。后来优化算法的时候，发现有些测试点，蓝桥杯是没有设置一些特殊检查点的所以像30天和28 29这种特殊月。所以后面闰月和2月都没用添加判断语句，但是也顺利通过了，耗时有点久。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">99999999</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">99999999</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> i+<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">yearage</span>  <span class="operator">=</span> i/<span class="number">1000000</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fanzhuanyearage</span> <span class="operator">=</span> yearage/<span class="number">10</span>+yearage%<span class="number">10</span>*<span class="number">10</span>;<span class="comment">//反转day</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">yearlaster</span>  <span class="operator">=</span> i%<span class="number">1000000</span>/<span class="number">10000</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fanzhuanyearlaster</span>  <span class="operator">=</span> yearlaster/<span class="number">10</span>+yearlaster%<span class="number">10</span>*<span class="number">10</span>; <span class="comment">//反转month</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> i%<span class="number">10000</span>/<span class="number">100</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">day</span>   <span class="operator">=</span> i%<span class="number">100</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastday</span> <span class="operator">=</span> i%<span class="number">10</span>; <span class="comment">//最后一天不能为0 因为反转以后首不为0</span></span><br><span class="line">            <span class="keyword">if</span>(month &lt;= <span class="number">12</span> &amp;&amp;  day &lt;= <span class="number">31</span> &amp;&amp;  lastday != <span class="number">0</span> &amp;&amp; fanzhuanyearage&lt;=<span class="number">31</span> &amp;&amp; fanzhuanyearlaster&lt;=<span class="number">12</span> &amp;&amp; fanzhuanyearlaster != <span class="number">0</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(huiwen(num))&#123;</span><br><span class="line">                 <span class="comment">//设置回文 为第一个  </span></span><br><span class="line">                <span class="keyword">if</span>(res &gt; Integer.parseInt(num))&#123;</span><br><span class="line">                    res = Integer.parseInt(num);</span><br><span class="line">                    System.out.println(num);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果为AB回文直接停止</span></span><br><span class="line">                <span class="keyword">if</span>(ABhuiwen(num))&#123;</span><br><span class="line">                    System.out.println(num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断闰年</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ruiyear</span><span class="params">(String num)</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> Integer.parseInt(num);</span><br><span class="line">      <span class="keyword">return</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断回文数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">huiwen</span><span class="params">(String num)</span>&#123;</span><br><span class="line">      <span class="type">char</span>[] c  = num.toCharArray();</span><br><span class="line">      <span class="keyword">return</span> c[<span class="number">0</span>] == c[<span class="number">7</span>] &amp;&amp; c[<span class="number">1</span>] == c[<span class="number">6</span>] &amp;&amp; c[<span class="number">2</span>] == c[<span class="number">5</span>] &amp;&amp; c[<span class="number">3</span>] == c[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断AB回文数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ABhuiwen</span><span class="params">(String num)</span>&#123;</span><br><span class="line">      <span class="type">char</span>[] c  = num.toCharArray();</span><br><span class="line">      <span class="keyword">return</span> c[<span class="number">0</span>] == c[<span class="number">2</span>] &amp;&amp; c[<span class="number">2</span>] == c[<span class="number">5</span>] &amp;&amp; c[<span class="number">5</span>] == c[<span class="number">7</span>] &amp;&amp; c[<span class="number">1</span>] == c[<span class="number">3</span>] &amp;&amp; c[<span class="number">3</span>] == c[<span class="number">4</span>] &amp;&amp; c[<span class="number">4</span>] == c[<span class="number">6</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="今日小爬虫">今日小爬虫</h2><p>1月27号 抖音刷到一个Java爬虫的案例 自己试着更改敲了一遍</p><blockquote><p>难点在两次连接 所要实现的代码功能为 利用java爬虫爬取该页面中，点击图片后跳转的链接中的高清背景图</p></blockquote><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230127143522704.png" alt="image-20230127143522704"></p><blockquote><p>跳转后的页面 我拿赵怀真举例 检查中利用标签如何使用 已经写在图片中了</p></blockquote><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230127144106376.png" alt="image-20230127144106376"></p><p>使用IDEA 需要导入jsoup包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> htmlPhoto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Connection;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">htmlPhoto</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//Java爬虫</span></span><br><span class="line">        <span class="comment">//1.建立连接</span></span><br><span class="line">        <span class="comment">//网页链接 https://pvp.qq.com/web201605/herolist.shtml</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> Jsoup.connect(<span class="string">&quot;https://pvp.qq.com/web201605/herolist.shtml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过链接获取 Document对象</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> connection.get();</span><br><span class="line">        <span class="comment">//2.找到ul标签对象</span></span><br><span class="line">        <span class="comment">//通过Document对象 找class为 herolist clearfix的ul</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">elementUl</span> <span class="operator">=</span> document.selectFirst(<span class="string">&quot;[class=herolist clearfix]&quot;</span>);</span><br><span class="line">        <span class="comment">//找ul中的li</span></span><br><span class="line">        <span class="keyword">assert</span> elementUl != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elementLis</span> <span class="operator">=</span> elementUl.select(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.for 循环读取li集合</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">countHero</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//共计下载的图片数量</span></span><br><span class="line">        <span class="keyword">for</span> (Element elementLi:elementLis)&#123;</span><br><span class="line">            <span class="comment">//得到li中的a-href的路径</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">elementA</span> <span class="operator">=</span> elementLi.selectFirst(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            <span class="comment">//a标签中间的名字</span></span><br><span class="line">            <span class="keyword">assert</span> elementA != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">heroName</span> <span class="operator">=</span> elementA.text();</span><br><span class="line">            <span class="comment">//获取href的内容 然后拼接前面的链接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">hrefUrl</span> <span class="operator">=</span> elementA.attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;https://pvp.qq.com/web201605/&quot;</span> + hrefUrl;</span><br><span class="line">            <span class="comment">//创建新的连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> Jsoup.connect(path);</span><br><span class="line">            <span class="comment">//根据链接创建新的document对象</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">newDocument</span> <span class="operator">=</span> connect.get();</span><br><span class="line">            <span class="type">Element</span> <span class="variable">elementDiv</span> <span class="operator">=</span> newDocument.selectFirst(<span class="string">&quot;[class=zk-con1 zk-con]&quot;</span>);</span><br><span class="line">            <span class="comment">//获取element中的style属性</span></span><br><span class="line">            <span class="keyword">assert</span> elementDiv != <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">backgroundURL</span> <span class="operator">=</span> elementDiv.attr(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">            <span class="comment">//background:url(&#x27;//game.gtimg.cn/images/yxzj/img201606/skin/hero-info/545/545-bigskin-1.jpg&#x27;) center 0</span></span><br><span class="line">            <span class="comment">//裁出需要的图片地址 两个单引号中间</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> backgroundURL.indexOf(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> backgroundURL.lastIndexOf(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">photoURL</span> <span class="operator">=</span> backgroundURL.substring(left + <span class="number">1</span>, right);</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https:&quot;</span> + photoURL);</span><br><span class="line">            <span class="comment">//已经获取到了图片的路径 url了 只需要通过IO流进行下载即可</span></span><br><span class="line">            System.out.println(<span class="string">&quot;下载&quot;</span> + heroName+<span class="string">&quot;的高清1080P图片...&quot;</span>);</span><br><span class="line">            <span class="comment">//输入流 读取刚刚的图片</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> url.openStream();</span><br><span class="line">            <span class="comment">//输出流 下载到本地</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E://IOTest/wzImg/&quot;</span> + heroName + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">//下载图片</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> is.read(bytes);</span><br><span class="line">            <span class="keyword">while</span> (count!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,count);</span><br><span class="line">                fos.flush();</span><br><span class="line">                count = is.read(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            fos.close();</span><br><span class="line">            countHero+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;共计&quot;</span>+countHero+<span class="string">&quot;位英雄图片全部下载完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用该案例以及方法的使用，可以用java爬虫到很多不加密网站的图片或者视频链接 进行下载 如图已下载到该文件夹</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230127185113640.png" alt="image-20230127185113640"></p><h3 id="BUG点">BUG点</h3><p>网页的一个BUG，我看网页中113个英雄，下载只有93个。我自己的代码是没什么问题的，然后检查中也是113个标签，当我不知所措的时候，我点开了网页的源代码。发现其中是从云中君开始的，也就是源代码中只有93英雄，但是检查中的确英雄数量是齐全的，所以应该是他网页的一些问题，但为什么这样我也不清楚，检查和源代码不一样，页面显示的效果竟然和源代码不一样。但是问题不大，思路已经清楚了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230131191045116.png" alt="image-20230131191045116"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20230131191214943.png" alt="image-20230131191214943"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GZ-07 综合分析</title>
      <link href="/posts/dashuju.html"/>
      <url>/posts/dashuju.html</url>
      
        <content type="html"><![CDATA[<p>#7月综合分析</p><h2 id="如何解决Job运行效率低的问题">如何解决Job运行效率低的问题</h2><p>在模块B中出现某些Job运行时间较长，你认为可能是哪些情况造成？有什么相应的处理办法吗？将内容编写至对应报告中。</p><ol><li>可能是程序中出现了较多的网络IO操作，如远程调用，RPC等，会造成程序运行时间较长；</li><li>可能是spark程序中存在较多的计算任务，如计算量大的排序、递归，或者数据量较大，程序处理过程比较复杂，会造成程序运行时间较长；</li><li>可能是spark集群的配置问题，比如内存、cpu等不足或者不合理，会影响运行效率；</li><li>可能是spark应用程序使用的较低版本，造成程序性能较低；</li></ol><p>相应的处理办法：</p><ol><li>尽可能减少网络IO操作，尝试本地化调用；</li><li>提升程序性能，优化算法和架构；</li><li>合理配置spark集群，保证资源充足；</li><li>更新spark应用程序使用的版本，保证性能。</li></ol><p>##对于数据挖掘模块中的用户推荐有什么好的建议</p><p>在模块C中使用基于用户的推荐系统思路对用户的相似性进行计算，从而为每个用户推荐商品，你认为可以从哪些方面再进行优化？这种推荐策略对业务的发展会起到什么样的作用？将内容编写至对应报告中。</p><p>一、基于用户的推荐系统优化方面：<br>1、引入更多的用户行为数据，比如用户的购买趋势、搜索习惯、浏览历史、点赞记录等，这些数据可以更加精准的找到用户的相似性，从而提高推荐精度。<br>2、结合上下文信息，比如用户当前的位置、设备类型、时间等，这些信息可以更加准确的给出推荐内容。<br>3、采用互信息算法，可以找到用户未来可能会感兴趣的内容，而不仅仅是基于历史行为的内容。 二、基于用户的推荐系统对业务发展的作用：<br>1、提高用户对产品的兴趣，让用户更容易发现有价值的内容，从而提高用户的忠诚度，降低用户流失率；<br>2、提升用户体验，更加精准的把用户想要看到的内容推荐给用户，让用户能够在利用有限的时间里，找到最有价值的内容；<br>3、提升商业价值，可以更加精准的把产品推荐给有需求的用户，从而提高广告的投放效率，节省成本，提高收益。</p><h2 id="数仓中Hive内外表对比">数仓中Hive内外表对比</h2><p>Hive内外表之间的主要区别是数据存储方式不同。<br>Hive内表将数据存储在HDFS中，而Hive外表将数据存储在外部存储系统中，如HBase、Amazon S3等。<br>Hive内表不支持对数据进行更新和删除操作，而Hive外表可以支持对数据进行更新和删除操作。 Hive内表访问速度快，而Hive外表访问速度较慢。</p><h2 id="对于分组排序的理解">对于分组排序的理解</h2><p>请问Hive SQL有哪三种分组排序，他们各自的特点是什么。将内容编写至对应报告中。</p><p>Hive SQL有三种分组排序：<br>1.排序分组：这是Hive SQL中最常用的分组排序。它按照定义的字段进行排序，然后将它们分组。 2.分组分组：这种排序首先将记录分组，然后再按照定义的字段进行排序。<br>3.Hash分组：这种排序将记录分为多组，每组都有自己的哈希值。每组中的记录按照定义的字段进行排序。<br>总之，这三种分组排序都是按照定义的字段进行排序，但是排序的顺序不同。排序分组将记录按照定义的字段进行排序，然后再分组；分组分组则将记录先分组，然后再按照定义的字段进行排序；最后，Hash分组将记录分为多组，每组都有自己的哈希值，并且每组中的记录按照定义的字段进行排序。</p><h2 id="UDF-UDAF-UDTF的区别">UDF/UDAF/UDTF的区别</h2><p>UDF（User Defined Function）是用户定义函数，是一种在Hive SQL中添加自定义函数的方式，可以将复杂的逻辑封装为函数，以便在SQL语句中使用，从而提高SQL处理效率。<br>UDAF（User Defined Aggregate Function）是用户定义聚合函数，是一种在Hive SQL中添加自定义聚合函数的方式，可以对多行数据进行聚合操作，从而得到更好的结果。<br>UDTF（User Defined Table Function）是用户定义表函数，是一种在Hive SQL中添加自定义表函数的方式，可以根据输入的参数生成多行输出，从而实现对Hive表的转换、拆分和聚合等操作。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖优化</title>
      <link href="/posts/ea7374cf.html"/>
      <url>/posts/ea7374cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="11-3-优化前git-linux-Redis">11.3 优化前git linux Redis</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述">2.所学内容概述</h2><h3 id="Git命令">Git命令</h3><p>git在之前学过一遍，做博客的时候也应用过，已经很熟悉了。记下命令吧</p><p>本地仓库的操作</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">git status</td><td style="text-align:center">查看文件状态</td></tr><tr><td style="text-align:center">git add</td><td style="text-align:center">将文件修改加入暂存区</td></tr><tr><td style="text-align:center">git reset</td><td style="text-align:center">将暂存区的文件取消暂存或者切换版本</td></tr><tr><td style="text-align:center">git commit</td><td style="text-align:center">将暂存区的文件修改提交到版本库</td></tr><tr><td style="text-align:center">git log</td><td style="text-align:center">查看日志</td></tr></tbody></table><p>远程仓库操作</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">git remote</td><td style="text-align:center">查看远程仓库</td></tr><tr><td style="text-align:center">git remote add</td><td style="text-align:center">添加远程仓库</td></tr><tr><td style="text-align:center">git clone</td><td style="text-align:center">从远程仓库克隆</td></tr><tr><td style="text-align:center">git pull</td><td style="text-align:center">从远程仓库拉取</td></tr><tr><td style="text-align:center">git push</td><td style="text-align:center">推送到远程仓库</td></tr></tbody></table><p>标签操作 可以切换版本和更新时间</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git tag</td><td>列出已有的标签</td></tr><tr><td>git tag [name]</td><td>创建标签</td></tr><tr><td>git push [shortName] [name]</td><td>将标签推送远程仓库</td></tr><tr><td>git checkout -b [branch] [name]</td><td>检出标签</td></tr></tbody></table><p>在IDEA中集成使用Git</p><p>==在上面VCS中，点commit 选git 然后把路径改成自己git.exe安装的路径 就完成了IDEA集成，设置和远程仓库，就能用了==</p><ol><li>本地初始仓库<ul><li>选择VCS选项卡 —&gt; 创建Git仓库 —&gt; 选择需要被Git管理的目录 —&gt; 确定</li></ul></li><li>从远程仓库克隆（常用）<ul><li>这个可以自己选择克隆的本地位置</li><li>可以直接把远程仓库的代码都克隆到本地</li><li>远程克隆下来的项目会自带一个文件：<code>.gitignore</code>文件，在里面的信息是代表哪些文件不需要交给git管理</li></ul></li></ol><h3 id="Linux">Linux</h3><p>比较简单和基础，过一遍发现是自己都会的，简单的安装软件配置环境，还是很easy的</p><h3 id="Redis">Redis</h3><p>跟着视频把Redis安装完成了</p><h4 id="Linux安装Redis">Linux安装Redis</h4><ol><li><p>将Redis安装包上传Linux</p></li><li><p>解压安装包，改成你自己的redis版本，路径解压到<code>/usr/local</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redisVersion.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure></li><li><p>安装Redis的依赖环境gcc，编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖环境</span></span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>进入redis，编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis根目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>进入redis的src目录，进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到src目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis根目录/src</span><br><span class="line"><span class="comment"># 进行安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ol><h4 id="Redis启动和停止">Redis启动和停止</h4><p>设置一个后台运行，需要先修改redis.conf文件把<code>aemonize on</code>字段，将其修改为<code>daemonize yes</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行server 选择配置文件 后台运行</span></span><br><span class="line">src/redis-server ./redis.conf</span><br></pre></td></tr></table></figure><h4 id="Redis添加密码登陆">Redis添加密码登陆</h4><p>还是修改redis.conf配置文件，找到<code>requirepass</code>这行，将其注释去掉，并在后面写上自己的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新启动</span></span><br><span class="line">src/redis-server ./redis.conf </span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录时同时进行认证</span></span><br><span class="line">src/redis-cli -h localhost -p 6379 -a 密码</span><br><span class="line"><span class="comment"># 需要再次</span></span><br></pre></td></tr></table></figure><h2 id="3-BUG点">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>IDEA集成Git，一直报错，自己另外提交了一个就没问题，不知道什么原因。<br>CSDN搜到原因了，是文件在本地仓库和远程仓库上不一致，但是不知道如何解决，看两个库中唯一一个共同的文件是.gitnore打开，的确是不一样，就干脆直接把远程仓库的.gitnore删除了，再次提交，成功了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211071929437.png" alt="img"></p><h2 id="4-扩展学习部分">4.扩展学习部分</h2><h2 id="5-总结">5.总结</h2><p>今天的学习其实主要是复习和巩固，之前粗略学习的git和redis，全部重新过了一下，难度不大，就是晚上想把瑞吉上传到码云的时候，出了些问题，搞了有点久了，在前面的基本没什么问题，分支那边懂是懂了，但是没有实际操作过，因为自己做项目就一个分支就好了。明天试着把瑞吉部署到服务器中，就彻底结束SpringBotot的学习了。</p><h1 id="11-4-瑞吉外卖优化">11.4 瑞吉外卖优化</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-2">2.所学内容概述</h2><h3 id="Git部署">Git部署</h3><p>之前git已经集成IDEA成功,直接commit完了直接提交没有报错，很顺利也很简单。</p><h3 id="缓存优化">缓存优化</h3><p>缓存优化用Redis，导入SpringDataRedis坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.76</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>配置序列化器</p><p>方便图形化界面中看我们存入的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码改造">代码改造</h4><p>因为实现的思路比较长，就写代码注释中了，这里使用一个butterfly自带的标签外挂把代码合并了，</p><p><code>+</code>为增加的代码      <code>-</code>为原来的代码删除的</p><p>u7-u7.github.io效果是分页的</p><div class="tabs" id="redis1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis1-1">缓存邮箱验证码</button></li><li class="tab"><button type="button" data-href="#redis1-2">缓存菜品</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis1-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (!phone.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//随机生成一个验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line">        log.info(code);</span><br><span class="line">        <span class="comment">//这里的phone其实就是邮箱，code是我们生成的验证码</span></span><br><span class="line">        MailUtils.sendTestMail(phone, code);</span><br><span class="line">        <span class="comment">//验证码缓存到Redis，设置存活时间5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>, code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis1-2"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">public Result&lt;List&lt;DishDto&gt;&gt; get(Dish dish) &#123;   </span><br><span class="line"><span class="addition">+   List&lt;DishDto&gt; dishDtoList;</span></span><br><span class="line"><span class="addition">+   String key = &quot;dish_&quot; + dish.getCategoryId() + &quot;_&quot; + dish.getStatus();</span></span><br><span class="line"><span class="addition">+   dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span></span><br><span class="line"><span class="addition">+   //如果有，则直接返回</span></span><br><span class="line"><span class="addition">+   if (dishDtoList != null)&#123;</span></span><br><span class="line"><span class="addition">+       return Result.success(dishDtoList);</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"><span class="addition">+   //如果无，则查询 </span></span><br><span class="line">    //条件查询器</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    //根据传进来的categoryId查询</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != null, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    //只查询状态为1的菜品（在售菜品）</span><br><span class="line">    queryWrapper.eq(Dish::getStatus, 1);</span><br><span class="line">    //简单排下序，其实也没啥太大作用</span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    //获取查询到的结果作为返回值</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    log.info(&quot;查询到的菜品信息list:&#123;&#125;&quot;,list);</span><br><span class="line">    //item就是list中的每一条数据，相当于遍历了</span><br><span class="line"><span class="deletion">-   List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span></span><br><span class="line"><span class="addition">+   dishDtoList = list.stream().map((item) -&gt; &#123;</span></span><br><span class="line">        //创建一个dishDto对象</span><br><span class="line">        DishDto dishDto = new DishDto();</span><br><span class="line">        //将item的属性全都copy到dishDto里</span><br><span class="line">        BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">        //由于dish表中没有categoryName属性，只存了categoryId</span><br><span class="line">        Long categoryId = item.getCategoryId();</span><br><span class="line">        //所以我们要根据categoryId查询对应的category</span><br><span class="line">        Category category = categoryService.getById(categoryId);</span><br><span class="line">        if (category != null) &#123;</span><br><span class="line">            //然后取出categoryName，赋值给dishDto</span><br><span class="line">            dishDto.setCategoryName(category.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        //然后获取一下菜品id，根据菜品id去dishFlavor表中查询对应的口味，并赋值给dishDto</span><br><span class="line">        Long itemId = item.getId();</span><br><span class="line">        //条件构造器</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //条件就是菜品id</span><br><span class="line">        lambdaQueryWrapper.eq(itemId != null, DishFlavor::getDishId, itemId);</span><br><span class="line">        //根据菜品id，查询到菜品口味</span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">        //赋给dishDto的对应属性</span><br><span class="line">        dishDto.setFlavors(flavors);</span><br><span class="line">        //并将dishDto作为结果返回</span><br><span class="line">        return dishDto;</span><br><span class="line">        //将所有返回结果收集起来，封装成List</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"><span class="addition">+   //将查询的结果让Redis缓存，设置存活时间为60分钟</span></span><br><span class="line"><span class="addition">+   redisTemplate.opsForValue().set(key,dishDtoList,60, TimeUnit.MINUTES);</span></span><br><span class="line">    return Result.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>因为菜品中save和update和status都需要，加入清理缓存的逻辑，单独把修改的代码放出来 同样使用diff放修改的代码</p><div class="tabs" id="redis2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis2-1">修改后的save</button></li><li class="tab"><button type="button" data-href="#redis2-2">修改后的update</button></li><li class="tab"><button type="button" data-href="#redis2-3">修改后的status</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis2-1"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping</span><br><span class="line">public Result&lt;String&gt; save(@RequestBody DishDto dishDto) &#123;</span><br><span class="line">    log.info(&quot;接收到的数据为：&#123;&#125;&quot;, dishDto);</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line"><span class="addition">+   String key = &quot;dish_&quot; + dishDto.getCategoryId() + &quot;_1&quot;;</span></span><br><span class="line"><span class="addition">+   redisTemplate.delete(key);</span></span><br><span class="line">    return Result.success(&quot;添加菜品成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis2-2"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PutMapping</span><br><span class="line">public Result&lt;String&gt; update(@RequestBody DishDto dishDto) &#123;</span><br><span class="line">    log.info(&quot;接收到的数据为：&#123;&#125;&quot;, dishDto);</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line"><span class="addition">+   String key = &quot;dish_&quot; + dishDto.getCategoryId() + &quot;_1&quot;;</span></span><br><span class="line"><span class="addition">+   redisTemplate.delete(key);</span></span><br><span class="line">    return Result.success(&quot;修改菜品成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis2-3"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br><span class="line">public Result&lt;String&gt; status(@PathVariable Integer status, @RequestParam List&lt;Long&gt; ids) &#123;</span><br><span class="line">    log.info(&quot;status:&#123;&#125;,ids:&#123;&#125;&quot;, status, ids);</span><br><span class="line">    LambdaUpdateWrapper&lt;Dish&gt; updateWrapper = new LambdaUpdateWrapper&lt;&gt;();</span><br><span class="line">    updateWrapper.in(ids != null, Dish::getId, ids);</span><br><span class="line">    updateWrapper.set(Dish::getStatus, status);</span><br><span class="line"><span class="addition">+   LambdaQueryWrapper&lt;Dish&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="addition">+   lambdaQueryWrapper.in(Dish::getId, ids);</span></span><br><span class="line"><span class="addition">+   List&lt;Dish&gt; dishes = dishService.list(lambdaQueryWrapper);</span></span><br><span class="line"><span class="addition">+   for (Dish dish : dishes) &#123;</span></span><br><span class="line"><span class="addition">+       String key = &quot;dish_&quot; + dish.getCategoryId() + &quot;_1&quot;;</span></span><br><span class="line"><span class="addition">+       redisTemplate.delete(key);</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">    dishService.update(updateWrapper);</span><br><span class="line">    return Result.success(&quot;批量操作成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>删除的话不需要修改的原因的是，我们删除之前需要修改为停售状态，所以我们已经给修改状态加入了清理缓存，所以要删除的话，一定会先清理过缓存的。</p><h4 id="SpringCache">SpringCache</h4><p>一个框架，能实现基本注解的缓存功能，就是加注解就能清理缓存，常用注解网上都搜得到用法，我就记项目中所使用的说明一下，@Cacheable和@CacheEvict</p><p><code>@cacheable</code>的作用主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</p><p><code>@CachEvict</code>的作用主要针对方法配置，能够根据一定的条件对缓存进行清空</p><h4 id="项目使用SpringCache">项目使用SpringCache</h4><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yml为Redis缓存</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.1</span><span class="number">.76</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span> <span class="comment"># 设置缓存过期时间</span></span><br></pre></td></tr></table></figure><p>缓存套餐</p><p>导入坐标配置好文件，然后在启动项加@EnableCaching 开启缓存注解</p><p>SetmealController的list方法上加上<code>@Cacheale</code>注解 和之前的不注解差不多 就是把值写注解里面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;, key = &quot;#setmeal.categoryId + &#x27;_&#x27; + #setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    List&lt;Setmeal&gt; setmealList = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SetmealController的save、update和status方法，加入清理缓存的逻辑 很简单直接复制就行改成true全部填返回值</p><div class="tabs" id="redis3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#redis3-1">save</button></li><li class="tab"><button type="button" data-href="#redis3-2">update</button></li><li class="tab"><button type="button" data-href="#redis3-3">status</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="redis3-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="comment">//设置allEntries为true，清空缓存名称为setmealCache的所有缓存</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;套餐添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis3-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Setmeal&gt; <span class="title function_">updateWithDish</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> setmealDto.getId();</span><br><span class="line">    <span class="comment">//根据id把对应套餐数据删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">    setmealDishService.remove(qw);</span><br><span class="line">    <span class="comment">//重新添加</span></span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        item.setSetmealId(id);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//更新套餐数据</span></span><br><span class="line">    setmealService.updateById(setmealDto);</span><br><span class="line">    <span class="comment">//更新套餐对应的数据 批量保存</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="redis3-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> String status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    LambdaUpdateWrapper&lt;Setmeal&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.in(Setmeal::getId, ids);</span><br><span class="line">    updateWrapper.set(Setmeal::getStatus, status);</span><br><span class="line">    setmealService.update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;批量操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>==!!! R需要实现Serializable接口，因为有个序列化的过程==</p><h3 id="读写分离">读写分离</h3><p>读写分离比较麻烦，需要先实现MySQL的主从表,让阿贵克隆了两台虚拟机。一个为主库，一个为从库。跟着步骤来就行，唯一有问题的点就是，因为是克隆的，所以mysql需要修改uuid。这里自己出过BUG。</p><p>修改方法 查看uuid</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> uuid();</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> uuid()                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">26532364</span><span class="number">-4</span>f8d<span class="number">-11</span>ed<span class="operator">-</span>a300<span class="number">-005056307198</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/lib/mysql/auto.cnf <span class="comment"># 修改uuid为上面查找的</span></span><br></pre></td></tr></table></figure><p>别忘记重启服务</p><h4 id="项目实现读写分离">项目实现读写分离</h4><p>创建一个新的分支，测试没问题再并入main</p><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改原来的mysql配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://172.16.1.77:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://172.16.1.78:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-BUG点-2">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>这是mysql主从复制，查询主从信息的时候正常的显示，但是自己显示的是Connecting to source,网上搜都说的uuid的问题，但是自己uuid修改了很多次，还是失败，就重连了一下，然后全部重新配置了uuid和Slave_Io_Running，就好了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211071929438.png" alt="image-20221107161447726"></p><h2 id="4-扩展学习部分-2">4.扩展学习部分</h2><h2 id="5-总结-2">5.总结</h2><p>今天周五上午练车，下午把基本的优化知识学了，修改了原来没加入缓存和读写分离的项目，开了两台虚拟机，调配下载软件，今天的学习难度是很简单的，明天就可以部署到h3c的服务器上面了，配置方面总是会出问题的，mysql自己修了近一个半小时，linux命令也在修bug的路上，越发熟练，明天部署完停下来，梳理一下这段时间所学的知识。</p><h1 id="11-7-部署项目在h3c">11.7 部署项目在<code>h3c</code></h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-3">2.所学内容概述</h2><h3 id="配置环境">配置环境</h3><p>三台服务器</p><p>172.16.1.76 Redis缓存 启动Redis服务的</p><p>172.16.1.77 Nginx放前端项目和反向代理 Mysql 主从复制结构的主库</p><p>172.16.1.78 Mysql 主从复制结构的从库 jar jdk git maven 放后端项以及配置</p><h3 id="部署前端项目">部署前端项目</h3><p>在77中修改nginx.conf  把课件中的dist文件放html目录中去</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">        <span class="attr">root</span> <span class="string">html/dist; #前端页面存放位置</span></span><br><span class="line">        <span class="attr">index</span> <span class="string">index.html;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">location</span> <span class="string">^~ /api/ &#123;</span></span><br><span class="line">        <span class="attr">rewrite</span> <span class="string">^/api/(.*)$ /$1 break;</span></span><br><span class="line">        <span class="attr">proxy_pass</span> <span class="string">http://172.16.1.78:8080; #后端</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="部署后端项目">部署后端项目</h3><p>后端这块自己出了些问题，首先安装好JDK git Mysql Maven 查看的命令也很简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version <span class="comment">#看jdk 和 jar</span></span><br><span class="line">git -v <span class="comment"># 看git</span></span><br><span class="line">mvn -v <span class="comment"># 看Maven</span></span><br></pre></td></tr></table></figure><p>然后把IDEA中的项目执行git commit 然后push 上传到gittee码云 创建一个/usr/local/app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/u7u7-sjh/reggie_take_out.git</span><br></pre></td></tr></table></figure><p>sh脚本  自己包名跟这个不太一样，然后自己修改了一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span>  自动化部署脚本启动</span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 停止原来运行中的工程</span><br><span class="line">APP_NAME=reggie_take_out</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Process...&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -15 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Kill Process!&#x27;</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Stop Success!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 准备从Git仓库拉取最新代码</span><br><span class="line"><span class="built_in">cd</span> /usr/local/app/reggie_take_out <span class="comment">#注意文件所在地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">echo</span> 代码拉取完成</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=<span class="literal">true</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line"><span class="built_in">echo</span> 启动项目</span><br><span class="line"><span class="built_in">nohup</span> java -jar reggie_take_out-1.0-SNAPSHOT.jar &amp;&gt; reggie_take_out.log &amp; <span class="comment"># 注意jar包名</span></span><br><span class="line"><span class="built_in">echo</span> 项目启动完成</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-3">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>进来后端全是报错，不知道什么原因，看项目是没问题的，但是我linux中的打包是自己添加的，并不是git中克隆下来的，然后把linux中app中克隆的文件删除，重新把IDEA中main和target都上传，然后再克隆下来就没问题了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211071929439.png" alt="image-20221107183351369"></p><h2 id="4-扩展学习部分-3">4.扩展学习部分</h2><h2 id="5-总结-3">5.总结</h2><p>今天上午考完科二，下午把项目部署到了h3c，就后端出了一点点问题，但是也成功了，还是小有成就的。明天上午缓冲一下，下午可以大概的进入SpringCloud的学习了，问题应该不是很大，可以带着vue学一下，感觉前端的知识还是很必要的，晚上整改一下图床的管理，买一个阿里云OSS图床，这样以后自己的Typora文件，发给别人图片加载不出来的情况也就没有了。上传到CSDN和Github  语雀也不会有图片不显示的情况了。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7月总结</title>
      <link href="/posts/9a4dfe43.html"/>
      <url>/posts/9a4dfe43.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、知识点汇总">一、知识点汇总</h2><h3 id="第一周7-7-7-11">第一周7.7-7.11</h3><ul><li><strong>这周的学习内容</strong> ：linux入门 实操文件 Shell编程  Scala的基础入门</li></ul><p>​<strong>难点</strong>： Scala基础语法   Shell编程</p><p>​<strong>个人理解</strong>：</p><p>**Shell编程：**shell在我理解有点像python，脚本语言。但是和python比，语言的简洁性,可读性都很差。毕竟是脚本语言，一些比较复杂的代码和程序，写出来就很麻烦用shell。因此现在shell是有一个let 可以用c和java的语言，还是方便的。Shell 主要用来开发一些实用的、自动化的小工具，而不是用来开发具有复杂业务逻辑的中大型软件，因为他的代码我觉得写起来非常难受，应该在搭建环境和分析日志这类的场景，shell会有比较好的表现力吧，在Linux中Shell应该是很重要的一个章节，毕竟老师说使用 Shell 的熟练程度反映了你对 Linux 的掌握程度。</p><p>**Scala基础语法：**Scala刚入门的时候，使用非常的难受，在scala中有java和python的影子，但是又不一样，就导致刚开始经常写错，它的语言很简洁，Java8中的lambda就是借鉴scala的，所以如果学Java的时候Lambda学好的话，入门上手还是蛮快的。Scala是一种强数据类型的语言，变量声明了类型，就变不了了。改变的话，只能创造新的变量，原变量是改不了的。毕竟称为Java++，也有强转，但是比较麻烦，这种脚本语言类，学明白了掌握还是容易的，而且思路可以清晰。</p><h4 id="自我周总结：">自我周总结：</h4><p>这周时间比较短，因为刚进入暑假集训，玩了十来天，状态自己调整了两天，不过学习速度比之前有很大的提高，刚来集训，劲头比较足吧，寝室室友什么的也比较舒服，所以尽管玩了几天，学习状态倒还是很满意的，这周主要是3天把Linux看完了，基本操作啊，对文件的实操。这方面之前就知道一些，看文档，一天能抵七八个小时的视频时间，后面的Shell编程，是仔细看了视频，因为有点奇怪，是脚本语言，写起来跟命令一样，然后看了一天的Scala编程，自己对语言可能比较敏感吧，上午还不习惯，下午用起来就舒服了，感觉比python写起来还舒服，就是它的类型声明有点奇怪。一天把前面一般语言都共有的部分，看掉了，主要都是看文档，看文档跟着案例敲学习语言，速度和效率真的快。</p><h3 id="第二周7-12-7-17">第二周7.12-7.17</h3><p><strong>这周的学习内容</strong> ： hadooop基本入门 hadoop完全分布式  HDFS</p><p>​<strong>难点：</strong> hadoop概念  hadoop克隆群起</p><p><strong>个人理解</strong>：</p><p>hadoop概念:这一块也不算个人理解吧，因为学hadoop学了很久，都不知道hadoop是什么，干嘛用的，就去CSDN去搜了，<a href="http://t.csdn.cn/J6cLT">http://t.csdn.cn/J6cLT</a> 这个链接，我觉得讲的特别好。也让我弄懂了hadoop和大数据。看文档完了，感觉Hadoop技术就是大数据这行的核心，像我们这次比赛要学的很多内容都是基于hadoop或者是和hadoop有关的，总之是离不开，hive，spark都是如此，这些算是hadoop的模块，模块之间又有关联。hadoop像是一个生态圈了，也有人讲hadoop生态。总结hadoop的话，Hadoop就是存储海量数据和分析海量数据的工具。它的核心是我学掉的HDFS和没学的MR，赶进度MR就看看文档就好了，HDFS是存储数据的，而MR就是计算数据的，理解为计算引擎。</p><p>**hadoop克隆：**这部分也不算难点，但是总是会出现问题，然后自己去解决，后面自己总结出了一套配置步骤，虚拟机克隆这部分，到配置IP。群起配置在多太虚拟机的时候，真的很方便，像如果一台装了java，并配置好了环境，后面几台只要，配置完ip和映射，以主虚拟机，直接分发就好了。写完配置文件，启动hadoop各集群也很方便。1.克隆虚拟机 2.修改静态IP 3.修改主机名做映射 4.关闭防火墙 。这样一台有ip能上完的虚拟机就配置好了。后面群起什么，主虚拟机分发一下就好了，交给环境配置的同学。</p><h4 id="自我周总结：-2">自我周总结：</h4><p>这周学习的效率就落下来了，这周是hadoop结束，以为hadoop是都要学习的，自己就很认真的在搞配置什么的命令，也出现了很多问题，一个一个去找，有配置报错，CSDN解决，浪费了很多时间。前面概念的有点莫论两可，后面跟概念相关的就比较吃力了。这周后面学HDFS，Java用IDEA充当客户端那天学习状态还可以的，自己学习状态和学习内容有点挂钩太多了。</p><h3 id="第三周7-18-7-24">第三周7.18-7.24</h3><p><strong>这周的学习内容</strong> ：Scala函数式编程 Scala面向对象 数组集合 Spark入门</p><p>Spark-RDD 转换算子 运行算子 SparkSQL</p><p><strong>难点：</strong> Scala集合计算函数   元组  Spark概念</p><p><strong>个人理解：</strong></p><p>元组：元组在我理解和java里面的元组完全不一样，在Scala元组是一个容器，将很多无关的数据封装为一个整体，元组最大只能有22个元素。元组可以存不同的元素，但是调用的时候比较抽象，是用._顺序号,他是有序的，在后面集合计算高级函数中经常使用，结合Map，和对象就很抽象，一层嵌一层的。</p><p>Scala集合计算函数：看文档的代码和扁平化+映射的方法，Scala的代码又简洁，更像抽象，一下子看文档看不明白，一套嵌一套的，很多地方的类型什么都省略了，用_直接代替，导致我这一块卡了很久，去换了IDEA设置，自动补齐类型，理解起来方便多了，在我理解的flatMap 相当于先进行 map 操作，在进行 flatten操作，这里基本就是扁平化+映射的原理，到后面分区什么又结合一起，代码全部写一行，要看好一会才行。慢慢也能捋清除。</p><p>Spark概念：之前学Scala的时候就说，学Scala就是为了Spark，到Spark，发现开发语句都是Scala。在我看来，Spark也是一种大数据计算框架，和MR类似，但是比MR强很多，不管是运行还是各种方面，效率方面比MR强100倍，有这么夸张。但是Spark因为是新起的，所以有些地方不够完善，容易内存溢出，但我只遇到过一次。Spark主要用于大数据的计算，而Hadoop以后主用于大数据的存储HDFS和Hive，以及资源调度。Spark+Hadoop的组合，是未来大数据领域最热门的组合，也是最有前景的组合！过断时间把Hadoop换成Spark执行应该会快上不少。</p><h4 id="自我周总结：-3">自我周总结：</h4><p>这周学完了Scala和Spark，学习速度还是很满意的。但是学习顺序出现了点问题，没有学Hive，就去看Spark了，前面听的很懵，到后面最重要的SparkSQL，文档让用Hive的，我连Hive是什么都不知道，下周得去看完Hive才回头来看SparkSQL了，这周的学习状态是很不错的，都是敲代码，代码敲了很多，Spark语法也都记住了，结合笔记，也能自己写出简单的案例。这周BUG出现蛮多的，都是在Scala的语句中，._这块出现了很多次问题，Scala还是没用顺，为了简洁的语法，明明是一层调用一层的，全部写在一行，然后化简，导致自己有时候都得看好一会，才能捋清除。</p><h3 id="第四周7-25-7-31">第四周7.25-7.31</h3><p><strong>这周的学习内容</strong> ：Hive配置 DDL语句 DML语句 Join语句 函数</p><p><strong>难点：</strong> Hive配置</p><h4 id="自我周总结：-4">自我周总结：</h4><p>这周配置这个Hive的环境配置了两天半，才磕磕绊绊搞好。原本自己弄了一天，第二天的时候又不行了，然后一报错，就去CSDN找解决方法，到JDBC的时候完全起不来，Jar包都找不到了，不知道被搞到哪里了，就让喻中贵重新帮我克隆配置了3台有hadoop的虚拟机，自己从头到尾又根据之前解决的思路，配置了一下午，全部都搞好了，也花了两天多时间，导致本来想这周就结束Hive的现在才学了2/3。这块配置还是不要瞎搞了，太浪费时间了，后面才是自己要知道的重点。Hive后面的任务，我觉得没什么难的地方。DDL和DML语句基本和SQL语句差不多，都是SQL基础语句。</p><h2 id="二、自我总结">二、自我总结</h2><p><strong>自我反省：</strong></p><p>自己解决BUG的能力不太行，现在文档的重要性是体现出来了，因为老师很多东西都调教好了，我们用的时候会出现很多问题，要去解决就是要看博客。平常解决一些BUG不顺利的话都会花一小时甚至一上午的时间去解决，这样影响还是很大的，不管是进度还是心态。</p><p>配置Hive那两天的时候发现了自身的问题，可能我自己的那台机子，应该是好的，启动方式和老师不一样而已，导致我用老师那种方式，一直等不到OK，而且命令敲完，提示信息和老师不一样，就觉得自己之前的配置哪里有了问题，又找不到，重写弄了三台，从头到尾 java hadoop hive spark 重配置。后面到JDBC的时候，提示信息跟之前还是一样，但是自己试着去运行了一下，发现好了。感觉浪费了很多时间，就是因为自己没有去试beeline命令，认为前面错，后面也错。</p><p>然后自己学习的时候，没先提前去搞懂这东西是干嘛的，要在什么的基础之上，所以出现了学习步骤的问题，SparkSQL之前要看Hive，Hive之前要看Hadoop，这是一条线，整反了，就会听不懂。像之前学Hadoop的时候，没先搞懂Hadoop是什么，前面讲hadoop是什么干嘛的，为了进度，直接跳了，导致学到后面，都不知道hadoop是什么干嘛的，又去看了博客，再学的时候会相对容易点，有清晰的条理。不然就像无头苍蝇一样，不知道在学什么。为了进度，讲概述可以跳，最好还是得先去博客了解，看文档比视频快很多，也能弄明白东西的作用。</p><p>现在学习的时间相对之前增加了，加上周末以及每天的早八晚九，一天学习时间可以达到8个小时，加上要赶进度，学习效率比之前高上不少，因为配置和学习顺序，拖累的这个月的进度，本来这个月打算Hive学完的，然后花两天回头看下SparkSQL就可以刷题了，现在Hive只看了一半，希望下星期能学完自己的任务，然后学长出题做一下，看一百遍不如去做一遍。自己比之前的进步也蛮大的，学会了看文档，真的是事半功倍，学会一个语言的基本用法，看文档不需要一个星期就能搞定。文档的重要还是体现出来了。现在的学习步骤就是看文档，到出BUG，或者看不懂的地方，再去看视频，视频不行就去CSDN搜。然后自己的博客也是很久没更新了，虽然没什么点击量，但是我觉得还是要写起来的，等大数据结束了，希望能再把博客发起来，自己处理BUG的过程什么，都可以去发，争取一天一篇。当作日常任务一样。</p><h2 id="三、浅谈情商">三、浅谈情商</h2><p>​EQ俗称情商。开门见山了，对于这篇文章还是有自己的见解的。首先是对于本文第二点，新时期大学生情商存在的问题，谈谈我自己踩到的点，像是照镜子一般。</p><p>​最严重就是自我管理能力，情商本质上是一种自我管理能力。我经常在自己的签名或者锁屏上，写上律字，或者和自律相关的话，之前看到几个同学也跟我差不多，相信都是因为自己的自制力很差，才写这种提醒着自己，但是效果微乎其微了，经常自己明明制定好了计划，学习或者是锻炼，总之是对自己好的计划，但是自己却不开心干的事情。不出所料，自己会忍不住去干自己喜欢的事情，不是打游戏就是刷抖音，甚至是发呆，就是不想去做，懒字刻在身了。第二点的心里素质，曾经踩过坑吧，现在算是跳出来了，还是蛮严重的。情绪是真的很可怕的事情，自己在大学之前大概有过三次，严重的情绪波动，都是和学习相关的，再清晰点就是考试成绩，三次影响自己一生的考试，都是大大的失常发挥，所以想过自己去做极端的事情。我觉得这也不算承受能力差吧，发生在自己身上的都是独一无二的，放到别人身上又会如何，没人能跟你感同身受。</p><p>后面几点我觉得没踩坑踩下去，人际交往能力和道德素质是很挂钩的，从小在学校班级，年级等。自己都会有一大堆的朋友，也有很多交心的，像长达十年的朋友也是很多的。所以我觉得这两点自己做的还是可以的。感恩方面的意识，很懂得“百善孝为先”“滴水之恩，定当涌泉相报”这类诸式的话的。</p><p>情商的重要性不言而喻，在我去年暑假在剧组中，见过很多形形色色的人，有个老大哥那天做那边和我聊天，说剧组中很多人都是能力很强，但是就是赚不到钱，成不了大事，我是灯光组的，灯光组那么多人，几十个，为什么就一个灯光总监，剩下的都是调灯的。灯光总监手下人，一大半都曾经尝试过自己去带一些人，去拍戏，但是都是失败而终，有了一次没下次，就是情商的问题，大白话就是不会说话，不会做事，性格不行，各种各种方面，导致人家只和你拍一次。从那次以后，我就一直认为机遇&gt;情商&gt;能力，现实就是这样，除非你能力很强很强。能力强的人，又有几个低情商呢？</p><p>文章学校层面的政策，说难听点，对大学生这些方面的改善几乎咩用。辅导员（班主任）要经常与学生保持密切的联系和交流，多与学生进行平等地谈心谈话，关注大学生的情感动向，并进行正向的引导。这点倒是有点用，我高中后面学习，自律等方面都是源于，自己原本不太喜欢的语文老师的一句话。老师因为身体原因两个月没来学校(这之前几乎和老师没什么交流)，老师回来看到我，第一句话就是：你怎么都瘦了，我瞳孔直接震惊。后面老师说的什么话，我都会去听，一天两三篇作文改了又改，追着老师问，那段时间还是很怀念的，也是老师改变了我，学习习惯也好，自律也好，尊师也好，都是老师带给我的。所以我觉得要对一个人情商，行为的改变，如果靠外人，那这个人是在他心中有一定分量的。不然这些表面的开展活动，讲座，在我看来觉得一点用都没有，是我的主观感受。</p><p>总而言之，一万个人有一万个哈姆雷特，相信每个人对自己对他人，对任何事都有自己的看法，自己的问题自己最知道，解决方法也在乎个人，这不是固定式。问君能有几多愁？愁啊愁啊</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖</title>
      <link href="/posts/a1e1aa91.html"/>
      <url>/posts/a1e1aa91.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-26-瑞吉外卖-DAY1">10.26 瑞吉外卖 DAY1</h1><h2 id="1-头-所学内容出处">1.头 所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述">2.所学内容概述</h2><h3 id="了解软件开发整体介绍">了解软件开发整体介绍</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807437.png" alt="image.png"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807438.png" alt="image.png"></p><h3 id="开发环境的搭建">开发环境的搭建</h3><h4 id="数据库环境的搭建">数据库环境的搭建</h4><p>课件提供了sql文件，可以直接source 导入mysql中 早就习以为常了</p><h4 id="Maven项目创建">Maven项目创建</h4><p>也很简单，普通的maven项目，复习导入坐标和yaml文件，因为不是直接创建的springBoot 项目，所以要创建Boot程序入口</p><h4 id="3-1-后台登录开发">3.1 后台登录开发</h4><p>先创建一个实体类和mapper以及service</p><p>再封装一个R作为返回的结果类<br>给EmployeeController类添加一个login方法</p><ul><li>@RequestBody 主要用于接收前端传递给后端的json字符串（请求体中的数据）</li><li>HttpServletRequest 作用：如果登录成功，将员工对应的id存到session一份，这样想获取一份登录用户的信息就可以随时获取出来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;<span class="comment">//接收前端的json数据,这个json数据是在请求体中的</span></span><br><span class="line"><span class="comment">//        1、将页面提交的密码password进行md5加密处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();<span class="comment">//从前端用户获取到登录时候的密码</span></span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes()); <span class="comment">//加密</span></span><br><span class="line"><span class="comment">//        2、根据页面提交的用户名username查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;(); <span class="comment">//泛型需要填写Employee</span></span><br><span class="line">        queryWrapper.eq(Employee::getUsername,employee.getUsername()); <span class="comment">//eq用lambda::</span></span><br><span class="line">        <span class="comment">//在设计数据库的时候我们对username使用了唯一索引,所以这里可以使用getOne方法</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"><span class="comment">//        3、如果没有查询到则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        4、密码比对，如果不一致则返回登录失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (! emp.getPassword().equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户已被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6、登录成功，将员工id存入Session并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">        <span class="comment">//把从数据库中查询到的用户返回出去</span></span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//员工退出</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">//清除Session中当前登录员工的id</span></span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2后台系统退出功能">3.2后台系统退出功能</h4><p>这个比较简单 点击按钮退出到登陆页面就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出功能</span></span><br><span class="line"><span class="comment"> * ①在controller中创建对应的处理方法来接受前端的请求，请求方式为post；</span></span><br><span class="line"><span class="comment"> * ②清理session中的用户id</span></span><br><span class="line"><span class="comment"> * ③返回结果（前端页面会进行跳转到登录页面）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">//清理session中的用户id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><h3 id="3-3-完善登录功能">3.3 完善登录功能</h3><p>之前的登陆功能是有个bug的，像之前web的一个登陆案例，直接输入地址的话，就可以跳过登录页面，达到不登录就能进入需要登录的 页面，之前web是用过滤器的，现在用拦截器解决这个小bug</p><p>要先在启动项上面加入@ServletComponentScan注解 识别bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登陆</span></span><br><span class="line"><span class="comment"> * filterName过滤器名字</span></span><br><span class="line"><span class="comment"> * urlPatterns拦截的请求，这里是拦截所有的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;LongCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径  比如静态资源(静态页面我们不需要拦截,因为此时的静态页面是没有数据的)</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        log.info(<span class="string">&quot;拦截到的请求:&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check)&#123;</span><br><span class="line">            <span class="comment">//对请求进行放行</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">employee</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>); <span class="comment">//用户登录状态</span></span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为:&#123;&#125;&quot;</span>,employee);</span><br><span class="line">            <span class="comment">//对请求进行放行</span></span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据,具体响应什么数据，看前端的需求，然后前端会根据登陆状态做页面跳转</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url: urls)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扩展学习部分">4.扩展学习部分</h2><h2 id="5-总结">5.总结</h2><p>刚进入瑞吉外卖，下载了一些资料，没找到老师的官方的ppt文档，就CSDN去搜的，第一天的任务不是很难，主要是帮助回看一下springboot的部分，算是小复习，就做了一个登录和退出，还有个登录的小BUG，基本都是后台的代码，前端的一些功能都做好了，后端加bean，调用一下响应和请求就好了，比较基础的还是。学习方法就是看老师过一遍功能如何实现，如何测试，然后就自己试着去敲，慢慢做出来，这样学，进度可能会有些慢，但是能搞清楚每一块是干嘛的，每个注解和类的作用和功能。</p><h1 id="10-27-瑞吉外卖-DAY2">10.27 瑞吉外卖 DAY2</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述💻">2.所学内容概述💻</h2><h3 id="添加员工">添加员工</h3><h4 id="执行流程分析">执行流程分析</h4><ol><li>页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端</li><li>服务端Controller接收页面提交的数据并调用Service将数据进行保存</li><li>Service调用Mapper操作数据库，保存数据</li></ol><h4 id="具体实现">具体实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增的员工信息：&#123;&#125;&quot;</span>, employee.toString());</span><br><span class="line">        <span class="comment">//设置默认密码123456 MD5加密</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line">        <span class="comment">////设置createTime和updateTime</span></span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //根据session来获取创建人的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置id</span></span><br><span class="line">        employee.setCreateUser(empId);</span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入数据库</span></span><br><span class="line">        employeeService.save(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;添加员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="完善全局异常处理">完善全局异常处理</h4><p>现在的代码其实是有BUG存在的,username不能重复，因为在建表的时候设定了unique，只能存在唯一的username，如果存入相同的username则会报错<br>java.sql.SQLIntegrityConstraintViolationException: Duplicate entry ‘Kyle’ for key ‘employee.idx_username’<br>看的出来报错类是SQLIntegrityConstraintViolationException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException sqlBug)</span>&#123;</span><br><span class="line">        log.error(sqlBug.getMessage());</span><br><span class="line">        <span class="comment">//包含Duplicate entry是说明有条目重复</span></span><br><span class="line">        <span class="keyword">if</span> (sqlBug.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//对字符串切片</span></span><br><span class="line">            String[] error = sqlBug.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//Duplicate entry &#x27;zhangsan&#x27; for key &#x27;employee.idx_username&#x27;</span></span><br><span class="line">            <span class="comment">//这句日志信息 下标为2的刚好是用户名 返回对应用户名的报错信息就好了</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> error[<span class="number">2</span>];</span><br><span class="line">            log.error(username +<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> R.error(username +<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="员工信息分页查询">员工信息分页查询</h3><p>添加MP自带的分页插件 前段时间刚写过分页 还是很熟悉的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看前端代码利用检查功能，发现是get请求 /page 利用Rest规范 写业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器</span></span><br><span class="line">        Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加过滤条件（当我们没有输入name时，就相当于查询所有了）</span></span><br><span class="line">        wrapper.like(StringUtils.isNotEmpty(name),Employee::getName,name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并对查询的结果进行降序排序，根据更新时间</span></span><br><span class="line">        wrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        employeeService.page(pageInfo,wrapper);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以修改显示一页多少行，直接在前端的comment包中的list.html中修改</p><h3 id="启用-禁用-员工账户">启用/禁用 员工账户</h3><p>其实很简单对于后端来说，权限问题只有管理员才能使用，这样的功能是在前端实现的，后端的话只要点击按钮的时候注入对应的Rest请求，就好了。<br>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作在Controller中创建update方法，此方法是一个通用的修改员工信息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">Update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">        log.info(employee.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>); <span class="comment">//获取id</span></span><br><span class="line">        employee.setUpdateUser(empId); <span class="comment">//设置更新用户id</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now()); <span class="comment">//更新时间为当前时间</span></span><br><span class="line">        employeeService.updateById(employee);/ /调用update方法</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>出现了问题，ajdx返回的id值是和实际的id值不一致，是js对Long类型的数据处理时候丢失了精度<br>json数据时进行处理，将Long型数据统一转为String字符串<br>直接把课件中的 对象映射器JacksonObjectMapper 复制到common包中<br>扩展Mvc框架中的消息转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转化器，底层使用jackson将java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合当中(index设置为0，表示设置在第一个位置，避免被其它转换器接收，从而达不到想要的功能)</span></span><br><span class="line">        converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="编辑员工信息">编辑员工信息</h3><p>先跟着老师的文档分析了前端代码是如何实现页面的 回显什么也是前端所实现的。</p><p>我所实现的服务端接受请求，并根据员工id查询员工信息，并将员工信息以json形式响应给页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;根据id查询员工信息...&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有此用户的信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>服务端接受员工信息，并进行处理，完成后给页面响应<br>由于修改员工信息也是发送的PUT请求，与之前启用/禁用员工账号是一致的，而且前面我们已经写过了PUT请求的Controller层<br>所以当我们点击保存按钮时，调用submitForm函数，而在submitForm函数中我们又调用了editEmployee函数，发送PUT请求，实现修改功能,直接就调用前面启动/禁用员工账户的update方法了，所以只用实现根据id查询员工信息就行了</p><h3 id="公共字段填充">公共字段填充</h3><p>前面我们已经完成了对员工数据的添加与修改，在添加/修改员工数据的时候，都需要指定一下创建人、创建时间、修改人、修改时间等字段，而这些字段又属于公共字段，不仅员工表有这些字段，在菜品表、分类表等其他表中，也拥有这些字段。所以下面做菜单页面的时候为了方便，降低耦合度，可以把这些字段称为公共字段。</p><h4 id="实现方式">实现方式</h4><p>创建一个类 实现MyMetaObjectHandler 接口 利用ThreadLocal中的方法实现对id的获取<br>前面更新和插入时候 对时间和用户id的修改 可以注释掉了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">//插入的时候</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(insert)....&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新的时候</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(update)....&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-2">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)<br>今天基本没什么bug，小bug就是导入包的时候导入错了，导致对应类的方法没找到，但是很快就反应过来了。</p><h2 id="4-扩展学习部分-2">4.扩展学习部分</h2><h2 id="5-总结-2">5.总结</h2><p>今天学习难度一般，学习状态极佳，静下心来完成了项目对员工的基本功能实现，发现所用到的很多方法都是之前所没有接触和学过的，也有一些小技巧是前面某个案例所使用的，像分页什么的，因为在赶进度，想快点把项目做完，基本都是二倍数过一遍视频，了解原理，代码使用，然后就开始自己敲了，感觉这个项目前端方面其实比较难，我现在做来，后端处理一下请求就好了，一些复杂的功能都是前端所实现的，最后做了一个公共字段的自动填充，其实有点麻烦的，而且不是很理解，用到了多线程解决，自己其实是看一遍视频，自己就能实现了，也大致明白这样做的原因。</p><h1 id="10-28-github-hexo-个人博客搭建"><strong>10.28 github hexo 个人博客搭建</strong></h1><h2 id="1-头：日期、所学内容出处-2"><strong>1.头：日期、所学内容出处</strong></h2><p>b站以及QQ请教 还有github博客讲解</p><h2 id="2-所学内容概述-2">2.所学内容概述</h2><h3 id="实现流程">实现流程</h3><p>开始需要安装ndoejs<br>然后npm 下载hexo 和hexo-cli<br>github创建自己仓库，用git命令绑定<br>hexo也绑定仓库<br>npm可以找别人的主题模版 下载到global仓库<br>分析代码 看主题步骤 跟着做<br>hexo clean 清理缓存<br>hexo g 上传文件<br>hexo s 启动服务<br>hexo d 上传到github仓库 直接到页面</p><p>目前的笔记页面效果如下，还有很多地方需要完善，想到什么等闲下来再去做好，已经知道一些地方的原理了。<br><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807439.png" alt="image.png"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807440.png" alt="image.png"><br><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807441.png" alt="123"></p><h2 id="3-BUG点-3"><strong>3. BUG点</strong></h2><p>难点(关键代码或关键配置，BUG截图+解决方案)<br>看报错信息以为是butterfly的源文件被我不小心修改了，然后我去github中把之前备份的拉下来，重写添加了一遍，还是报错，那唯一和初始不同的地方只有，yml文件了，然后拿默认的和原本的对比，发现在添加社交图标的时候，qq和微信的图标标注了，但是后面没输入信息。把两个注释掉，就没报错了，但是很奇怪，因为之前yml文件报错，都会说哪一行报错，这个应该是骗过了js的编译。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807442.png" alt=""></p><h2 id="4-扩展学习部分-3">4.扩展学习部分</h2><h2 id="5-总结-3">5.总结</h2><p>今天搞了一天的个人博客的小开发，昨天看到一个大佬记的笔记，发现页面很好看也很清楚，但是不知道是什么笔记网站，然后问他，发现是利用github和hexo搭建的自己的网站，可以放md文件，一些笔记可以梳理，我觉得这样很好，今天就搞了出来，大致基本都弄出来了，还没有美化，过程还是有很多磕磕绊绊的，尤其是npm下载的时候，太吃网络了，之前一直下不下来，有点看运气，github有时候也访问不进去。等项目做完了，美化一下，把自己之前的笔记，都上传到自己的博客网站，个人网站已经建好了，因为还没实现typora上传图片，这样会导致自己的笔记，图片会丢失，所以明天把上传问题解决一下。<br>页面如下 把去年学的一点笔记当作实验了效果还可以<br><a href="https://u7-u7.github.io/">https://u7-u7.github.io/</a></p><h1 id="10-29-分类管理功能实现">10.29 分类管理功能实现</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-3">2.所学内容概述</h2><p>今天先完成了公共字段的自动填充 对更新时间和创建时间，这样对后面菜品和菜单，套餐等等页面功能实现就不需要再写一遍了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//利用MetaObjectHandler类 实现还是很简单 易懂的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(insert)...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充(update)...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成了菜品的基本增删改查的操作(代码比较多，就不放在笔记中去了，需要注意的点也在代码中注解了),难度不是很大，在之前员工中一样，实现方法的流程都是差不多的，分析页面请求，看前端代码，写后端代码。</p><p>在删除功能完善的时候，又创建了一个自定义异常类 在删除不能删除的信息的时候，抛出自定义运行类的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123; <span class="comment">//运行时异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException exception)</span> &#123;</span><br><span class="line">    log.error(exception.getMessage());</span><br><span class="line">    <span class="keyword">return</span> Result.error(exception.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-4">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>删除页面显示 删除成功 但是数据依旧存在 不知道原因 看返回的日志中id=null 也就是根本没有获取到id的值。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807443.png" alt="image-20221030135557307"></p><p>发现前端 发送post 请求的时候 页面是?ids id后面带了一个s 应该前端的问题，把方法内参数id修改成ids 没问题了。这个请求的设置在js目录下面的category.js 19行 上面写着ids 应该是打错了 因为我看老师的代码是id</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807444.png" alt="image-20221030135513708"></p><h2 id="4-扩展学习部分-4">4.扩展学习部分</h2><p>把之前hexo中图片无法显示的问题，解决了，申请了一个免费的图库，之前原本尝试过gitee图库和bilibili图库，不知道为什么到了hexo中是不显示的，gitee图库，typora一直都验证不到，插件下载总是失败，具体原因也不知道。使用的自定义web图床也只能上传2000张图片，等到放不下了，就要考虑换图床了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807445.png" alt="image-20221031082701258"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807446.png" alt="image-20221031082631770"></p><h2 id="5-总结-4">5.总结</h2><p>今天学习内容简单，因为今天是周末，在寝室学习的，学习效率就一般了，下午还去练车了，基本只学了一上午到2点，学习内容很简单，基本都是自己独立完成的，看业务需求是对菜单功能完善，自己去前端页面看请求方式，进行需求分析一下，自己就能打出来了，出了点小插曲，好在顺利解决了，解决bug的过程还是蛮顺利的，也明白了参数名对代码的影响，一定要统一好。然后在晚上又去把博客图片无法显示的问题解决了一下，过两天还是换一个图床比较好。</p><h1 id="10-31-菜品和套餐功能实现">10.31 菜品和套餐功能实现</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-4">2.所学内容概述</h2><p>对菜品和套餐基本功能的实现，因为有的参数是实体类不满足接收的参数，需要创建导入Dto层的类，封装页面提交数据。其实就是把不能接受的参数，重写一下方法，封装为list，再循环赋值，就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品数据保存到dish表</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">        <span class="comment">//获取dishId</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line">        <span class="comment">//将获取到的dishId赋值给dishFlavor的dishId属性</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor dishFlavor : flavors) &#123;</span><br><span class="line">            dishFlavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//同时将菜品口味数据保存到dish_flavor表</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点!!!</p><p>多表操作的时候需要在方法上面加<code>@Transactional</code>，我比较偷懒就直接在业务层Impl类上面加了。然后运行类上面加<code>@EnableTransactionManagement</code></p><h2 id="3-BUG点-5">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>难点写在扩展学习部分了</p><h2 id="4-扩展学习部分-5">4.扩展学习部分</h2><p>因为在视频中和博客中，对有一个列表的stream().map加lambda的方式，一下子没怎么懂，然后就去看了视频，对代码的解释，以及作用，看弹幕，很多人用增强for循环做了出来，因为暑假学了scala，看了一会他的代码也大致的懂了，然后自己去用for循环，发现写出来似乎更方便，而且可读性高，效率倒是还没有去测试过，不过这种小项目，应该相差不大，效率分析过了应该是lambda快很多，用stream流。那一块lambda也是今天的难点所在。</p><p>两种方式对比</p><div class="tabs" id="contrast"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#contrast-1">stream流</button></li><li class="tab"><button type="button" data-href="#contrast-2">增强for</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="contrast-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>, Setmeal::getName, name);</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    setmealService.page(pageInfo, queryWrapper);</span><br><span class="line">    BeanUtils.copyProperties(pageInfo, dtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line">    <span class="comment">//stream流 调用records中元素 拷贝给新建的setmealDto 再通过collect转换为list</span></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item, setmealDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            setmealDto.setCategoryName(category.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    dtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> Result.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="contrast-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize ,String name)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; setmealDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    wrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">    setmealService.page(pageInfo,wrapper);</span><br><span class="line">    BeanUtils.copyProperties(pageInfo,setmealDtoPage,<span class="string">&quot;records&quot;</span>);       </span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;SetmealDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//for循环 调用records中元素 拷贝处理 放入空列表list中</span></span><br><span class="line">    <span class="keyword">for</span> (Setmeal item : records)&#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(setmealDto);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="5-总结-5">5.总结</h2><p>今天学习难度稍难，而且下午练了回车，但是今日的学习状态极佳，一股脑扎进去敲代码。今天的难点其实是在多表操作中，因为在菜品功能和套餐中，都有调用另外一个关联表的操作，就需要用LambdaQueryWrapper进行公共字段匹配，有点像sql中的多表连接，但是是用java实现的，和left join这样差不多,LambdaQueryWrapper就是类似于on，实现连接条件，还有一个lambda对列表的处理，分页查询那边，代码量有点太大了，但是如果分析好步骤，自己也是可以敲出来的。其他的修改和删除操作，也比之前的稍难点，需要自定义在业务层写方法，进行一个自定义处理，因为有些条件是需要添加的，很多categoryId是需要后面添加的。总体来说今天学习的内容还是很丰富的，早上做文件上传和下载，把java基础的流又算复习了一遍，明天状态好的话，项目的简单实现应该就完成了，再花个两三天把redis和优化解决。</p><h1 id="11-1-移动端功能的实现">11.1 移动端功能的实现</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-5">2.所学内容概述</h2><p>移动端功能实现(过段时间，会写在自己博客中，笔记内容就不放了，代码很多)</p><p><a href="https://u7-u7.github.io/%E8%BF%99%E9%87%8C%E4%BC%9A%E6%94%BE%E4%BB%A3%E7%A0%81,%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86">https://u7-u7.github.io/这里会放代码,以及流程梳理</a></p><h3 id="修改手机验证-为邮箱">修改手机验证 为邮箱</h3><p>教程是用手机发送一个虚假的请求验证码输入验证，但是手机号要真正实现是要钱的，突然记得之前自己学过邮箱的发送，然后自己去改成了自己的邮箱，把邮箱的SMTP打开，是可以发送的，自己改前端代码的时候有点问题，去CSDN搜到了邮箱的正则匹配的表达式，然后页面把手机号都改成了邮箱，验证码也实现了，但是发现验证码是用equals的这样大小写一定要统一，我们日常使用是不用的，就改成了不区分大小写，倒是不难。</p><h4 id="准备工作">准备工作</h4><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送邮箱的工具类 带测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">//可以在这里直接测试方法，填自己的邮箱即可</span></span><br><span class="line">        sendTestMail(<span class="string">&quot;1452582554@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">MailUtils</span>().achieveCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTestMail</span><span class="params">(String email, String code)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 创建Properties 类用于记录邮箱的一些属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 表示SMTP发送邮件，必须进行身份验证</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">//此处填写SMTP服务器</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//端口号，QQ邮箱端口587</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写，写信人的账号</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.user&quot;</span>, <span class="string">&quot;1452582554@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写16位STMP口令</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.password&quot;</span>, <span class="string">&quot;vxccjkvvlrokgigh&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">        <span class="type">Authenticator</span> <span class="variable">authenticator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 用户名、密码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.user&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.password&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(userName, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">mailSession</span> <span class="operator">=</span> Session.getInstance(props, authenticator);</span><br><span class="line">        <span class="comment">// 创建邮件消息</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(mailSession);</span><br><span class="line">        <span class="comment">// 设置发件人</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">form</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(props.getProperty(<span class="string">&quot;mail.user&quot;</span>));</span><br><span class="line">        message.setFrom(form);</span><br><span class="line">        <span class="comment">// 设置收件人的邮箱</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(email);</span><br><span class="line">        message.setRecipient(RecipientType.TO, to);</span><br><span class="line">        <span class="comment">// 设置邮件标题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;u7&#x27;s Blog 邮件测试&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置邮件的内容体</span></span><br><span class="line">        message.setContent(<span class="string">&quot;尊敬的用户:你好!\n注册验证码为:&quot;</span> + code + <span class="string">&quot;(有效期为一分钟,请勿告知他人)&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 最后当然就是发送邮件啦</span></span><br><span class="line">        Transport.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">achieveCode</span><span class="params">()</span> &#123;  <span class="comment">//由于数字 1 、 0 和字母 O 、l 有时分不清楚，所以，没有数字 1 、 0</span></span><br><span class="line">        String[] beforeShuffle = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>,</span><br><span class="line">                <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>,</span><br><span class="line">                <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(beforeShuffle);<span class="comment">//将数组转换为集合</span></span><br><span class="line">        Collections.shuffle(list);  <span class="comment">//打乱集合顺序</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            sb.append(s); <span class="comment">//将集合转化为字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改拦截器">修改拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/sendMsg&quot;</span>,<span class="comment">//移动端发送短信</span></span><br><span class="line">                <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>判断用户是否登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断用户是否登录</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改的前段页面 (把手机号都先改成邮箱登录) 然后修改 front中的login.html 判断手机号的正则表达式换成判断邮箱的正则表达式 ^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*$(上网搜的)</p><h4 id="发送验证码">发送验证码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="comment">//请求体/user/sendMsg</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (!phone.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//随机生成一个验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line">        log.info(code);</span><br><span class="line">        <span class="comment">//这里的phone其实就是邮箱，code是我们生成的验证码</span></span><br><span class="line">        MailUtils.sendTestMail(phone, code);</span><br><span class="line">        <span class="comment">//验证码存session，方便后面拿出来比对</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邮箱收到了就成功了就可以写login登录的实现了 顺利完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line">        log.info(map.toString());</span><br><span class="line">        <span class="comment">//获取邮箱</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//从session中获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeInSessionUpp</span> <span class="operator">=</span> codeInSession.toUpperCase(); <span class="comment">//全部变成大写</span></span><br><span class="line">        <span class="comment">//比较这用户输入的验证码和session中存的验证码是否一致</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">upperCase</span> <span class="operator">=</span> code.toUpperCase(); <span class="comment">//全部变成大写 这样输入验证码就不需要大小写了</span></span><br><span class="line">        <span class="keyword">if</span> (upperCase.equals(codeInSessionUpp)) &#123;</span><br><span class="line">            <span class="comment">//如果输入正确，判断一下当前用户是否存在</span></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//判断依据是从数据库中查询是否有其邮箱</span></span><br><span class="line">            queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">            <span class="comment">//如果不存在，则创建一个，存入数据库</span></span><br><span class="line">            <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setPhone(phone);</span><br><span class="line">                userService.save(user);</span><br><span class="line"></span><br><span class="line">                user.setName(<span class="string">&quot;用户&quot;</span> + codeInSession);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//存个session，表示登录状态</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">            <span class="comment">//并将其作为结果返回</span></span><br><span class="line">            <span class="keyword">return</span> R.success(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-BUG点-6">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>输入验证码以后，就自动又跳会登录页面，浏览器没有login 的请求，看日志跳到了最后的用户未登录，说明check没有匹配上，检查代码，发现拦截器的数组中，“/user/login” 少了一个/,加上以后顺利解决了问题</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807447.png" alt="image-20221101093111494"></p><p>客户端list查询找的时候，因为调用的是同一个请求，但是我一直没有显示，找不到原因，后面发现自己写的list代码和老师的有一些区别，有一块条件判断的时候，我少加了一个 不等于null的判断，导致我的type在前端显示是null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapper.eq(category.getType() != <span class="literal">null</span>,Category::getType,category.getType());</span><br></pre></td></tr></table></figure><h2 id="4-扩展学习部分-6">4.扩展学习部分</h2><p>移动端补充一些视频未完善的功能(自己写的) 过段时间把这几个功能的实现以及流程 思路 写进来</p><h3 id="历史订单功能">历史订单功能</h3><p>需要先添加一个OrderDto层 然后直接在OrderController编写方法</p><div class="tabs" id="orders"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#orders-1">orderDto</button></li><li class="tab"><button type="button" data-href="#orders-2">OrderController</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="orders-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrdersDto</span> <span class="keyword">extends</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetail&gt; orderDetails;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="orders-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    <span class="comment">//获取orders的page</span></span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//获取ordersDto的page 到时候用属性拷贝</span></span><br><span class="line">    Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//创建orders条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//匹配 userid</span></span><br><span class="line">    queryWrapper.eq(Orders::getUserId,userId);</span><br><span class="line">    <span class="comment">//根据订单时间排序</span></span><br><span class="line">    queryWrapper.orderByAsc(Orders::getOrderTime);</span><br><span class="line">    <span class="comment">//orders分页</span></span><br><span class="line">    orderService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="comment">//pageInfo属性 拷贝给orderDtoPage</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,ordersDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Orders&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;OrdersDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Orders item : records) &#123;</span><br><span class="line">        <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item,ordersDto);</span><br><span class="line">        <span class="comment">//获取orderId 根据id 去orderDetail表查数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        qw.eq(OrderDetail::getOrderId,orderId);</span><br><span class="line">        List&lt;OrderDetail&gt; details = orderDetailService.list(qw);</span><br><span class="line">        ordersDto.setOrderDetails(details);</span><br><span class="line">        list.add(ordersDto);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提交给ordersDtoPage</span></span><br><span class="line">    ordersDtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="登出功能">登出功能</h3><ul><li><p>登出功能比较简单，跟之前的管理端是一样的</p></li><li><p>请求路径<code>/user/loginout</code>,请求方式为<code>POST</code></p><p>要在UserController写方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登出功能</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/loginout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">loginout</span><span class="params">(HttpServletRequest httpServletRequest)</span>&#123;</span><br><span class="line">        httpServletRequest.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>); <span class="comment">//获取登录状态的Attribute</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="修改-删除地址">修改/删除地址</h3><h4 id="数据回显">数据回显</h4><ul><li><p>修改第一步和之前一样完成<code>数据回显</code> 同样看前端请求</p></li><li><p>/addressBook/{id}<code>请求方式是</code>GET 在AddressBookController中写方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">byId</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (byId == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(byId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="修改地址">修改地址</h4><blockquote><p>请求网址: <a href="http://localhost/addressBook">http://localhost/addressBook</a><br>请求方法: PUT</p></blockquote><ul><li>直接在AddressBookController写Put方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updateAdd</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (addressBook == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在，请刷新重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addressBookService.updateById(addressBook); <span class="comment">//调用MP方法</span></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;地址修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="删除地址">删除地址</h4><blockquote><p>请求网址: <a href="http://localhost/addressBook?ids=1579828298672885762">http://localhost/addressBook?ids=1579828298672885762</a><br>请求方法: DELETE</p></blockquote><ul><li>直接在AddressBookController写Delete方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> Long ids)</span>&#123;</span><br><span class="line">    <span class="comment">//删除地址</span></span><br><span class="line">    <span class="keyword">if</span> (ids == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在，请刷新重试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(ids);</span><br><span class="line">    <span class="keyword">if</span> (addressBook == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在，请刷新重试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    addressBookService.removeById(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减号按钮">减号按钮</h3><ul><li>加入购物车以后，前端是给了一个减号的按钮，平常自己点外卖也有使用，大概功能就是点一下数量-1 0的时候菜品就会消失</li></ul><blockquote><p>请求网址: <a href="http://localhost/shoppingCart/sub">http://localhost/shoppingCart/sub</a><br>请求方法: POST</p></blockquote><p>有返回json数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>   dishId<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">    setmealId<span class="punctuation">:</span> <span class="string">&quot;1579044544635232258&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>思路:通过这两个ID 实现对套餐和菜品的number属性的修改 最后为0的话调用删除操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">deleteSub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">       <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> shoppingCart.getSetmealId();</span><br><span class="line">       LambdaQueryWrapper&lt;ShoppingCart&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//只查询当前用户ID的购物车</span></span><br><span class="line">       lambdaQueryWrapper.eq(ShoppingCart::getUserId, BaseContext.getCurrentId());</span><br><span class="line">       <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//匹配出菜品数据</span></span><br><span class="line">           lambdaQueryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">           <span class="type">ShoppingCart</span> <span class="variable">dishCart</span> <span class="operator">=</span> shoppingCartService.getOne(lambdaQueryWrapper);</span><br><span class="line">           dishCart.setNumber(dishCart.getNumber() - <span class="number">1</span>);</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> dishCart.getNumber();</span><br><span class="line">           <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               shoppingCartService.updateById(dishCart);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               shoppingCartService.removeById(dishCart.getId());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> R.success(dishCart);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (setmealId != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//通过setmealId查询购物车套餐数据</span></span><br><span class="line">           lambdaQueryWrapper.eq(ShoppingCart::getSetmealId, setmealId);</span><br><span class="line">           <span class="type">ShoppingCart</span> <span class="variable">setmealCart</span> <span class="operator">=</span> shoppingCartService.getOne(lambdaQueryWrapper);</span><br><span class="line">           <span class="comment">//将查出来的数据的数量-1</span></span><br><span class="line">           setmealCart.setNumber(setmealCart.getNumber() - <span class="number">1</span>);</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">currentNum</span> <span class="operator">=</span> setmealCart.getNumber();</span><br><span class="line">           <span class="comment">//然后判断</span></span><br><span class="line">           <span class="keyword">if</span> (currentNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//大于0则更新</span></span><br><span class="line">               shoppingCartService.updateById(setmealCart);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNum == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//等于0则删除</span></span><br><span class="line">               shoppingCartService.removeById(setmealCart.getId());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> R.success(setmealCart);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> R.error(<span class="string">&quot;系统繁忙，请稍后再试&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="点图片查看套餐的详情">点图片查看套餐的详情</h3><p>这个前端其实是写好了的，阿贾克斯请求在api也看得到 先看下请求</p><blockquote><p>请求网址: <a href="http://localhost/setmeal/dish/1579044544635232258">http://localhost/setmeal/dish/1579044544635232258</a><br>请求方法: GET</p></blockquote><p>是通过id可以实现的 restFul风格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">showSetmealDish</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//手里的数据只有setmealId</span></span><br><span class="line">        dishLambdaQueryWrapper.eq(SetmealDish::getSetmealId, id);</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        List&lt;SetmealDish&gt; records = setmealDishService.list(dishLambdaQueryWrapper);</span><br><span class="line">        List&lt;DishDto&gt; dtoList = records.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//copy数据</span></span><br><span class="line">            BeanUtils.copyProperties(item,dishDto);</span><br><span class="line">            <span class="comment">//查询对应菜品id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getDishId();</span><br><span class="line">            <span class="comment">//根据菜品id获取具体菜品数据，这里要自动装配 dishService</span></span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(dishId);</span><br><span class="line">            BeanUtils.copyProperties(dish,dishDto); <span class="comment">//这里不写也没事 但是我想验证数据</span></span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> R.success(dtoList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-总结-6">5.总结</h2><p>今天的学习难度较难，因为之前做了三四天的客户端的功能完善，功能实现方法什么，自己基本就知道，所以移动端的差不多的功能一天就完成了，很多都是跟客户端大差不大。难点在刚开始的时候，自己把教程的手机号接受验证码验证改成了邮箱（写在扩展学习了），还有后面的购物车和用户下单的代码也是挺难的，看了老师敲了一遍理解完，才尝试去敲。在下午练完车以后 ，快到晚自习了，把移动端的基本功能都实现了。但是自己发现很多功能都没完善，去前端页面是能看到请求的，就想自己尝试完善一下，晚自习将视频中没完善的功能给完善了，大概五六个功能，自己后台代码写掉了。</p><h1 id="11-2-瑞吉外卖完结">11.2 瑞吉外卖完结</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p>【黑马程序员2022新版SSM框架教程_Spring+SpringMVC+Maven高级+SpringBoot+MyBatisPlus企业实用开发技术】 <a href="https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843">https://www.bilibili.com/video/BV1Fi4y1S7ix?p=31&amp;share_source=copy_web&amp;vd_source=c8ae4150b2286ee39a13a79bbe12b843</a></p><h2 id="2-所学内容概述-6">2.所学内容概述</h2><p>上午把管理端老师未完善的功能去完善了一下，下午和晚上花时间，将项目重新回顾梳理了一下。自己用自己的手机操作了一下，客户端的功能是没有问题的。</p><h2 id="3-BUG点-7">3. BUG点</h2><p>难点(关键代码或关键配置，BUG截图+解决方案)</p><p>在扩展学习写批量启售/停售的时候，运行时候就报错，刚开始不知道啥原因，注解掉写的方法，就没报错了，问题在自己写的allStatus方法，以为是把return写到循环体中了，放外面还是报错，翻译报错信息，有一条说DishController什么已存在，奥就发现因为启售和停售的请求是一样的，只是请求体不一样，所以@PostMapepr里面我写的其实是一样的，可能这样会导致匹配不到，就把原本写的单独启售和停售注释了(批量启售/停售也适用单独的),问题解决了，功能也实现了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/202211080807448.png" alt="image-20221102104452662"></p><h2 id="4-扩展学习部分-7">4.扩展学习部分</h2><ul><li><p>[x] 后台系统端的额外功能实现(代码后续补上)  批量的删除 和 启停售</p></li><li><p>两个重要的功能批量修改和删除，使用批量的时候，单独的修改和删除也是能成功的 自己去CSDN搜到了<code>LambdaUpdateWrapper</code>这个类对删除和修改，代码会优化很多</p></li></ul><h3 id="菜品批量启售-停售">菜品批量启售/停售</h3><p>查看前端请求</p><blockquote><p>请求网址: <a href="http://localhost/dish/status/0?ids=1578942037036703745">http://localhost/dish/status/0?ids=1578942037036703745</a><br>请求方法: POST</p></blockquote><p>和之前修改状态一样，前端已经对status取反了，所以直接用发送的status更新状态</p><div class="tabs" id="batchstatus"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#batchstatus-1">单独</button></li><li class="tab"><button type="button" data-href="#batchstatus-2">批量</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="batchstatus-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long ids)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;status:&#123;&#125;,ids:&#123;&#125;&quot;</span>, status, ids);</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(ids);</span><br><span class="line">    <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//直接用它传进来的这个status改就行</span></span><br><span class="line">        dish.setStatus(status);</span><br><span class="line">        dishService.updateById(dish);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="string">&quot;系统繁忙，请稍后再试&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="batchstatus-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;status:&#123;&#125;,ids:&#123;&#125;&quot;</span>, status, ids);</span><br><span class="line">    LambdaUpdateWrapper&lt;Dish&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.in(ids != <span class="literal">null</span>, Dish::getId, ids); <span class="comment">//dish的id在列表中 相当于where in</span></span><br><span class="line">    updateWrapper.set(Dish::getStatus, status); <span class="comment">//设置状态为前端返回的status</span></span><br><span class="line">    dishService.update(updateWrapper); <span class="comment">//更新</span></span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;批量操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="菜品批量删除">菜品批量删除</h3><p>查看前端请求</p><blockquote><p>请求网址: <a href="http://localhost/dish?ids=1578674689490825217">http://localhost/dish?ids=1578674689490825217</a><br>请求方法: DELETE</p></blockquote><p>同样要判断菜品是不是停售状态</p><p>我直接写批量的了，<a href="http://xn--queryWrapper-q45tr2jg6titt.in">区别就在queryWrapper.in</a> 和传入的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">allDelete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除的ids：&#123;&#125;&quot;</span>, ids);</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.in(Dish::getId, ids);</span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> dishService.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;删除列表中存在启售状态商品，无法删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dishService.removeByIds(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套餐批量启售-停售">套餐批量启售/停售</h3><p>查看请求</p><blockquote><p>请求网址: <a href="http://localhost/setmeal/status/1?ids=1580361600576114689">http://localhost/setmeal/status/1?ids=1580361600576114689</a><br>请求方法: POST</p></blockquote><p>和菜品操作的基本一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span><span class="comment">//后面的加入缓存 现在忽略</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">status</span><span class="params">(<span class="meta">@PathVariable</span> String status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    LambdaUpdateWrapper&lt;Setmeal&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.in(Setmeal::getId, ids);</span><br><span class="line">    updateWrapper.set(Setmeal::getStatus, status);</span><br><span class="line">    setmealService.update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;批量操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="套餐修改">套餐修改</h3><p>和其他修改操作一样 需要先数据回显 再修改</p><p>看请求</p><blockquote><p>回显的请求                                                                                                                                                                                             请求网址: <a href="http://localhost/setmeal/1580361496716759041">http://localhost/setmeal/1580361496716759041</a><br>请求方法: GET</p><p>修改的请求  网址: <a href="http://localhost/setmeal">http://localhost/setmeal</a><br>请求方法: PUT</p></blockquote><div class="tabs" id="update11.2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#update11.2-1">回显操作</button></li><li class="tab"><button type="button" data-href="#update11.2-2">修改操作</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="update11.2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span> <span class="comment">//用SetmealDto</span></span><br><span class="line"><span class="keyword">public</span> R&lt;SetmealDto&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealService.getById(id);</span><br><span class="line">    <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">    <span class="comment">//拷贝数据</span></span><br><span class="line">    BeanUtils.copyProperties(setmeal,setmealDto);</span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//配setmealId</span></span><br><span class="line">    queryWrapper.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">    List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line">    setmealDto.setSetmealDishes(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="update11.2-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span> <span class="comment">//后面的加入缓存 现在忽略</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Setmeal&gt; <span class="title function_">updateWithDish</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> setmealDto.getId();</span><br><span class="line">    <span class="comment">//根据id把对应套餐数据删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; qw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">    setmealDishService.remove(qw);</span><br><span class="line">    <span class="comment">//重新添加</span></span><br><span class="line">    setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        item.setSetmealId(id);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//更新套餐数据</span></span><br><span class="line">    setmealService.updateById(setmealDto);</span><br><span class="line">    <span class="comment">//更新套餐对应的数据 批量保存</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="查看订单明细">查看订单明细</h4><p>查看肯定是get请求  但是这个请求比较多</p><blockquote><p>请求网址: [<a href="http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19%2000%3A00%3A00&amp;endTime=2022-11-16%2023%3A59%3A59">http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19 00%3A00%3A00&amp;endTime=2022-11-16 23%3A59%3A59</a>](<a href="http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19">http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19</a> 00%3A00%3A00&amp;endTime=2022-11-16 23%3A59%3A59)<br>请求方法: GET</p></blockquote><ul><li>感觉和之前的历史订单差不多 对着稍微修改一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, Long number, String beginTime, String endTime)</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前id</span></span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//按时间降序排序</span></span><br><span class="line">    queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    queryWrapper.eq(number != <span class="literal">null</span>, Orders::getId, number);</span><br><span class="line">    <span class="comment">//时间段，大于开始，小于结束</span></span><br><span class="line">    queryWrapper.gt(!StringUtils.isEmpty(beginTime), Orders::getOrderTime, beginTime)</span><br><span class="line">            .lt(!StringUtils.isEmpty(endTime), Orders::getOrderTime, endTime);</span><br><span class="line">    orderService.page(pageInfo, queryWrapper);</span><br><span class="line">    List&lt;OrdersDto&gt; list = pageInfo.getRecords().stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">        <span class="comment">//获取orderId,然后根据这个id，去orderDetail表中查数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(OrderDetail::getOrderId, orderId);</span><br><span class="line">        List&lt;OrderDetail&gt; details = orderDetailService.list(wrapper);</span><br><span class="line">        BeanUtils.copyProperties(item, ordersDto);</span><br><span class="line">        <span class="comment">//之后set一下属性</span></span><br><span class="line">        ordersDto.setOrderDetails(details);</span><br><span class="line">        <span class="keyword">return</span> ordersDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    BeanUtils.copyProperties(pageInfo, ordersDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">    ordersDtoPage.setRecords(list);</span><br><span class="line">    <span class="comment">//日志输出看一下</span></span><br><span class="line">    log.info(<span class="string">&quot;list:&#123;&#125;&quot;</span>, list);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改订单状态">修改订单状态</h3><ul><li>这个需要看下前端写的js文件 先看下请求和返回json</li></ul><blockquote><p>请求网址: <a href="http://localhost/order">http://localhost/order</a><br>请求方法: PUT</p></blockquote><ul><li>返回的json 和 js文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>   </span><br><span class="line">    status<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> </span><br><span class="line">    id<span class="punctuation">:</span> <span class="string">&quot;1580166484741677057&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(row.<span class="property">status</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        str =  <span class="string">&#x27;待付款&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        str =  <span class="string">&#x27;正在派送&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        str =  <span class="string">&#x27;已派送&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        str =  <span class="string">&#x27;已完成&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        str =  <span class="string">&#x27;已取消&#x27;</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为返回值已经写好了 我们只要传入参数就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> Integer.parseInt(map.get(<span class="string">&quot;status&quot;</span>));</span><br><span class="line">    <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> Long.valueOf(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    log.info(<span class="string">&quot;修改订单状态:status=&#123;&#125;,id=&#123;&#125;&quot;</span>, status, orderId);</span><br><span class="line">    LambdaUpdateWrapper&lt;Orders&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.eq(Orders::getId, orderId);</span><br><span class="line">    updateWrapper.set(Orders::getStatus, status);</span><br><span class="line">    orderService.update(updateWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;订单状态修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-总结-7">5.总结</h2><p>今天学习状态还不错，但是学习时间有点少了，对自己今天的任务要求也不重，上午完善完老师没写的功能，晚上自己梳理了一遍，以及对自己博客的美化工作，早上第一次做批量启售和停售的时候，出现了一点小插曲，解决完以后，后面的批量删除以及菜单的功能，实现起来也很顺利。本来想加入公司项目的但是好像接口都差不多写完了，计划还是往后面学，项目部署也去学一下，计划挂到服务器里面，再把git和Redis过一遍，这周之前把部署的任务完成了，然后去开始Cloud了打算。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3月笔记</title>
      <link href="/posts/22biji03.html"/>
      <url>/posts/22biji03.html</url>
      
        <content type="html"><![CDATA[<h1 id="3-7-Java概述">3.7 Java概述</h1><h2 id="1-头：日期、所学内容出处">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要">2.今天所学内容摘要**</h2><h3 id="注释：">注释：</h3><p>(文档注释(java独有))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> sjh</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">哈哈哈 java开始</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJava</span>&#123;</span><br><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">哈哈哈</span></span><br><span class="line"><span class="comment">就是这么牛</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* hhh*/</span>  <span class="comment">//多行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** hhh*/</span>  <span class="comment">//文档注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">// 多行注释不能多行注释，不可以嵌套</span></span><br></pre></td></tr></table></figure><p><code>javadoc -d mydoc -author -version HelloJava.java</code></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220306161150044.png" alt="image-20220306161150044"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220306163604972.png" alt="image-20220306163604972"></p><p>总结</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220306175519018.png" alt="image-20220306175519018"></p><h3 id="标识符命名">标识符命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Java语言中，为各种变量、方法和类等起的名字称为标识符</span></span><br><span class="line"><span class="comment">Java标识符的命名规则：</span></span><br><span class="line"><span class="comment">应以字母、下划线、美元符开头</span></span><br><span class="line"><span class="comment">后跟字母、下划线、美元符或数字</span></span><br><span class="line"><span class="comment">Java标识符大小写敏感，长度无限制</span></span><br><span class="line"><span class="comment">1.java中能用作标识符的有：26个英文字母（大、小写），数字，下划线，美元符号$。 </span></span><br><span class="line"><span class="comment">但是不能以数字开头。 </span></span><br><span class="line"><span class="comment">2.类名首个字母必须大写，多个单词组成的，每个单词首字母都要大写。 </span></span><br><span class="line"><span class="comment">3.方法名一般首个字母小写（构造方法例外），多个单词组成方法名，后面单词首字母大写。 </span></span><br><span class="line"><span class="comment">4.变量命名规则同方法名名。 </span></span><br><span class="line"><span class="comment">注意：不能使用java中的关键字做标识符。</span></span><br><span class="line"><span class="comment">1)、名称只能由字母、数字、下划线、$符号组成</span></span><br><span class="line"><span class="comment">2)、命名时不能以数字开头</span></span><br><span class="line"><span class="comment">3)、在命名是绝对不能出现Java关键字。</span></span><br><span class="line"><span class="comment">4)、绝对不允许在命名时出现中文及拼音命名。</span></span><br><span class="line"><span class="comment">类的命名*/</span></span><br></pre></td></tr></table></figure><h3 id="命名规范">命名规范</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.项目名全部小写</span></span><br><span class="line"><span class="comment">2.包名全部小写</span></span><br><span class="line"><span class="comment">3.类名要大驼峰</span></span><br><span class="line"><span class="comment">4.变量通俗易懂</span></span><br><span class="line"><span class="comment">5.方法开头第一个单词以小写字母开头后面用大写字母开头 如:numName</span></span><br><span class="line"><span class="comment">6、使用驼峰命名法命名多个单词组成的变量名。 </span></span><br><span class="line"><span class="comment">7、常量命名时需要遵循名称全部大写的原则。</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h3 id="类名和文件名命名">类名和文件名命名</h3><p>类名前面有public 类名和文件名要一样</p><h3 id="2-变量">2.变量</h3><p><strong><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307094024472.png" alt="image-20220307094024472"></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">variable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> myAge;</span><br><span class="line">myAge = <span class="number">13</span>;</span><br><span class="line">System.out.println(myAge);</span><br><span class="line"><span class="type">int</span> <span class="variable">myNumber</span> <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line">System.out.println(myNumber);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-java定义的数据类型">3.java定义的数据类型</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307094638508.png" alt="image-20220307094638508"></p><h4 id="整型">整型</h4><p>byte short int long</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariableTest3</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> (<span class="type">int</span>)d1;</span><br><span class="line">System.out.println(i1);</span><br><span class="line"><span class="comment">//没有精度损失</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> (<span class="type">short</span>)l1;</span><br><span class="line">System.out.println(s2);</span><br><span class="line"><span class="comment">//精度损失</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i2;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307105321442.png" alt="image-20220307105321442"></p><h4 id="浮点型">浮点型</h4><p>float doule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariableTest4</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//1.编码情况</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">123213</span>;</span><br><span class="line">System.out.println(l);</span><br><span class="line"><span class="comment">//编译失败:过大的整数</span></span><br><span class="line"><span class="comment">// long 11 = 213341335131412411;</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">2141414134324442L</span>;</span><br><span class="line">System.out.println(l1);</span><br><span class="line"><span class="comment">//*****************</span></span><br><span class="line"><span class="comment">//编译失败</span></span><br><span class="line"><span class="comment">// float f1 = 12.3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.编译情况</span></span><br><span class="line"><span class="comment">//整型常量默认是int</span></span><br><span class="line"><span class="comment">//浮点型常量默认类型是double型</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="comment">//byte b1 = b + 1; 失败</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> b + <span class="number">1</span>;</span><br><span class="line">System.out.println(b1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307105929495.png" alt="image-20220307105929495"></p><h4 id="转义字符">转义字符</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307111035511.png" alt="image-20220307111035511"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariableTest1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.整型</span></span><br><span class="line"><span class="comment">//byte范围 -128 - 127</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line"><span class="comment">//byte b2 = 128编译不通过</span></span><br><span class="line">System.out.println(b1);</span><br><span class="line">System.out.println(b2);</span><br><span class="line"><span class="comment">//声明long型变量，必须以&quot;L&quot;或&quot;I&quot;结尾</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">41423551531413L</span>;</span><br><span class="line">System.out.println(l1);</span><br><span class="line"><span class="comment">//2.浮点型</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">123.3</span>;</span><br><span class="line">System.out.println(d1);</span><br><span class="line"><span class="type">float</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">12.3F</span>;</span><br><span class="line">System.out.println(d2);</span><br><span class="line"><span class="comment">//3.字符型: char(1字符 = 2字节)</span></span><br><span class="line"><span class="comment">//1. 定义char型变量，通常使用一对&#x27;&#x27;,内部只能写一个字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">// c1 = &#x27;AB&#x27; 编译不通过</span></span><br><span class="line">System.out.println(c1);</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">System.out.println(c2);</span><br><span class="line">System.out.println(c3);</span><br><span class="line"><span class="comment">// 表示方式 1.声明一个字符 2.转义字符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="string">&quot;World!&quot;</span>;</span><br><span class="line">System.out.println(a1 + <span class="string">&#x27;\t&#x27;</span> + a2);</span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="string">&#x27;\u0043&#x27;</span>;</span><br><span class="line">System.out.println(c4);</span><br><span class="line"><span class="comment">//4.布尔型 boolean</span></span><br><span class="line"><span class="comment">//只能取两个值 true false</span></span><br><span class="line"><span class="comment">//常常在条件判断。循环结构中使用</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">bb1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">System.out.println(bb1);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isMarried</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(isMarried)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你就不可以参加\&quot;单身party\&quot;了！\n很遗憾&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你就可以多谈女朋友&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自动类型提升运算">4.自动类型提升运算</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307140723999.png" alt="image-20220307140723999"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableTest2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line"><span class="comment">//byte i2 = b1 + b2; 编译不通过</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> b1 + i1;</span><br><span class="line">System.out.println(i2);<span class="comment">//131</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">i3</span> <span class="operator">=</span> b1 + i1; <span class="comment">// 131.0</span></span><br><span class="line">System.out.println(i3);</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> s1; <span class="comment">//123.0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-进制">5.进制</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307152041629.png" alt="image-20220307152041629"></p><h4 id="string运算">string运算</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariableTest5</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char c = &#x27;&#x27;; //不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***********************</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">numberStr</span> <span class="operator">=</span> <span class="string">&quot;学号: &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> numberStr + number;</span><br><span class="line"><span class="type">String</span> <span class="variable">info1</span> <span class="operator">=</span> info + <span class="literal">true</span>;</span><br><span class="line">System.out.println(info1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//***********************</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 97</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(c + num + str);<span class="comment">//107hello</span></span><br><span class="line">System.out.println(c + str + num);<span class="comment">//ahello10</span></span><br><span class="line">System.out.println(c + (num + str)); <span class="comment">// a10hello</span></span><br><span class="line">System.out.println(str + num + c); <span class="comment">// hello10a</span></span><br><span class="line">System.out.println(num + c + str); <span class="comment">//107hello</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307085808370.png" alt="image-20220307085808370"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307085956715.png" alt="image-20220307085956715"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220307090045917.png" alt="image-20220307090045917"></p><p><code>javac -encoding UTF-8 .\Imessage.java</code></p><h2 id="4-扩展学习部分">**4.扩展学习部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Title</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;姓名:龙坤long\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;性别:男&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;家庭住址:金华职业技术学院&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//print打印输出</span></span><br><span class="line"><span class="comment">//println打印输出换行</span></span><br></pre></td></tr></table></figure><p>print打印输出</p><p>println打印输出换行</p><h2 id="总结">总结</h2><p>第一天转战java 因为学过两天的c++和一学期的python上手也比较块，昨天花一天装了jdk和环境变量，今天一口气看了50集，二倍数，一些和c++一模一样，理解了基本语法，案例什么自己也可以敲出来，不用看老师。</p><h1 id="3-8-java运算">3.8 java运算</h1><h2 id="1-头：日期、所学内容出处-2">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-2">2.今天所学内容摘要**</h2><h3 id="算数运算符">算数运算符</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220308094932501.png" alt="image-20220308094932501"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">算数运算符 </span></span><br><span class="line"><span class="comment">+ - + - * / % ++ ++ -- --</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReviewTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> num1 / num2;</span><br><span class="line">System.out.println(result2);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result3</span> <span class="operator">=</span> num1 / num2 * num2;</span><br><span class="line">System.out.println(result3);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">result1</span> <span class="operator">=</span> (<span class="type">double</span>)num1 /num2;</span><br><span class="line">System.out.println(result1);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">result6</span> <span class="operator">=</span> (<span class="type">double</span>)(num1 /num2);</span><br><span class="line">System.out.println(result6);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">result4</span> <span class="operator">=</span> num1 / (num2 + <span class="number">0.0</span>);</span><br><span class="line">System.out.println(result4);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">result5</span> <span class="operator">=</span> (num1 +<span class="number">0.0</span>) /num2;</span><br><span class="line">System.out.println(result5);</span><br><span class="line"><span class="comment">// % 取余运算 </span></span><br><span class="line"><span class="comment">// 结果是符号和被取模数相同</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">System.out.println(m1 % n1);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> -<span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">System.out.println(m2 % n2);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m3= <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> -<span class="number">5</span>;</span><br><span class="line">System.out.println(m3 % n3);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">m4</span> <span class="operator">=</span> -<span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> -<span class="number">5</span>;</span><br><span class="line">System.out.println(m4 % n4);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前++</span></span><br><span class="line"><span class="comment">// 后++</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> ++a1;</span><br><span class="line">System.out.println(<span class="string">&quot;a1 = &quot;</span> + a1 + <span class="string">&quot;,b1 = &quot;</span> + b1);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b2</span> <span class="operator">=</span> a2++;</span><br><span class="line">System.out.println(<span class="string">&quot;a2 = &quot;</span> + a2 + <span class="string">&quot;,b2 = &quot;</span> + b2);</span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">s1++;</span><br><span class="line"><span class="comment">//s1 = s1 + 1; 错</span></span><br><span class="line"><span class="comment">//s1 = short(s1 + 1); 对的</span></span><br><span class="line">System.out.println(s1);</span><br><span class="line"></span><br><span class="line"><span class="type">type</span> <span class="variable">bb1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">bb1++;</span><br><span class="line">System.out.println(bb1); <span class="comment">// -128</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符">赋值运算符</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220308094819113.png" alt="image-20220308094819113"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运算符之二 赋值运算符</span></span><br><span class="line"><span class="comment">= += -= *= *= /= %=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReviewTest2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> i1,i2;</span><br><span class="line">i2 = j2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">10</span>,j3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="number">14</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">m1 %= n1; <span class="comment">// 不会改变数据类型</span></span><br><span class="line">System.out.println(m1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较运算符">比较运算符</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220308101656494.png" alt="image-20220308101656494"></p><h3 id="逻辑运算符">逻辑运算符</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220308101822060.png" alt="image-20220308101822060"></p><h3 id="三元运算符">三元运算符</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220308140952676.png" alt="image-20220308140952676"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SanYuanTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (m&gt;n)?m:n;</span><br><span class="line">System.out.println(max);</span><br><span class="line"></span><br><span class="line">n = <span class="number">12</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> (m&gt;n)?<span class="string">&quot;m大&quot;</span>:((m == n)? <span class="string">&quot;m和n相等&quot;</span>:<span class="string">&quot;n大&quot;</span>);</span><br><span class="line">System.out.println(maxStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三个数的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">15</span>,b = <span class="number">8</span>,c = <span class="number">3</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">maxSan</span> <span class="operator">=</span> (a&gt;b)? ((a&gt;c)? <span class="string">&quot;a大&quot;</span>:<span class="string">&quot;c大&quot;</span>): ((b&gt;c)?<span class="string">&quot;b大&quot;</span>:<span class="string">&quot;c大&quot;</span>);</span><br><span class="line">System.out.println(maxSan);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘获取-if语句">键盘获取(if语句)</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220308152329041.png" alt="image-20220308152329041"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//键盘输入姓名 学号 成绩 判断ABCD</span></span><br><span class="line"><span class="comment">// A 90  B 80 c 70 D 60 E 60以下</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReviewTest4</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.next();</span><br><span class="line">System.out.println(<span class="string">&quot;学号：&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">studentNumber</span> <span class="operator">=</span> input.nextLong();</span><br><span class="line">System.out.println(<span class="string">&quot;成绩：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">success</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">String s;</span><br><span class="line"><span class="comment">// 成绩判断 ABCDE</span></span><br><span class="line"><span class="keyword">if</span>(success&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">System.out.println(name+studentNumber+<span class="string">&quot;:&quot;</span>+<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(success&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">System.out.println(name+studentNumber+<span class="string">&quot;:&quot;</span>+<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(success&gt;=<span class="number">70</span>)&#123;</span><br><span class="line">System.out.println(name+studentNumber+<span class="string">&quot;:&quot;</span>+<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(success&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">System.out.println(name+studentNumber+<span class="string">&quot;:&quot;</span>+<span class="string">&quot;D&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(name+studentNumber+<span class="string">&quot;:&quot;</span>+<span class="string">&quot;E&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-2">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><h2 id="4-扩展学习部分-2">**4.扩展学习部分</h2><h2 id="总结-2">总结</h2><p>java运算符和python里不太一样，&amp; 和| 分不太清，后面找资料明白了，自己创作了博客关于&amp;和| 区分。其他加减乘除都理解了，类型之间有的通过运算会转换不太理解。明天再看。</p><h1 id="3-10-switch-语句">3.10 switch 语句</h1><h2 id="1-头：日期、所学内容出处-3">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-3">2.今天所学内容摘要**</h2><p>switch的case语句可以处理int，short，byte，String，char类型的值，但是不能处理long，等类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123; </span><br><span class="line"><span class="keyword">case</span> 表达式常量<span class="number">1</span>：语句<span class="number">1</span>； </span><br><span class="line"><span class="keyword">break</span>； </span><br><span class="line"><span class="keyword">case</span> 表达式常量<span class="number">2</span>：语句<span class="number">2</span>； </span><br><span class="line"><span class="keyword">break</span>； </span><br><span class="line">...... </span><br><span class="line"><span class="keyword">case</span> 表达式常量n：语句n； </span><br><span class="line"><span class="keyword">break</span>； </span><br><span class="line">[<span class="keyword">default</span>：语句n+<span class="number">1</span>；] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>case语句后面要加break 不然会继续向下直接执行下一个条件 不管满不满足</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        String monthString;</span><br><span class="line">        <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  monthString = <span class="string">&quot;January&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:  monthString = <span class="string">&quot;February&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:  monthString = <span class="string">&quot;March&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:  monthString = <span class="string">&quot;April&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:  monthString = <span class="string">&quot;May&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:  monthString = <span class="string">&quot;June&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:  monthString = <span class="string">&quot;July&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:  monthString = <span class="string">&quot;August&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:  monthString = <span class="string">&quot;September&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>: monthString = <span class="string">&quot;October&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>: monthString = <span class="string">&quot;November&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>: monthString = <span class="string">&quot;December&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: monthString = <span class="string">&quot;Invalid month&quot;</span>;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(monthString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.8以后支持String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSwitch01</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">A</span> <span class="operator">=</span> <span class="string">&quot;perfect&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span>(A)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;perfect&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;完美&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;不完美&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220311092753876.png" alt="image-20220311092753876"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-3">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>default的位置不同运行结果不同：</p><p><strong>java里switch的执行顺序</strong><br>switch表达式的值决定选择哪个case分支，如果找不到相应的分支，就直接从”default” 开始输出。<br>当程序执行一条case语句后，因为例子中的case分支中没有break 和return语句，所以程序会执行紧接于其后的语句。</p><p><img src="https://img-blog.csdn.net/2018083017171564?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MjIwMDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p><img src="https://img-blog.csdn.net/20180830171725373?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MjIwMDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="4-扩展学习部分-3">**4.扩展学习部分</h2><p>判断闰年 月份日期 是这年的第几天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键盘输入 年月日 判断闰年 再 判断日期是第几天</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">code2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年份&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入月份&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入日期&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">sumDay</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断 闰年</span></span><br><span class="line"><span class="keyword">if</span>((year % <span class="number">4</span> ==<span class="number">0</span>||year % <span class="number">100</span> != <span class="number">0</span>)&amp;&amp;(year % <span class="number">400</span> == <span class="number">0</span>))&#123;</span><br><span class="line"><span class="comment">//闰年月份前的天数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">1</span>;r&lt;month;r++)&#123;</span><br><span class="line"><span class="keyword">switch</span> (r)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">sumDay += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">sumDay += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">sumDay += <span class="number">29</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;是闰年&quot;</span> + (day+sumDay));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//非润年月份前的天数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;month;i++)&#123;</span><br><span class="line"><span class="keyword">switch</span> (i)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">sumDay += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">sumDay += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">sumDay += <span class="number">28</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;不是闰年&quot;</span> + (day+sumDay));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-3">总结</h2><p>switch语句在java和c++一模一样基本学过了，和if方法应该是互通的，default的位置对代码的影响可能是没接触过的，今天学习时间不太多，只学了switch和if这两块内容，一天就十几集。</p><h1 id="3-11-循环">3.11 循环</h1><h2 id="1-头：日期、所学内容出处-4">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-4">2.今天所学内容摘要**</h2><h3 id="For循环">For循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"><span class="comment">/* 一,循环结构的4个要素</span></span><br><span class="line"><span class="comment">1.初始化条件</span></span><br><span class="line"><span class="comment">2.循环条件----boolean类型</span></span><br><span class="line"><span class="comment">3.循环体</span></span><br><span class="line"><span class="comment">4.迭代条件</span></span><br><span class="line"><span class="comment">二 for 循环 的结构</span></span><br><span class="line"><span class="comment">for(1;2;4)&#123;</span></span><br><span class="line"><span class="comment">    3;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">执行过程 1-2-3-4-2-3-4-2-3-4-....-2-3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (System.out.println(<span class="string">&#x27;a&#x27;</span>);num&lt;=<span class="number">3</span>; System.out.println(<span class="string">&#x27;c&#x27;</span>),num++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        &#125;<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;a&lt;=<span class="number">100</span>;a++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                count += <span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="While循环">While循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一,循环结构的4个要素</span></span><br><span class="line"><span class="comment">1.初始化条件</span></span><br><span class="line"><span class="comment">2.循环条件----boolean类型</span></span><br><span class="line"><span class="comment">3.循环体</span></span><br><span class="line"><span class="comment">4.迭代条件</span></span><br><span class="line"><span class="comment">二，while循环的结构</span></span><br><span class="line"><span class="comment">1;</span></span><br><span class="line"><span class="comment">while(2)&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程 1-2-3-4-2-3-4</span></span><br><span class="line"><span class="comment">说明:</span></span><br><span class="line"><span class="comment">1.写while循环千万小心不用丢了 迭代条件。一旦丢了，就可能死循环</span></span><br><span class="line"><span class="comment">2.写程序避免死循环</span></span><br><span class="line"><span class="comment">3.for 和while循环可以互相转换</span></span><br><span class="line"><span class="comment">不同 初始化条件部分作用不同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Do-while-循环">Do while 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一,循环结构的4个要素</span></span><br><span class="line"><span class="comment">1.初始化条件</span></span><br><span class="line"><span class="comment">2.循环条件----boolean类型</span></span><br><span class="line"><span class="comment">3.循环体</span></span><br><span class="line"><span class="comment">4.迭代条件</span></span><br><span class="line"><span class="comment">二，do while循环的结构</span></span><br><span class="line"><span class="comment">1;</span></span><br><span class="line"><span class="comment">do&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125;while(2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程 1-3-4-2-3-4-....</span></span><br><span class="line"><span class="comment">说明:</span></span><br><span class="line"><span class="comment">1.do while 至少执行一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (i&lt;=<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无限循环">无限循环</h3><p>for(;;)</p><p>while(true)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//for(;;)</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(a &gt; <span class="number">0</span>)</span><br><span class="line">                count1 ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">0</span>)</span><br><span class="line">                count2 ++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;正数&quot;</span>+count1+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;负数&quot;</span>+count2+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环嵌套">循环嵌套</h3><p>外循环代表行数</p><p>内循环代表列数</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220311151534925.png" alt="image-20220311151534925"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">=</span></span><br><span class="line"><span class="comment">==</span></span><br><span class="line"><span class="comment">===</span></span><br><span class="line"><span class="comment">====</span></span><br><span class="line"><span class="comment">=====</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForForTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;a&lt;=i;a++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>九九乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForForTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot; * &quot;</span> + i + <span class="string">&quot; = &quot;</span>+(i*j)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-4">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>IDEA总是中文乱码</p><p>所有编码改成gbk</p><h2 id="4-扩展学习部分-4">**4.扩展学习部分</h2><p>水仙花数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShuiXian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i % <span class="number">10</span>; <span class="comment">//个位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>; <span class="comment">// 十位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> i / <span class="number">100</span>; <span class="comment">// 百位</span></span><br><span class="line">            <span class="keyword">if</span>(i == Math.pow(a,<span class="number">3</span>)+Math.pow(b,<span class="number">3</span>)+Math.pow(c,<span class="number">3</span>))&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大公约数最小公倍数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入两个数字:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Math.min(m,n);y&gt;<span class="number">0</span>;y--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n % y ==<span class="number">0</span> &amp;&amp; m % y== <span class="number">0</span>)&#123;</span><br><span class="line">                z += y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;最大公约数是:&quot;</span>+z);</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> m*n/z;</span><br><span class="line">    System.out.println(<span class="string">&quot;最小公倍数是:&quot;</span>+s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印图案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">    * *</span></span><br><span class="line"><span class="comment">   * * *</span></span><br><span class="line"><span class="comment">  * * * *</span></span><br><span class="line"><span class="comment"> * * * * *</span></span><br><span class="line"><span class="comment">  * * * *</span></span><br><span class="line"><span class="comment">   * * *</span></span><br><span class="line"><span class="comment">    * *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForForTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;b&lt;=<span class="number">5</span>-i;b++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;a&lt;=i;a++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span>; c&lt;=<span class="number">4</span>;c++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1</span>; d&lt;=c;d++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">1</span>;e &lt;=<span class="number">5</span>-c;e++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForForTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//获取当前时间 距离 1970-01-01 00:00:00的毫秒数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i/<span class="number">2</span>;j&gt;<span class="number">1</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % j == <span class="number">0</span>) &#123;<span class="comment">//不是质数</span></span><br><span class="line">                a = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a)&#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;是质数&quot;</span>);</span><br><span class="line">            z++;&#125;</span><br><span class="line">        a = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;质数一共有&quot;</span>+z);</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(end - start);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-4">总结</h2><p>今天主要是学习了三个循环，用法呢基本和python一样，语法稍微有点不同，初始化条件，循环条件----boolean类型，循环体，迭代条件的放置位置不太一样，今天主要是敲代码，因为已经掌握知识，敲代码也是游刃有余，将之前python的一些循环判断题都用java的方法做一下。</p><h1 id="3-14收支记账软件">3.14收支记账软件</h1><h2 id="1-头：日期、所学内容出处-5">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-5">2.今天所学内容摘要**</h2><p>收支软件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FamilyAccount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> (<span class="string">&quot;收支      账户金额        收入金额        说   明&quot;</span>+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">islend</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (islend) &#123;</span><br><span class="line">            <span class="comment">//打印页面</span></span><br><span class="line">            System.out.println(<span class="string">&quot;-------------------家庭收支记账软件--------------------&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;                    1 收支登记&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                    2 登记收入&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                    3 登记支出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                    4 退出&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.print(<span class="string">&quot;                      请选择&lt;1-4&gt;:&quot;</span>);</span><br><span class="line">            <span class="comment">//键盘输入</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">//分支 判断输入</span></span><br><span class="line">            <span class="keyword">switch</span> (input)&#123;</span><br><span class="line">                <span class="comment">//收支界面</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;-------------------当前收支记录明细--------------------&quot;</span>);</span><br><span class="line">                    System.out.println(details);</span><br><span class="line">                    System.out.println(<span class="string">&quot;------------------------------------------------------&quot;</span>);</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//收入</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;(输入0返回菜单)&quot;</span>);</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次收入金额:&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">income</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    <span class="keyword">if</span> (income &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                    balance += income;</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次收入说明:&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                    details += (<span class="string">&quot;收入\t\t&quot;</span>+balance+<span class="string">&quot;\t\t\t&quot;</span>+income+<span class="string">&quot;\t\t  &quot;</span>+info+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;.登记完成.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//支出</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;(输入0返回菜单)&quot;</span>);</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次支出金额:&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    <span class="keyword">if</span> (money&lt;=balance &amp;&amp; money!=<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                    balance -= money;</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次支出说明:&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">spending</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                    details += (<span class="string">&quot;支出\t\t&quot;</span>+balance+<span class="string">&quot;\t\t\t&quot;</span>+money+<span class="string">&quot;\t\t  &quot;</span>+spending+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;.登记完成.&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(money &gt; balance &amp;&amp; money != <span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;你没有这么多钱,花不了,去赚钱&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//退出...</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;是否确认退出 Y/N:&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                        <span class="type">char</span> <span class="variable">exit</span> <span class="operator">=</span> a.charAt(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (exit == <span class="string">&#x27;Y&#x27;</span> || exit == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;退出成功！&quot;</span>);</span><br><span class="line">                            islend = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exit == <span class="string">&#x27;N&#x27;</span> || exit == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-5">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p><img src="https://docimg4.docs.qq.com/image/qmKXnvVDG8T4AbyX-LRcZw.png?w=1049&amp;h=387" alt="img"></p><p><img src="https://docimg5.docs.qq.com/image/o9fa3DscIy5FSnaWwKMA4A.png?w=1222&amp;h=826" alt="img"></p><p>退出系统时，需要输入Y/N，python里就是直接判断就好，于是按照字符串，判断，发现不行，不可比较的类型: java.lang.String和char提示，想到可以输入一个char，用atchar方法，翻阅了笔记，就解决了。</p><h2 id="4-扩展学习部分-5">**4.扩展学习部分</h2><p>看了大致安装Eclipse的样子，选择自己用IDEA。</p><h2 id="总结-5">总结</h2><p>今天主要就是敲了这个案例，早上复习了一下上周的continue标签，收支案例和python的名片系统差不多，先看第一节课老师对这个小软件的使用方法，就自己基本打出来了，在老师的方法之上稍微完善了一下，人性化了一下，等学了数组可以完善，加入修改的作用。然后因为自己用的IDEA 关于EClipse都跳掉了。</p><h1 id="3-15数组">3.15数组</h1><h2 id="1-头：日期、所学内容出处-6">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-6">2.今天所学内容摘要**</h2><h3 id="数组">数组</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220315100926904.png" alt="image-20220315100926904"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220315100900729.png" alt="image-20220315100900729"></p><h3 id="静态数组和动态数组">静态数组和动态数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建数组 ids 静态数组</span></span><br><span class="line">        <span class="type">int</span>[] ids = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>, <span class="number">1004</span>&#125;;</span><br><span class="line">        <span class="comment">// int[] ids = &#123;1001, 1002, 1003, 1004&#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数组 names 动态数组</span></span><br><span class="line">        String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">        names[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        names[<span class="number">1</span>] = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        names[<span class="number">2</span>] = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">        names[<span class="number">3</span>] = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        names[<span class="number">4</span>] = <span class="string">&quot;小美&quot;</span>;</span><br><span class="line">        System.out.println(ids.length);</span><br><span class="line">        System.out.println(ids[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(names.length);</span><br><span class="line">        <span class="type">String</span> <span class="variable">z</span> <span class="operator">=</span> names[<span class="number">1</span>];</span><br><span class="line">        System.out.println(z);</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上</p><p>静态数组在创建的时候，数据就已经定义好了</p><p>动态数组只是定义长度，数据可以后续添加</p><h3 id="数据添加-调用-遍历">数据添加 调用 遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">900</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">900</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (i+<span class="number">100</span>);</span><br><span class="line">            nums[i] = num; <span class="comment">// 将数字存放在数组里</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> name:nums)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//记录 位数的立方</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>; j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">nums1</span> <span class="operator">=</span> (<span class="string">&quot;&quot;</span>+name).charAt(j); <span class="comment">// 一位一位取出</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Character.getNumericValue(nums1);<span class="comment">//char转为int类型</span></span><br><span class="line">                num4 += Math.pow(y,<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num4 == name)&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="For-Each-循环">For-Each 循环</h3><p><a href="https://www.runoob.com/java/java-array.html">https://www.runoob.com/java/java-array.html</a></p><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p><p>语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(type element: array)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组">二维数组</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220315191322989.png" alt="image-20220315191322989"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day05;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//二维数组创建</span></span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">30</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">        String[] StrS = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">        StrS[<span class="number">2</span>] = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        StrS = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(StrS[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]</span><br><span class="line">    <span class="comment">//类似于数组嵌套 大数组里有 </span></span><br><span class="line">    <span class="comment">//第一个代表行 第二个代表列</span></span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-6">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220314210821017.png" alt="image-20220314210821017"></p><p>搞了半天是取数组数据的方法错了 应该是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names[<span class="type">int</span>]</span><br></pre></td></tr></table></figure><h2 id="4-扩展学习部分-6">**4.扩展学习部分</h2><p>IDEA会自动给你修复最佳方案，在char变字符串，在和字符串合并的时候</p><p>知道了一个StringBuilder方案,CSDN找了用法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220315160754074.png" alt="image-20220315160754074"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day05;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">     <span class="comment">// 题目：输入一行字符，分别统计出其英文字母、空格、数字和其它字符的个数。</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">         System.out.print(<span class="string">&quot;请输入要统计的字符:   &quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">         <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//英文字母统计</span></span><br><span class="line">         <span class="type">StringBuilder</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); <span class="comment">//统计出现的字母</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//空格</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">count3</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//数字</span></span><br><span class="line">         <span class="type">StringBuilder</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); </span><br><span class="line">         <span class="type">int</span> <span class="variable">count4</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//其他</span></span><br><span class="line">         <span class="type">StringBuilder</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;count.length();i++)&#123;</span><br><span class="line">             <span class="type">char</span> <span class="variable">Character</span> <span class="operator">=</span> count.charAt(i); <span class="comment">//字符串个个取出</span></span><br><span class="line">             <span class="keyword">if</span> (((<span class="type">int</span>) Character &gt;=<span class="number">65</span> &amp;&amp; (<span class="type">int</span>) Character &lt;= <span class="number">90</span>)||((<span class="type">int</span>) Character &gt;=<span class="number">97</span> &amp;&amp; (<span class="type">int</span>) Character &lt;= <span class="number">121</span>))<span class="comment">//字母</span></span><br><span class="line">                &#123;</span><br><span class="line">                    count1 ++;</span><br><span class="line">                    str1.append(Character);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">int</span>) Character == <span class="number">32</span>)<span class="comment">//空格</span></span><br><span class="line">                    count2 ++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">int</span>) Character &gt;= <span class="number">48</span> &amp;&amp; (<span class="type">int</span>) Character &lt;= <span class="number">57</span>)<span class="comment">//数字</span></span><br><span class="line">                &#123;</span><br><span class="line">                    count3 ++;</span><br><span class="line">                    str2.append(Character);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    count4 ++;</span><br><span class="line">                    str3.append(Character);</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">&quot;存在字母个数:&quot;</span> + count1);</span><br><span class="line">         System.out.println(<span class="string">&quot;存在字母如下:&quot;</span> + str1);</span><br><span class="line">         System.out.println();</span><br><span class="line">         System.out.println(<span class="string">&quot;存在数字个数:&quot;</span> + count3);</span><br><span class="line">         System.out.println(<span class="string">&quot;存在数字如下:&quot;</span> + str2);</span><br><span class="line">         System.out.println();</span><br><span class="line">         System.out.println(<span class="string">&quot;存在空格个数:&quot;</span> + count2);</span><br><span class="line">         System.out.println();</span><br><span class="line">         System.out.println(<span class="string">&quot;存在其他个数:&quot;</span> + count4);</span><br><span class="line">         System.out.println(<span class="string">&quot;存在其他如下:&quot;</span> + str3);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-6">总结</h2><p>二维数组中，引用类型没有理解透彻今天的学习状态还是满意的。学了数组很多，存储数据的题目都可以做了，在java的题目中做了7道题，跟老师也敲了几个案例。但是一些用法不确定java中有没有，自动添加数据这种，不然数组【int】 = “”<br>这种方法，有点麻烦，看懂用法就去做了题目，但是感觉自己的方法很长，应该有更简单的，需要寻找一下。</p><h1 id="3-18数组扩展算法">3.18数组扩展算法</h1><h2 id="1-头：日期、所学内容出处-7">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-7">2.今天所学内容摘要**</h2><p>今天多是打代码题目</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220318225731734.png" alt="image-20220318225731734"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day06;</span><br><span class="line"><span class="comment">//杨辉三角</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化数组</span></span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给数组元素赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; arr.length;x++) &#123;</span><br><span class="line">            arr[x] = <span class="keyword">new</span> <span class="title class_">int</span>[x + <span class="number">1</span>];<span class="comment">//创建每行 数组的长度</span></span><br><span class="line">            arr[x][<span class="number">0</span>] = arr[x][x] =<span class="number">1</span>;<span class="comment">//每行第一个和最后一个是1</span></span><br><span class="line"><span class="comment">//            if (x&gt;1)&#123;</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;y&lt;x;y++)&#123;</span><br><span class="line">                    <span class="comment">// 中间的数据 算出来</span></span><br><span class="line">                    arr[x][y] = arr[x-<span class="number">1</span>][y-<span class="number">1</span>]+arr[x-<span class="number">1</span>][y];</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] num : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> name : num) &#123;</span><br><span class="line">                System.out.print(name + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day06;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个int的数组 包含10个元素 分别赋随机整数</span></span><br><span class="line"><span class="comment">求最大值 最小值 和  值 平均值</span></span><br><span class="line"><span class="comment">要求 所有随机数都是两位数 不重复</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">count</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">90</span> + <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value == arr[j]) &#123;</span><br><span class="line">                    count = <span class="literal">false</span>;</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count)</span><br><span class="line">                arr[i] = value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">MaxValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">MinValue</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">Sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="comment">//最大值</span></span><br><span class="line">                <span class="keyword">if</span> (MaxValue &lt; num) &#123;</span><br><span class="line">                    MaxValue = num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//最小值</span></span><br><span class="line">                <span class="keyword">if</span> (MinValue &gt; num) &#123;</span><br><span class="line">                    MinValue = num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//总和</span></span><br><span class="line">                Sum += num;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;最大值:&quot;</span> + MaxValue);</span><br><span class="line">            System.out.println(<span class="string">&quot;最小值:&quot;</span> + MinValue);</span><br><span class="line">            System.out.println(<span class="string">&quot;总和:&quot;</span> + Sum);</span><br><span class="line">            <span class="type">double</span> <span class="variable">Cc</span> <span class="operator">=</span> (<span class="type">double</span>) Sum / <span class="number">10</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;平均数:&quot;</span> + Cc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导入随机数不重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExer3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个6的int数组 元素在1-30 是随机赋值 而且元素值各不相同.</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">count</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random()*<span class="number">29</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;=i;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value == arr[j])<span class="comment">//如果有和前面相同的 就false 不打印</span></span><br><span class="line">                &#123;</span><br><span class="line">                    count = <span class="literal">false</span>;</span><br><span class="line">                    i--; <span class="comment">//这次没有加入数据 重新来</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count)&#123;</span><br><span class="line">                arr[i] = value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> name : arr)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-7">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-7">**4.扩展学习部分</h2><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220318161445951.png" alt="image-20220318161445951"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1, arr2;</span><br><span class="line">        arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;arr1: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr1) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        arr2 = arr1;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;arr2: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                arr2[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(arr2[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;arr1: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr1) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220318162851722.png" alt="image-20220318162851722"></p><p>arr1 arr2复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1,arr2;</span><br><span class="line">        arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;arr1: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr1)&#123;</span><br><span class="line">            System.out.print(num+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组的复制</span></span><br><span class="line">        arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;arr1.length;j++)&#123;</span><br><span class="line">            arr2[j] = arr1[j];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;arr2: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i&lt;arr2.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arr2[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(arr2[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;arr1: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr1)&#123;</span><br><span class="line">            System.out.print(num+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220318162904536.png" alt="image-20220318162904536"></p><h2 id="总结-7">总结</h2><p>今天只有一下午的学习时间，刚好学习到算法，算法比其他内容还是稍微难点，题目自己做也做的出来，但是要状态好，犯困的话是做不出来的，今天学习状态一般般，下午有点困，下午做了很多题目，老师出的题目，自己做得出来，基本掌握了，有空看下算法书。</p><h1 id="3-21-数组应用">3.21 数组应用</h1><h2 id="1-头：日期、所学内容出处-8">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-8">2.今天所学内容摘要**</h2><h3 id="数组的反转">数组的反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;JJ&quot;</span>, <span class="string">&quot;DD&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;XX&quot;</span>, <span class="string">&quot;YY&quot;</span>&#125;;</span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[arr.length];</span><br><span class="line">        <span class="comment">//数组的复制(和arr1 = arr不同)</span></span><br><span class="line">        System.arraycopy(arr, <span class="number">0</span>, arr1, <span class="number">0</span>, arr.length);</span><br><span class="line">        <span class="keyword">for</span> (String arr01 : arr1) &#123;</span><br><span class="line">            System.out.print(arr01 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;方法一:&quot;</span>);</span><br><span class="line">        <span class="comment">//数组的反转</span></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[arr.length - j - <span class="number">1</span>];</span><br><span class="line">            arr[arr.length - j - <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String arr02 : arr) &#123;</span><br><span class="line">            System.out.print(arr02 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法二 再把arr返一下</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;方法二:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp2</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String arr02 : arr) &#123;</span><br><span class="line">            System.out.print(arr02 + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的查找">数组的查找</h3><h4 id="线性查找">线性查找</h4><p>可以查找String int 等类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;JJ&quot;</span>, <span class="string">&quot;DD&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;XX&quot;</span>, <span class="string">&quot;YY&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 线性查找</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你要查找的字符: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">count</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;a&lt; arr.length;a++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (test.equals(arr[a]))&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;找到了指定元素的位置&quot;</span>);</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                count = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾，没找到&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="二分法查找">二分法查找</h4><p>只能查找int数组 而且要是拍好顺序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">89</span>,-<span class="number">6</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">44</span>,<span class="number">77</span>,<span class="number">80</span>,<span class="number">82</span>&#125;;</span><br><span class="line">System.out.print(<span class="string">&quot;请输入你要查找的数字: &quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">test1</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr1.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (start &lt;= end)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (test1 == arr1[middle])&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;找到了指定元素，位置：&quot;</span>+<span class="string">&quot;[&quot;</span> + middle + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (arr1[middle] &gt; test1)&#123;</span><br><span class="line">         end = middle -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        start = middle + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序">排序</h3><h4 id="冒泡排序（难理解）">冒泡排序（难理解）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">5</span>,-<span class="number">9</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> -i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr)&#123;</span><br><span class="line">            System.out.print(num+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array方法">Array方法</h3><p>直接使用</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220320202246856.png" alt="image-20220320202246856"></p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.boolean equals(int[] a,int[] b); 判断两个数组是否相等</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> [] arr1= <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">int</span> [] arr2= <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">6</span>,-<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEquals</span> <span class="operator">=</span> Arrays.equals(arr1,arr2);</span><br><span class="line">        System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.String toString(int[] a) 输出数组信息</span></span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.void fill(int[] a,int val) 将定值填充到数组中</span></span><br><span class="line">        Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. void sort(int[] a)</span></span><br><span class="line">        Arrays.sort(arr2);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.int binarySearch(int[] a,int key)</span></span><br><span class="line">        <span class="type">int</span> [] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">97</span>,<span class="number">24</span>,-<span class="number">56</span>,-<span class="number">4</span>,<span class="number">2</span>,<span class="number">25</span>,<span class="number">46</span>,<span class="number">23</span>,<span class="number">9</span>,<span class="number">82</span>,<span class="number">11</span>,<span class="number">19</span>&#125;;</span><br><span class="line">        Arrays.sort(arr3);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr3,<span class="number">46</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组常见异常">数组常见异常</h3><p>1,数组脚边越界异常 ArrayIndexOutOfBoundsException</p><p>2，空指针异常 NullPointerException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExceptionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        //1,数组脚边越界异常 ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//        int[] arr1 = new int[]&#123;1,2,3&#125;;</span></span><br><span class="line"><span class="comment">//        //情况一</span></span><br><span class="line"><span class="comment">//        for (int i = 0;i&lt;= arr1.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(arr1[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //情况二</span></span><br><span class="line"><span class="comment">//        System.out.println(arr1[-1]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2，空指针异常 NullPointerException</span></span><br><span class="line">        <span class="comment">//情况一</span></span><br><span class="line"><span class="comment">//        int[] arr2 = new int[]&#123;1,2,5,6&#125;;</span></span><br><span class="line"><span class="comment">//        arr2 = null;</span></span><br><span class="line"><span class="comment">//        System.out.println(arr2[0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况二</span></span><br><span class="line"><span class="comment">//        int[][] arr3 = new int[4][];</span></span><br><span class="line"><span class="comment">//        System.out.println(arr3[0][0]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况三</span></span><br><span class="line"><span class="comment">//        String[] arr4 = new String[]&#123;&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;&#125;;</span></span><br><span class="line"><span class="comment">//        arr4[0] = null;</span></span><br><span class="line"><span class="comment">//        System.out.println(arr4[0].toString());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组总结</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] list = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">34</span>,<span class="number">5</span>,<span class="number">22</span>,-<span class="number">98</span>,-<span class="number">3</span>,-<span class="number">76</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// 冒泡排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i&lt;list.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>; j &lt; list.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (list[j]&gt;list[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> list[j];</span><br><span class="line">                    list[j] = list[j+<span class="number">1</span>];</span><br><span class="line">                    list[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(list));</span><br><span class="line">        <span class="comment">//反转数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;list.length/<span class="number">2</span>;x++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> list[x];</span><br><span class="line">            list[x] = list[list.length-<span class="number">1</span>-x];</span><br><span class="line">            list[list.length-<span class="number">1</span>-x] = temp1;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(list));</span><br><span class="line">        <span class="comment">// 复制 得到新数组</span></span><br><span class="line">        <span class="type">int</span>[] list1 = <span class="keyword">new</span> <span class="title class_">int</span>[list.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;y &lt; list.length;y++)&#123;</span><br><span class="line">            list1[y] = list[y];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(list1));</span><br><span class="line">        <span class="comment">// 线性查找</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;输入要查找的数字：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sc</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;z &lt; list.length;z++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (sc == list[z])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;找到了位置是在&quot;</span>+<span class="string">&quot;[&quot;</span>+z+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (z == list.length)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不好意思没找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-8">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>binarySearch方法中 数组里有的数据，查找 返回值竟然是负数</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220320204259563.png" alt="image-20220320204259563"></p><p>binarySearch方法是二分查找法，所以要先排序，才能查找，不然就会有问题</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220320204846685.png" alt="image-20220320204846685"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220320204835492.png" alt="image-20220320204835492"></p><h2 id="4-扩展学习部分-8">**4.扩展学习部分</h2><p>题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。输出结果的形式如：2+22+222=246；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。</span></span><br><span class="line"><span class="comment">例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。输出结果的形式如：2+22+222=246；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要想加的数字：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入要相加的数字的个数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cumulative</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count;i++)&#123;</span><br><span class="line">            cumulative = cumulative*<span class="number">10</span> + num;</span><br><span class="line">            z += cumulative;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;输出: &quot;</span>);</span><br><span class="line">        System.out.print(z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-8">总结</h2><p>今天学习时间只有一上午，主要复习了上星期的学习内容，将面向对象之前的内容巩固了一下，找了一些题目做，学习状态不错也完成了自己定的目标，题目也都 做出来了。</p><h1 id="3-22-面向对象">3.22 面向对象</h1><h2 id="1-头：日期、所学内容出处-9">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-9">2.今天所学内容摘要**</h2><h3 id="1-面向对象学习的主线"><strong>1.面向对象学习的主线</strong></h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322090453821.png" alt="image-20220322090453821"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322100123287.png" alt="image-20220322100123287"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day08;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Person类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用对象的结构: 属性、方法</span></span><br><span class="line">        <span class="comment">// 调用属性: 对象.属性</span></span><br><span class="line"></span><br><span class="line">        p1.names = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        p1.isMale = <span class="literal">true</span>;</span><br><span class="line">        System.out.println(p1.names);</span><br><span class="line">        p1.eat(p1.names);</span><br><span class="line">        p1.play(p1.names);</span><br><span class="line">        p1.ages(p1.names, p1.age);</span><br><span class="line">        p1.talk(<span class="string">&quot;中国话&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;p2 **********************************&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(p2.names);</span><br><span class="line">        System.out.println(p2.age);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;p3 **********************************&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> p1;</span><br><span class="line">        System.out.println(p3.names);</span><br><span class="line">        <span class="comment">//将p1 变量保存的对象地址赋给了p3 导致 p1和p3指向同一个堆</span></span><br><span class="line">        p3.age = <span class="number">21</span>;</span><br><span class="line">        System.out.println(p1.age);</span><br><span class="line">        <span class="comment">//自己的理解就是p1和p3是同一个 p3是p1的别名</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    String names;</span><br><span class="line">    <span class="type">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;喜欢玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ages</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">(String language)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;全世界都在说&quot;</span>+language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-对象的内存解析"><strong>2.对象的内存解析</strong></h3><p>分为栈和堆</p><p>栈是类中的属性</p><p>堆是方法中的局部变量</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322103328975.png" alt="image-20220322103328975"></p><h3 id="3-局部变量和属性的异同">3.<strong>局部变量和属性的异同</strong></h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322105848327.png" alt="image-20220322105848327"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322105923571.png" alt="image-20220322105923571"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day08;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类中属性的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">属性(成员变量)vs 局部变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">        System.out.println(p1.age);</span><br><span class="line">        System.out.println(p1.isMale);</span><br><span class="line">        p1.talk(<span class="string">&quot;中文&quot;</span>);</span><br><span class="line">        p1.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="comment">// 属性（成员变量）</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="type">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">(String language)</span>&#123;<span class="comment">//language形参 也是局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我们使用&quot;</span> + language + <span class="string">&quot;说话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">food</span> <span class="operator">=</span> <span class="string">&quot;烙饼&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;北方人喜欢吃&quot;</span>+ food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-方法的声明">4.<strong>方法的声明</strong></h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322150652196.png" alt="image-20220322150652196"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322150725148.png" alt="image-20220322150725148"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220322153031972.png" alt="image-20220322153031972"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        p1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        p1.age = <span class="number">19</span>;</span><br><span class="line">        p1.eat();</span><br><span class="line">        p1.sleep(<span class="number">5</span>);</span><br><span class="line">        System.out.println(p1.getName());</span><br><span class="line">        System.out.println(p1.getNation(<span class="string">&quot;中国&quot;</span>));</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,-<span class="number">6</span>,-<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        p1.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭咯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> hour)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我睡了&quot;</span> + hour +<span class="string">&quot;个小时&quot;</span>);</span><br><span class="line">        <span class="comment">// 方法内方法</span></span><br><span class="line">        eat();</span><br><span class="line"><span class="comment">//        sleep(2);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;小学生&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNation</span><span class="params">(String nation)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的国籍是&quot;</span> + nation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> -i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-9">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>无</p><h2 id="4-扩展学习部分-9">**4.扩展学习部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day08;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.声明一个method 方法 在方法中打印一个10*8的*型矩形，在main调用</span></span><br><span class="line"><span class="comment">2.修改 加入 计算矩形面积</span></span><br><span class="line"><span class="comment">作为方法的返回值 main中打印</span></span><br><span class="line"><span class="comment">3.修改 提供 m n两个参数 打印 m*n矩形</span></span><br><span class="line"><span class="comment">结果如2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test3</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test3</span>();</span><br><span class="line">        test.method1();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(test.method2());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(test.method3(<span class="number">10</span>,<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j &lt; <span class="number">8</span>;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j &lt; <span class="number">8</span>;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>*<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method3</span><span class="params">(<span class="type">int</span> length,<span class="type">int</span> width)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j &lt; width;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (length) * (width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明一个Student数组</span></span><br><span class="line">        Student[] stu = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">15</span>]; <span class="comment">//String[] arr = new String[15]</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">ClassTest4</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassTest4</span>();</span><br><span class="line">        <span class="comment">// 创建类数组 添加数据</span></span><br><span class="line">        test.create(stu);</span><br><span class="line">        <span class="comment">//遍历成绩单</span></span><br><span class="line">        test.print(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;*******************************&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印三年级的学生成绩单</span></span><br><span class="line">        test.screening(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;*******************************&quot;</span>);</span><br><span class="line">        <span class="comment">//按成绩排序</span></span><br><span class="line">        test.sort(stu);</span><br><span class="line">        test.print(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建数组 添加随机数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(Student[] stu)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stu.length;i++)&#123;</span><br><span class="line">            stu[i] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            stu[i].number = i+<span class="number">1</span>;</span><br><span class="line">            stu[i].state = (<span class="type">int</span>)(Math.random()*<span class="number">6</span> +<span class="number">1</span>);</span><br><span class="line">            stu[i].score = (<span class="type">int</span>)(Math.random()*<span class="number">100</span> +<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Student[] stu)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span>  <span class="number">0</span>; j &lt; stu.length;j++)&#123; <span class="comment">//原始遍历</span></span><br><span class="line">            System.out.println(stu[j].tables());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印三年级学生的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">screening</span><span class="params">(Student[] stu)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Student student : stu) &#123; <span class="comment">//nb 遍历</span></span><br><span class="line">            <span class="keyword">if</span> (student.state == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(student.tables());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按成绩排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Student[] stu)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; stu.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; stu.length -i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (stu[j].score &gt; stu[j+<span class="number">1</span>].score)&#123;</span><br><span class="line">                    <span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> stu[j];</span><br><span class="line">                    stu[j] = stu[j+<span class="number">1</span>];</span><br><span class="line">                    stu[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="type">int</span> number; <span class="comment">// 学号</span></span><br><span class="line">    <span class="type">int</span> state; <span class="comment">// 年级</span></span><br><span class="line">    <span class="type">int</span> score; <span class="comment">// 成绩</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tables</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学号：&quot;</span> + number + <span class="string">&quot;  年级：&quot;</span> + state + <span class="string">&quot;成绩：&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-9">总结</h2><p>今天学习很满意的，写了两个略微长点的案例，80行左右，接触了面向对象，和python中的差不多，学起来也是蛮容易的，java的方法和python的函数作用差不多，上手很快，二倍数看完，回头去敲案例，很顺利，今天也是彻底把昨天的冒泡排序弄懂了，对快速排序有兴趣，等学到递归去敲，学习目标。学习状态也是不错。</p><h1 id="3-25方法的重载">3.25方法的重载</h1><h2 id="1-头：日期、所学内容出处-10">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-10">2.今天所学内容摘要**</h2><h3 id="认识重载">认识重载</h3><p>重载就是两同一不同 同一个类 同一个方法名 参数列表不同</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220325145549602.png" alt="image-20220325145549602"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverLoadExer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OverLoadExer</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverLoadExer</span>();</span><br><span class="line">        test.mOL(<span class="number">5</span>);</span><br><span class="line">        test.mOL(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">        test.mOL(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mOL</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        System.out.println(i * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mOL</span><span class="params">(<span class="type">int</span> i , <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        System.out.println(i * j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mOL</span><span class="params">(String i)</span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jdk5-0-新内容-…可变个数形参">jdk5.0 新内容 …可变个数形参</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220325151405710.png" alt="image-20220325151405710"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodArgsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MethodArgsTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodArgsTest</span>();</span><br><span class="line">        test.show(<span class="number">12</span>);</span><br><span class="line">        test.show(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        test.show(<span class="string">&quot;ggg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show(int)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String i)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Show(String)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ... str)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Show(String...str)&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String CC : str)&#123;</span><br><span class="line">            System.out.print(CC+<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="值传递机制">值传递机制</h3><h4 id="1-错误的">1.错误的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueTransferTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;  n = &quot;</span> + n);</span><br><span class="line">        <span class="comment">//交换值</span></span><br><span class="line"><span class="comment">//        int temp = m;</span></span><br><span class="line"><span class="comment">//        m = n;</span></span><br><span class="line"><span class="comment">//        n = temp;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//交换失败</span></span><br><span class="line">        <span class="type">ValueTransferTest1</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValueTransferTest1</span>();</span><br><span class="line">        test1.swap(m,n);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;  n = &quot;</span> + n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//错误的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-正确的">2.正确的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueTransferTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        date.m = <span class="number">10</span>;</span><br><span class="line">        date.n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + date.m + <span class="string">&quot;  n = &quot;</span> + date.n);</span><br><span class="line"><span class="comment">//        交换m 和 n 的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> date.m;</span><br><span class="line">        date.m = date.n;</span><br><span class="line">        date.n = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + date.m + <span class="string">&quot;  n = &quot;</span> + date.n);</span><br><span class="line">        <span class="type">ValueTransferTest2</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValueTransferTest2</span>();</span><br><span class="line">        test2.swap(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + date.m + <span class="string">&quot;  n = &quot;</span> + date.n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Date d)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> d.m;</span><br><span class="line">        d.m = d.n;</span><br><span class="line">        d.n = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220325161134783.png" alt="image-20220325161134783"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-10">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>暂无</p><h2 id="4-扩展学习部分-10">**4.扩展学习部分</h2><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220325162121797.png" alt="image-20220325162121797"></p><p>内容结构</p><h2 id="总结-10">总结</h2><p>今天的内容很难理解，先是对JVM内存的内存结构和对象内存解析，然后是数组的内存解析，内存解析不太容易理解，堆和栈的关系等等，能够帮助理解的代码也是敲了7 8遍，在后面学习了重载，理解了重载和使用等，比较容易掌握的，学习状态也是不错。下午比较精神，静下心来去学习了。</p><h1 id="3-28递归-封装性">3.28递归 &amp;&amp; 封装性</h1><h2 id="1-头：日期、所学内容出处-11">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-11">2.今天所学内容摘要**</h2><h3 id="递归练习">递归练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//计算1 - 100的自然数的和</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二</span></span><br><span class="line">        <span class="type">RecursionTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecursionTest</span>();</span><br><span class="line">        System.out.println(test.getSum(<span class="number">100</span>));</span><br><span class="line">        <span class="comment">// 例二</span></span><br><span class="line">        System.out.println(test.f(<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//斐波那契</span></span><br><span class="line">        System.out.println(test.fibonacci(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num + getSum(num-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//例题 有一个数列 f(0)=1,f(1) = 4,f(n+2) = 2*f(n+1)+f(n)</span></span><br><span class="line">    <span class="comment">//求f(10)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f(num-<span class="number">2</span>) + (<span class="number">2</span>*f(num-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 斐波那契数列</span></span><br><span class="line">    <span class="comment">// 1 1 2 3 5 8 13 21 34 55</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span> || num ==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fibonacci(num-<span class="number">1</span>)+fibonacci(num-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装和隐藏">封装和隐藏</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328083653861.png" alt="image-20220328083653861"></p><h4 id="private关键字">private关键字</h4><p>私有的</p><p>方法赋值 可设置条件</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328084628722.png" alt="image-20220328084628722"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        animal.name = <span class="string">&quot;大黄&quot;</span>;</span><br><span class="line">        animal.age = <span class="number">5</span>;</span><br><span class="line">        animal.setLegs(<span class="number">4</span>);</span><br><span class="line">        System.out.println(animal.getLegs());</span><br><span class="line">        animal.show();</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> legs; <span class="comment">// private</span></span><br><span class="line">    <span class="comment">//属性的设置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLegs</span><span class="params">(<span class="type">int</span> l)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; <span class="number">0</span> &amp;&amp; l % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            legs = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            legs = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属性的获取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLegs</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> legs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;  age = &quot;</span> + age + <span class="string">&quot;  legs = &quot;</span> + legs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题的引入">问题的引入</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328085227772.png" alt="image-20220328085227772"></p><h4 id="封装性的体现">封装性的体现</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328085822662.png" alt="image-20220328085822662"></p><h3 id="极限修饰符来配合">极限修饰符来配合</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328085759186.png" alt="image-20220328085759186"></p><p>测试代码在day11中</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328092909694.png" alt="image-20220328092909694"></p><h3 id="构造器">构造器</h3><p>构造器和python中的____init____ 差不多初始化话方法</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328100330089.png" alt="image-20220328100330089"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328100619460.png" alt="image-20220328100619460"></p><h4 id="传递参数-初始化">传递参数 初始化</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328100301116.png" alt="image-20220328100301116"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建类的对象 ： new + 构造器</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.eat();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        p1.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age =  a;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot; age = &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性赋值的过程">属性赋值的过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        System.out.println(user.age);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>);</span><br><span class="line">        user1.setAge(<span class="number">4</span>);</span><br><span class="line">        System.out.println(user1.age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this的使用"><strong>this的使用</strong></h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328110052051.png" alt="image-20220328110052051"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">customerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一&quot;</span>);</span><br><span class="line">        <span class="type">customer</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">customer</span>(<span class="number">184564</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        cc.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方式二&quot;</span>);</span><br><span class="line">        <span class="type">customer</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">customer</span>();</span><br><span class="line">        dd.setId(<span class="number">1545</span>);</span><br><span class="line">        dd.setName(<span class="string">&quot;DD&quot;</span>);</span><br><span class="line">        dd.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">customer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">customer</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + <span class="built_in">this</span>.getName() + <span class="string">&quot; id = &quot;</span> + <span class="built_in">this</span>.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this修饰调用构造器">this修饰调用构造器</h4><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-11">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>递归返回值 num+2 方法里没有num+2的值 是死循环</p><p>解决方案： 检查代码</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328082707304.png" alt="image-20220328082707304"></p><p>报错说是没有java.lang.String</p><p>去CSDN看format保留小数的用法，发现后面那个类型要是数字类型的，才能保留</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328102630071.png" alt="image-20220328102630071"></p><p>修改</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220328102908002.png" alt="image-20220328102908002"></p><h2 id="4-扩展学习部分-11">**4.扩展学习部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//一个整数加上100是个完全平方数 加上 168也是</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=-<span class="number">100</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (w.wan(i+<span class="number">100</span>) &amp;&amp; w.wan(i+<span class="number">168</span>))&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wan</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j*j == num)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-11">总结</h2><p>今天上午学习很精神，也很有学习劲头。学习内容前面的传递机制不是很好理解，在方法内部的值传递有点不太容易，按照自己想当然容易冗余。后面的重载和构造器以及递归，因为和python的面向对象差不多，所以理解起来很容易。拉进度条，找到题目，直接做，在看老师的代码，概念的不好理解就多看几遍\</p><h1 id="3-29-this-package-import">3.29 this package import</h1><h2 id="1-头：日期、所学内容出处-12">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-12">2.今天所学内容摘要**</h2><h3 id="this关键字的使用">this关键字的使用</h3><h4 id="this调用构造器">this调用构造器</h4><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220329084229194.png" alt="image-20220329084229194"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">customerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方式一&quot;</span>);</span><br><span class="line">        <span class="type">customer</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">customer</span>(<span class="number">184564</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        cc.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方式二&quot;</span>);</span><br><span class="line">        <span class="type">customer</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">customer</span>();</span><br><span class="line">        dd.setId(<span class="number">1545</span>);</span><br><span class="line">        dd.setName(<span class="string">&quot;DD&quot;</span>);</span><br><span class="line">        dd.show();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;方式三&quot;</span>);</span><br><span class="line">        <span class="type">customer</span> <span class="variable">CC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">customer</span>(<span class="number">18</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        System.out.println(CC.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">customer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">customer</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">customer</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">customer</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + <span class="built_in">this</span>.getName() + <span class="string">&quot; id = &quot;</span> + <span class="built_in">this</span>.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this练习">this练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">(Girl girl)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我想娶&quot;</span> + girl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &gt;= <span class="number">22</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你可以合法结婚了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;多谈谈恋爱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">(Boy boy)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我想嫁给&quot;</span> + boy.getName());</span><br><span class="line">        <span class="comment">//this指结构器</span></span><br><span class="line">        boy.marry(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Girl girl)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAge() - girl.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoyGirlTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Boy对象属性</span></span><br><span class="line">        <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;罗密欧&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        boy.shout();<span class="comment">//调用方法</span></span><br><span class="line">        <span class="comment">//创建Girl对象属性</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;朱丽叶&quot;</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        girl.marry(boy);</span><br><span class="line">        <span class="comment">//再创造一个Girl对象</span></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;祝英台&quot;</span>,<span class="number">17</span>);</span><br><span class="line">        <span class="comment">//使用compare方法比较</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> girl.compare(girl1);</span><br><span class="line">        <span class="keyword">if</span> (compare &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(girl.getName() + <span class="string">&quot;大&quot;</span> +Math.abs(compare)+<span class="string">&quot;岁&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (compare &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(girl1.getName() + <span class="string">&quot;大&quot;</span> +Math.abs(compare)+<span class="string">&quot;岁&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(girl.getName()+<span class="string">&quot;和&quot;</span>+girl1.getName()+<span class="string">&quot;一样大&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">你可以合法结婚了</span></span><br><span class="line"><span class="comment">我想嫁给罗密欧</span></span><br><span class="line"><span class="comment">我想娶朱丽叶</span></span><br><span class="line"><span class="comment">朱丽叶大1岁</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="综合练习1">综合练习1</h3><p>account类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; <span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance; <span class="comment">// 余额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> annualInterestRate; <span class="comment">// 年利率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> id, <span class="type">double</span> balance, <span class="type">double</span> annualInterestRate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">        <span class="built_in">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnualInterestRate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnnualInterestRate</span><span class="params">(<span class="type">double</span> annualInterestRate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在提款方法withdraw中，需要判读用户余额是否可以满足取钱的条件</span></span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; balance)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足，无法取出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            balance -= amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功取出：&quot;</span> + amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功存入&quot;</span> + amount);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入正确的数字&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>custom类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> day12.Test.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName; <span class="comment">// 名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName; <span class="comment">// 姓</span></span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String f, String l)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.firstName = f;</span><br><span class="line">        <span class="built_in">this</span>.lastName = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">getAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccount</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">customerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//名字叫 Jane Smith 有个账号为10086 余额为2000元 年利率1.23%</span></span><br><span class="line">        <span class="comment">//对 Jane Smith 操作</span></span><br><span class="line">        <span class="comment">// 存入 100 元 再取出960元 再取出2000元</span></span><br><span class="line">        <span class="comment">// 打印基本信息</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;Jane&quot;</span>,<span class="string">&quot;Smith&quot;</span>);</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">10086</span>,<span class="number">2000</span>,<span class="number">0.0123</span>);</span><br><span class="line">        customer.setAccount(account);</span><br><span class="line">        <span class="comment">//存入100</span></span><br><span class="line">        customer.getAccount().deposit(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//取出960</span></span><br><span class="line">        customer.getAccount().withdraw(<span class="number">960</span>);</span><br><span class="line">        <span class="comment">//取出2000元</span></span><br><span class="line">        customer.getAccount().withdraw(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//打印基本信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;名字：&quot;</span> + customer.getLastName()+<span class="string">&quot;,&quot;</span> + customer.getFirstName()+<span class="string">&quot;  账户: &quot;</span> + customer.getAccount().getId()+<span class="string">&quot;  余额： &quot;</span> + customer.getAccount().getBalance() + <span class="string">&quot;  年利率： &quot;</span> + customer.getAccount().getAnnualInterestRate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成功存入100.0</span></span><br><span class="line"><span class="comment">成功取出：960.0</span></span><br><span class="line"><span class="comment">余额不足，无法取出</span></span><br><span class="line"><span class="comment">名字：Smith,Jane  账户: 10086  余额： 1140.0  年利率： 0.0123</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="综合练习2">综合练习2</h3><p>account1类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12.Test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account1</span><span class="params">(<span class="type">double</span> init_balance)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = init_balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; balance)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足，无法取出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            balance -= amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功取出：&quot;</span> + amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功存入&quot;</span> + amount);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入正确的数字&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>custom1类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12.Test2;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName; <span class="comment">// 名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName; <span class="comment">// 姓</span></span><br><span class="line">    <span class="keyword">private</span> Account1 account;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer1</span><span class="params">(String firstName, String lastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account1 <span class="title function_">getAccount1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccount</span><span class="params">(Account1 account)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bank类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12.Test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Customer1[] customers; <span class="comment">//存放多个客户的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfCustomer; <span class="comment">//记录客户的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bank</span><span class="params">(<span class="type">int</span> count)</span>&#123;</span><br><span class="line">        customers = <span class="keyword">new</span> <span class="title class_">Customer1</span>[count];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加客户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCustomer</span><span class="params">(String f,String l)</span>&#123;</span><br><span class="line">        <span class="type">Customer1</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer1</span>(f,l);</span><br><span class="line">        customers[numberOfCustomer] = customer;</span><br><span class="line">        numberOfCustomer ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取指定位置的客户</span></span><br><span class="line">    <span class="keyword">public</span> Customer1 <span class="title function_">getCustomers</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; numberOfCustomer)&#123;</span><br><span class="line">            <span class="keyword">return</span> customers[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取客户个数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNumberOfCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;已经添加顾客&quot;</span> + numberOfCustomer + <span class="string">&quot;人&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12.Test2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bankTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>(<span class="number">10</span>);</span><br><span class="line">        bank.addCustomer(<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;王&quot;</span>);</span><br><span class="line">        <span class="comment">//加入余额</span></span><br><span class="line">        bank.getCustomers(<span class="number">0</span>).setAccount(<span class="keyword">new</span> <span class="title class_">Account1</span>(<span class="number">2000</span>));</span><br><span class="line">        <span class="comment">//存钱100</span></span><br><span class="line">        bank.getCustomers(<span class="number">0</span>).getAccount1().deposit(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//取钱500</span></span><br><span class="line">        bank.getCustomers(<span class="number">0</span>).getAccount1().withdraw(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//取钱 3000</span></span><br><span class="line">        bank.getCustomers(<span class="number">0</span>).getAccount1().withdraw(<span class="number">2500</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;名字：&quot;</span> + bank.getCustomers(<span class="number">0</span>).getLastName() +<span class="string">&quot;  &quot;</span>+</span><br><span class="line">                bank.getCustomers(<span class="number">0</span>).getFirstName()+<span class="string">&quot;  余额： &quot;</span> + bank.getCustomers(<span class="number">0</span>).getAccount1().getBalance());</span><br><span class="line">        bank.addCustomer(<span class="string">&quot;Jane&quot;</span>,<span class="string">&quot;Smith&quot;</span>);</span><br><span class="line">        <span class="comment">//查看已经加入的人数</span></span><br><span class="line">        System.out.println(bank.getNumberOfCustomer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成功存入100.0</span></span><br><span class="line"><span class="comment">成功取出：500.0</span></span><br><span class="line"><span class="comment">余额不足，无法取出</span></span><br><span class="line"><span class="comment">名字：王  小明  余额： 1600.0</span></span><br><span class="line"><span class="comment">已经添加顾客2人</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="import-package包">import package包</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220329150100282.png" alt="image-20220329150100282"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220329150039490.png" alt="image-20220329150039490"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220329143157559.png" alt="image-20220329143157559"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"><span class="keyword">import</span> day12.Test2.Account;</span><br><span class="line"><span class="keyword">import</span> day12.Test2.Bank;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">packageImportTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> Arrays.toString(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;);</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">        <span class="type">Account</span> <span class="variable">acct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//全类名的方式显示</span></span><br><span class="line">        day12.Test5.<span class="type">Account</span> <span class="variable">acct1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">day12</span>.Test5.Account(<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">0.0123</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MVC了解</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220329143341028.png" alt="image-20220329143341028"></p><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-12">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>空指针异常，报错在14行，说没有定义数组，但是在构造器中，我已经定义了数组，看了一遍老师的代码，发现我多了Custom1[ ] 加了一个这个意思是创造一个新的数组，只是数组名字一样，把Custom1去掉就正常了。</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220329141654856.png" alt="image-20220329141654856"></p><p>正常截图</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220329142032697.png" alt="image-20220329142032697"></p><h2 id="4-扩展学习部分-12">**4.扩展学习部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">subject11</span> &#123;</span><br><span class="line">    <span class="comment">//题目：有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">1</span>;j &lt;= <span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;k &lt;= <span class="number">4</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (i!=j &amp;&amp; j != k &amp;&amp; k != i)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;1,2,3，4可以组成的三位数：&quot;</span>+i+j+k);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">subject15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输入三个数 按大小输出</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你要输入几个数:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            arr[j] = input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">0</span>;a&lt;arr.length-<span class="number">1</span>;a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;b &lt;arr.length-<span class="number">1</span>-a;b++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[b] &gt; arr[b+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[b];</span><br><span class="line">                    arr[b] = arr[b+<span class="number">1</span>];</span><br><span class="line">                    arr[b+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr)&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归经典题目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">subject20</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sumNum</span> <span class="operator">=</span> sum(<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;前20规律数之和为：&quot;</span>+sumNum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> getMolecule(num);</span><br><span class="line">            <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> getMolecule(num-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> sum(num-<span class="number">1</span>)+ a/b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getMolecule</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getMolecule(num-<span class="number">1</span>) + getMolecule(num-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-12">总结</h2><p>今天的学习时间充足看了20多集，4个小时，其他时间基本都在敲练习，今天写了三个练习，银行存钱的，前面一个this调用比较简单容易理解，后面的一个数组的，可以加入多个对象的，有点难，死磕了一个小时，视频看了两三遍才弄明白，理解它的意思结构，在写数组那个练习的时候，因为自己并列的两个包名一样，调用的时候，搞混了，一直在检查，改名还改错，顺利解决以后，刚好来到了老师讲包和import，也直接明白了自己为什么错，以后应该怎么办，不是改个名这么容易。今天学习劲头也有，很满意。</p><h1 id="3-31项目二">3.31项目二</h1><h2 id="1-头：日期、所学内容出处-13">1.头：日期、所学内容出处</h2><p><a href="https://www.bilibili.com/video/BV1ex411x7Em?p=407">黑马程序员Python教程_600集Python从入门到精通教程（懂中文就能学会）_哔哩哔哩_bilibili</a></p><h2 id="2-今天所学内容摘要-13">2.今天所学内容摘要**</h2><h3 id="项目二">项目二</h3><h4 id="代码主类">代码主类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerView</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CustomerList</span> <span class="variable">customerList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerList</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerView</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示界面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enterMainMenu</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//打印界面 接收键盘输入并调用方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loopFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loopFlag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n------------------客户信息管理软件------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                      1.添 加 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                      2.修 改 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                      3.删 除 客 户&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                      4.客 户 列 表&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;                      5.退    出\n&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;                      请选择(1-5):&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span> <span class="variable">menu</span> <span class="operator">=</span> CMUtility.readMEnuSelection();</span><br><span class="line">            <span class="keyword">switch</span> (menu) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;添加客户的操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    addNewCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;修改客户的操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    modifyCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除客户的操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    deleteCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;查看客户的操作&quot;);</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;--------------------客户列表-----------------&quot;</span>);</span><br><span class="line">                    listAllCustomer();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;确认是否退出(Y/N)&quot;</span>);</span><br><span class="line">                    <span class="type">char</span> <span class="variable">isExit</span> <span class="operator">=</span> CMUtility.readConfirmSelection();</span><br><span class="line">                    <span class="keyword">if</span> (isExit == <span class="string">&#x27;Y&#x27;</span> || isExit == <span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">                        loopFlag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isExit == <span class="string">&#x27;n&#x27;</span> || isExit == <span class="string">&#x27;N&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加客户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addNewCustomer</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------添加客户-----------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> CMUtility.readString(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;性别: &quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> CMUtility.readChar();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;年龄: &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> CMUtility.readInt();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;电话: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span>  <span class="operator">=</span> CMUtility.readString(<span class="number">13</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;邮箱: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> CMUtility.readString(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(name,gender,age,phone,email);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">aa</span> <span class="operator">=</span>customerList.addCustomer(customer);</span><br><span class="line">        <span class="keyword">if</span> (aa)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------添加成功------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------添加失败------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改客户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyCustomer</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------修改客户------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        Customer custs;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择待修改客户的编号(-1退出): &quot;</span>);</span><br><span class="line">            number = CMUtility.readInt();</span><br><span class="line">            <span class="keyword">if</span> (number == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            custs = customerList.getCustomer(number-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (custs == <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未找到指定客户！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//找到了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改客户信息</span></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名(&quot;</span> + custs.getName()+<span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> CMUtility.readString(<span class="number">10</span>,custs.getName());</span><br><span class="line">        System.out.print(<span class="string">&quot;性别(&quot;</span> + custs.getGender()+<span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> CMUtility.readChar(custs.getGender());</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;年龄(&quot;</span> + custs.getAge()+<span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> CMUtility.readInt(custs.getAge());</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;电话(&quot;</span> + custs.getPhone()+<span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">Phone</span> <span class="operator">=</span> CMUtility.readString(<span class="number">13</span>,custs.getPhone());</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;邮箱(&quot;</span> + custs.getEmail()+<span class="string">&quot;):&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> CMUtility.readString(<span class="number">30</span>,custs.getEmail());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">newCust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(name,gender,age,Phone,email);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isReplace</span> <span class="operator">=</span>customerList.replaceCustomer(number - <span class="number">1</span>,newCust);</span><br><span class="line">        <span class="keyword">if</span> (isReplace)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------修改成功------------------&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------修改失败------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除客户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteCustomer</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------删除客户------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> number;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择待修改客户的编号(-1退出): &quot;</span>);</span><br><span class="line">            number = CMUtility.readInt();</span><br><span class="line">            <span class="keyword">if</span> (number == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//非-1</span></span><br><span class="line">            <span class="keyword">if</span> (number &lt;=<span class="number">0</span> || number &gt; customerList.getTotal())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法找到指定客户！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;确认是否删除(Y/N)&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">isDelete</span> <span class="operator">=</span> CMUtility.readConfirmSelection();</span><br><span class="line">        <span class="keyword">if</span> (isDelete == <span class="string">&#x27;Y&#x27;</span> || isDelete == <span class="string">&#x27;y&#x27;</span>)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">deleteSuccess</span> <span class="operator">=</span> customerList.deleteCustomer(number-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (deleteSuccess)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------------------删除成功------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------------------删除失败------------------&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 显示客户列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">listAllCustomer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> customerList.getTotal();</span><br><span class="line">        <span class="keyword">if</span> (total == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------没有客户记录------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;编号\t姓名\t   性别\t\t年龄\t\t电话\t\t\t   邮箱&quot;</span>);</span><br><span class="line">            Customer[] custs = customerList.getAllCustomer();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; custs.length ; i++)&#123;</span><br><span class="line">                <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> custs[i];</span><br><span class="line">                System.out.println(((i+<span class="number">1</span>) + <span class="string">&quot;\t\t&quot;</span> + customer.getName() + <span class="string">&quot;\t\t&quot;</span> + customer.getGender() +</span><br><span class="line">                        <span class="string">&quot;\t\t&quot;</span> + customer.getAge()+ <span class="string">&quot;\t\t&quot;</span> + customer.getPhone() + <span class="string">&quot;\t\t&quot;</span> + customer.getEmail()));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------客户列表完成------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="type">CustomerView</span> <span class="variable">customerView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomerView</span>();</span><br><span class="line">            customerView.enterMainMenu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerList</span> &#123;</span><br><span class="line">    <span class="comment">//数组 存放客户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Customer[] customers ; <span class="comment">//保存客户对象的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录已保存对象的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定Customer数组最大空间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomerList</span><span class="params">(<span class="type">int</span> totalCustomer)</span>&#123;</span><br><span class="line">            customers = <span class="keyword">new</span> <span class="title class_">Customer</span>[totalCustomer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addCustomer</span><span class="params">(Customer customer)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (total &gt;= customers.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        customers[total++] = customer;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将指定索引的位置 的数据修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">replaceCustomer</span><span class="params">(<span class="type">int</span> index,Customer cust)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span> || index &gt;= total)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 修改失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        customers[index] = cust;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//修改成功</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除指定索引的位置的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteCustomer</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span> || index &gt;= total)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= index;i&lt;total-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            customers[i] = customers[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        customers[--total] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取顾客信息</span></span><br><span class="line">    <span class="keyword">public</span>  Customer[] getAllCustomer()&#123;</span><br><span class="line">        Customer[] custs = <span class="keyword">new</span> <span class="title class_">Customer</span>[total];</span><br><span class="line">        System.arraycopy(customers, <span class="number">0</span>, custs, <span class="number">0</span>, total);</span><br><span class="line">            <span class="keyword">return</span> custs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">getCustomer</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span> || index &gt;= total)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> customers[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户信息">用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="comment">//客户信息等</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 客户姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> String phone; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String email; <span class="comment">//电子邮箱</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name,<span class="type">char</span> gender,<span class="type">int</span> age,String phone,String email)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工具包">工具包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CMUtility</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">// 接受数据1-5</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readMEnuSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> a;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">arr</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>,<span class="literal">false</span>);</span><br><span class="line">            a = arr.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="string">&#x27;1&#x27;</span> &amp;&amp; a != <span class="string">&#x27;2&#x27;</span> &amp;&amp; a != <span class="string">&#x27;3&#x27;</span> &amp;&amp; a != <span class="string">&#x27;4&#x27;</span> &amp;&amp; a != <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误请重新输入 : &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入 char类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readChar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> str.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//读取键盘</span></span><br><span class="line">    <span class="comment">//若没有输入回车 以defaultValue作为返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readChar</span><span class="params">(<span class="type">char</span> defaultValue)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (str.length()==<span class="number">0</span>)?defaultValue : str.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取整数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readInt</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">2</span>,<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数字输入错误,请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若不输入 defaultValue 返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readInt</span><span class="params">(<span class="type">int</span> defaultValue)</span>&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数字输入错误,请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取 String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">(<span class="type">int</span> limit)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readKeyBoard(limit,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">(<span class="type">int</span> limit,String defaultValue)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(limit,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> str.equals(<span class="string">&quot;&quot;</span>)? defaultValue :str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readConfirmSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> a;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">arr</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>,<span class="literal">false</span>).toUpperCase();</span><br><span class="line">            a = arr.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="string">&#x27;N&#x27;</span> &amp;&amp; a != <span class="string">&#x27;Y&#x27;</span> &amp;&amp; a != <span class="string">&#x27;n&#x27;</span> &amp;&amp; a != <span class="string">&#x27;y&#x27;</span> ) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误请重新输入(Y/N) : &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readKeyBoard</span><span class="params">(<span class="type">int</span> limit,<span class="type">boolean</span> blankReturn)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (input.hasNextLine())&#123;</span><br><span class="line">            line = input.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() ==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (blankReturn) <span class="keyword">return</span> line;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (line.length() &gt; limit)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输出长度(不大于&quot;</span> + limit + <span class="string">&quot;)错误,请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承">继承</h3><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401151957747.png" alt="image-20220401151957747"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401152052168.png" alt="image-20220401152052168"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401152120684.png" alt="image-20220401152120684"></p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401152132497.png" alt="image-20220401152132497"></p><p>理解继承代码</p><p>Creature  ------- person---------Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Creature</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;gggggggg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Creature</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String major;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String major)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.setAge(age);</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public void eat()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;要吃饭&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public void sleep()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;要睡觉&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.setAge(<span class="number">28</span>);</span><br><span class="line">        p1.name = <span class="string">&quot;汪大东&quot;</span>;</span><br><span class="line">        p1.eat();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(student.getAge());</span><br><span class="line">        student.name = <span class="string">&quot;金宝三&quot;</span>;</span><br><span class="line">        student.major = <span class="string">&quot;电工&quot;</span>;</span><br><span class="line">        student.eat();</span><br><span class="line">        student.study();</span><br><span class="line"></span><br><span class="line">        student.breath();</span><br><span class="line">        <span class="type">Creature</span> <span class="variable">creature</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Creature</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承圆和圆柱">继承圆和圆柱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius*radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cylinder</span> <span class="keyword">extends</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cylinder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length =<span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findVolume</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用 父类的方法</span></span><br><span class="line">        <span class="keyword">return</span> findArea()*length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day13.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CylinderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cylinder</span> <span class="variable">cylinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cylinder</span>();</span><br><span class="line">        cylinder.setRadius(<span class="number">2.1</span>);</span><br><span class="line">        cylinder.setLength(<span class="number">3.4</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">volume</span>  <span class="operator">=</span> cylinder.findVolume();</span><br><span class="line">        System.out.println(<span class="string">&quot;半径是：&quot;</span> + cylinder.getRadius());</span><br><span class="line">        System.out.println(<span class="string">&quot;圆柱的体积是：&quot;</span> + String.format(<span class="string">&quot;%.2f&quot;</span>,volume));</span><br><span class="line">        <span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> cylinder.findArea();</span><br><span class="line">        System.out.println(<span class="string">&quot;圆柱的底面积是：&quot;</span> + String.format(<span class="string">&quot;%.2f&quot;</span>,area));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、遇到的问题描述（可以附上截图）-解决⽅案-13">3、遇到的问题描述（可以附上截图）+解决⽅案**</h2><p>不输入的时候，回车，会报错。检查自己的工具包发现用的是next、，改成nextLine就好了</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401142355235.png" alt="image-20220401142355235"></p><h2 id="4-扩展学习部分-13">**4.扩展学习部分</h2><p>面试高频题</p><p>重载和重写的区别</p><p><img src="https://u7img.oss-cn-hangzhou.aliyuncs.com/image-20220401163420882.png" alt="image-20220401163420882"></p><h2 id="总结-13">总结</h2><p>项目二总体来说，是这个阶段比较难的了，用了目前学到的实用的方法都用到了，经过这个项目，对对象数组理解也更加透彻了，难点在于工具包，输入比较难，一些没使用过的package和方法，要去搜索一下，用法，写完还是很有成就感的，写完再看看代码是如何运行的，今天学习有劲头，写完项目二把继承都搞明白了。</p>]]></content>
      
      
      <categories>
          
          <category> 工作室月笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 月笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Markdown语法自带格式">1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Butterfly外挂标签">2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
